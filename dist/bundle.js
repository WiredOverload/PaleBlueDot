!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function n(){}i.r(e),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var n=arguments[i];if(null!=n)for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),Object.assign(n.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var i=this._listeners;return void 0!==i[t]&&-1!==i[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var i=this._listeners[t];if(void 0!==i){var n=i.indexOf(e);-1!==n&&i.splice(n,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var i=e.slice(0),n=0,r=i.length;n<r;n++)i[n].call(this,t)}}}});var r,a,o,s,c,h,l,u,p,d,f,m,g="99",v=0,y=1,x=2,b=1,w=2,_=0,M=1,S=2,E=0,T=1,L=2,A=0,P=1,C=2,R=3,O=4,I=5,D=100,N=101,z=102,B=103,U=104,G=200,F=201,H=202,k=203,V=204,j=205,W=206,q=207,X=208,Y=209,J=210,Z=0,Q=1,K=2,$=3,tt=4,et=5,it=6,nt=7,rt=0,at=1,ot=2,st=0,ct=1,ht=2,lt=3,ut=4,pt=5,dt=301,ft=302,mt=303,gt=304,vt=305,yt=306,xt=307,bt=1e3,wt=1001,_t=1002,Mt=1003,St=1004,Et=1005,Tt=1006,Lt=1007,At=1008,Pt=1009,Ct=1010,Rt=1011,Ot=1012,It=1013,Dt=1014,Nt=1015,zt=1016,Bt=1017,Ut=1018,Gt=1019,Ft=1020,Ht=1021,kt=1022,Vt=1023,jt=1024,Wt=1025,qt=1026,Xt=1027,Yt=1028,Jt=33776,Zt=33777,Qt=33778,Kt=33779,$t=35840,te=35841,ee=35842,ie=35843,ne=36196,re=37808,ae=37809,oe=37810,se=37811,ce=37812,he=37813,le=37814,ue=37815,pe=37816,de=37817,fe=37818,me=37819,ge=37820,ve=37821,ye=2201,xe=2400,be=0,we=1,_e=2,Me=3e3,Se=3001,Ee=3007,Te=3002,Le=3004,Ae=3005,Pe=3006,Ce=3200,Re=3201,Oe=0,Ie=1,De={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?"0":"")+e.toString(16);return function(){var e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&i]+t[i>>8&255]+"-"+t[i>>16&15|64]+t[i>>24&255]+"-"+t[63&n|128]+t[n>>8&255]+"-"+t[n>>16&255]+t[n>>24&255]+t[255&r]+t[r>>8&255]+t[r>>16&255]+t[r>>24&255]).toUpperCase()}}(),clamp:function(t,e,i){return Math.max(e,Math.min(i,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,i,n,r){return n+(t-e)*(r-n)/(i-e)},lerp:function(t,e,i){return(1-i)*t+i*e},smoothstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*De.DEG2RAD},radToDeg:function(t){return t*De.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}};function Ne(t,e){this.x=t||0,this.y=e||0}function ze(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function Be(t,e,i,n){this._x=t||0,this._y=e||0,this._z=i||0,this._w=void 0!==n?n:1}function Ue(t,e,i){this.x=t||0,this.y=e||0,this.z=i||0}function Ge(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(Ne.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(Ne.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:(r=new Ne,a=new Ne,function(t,e){return r.set(t,t),a.set(e,e),this.clamp(r,a)}),clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},cross:function(t){return this.x*t.y-this.y*t.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var t=Math.atan2(this.y,this.x);return t<0&&(t+=2*Math.PI),t},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,i=this.y-t.y;return e*e+i*i},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*i-a*n+t.x,this.y=r*n+a*i+t.y,this}}),Object.assign(ze.prototype,{isMatrix4:!0,set:function(t,e,i,n,r,a,o,s,c,h,l,u,p,d,f,m){var g=this.elements;return g[0]=t,g[4]=e,g[8]=i,g[12]=n,g[1]=r,g[5]=a,g[9]=o,g[13]=s,g[2]=c,g[6]=h,g[10]=l,g[14]=u,g[3]=p,g[7]=d,g[11]=f,g[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new ze).fromArray(this.elements)},copy:function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this},copyPosition:function(t){var e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this},extractBasis:function(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this},extractRotation:(d=new Ue,function(t){var e=this.elements,i=t.elements,n=1/d.setFromMatrixColumn(t,0).length(),r=1/d.setFromMatrixColumn(t,1).length(),a=1/d.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*r,e[5]=i[5]*r,e[6]=i[6]*r,e[7]=0,e[8]=i[8]*a,e[9]=i[9]*a,e[10]=i[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}),makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,i=t.x,n=t.y,r=t.z,a=Math.cos(i),o=Math.sin(i),s=Math.cos(n),c=Math.sin(n),h=Math.cos(r),l=Math.sin(r);if("XYZ"===t.order){var u=a*h,p=a*l,d=o*h,f=o*l;e[0]=s*h,e[4]=-s*l,e[8]=c,e[1]=p+d*c,e[5]=u-f*c,e[9]=-o*s,e[2]=f-u*c,e[6]=d+p*c,e[10]=a*s}else if("YXZ"===t.order){var m=s*h,g=s*l,v=c*h,y=c*l;e[0]=m+y*o,e[4]=v*o-g,e[8]=a*c,e[1]=a*l,e[5]=a*h,e[9]=-o,e[2]=g*o-v,e[6]=y+m*o,e[10]=a*s}else if("ZXY"===t.order){m=s*h,g=s*l,v=c*h,y=c*l;e[0]=m-y*o,e[4]=-a*l,e[8]=v+g*o,e[1]=g+v*o,e[5]=a*h,e[9]=y-m*o,e[2]=-a*c,e[6]=o,e[10]=a*s}else if("ZYX"===t.order){u=a*h,p=a*l,d=o*h,f=o*l;e[0]=s*h,e[4]=d*c-p,e[8]=u*c+f,e[1]=s*l,e[5]=f*c+u,e[9]=p*c-d,e[2]=-c,e[6]=o*s,e[10]=a*s}else if("YZX"===t.order){var x=a*s,b=a*c,w=o*s,_=o*c;e[0]=s*h,e[4]=_-x*l,e[8]=w*l+b,e[1]=l,e[5]=a*h,e[9]=-o*h,e[2]=-c*h,e[6]=b*l+w,e[10]=x-_*l}else if("XZY"===t.order){x=a*s,b=a*c,w=o*s,_=o*c;e[0]=s*h,e[4]=-l,e[8]=c*h,e[1]=x*l+_,e[5]=a*h,e[9]=b*l-w,e[2]=w*l-b,e[6]=o*h,e[10]=_*l+x}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:(u=new Ue(0,0,0),p=new Ue(1,1,1),function(t){return this.compose(u,t,p)}),lookAt:(c=new Ue,h=new Ue,l=new Ue,function(t,e,i){var n=this.elements;return l.subVectors(t,e),0===l.lengthSq()&&(l.z=1),l.normalize(),c.crossVectors(i,l),0===c.lengthSq()&&(1===Math.abs(i.z)?l.x+=1e-4:l.z+=1e-4,l.normalize(),c.crossVectors(i,l)),c.normalize(),h.crossVectors(l,c),n[0]=c.x,n[4]=h.x,n[8]=l.x,n[1]=c.y,n[5]=h.y,n[9]=l.y,n[2]=c.z,n[6]=h.z,n[10]=l.z,this}),multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var i=t.elements,n=e.elements,r=this.elements,a=i[0],o=i[4],s=i[8],c=i[12],h=i[1],l=i[5],u=i[9],p=i[13],d=i[2],f=i[6],m=i[10],g=i[14],v=i[3],y=i[7],x=i[11],b=i[15],w=n[0],_=n[4],M=n[8],S=n[12],E=n[1],T=n[5],L=n[9],A=n[13],P=n[2],C=n[6],R=n[10],O=n[14],I=n[3],D=n[7],N=n[11],z=n[15];return r[0]=a*w+o*E+s*P+c*I,r[4]=a*_+o*T+s*C+c*D,r[8]=a*M+o*L+s*R+c*N,r[12]=a*S+o*A+s*O+c*z,r[1]=h*w+l*E+u*P+p*I,r[5]=h*_+l*T+u*C+p*D,r[9]=h*M+l*L+u*R+p*N,r[13]=h*S+l*A+u*O+p*z,r[2]=d*w+f*E+m*P+g*I,r[6]=d*_+f*T+m*C+g*D,r[10]=d*M+f*L+m*R+g*N,r[14]=d*S+f*A+m*O+g*z,r[3]=v*w+y*E+x*P+b*I,r[7]=v*_+y*T+x*C+b*D,r[11]=v*M+y*L+x*R+b*N,r[15]=v*S+y*A+x*O+b*z,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},applyToBufferAttribute:function(){var t=new Ue;return function(e){for(var i=0,n=e.count;i<n;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.applyMatrix4(this),e.setXYZ(i,t.x,t.y,t.z);return e}}(),determinant:function(){var t=this.elements,e=t[0],i=t[4],n=t[8],r=t[12],a=t[1],o=t[5],s=t[9],c=t[13],h=t[2],l=t[6],u=t[10],p=t[14];return t[3]*(+r*s*l-n*c*l-r*o*u+i*c*u+n*o*p-i*s*p)+t[7]*(+e*s*p-e*c*u+r*a*u-n*a*p+n*c*h-r*s*h)+t[11]*(+e*c*l-e*o*p-r*a*l+i*a*p+r*o*h-i*c*h)+t[15]*(-n*o*h-e*s*l+e*o*u+n*a*l-i*a*u+i*s*h)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t){var e=this.elements;return e[12]=t.x,e[13]=t.y,e[14]=t.z,this},getInverse:function(t,e){var i=this.elements,n=t.elements,r=n[0],a=n[1],o=n[2],s=n[3],c=n[4],h=n[5],l=n[6],u=n[7],p=n[8],d=n[9],f=n[10],m=n[11],g=n[12],v=n[13],y=n[14],x=n[15],b=d*y*u-v*f*u+v*l*m-h*y*m-d*l*x+h*f*x,w=g*f*u-p*y*u-g*l*m+c*y*m+p*l*x-c*f*x,_=p*v*u-g*d*u+g*h*m-c*v*m-p*h*x+c*d*x,M=g*d*l-p*v*l-g*h*f+c*v*f+p*h*y-c*d*y,S=r*b+a*w+o*_+s*M;if(0===S){var E="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(E);return console.warn(E),this.identity()}var T=1/S;return i[0]=b*T,i[1]=(v*f*s-d*y*s-v*o*m+a*y*m+d*o*x-a*f*x)*T,i[2]=(h*y*s-v*l*s+v*o*u-a*y*u-h*o*x+a*l*x)*T,i[3]=(d*l*s-h*f*s-d*o*u+a*f*u+h*o*m-a*l*m)*T,i[4]=w*T,i[5]=(p*y*s-g*f*s+g*o*m-r*y*m-p*o*x+r*f*x)*T,i[6]=(g*l*s-c*y*s-g*o*u+r*y*u+c*o*x-r*l*x)*T,i[7]=(c*f*s-p*l*s+p*o*u-r*f*u-c*o*m+r*l*m)*T,i[8]=_*T,i[9]=(g*d*s-p*v*s-g*a*m+r*v*m+p*a*x-r*d*x)*T,i[10]=(c*v*s-g*h*s+g*a*u-r*v*u-c*a*x+r*h*x)*T,i[11]=(p*h*s-c*d*s-p*a*u+r*d*u+c*a*m-r*h*m)*T,i[12]=M*T,i[13]=(p*v*o-g*d*o+g*a*f-r*v*f-p*a*y+r*d*y)*T,i[14]=(g*h*o-c*v*o-g*a*l+r*v*l+c*a*y-r*h*y)*T,i[15]=(c*d*o-p*h*o+p*a*l-r*d*l-c*a*f+r*h*f)*T,this},scale:function(t){var e=this.elements,i=t.x,n=t.y,r=t.z;return e[0]*=i,e[4]*=n,e[8]*=r,e[1]*=i,e[5]*=n,e[9]*=r,e[2]*=i,e[6]*=n,e[10]*=r,e[3]*=i,e[7]*=n,e[11]*=r,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))},makeTranslation:function(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=1-i,a=t.x,o=t.y,s=t.z,c=r*a,h=r*o;return this.set(c*a+i,c*o-n*s,c*s+n*o,0,c*o+n*s,h*o+i,h*s-n*a,0,c*s-n*o,h*s+n*a,r*s*s+i,0,0,0,0,1),this},makeScale:function(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this},makeShear:function(t,e,i){return this.set(1,e,i,0,t,1,i,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,i){var n=this.elements,r=e._x,a=e._y,o=e._z,s=e._w,c=r+r,h=a+a,l=o+o,u=r*c,p=r*h,d=r*l,f=a*h,m=a*l,g=o*l,v=s*c,y=s*h,x=s*l,b=i.x,w=i.y,_=i.z;return n[0]=(1-(f+g))*b,n[1]=(p+x)*b,n[2]=(d-y)*b,n[3]=0,n[4]=(p-x)*w,n[5]=(1-(u+g))*w,n[6]=(m+v)*w,n[7]=0,n[8]=(d+y)*_,n[9]=(m-v)*_,n[10]=(1-(u+f))*_,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this},decompose:(o=new Ue,s=new ze,function(t,e,i){var n=this.elements,r=o.set(n[0],n[1],n[2]).length(),a=o.set(n[4],n[5],n[6]).length(),c=o.set(n[8],n[9],n[10]).length();this.determinant()<0&&(r=-r),t.x=n[12],t.y=n[13],t.z=n[14],s.copy(this);var h=1/r,l=1/a,u=1/c;return s.elements[0]*=h,s.elements[1]*=h,s.elements[2]*=h,s.elements[4]*=l,s.elements[5]*=l,s.elements[6]*=l,s.elements[8]*=u,s.elements[9]*=u,s.elements[10]*=u,e.setFromRotationMatrix(s),i.x=r,i.y=a,i.z=c,this}),makePerspective:function(t,e,i,n,r,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,s=2*r/(e-t),c=2*r/(i-n),h=(e+t)/(e-t),l=(i+n)/(i-n),u=-(a+r)/(a-r),p=-2*a*r/(a-r);return o[0]=s,o[4]=0,o[8]=h,o[12]=0,o[1]=0,o[5]=c,o[9]=l,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(t,e,i,n,r,a){var o=this.elements,s=1/(e-t),c=1/(i-n),h=1/(a-r),l=(e+t)*s,u=(i+n)*c,p=(a+r)*h;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-l,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*h,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(t){for(var e=this.elements,i=t.elements,n=0;n<16;n++)if(e[n]!==i[n])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<16;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}),Object.assign(Be,{slerp:function(t,e,i,n){return i.copy(t).slerp(e,n)},slerpFlat:function(t,e,i,n,r,a,o){var s=i[n+0],c=i[n+1],h=i[n+2],l=i[n+3],u=r[a+0],p=r[a+1],d=r[a+2],f=r[a+3];if(l!==f||s!==u||c!==p||h!==d){var m=1-o,g=s*u+c*p+h*d+l*f,v=g>=0?1:-1,y=1-g*g;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,g*v);m=Math.sin(m*b)/x,o=Math.sin(o*b)/x}var w=o*v;if(s=s*m+u*w,c=c*m+p*w,h=h*m+d*w,l=l*m+f*w,m===1-o){var _=1/Math.sqrt(s*s+c*c+h*h+l*l);s*=_,c*=_,h*=_,l*=_}}t[e]=s,t[e+1]=c,t[e+2]=h,t[e+3]=l}}),Object.defineProperties(Be.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this.onChangeCallback()}}}),Object.assign(Be.prototype,{isQuaternion:!0,set:function(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this.onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var i=t._x,n=t._y,r=t._z,a=t.order,o=Math.cos,s=Math.sin,c=o(i/2),h=o(n/2),l=o(r/2),u=s(i/2),p=s(n/2),d=s(r/2);return"XYZ"===a?(this._x=u*h*l+c*p*d,this._y=c*p*l-u*h*d,this._z=c*h*d+u*p*l,this._w=c*h*l-u*p*d):"YXZ"===a?(this._x=u*h*l+c*p*d,this._y=c*p*l-u*h*d,this._z=c*h*d-u*p*l,this._w=c*h*l+u*p*d):"ZXY"===a?(this._x=u*h*l-c*p*d,this._y=c*p*l+u*h*d,this._z=c*h*d+u*p*l,this._w=c*h*l-u*p*d):"ZYX"===a?(this._x=u*h*l-c*p*d,this._y=c*p*l+u*h*d,this._z=c*h*d-u*p*l,this._w=c*h*l+u*p*d):"YZX"===a?(this._x=u*h*l+c*p*d,this._y=c*p*l+u*h*d,this._z=c*h*d-u*p*l,this._w=c*h*l-u*p*d):"XZY"===a&&(this._x=u*h*l-c*p*d,this._y=c*p*l-u*h*d,this._z=c*h*d+u*p*l,this._w=c*h*l+u*p*d),!1!==e&&this.onChangeCallback(),this},setFromAxisAngle:function(t,e){var i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this.onChangeCallback(),this},setFromRotationMatrix:function(t){var e,i=t.elements,n=i[0],r=i[4],a=i[8],o=i[1],s=i[5],c=i[9],h=i[2],l=i[6],u=i[10],p=n+s+u;return p>0?(e=.5/Math.sqrt(p+1),this._w=.25/e,this._x=(l-c)*e,this._y=(a-h)*e,this._z=(o-r)*e):n>s&&n>u?(e=2*Math.sqrt(1+n-s-u),this._w=(l-c)/e,this._x=.25*e,this._y=(r+o)/e,this._z=(a+h)/e):s>u?(e=2*Math.sqrt(1+s-n-u),this._w=(a-h)/e,this._x=(r+o)/e,this._y=.25*e,this._z=(c+l)/e):(e=2*Math.sqrt(1+u-n-s),this._w=(o-r)/e,this._x=(a+h)/e,this._y=(c+l)/e,this._z=.25*e),this.onChangeCallback(),this},setFromUnitVectors:function(){var t,e=new Ue;return function(i,n){return void 0===e&&(e=new Ue),(t=i.dot(n)+1)<1e-6?(t=0,Math.abs(i.x)>Math.abs(i.z)?e.set(-i.y,i.x,0):e.set(0,-i.z,i.y)):e.crossVectors(i,n),this._x=e.x,this._y=e.y,this._z=e.z,this._w=t,this.normalize()}}(),angleTo:function(t){return 2*Math.acos(Math.abs(De.clamp(this.dot(t),-1,1)))},rotateTowards:function(t,e){var i=this.angleTo(t);if(0===i)return this;var n=Math.min(1,e/i);return this.slerp(t,n),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this.onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var i=t._x,n=t._y,r=t._z,a=t._w,o=e._x,s=e._y,c=e._z,h=e._w;return this._x=i*h+a*o+n*c-r*s,this._y=n*h+a*s+r*o-i*c,this._z=r*h+a*c+i*s-n*o,this._w=a*h-i*o-n*s-r*c,this.onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var i=this._x,n=this._y,r=this._z,a=this._w,o=a*t._w+i*t._x+n*t._y+r*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=i,this._y=n,this._z=r,this;var s=1-o*o;if(s<=Number.EPSILON){var c=1-e;return this._w=c*a+e*this._w,this._x=c*i+e*this._x,this._y=c*n+e*this._y,this._z=c*r+e*this._z,this.normalize()}var h=Math.sqrt(s),l=Math.atan2(h,o),u=Math.sin((1-e)*l)/h,p=Math.sin(e*l)/h;return this._w=a*u+this._w*p,this._x=i*u+this._x*p,this._y=n*u+this._y*p,this._z=r*u+this._z*p,this.onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(Ue.prototype,{isVector3:!0,set:function(t,e,i){return this.x=t,this.y=e,this.z=i,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:(f=new Be,function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(f.setFromEuler(t))}),applyAxisAngle:function(){var t=new Be;return function(e,i){return this.applyQuaternion(t.setFromAxisAngle(e,i))}}(),applyMatrix3:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6]*n,this.y=r[1]*e+r[4]*i+r[7]*n,this.z=r[2]*e+r[5]*i+r[8]*n,this},applyMatrix4:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements,a=1/(r[3]*e+r[7]*i+r[11]*n+r[15]);return this.x=(r[0]*e+r[4]*i+r[8]*n+r[12])*a,this.y=(r[1]*e+r[5]*i+r[9]*n+r[13])*a,this.z=(r[2]*e+r[6]*i+r[10]*n+r[14])*a,this},applyQuaternion:function(t){var e=this.x,i=this.y,n=this.z,r=t.x,a=t.y,o=t.z,s=t.w,c=s*e+a*n-o*i,h=s*i+o*e-r*n,l=s*n+r*i-a*e,u=-r*e-a*i-o*n;return this.x=c*s+u*-r+h*-o-l*-a,this.y=h*s+u*-a+l*-r-c*-o,this.z=l*s+u*-o+c*-a-h*-r,this},project:function(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)},unproject:function(){var t=new ze;return function(e){return this.applyMatrix4(t.getInverse(e.projectionMatrix)).applyMatrix4(e.matrixWorld)}}(),transformDirection:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[4]*i+r[8]*n,this.y=r[1]*e+r[5]*i+r[9]*n,this.z=r[2]*e+r[6]*i+r[10]*n,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(){var t=new Ue,e=new Ue;return function(i,n){return t.set(i,i,i),e.set(n,n,n),this.clamp(t,e)}}(),clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var i=t.x,n=t.y,r=t.z,a=e.x,o=e.y,s=e.z;return this.x=n*s-r*o,this.y=r*a-i*s,this.z=i*o-n*a,this},projectOnVector:function(t){var e=t.dot(this)/t.lengthSq();return this.copy(t).multiplyScalar(e)},projectOnPlane:function(){var t=new Ue;return function(e){return t.copy(this).projectOnVector(e),this.sub(t)}}(),reflect:function(){var t=new Ue;return function(e){return this.sub(t.copy(e).multiplyScalar(2*this.dot(e)))}}(),angleTo:function(t){var e=this.dot(t)/Math.sqrt(this.lengthSq()*t.lengthSq());return Math.acos(De.clamp(e,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)},setFromSphericalCoords:function(t,e,i){var n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this},setFromCylindrical:function(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)},setFromCylindricalCoords:function(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}}),Object.assign(Ge.prototype,{isMatrix3:!0,set:function(t,e,i,n,r,a,o,s,c){var h=this.elements;return h[0]=t,h[1]=n,h[2]=o,h[3]=e,h[4]=r,h[5]=s,h[6]=i,h[7]=a,h[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},applyToBufferAttribute:function(){var t=new Ue;return function(e){for(var i=0,n=e.count;i<n;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.applyMatrix3(this),e.setXYZ(i,t.x,t.y,t.z);return e}}(),multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var i=t.elements,n=e.elements,r=this.elements,a=i[0],o=i[3],s=i[6],c=i[1],h=i[4],l=i[7],u=i[2],p=i[5],d=i[8],f=n[0],m=n[3],g=n[6],v=n[1],y=n[4],x=n[7],b=n[2],w=n[5],_=n[8];return r[0]=a*f+o*v+s*b,r[3]=a*m+o*y+s*w,r[6]=a*g+o*x+s*_,r[1]=c*f+h*v+l*b,r[4]=c*m+h*y+l*w,r[7]=c*g+h*x+l*_,r[2]=u*f+p*v+d*b,r[5]=u*m+p*y+d*w,r[8]=u*g+p*x+d*_,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],a=t[4],o=t[5],s=t[6],c=t[7],h=t[8];return e*a*h-e*o*c-i*r*h+i*o*s+n*r*c-n*a*s},getInverse:function(t,e){t&&t.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var i=t.elements,n=this.elements,r=i[0],a=i[1],o=i[2],s=i[3],c=i[4],h=i[5],l=i[6],u=i[7],p=i[8],d=p*c-h*u,f=h*l-p*s,m=u*s-c*l,g=r*d+a*f+o*m;if(0===g){var v="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(v);return console.warn(v),this.identity()}var y=1/g;return n[0]=d*y,n[1]=(o*u-p*a)*y,n[2]=(h*a-o*c)*y,n[3]=f*y,n[4]=(p*r-o*l)*y,n[5]=(o*s-h*r)*y,n[6]=m*y,n[7]=(a*l-u*r)*y,n[8]=(c*r-a*s)*y,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,i,n,r,a,o){var s=Math.cos(r),c=Math.sin(r);this.set(i*s,i*c,-i*(s*a+c*o)+a+t,-n*c,n*s,-n*(-c*a+s*o)+o+e,0,0,1)},scale:function(t,e){var i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=e,i[4]*=e,i[7]*=e,this},rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=this.elements,r=n[0],a=n[3],o=n[6],s=n[1],c=n[4],h=n[7];return n[0]=e*r+i*s,n[3]=e*a+i*c,n[6]=e*o+i*h,n[1]=-i*r+e*s,n[4]=-i*a+e*c,n[7]=-i*o+e*h,this},translate:function(t,e){var i=this.elements;return i[0]+=t*i[2],i[3]+=t*i[5],i[6]+=t*i[8],i[1]+=e*i[2],i[4]+=e*i[5],i[7]+=e*i[8],this},equals:function(t){for(var e=this.elements,i=t.elements,n=0;n<9;n++)if(e[n]!==i[n])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<9;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}});var Fe,He,ke,Ve,je,We={getDataURL:function(t){var e;if("undefined"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)e=t;else{void 0===m&&(m=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),m.width=t.width,m.height=t.height;var i=m.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=m}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}},qe=0;function Xe(t,e,i,n,r,a,o,s,c,h){Object.defineProperty(this,"id",{value:qe++}),this.uuid=De.generateUUID(),this.name="",this.image=void 0!==t?t:Xe.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:Xe.DEFAULT_MAPPING,this.wrapS=void 0!==i?i:wt,this.wrapT=void 0!==n?n:wt,this.magFilter=void 0!==r?r:Tt,this.minFilter=void 0!==a?a:At,this.anisotropy=void 0!==c?c:1,this.format=void 0!==o?o:Vt,this.type=void 0!==s?s:Pt,this.offset=new Ne(0,0),this.repeat=new Ne(1,1),this.center=new Ne(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ge,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==h?h:Me,this.version=0,this.onUpdate=null}function Ye(t,e,i,n){this.x=t||0,this.y=e||0,this.z=i||0,this.w=void 0!==n?n:1}function Je(t,e,i){this.width=t,this.height=e,this.scissor=new Ye(0,0,t,e),this.scissorTest=!1,this.viewport=new Ye(0,0,t,e),i=i||{},this.texture=new Xe(void 0,void 0,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.generateMipmaps=void 0!==i.generateMipmaps&&i.generateMipmaps,this.texture.minFilter=void 0!==i.minFilter?i.minFilter:Tt,this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0===i.stencilBuffer||i.stencilBuffer,this.depthTexture=void 0!==i.depthTexture?i.depthTexture:null}function Ze(t,e,i){Je.call(this,t,e,i),this.activeCubeFace=0,this.activeMipMapLevel=0}function Qe(t,e,i,n,r,a,o,s,c,h,l,u){Xe.call(this,null,a,o,s,c,h,n,r,l,u),this.image={data:t,width:e,height:i},this.magFilter=void 0!==c?c:Mt,this.minFilter=void 0!==h?h:Mt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function Ke(t,e){this.min=void 0!==t?t:new Ue(1/0,1/0,1/0),this.max=void 0!==e?e:new Ue(-1/0,-1/0,-1/0)}function $e(t,e){this.center=void 0!==t?t:new Ue,this.radius=void 0!==e?e:0}function ti(t,e){this.normal=void 0!==t?t:new Ue(1,0,0),this.constant=void 0!==e?e:0}function ei(t,e,i,n,r,a){this.planes=[void 0!==t?t:new ti,void 0!==e?e:new ti,void 0!==i?i:new ti,void 0!==n?n:new ti,void 0!==r?r:new ti,void 0!==a?a:new ti]}Xe.DEFAULT_IMAGE=void 0,Xe.DEFAULT_MAPPING=300,Xe.prototype=Object.assign(Object.create(n.prototype),{constructor:Xe,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];var i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var n=this.image;if(void 0===n.uuid&&(n.uuid=De.generateUUID()),!e&&void 0===t.images[n.uuid]){var r;if(Array.isArray(n)){r=[];for(var a=0,o=n.length;a<o;a++)r.push(We.getDataURL(n[a]))}else r=We.getDataURL(n);t.images[n.uuid]={uuid:n.uuid,url:r}}i.image=n.uuid}return e||(t.textures[this.uuid]=i),i},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case bt:t.x=t.x-Math.floor(t.x);break;case wt:t.x=t.x<0?0:1;break;case _t:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case bt:t.y=t.y-Math.floor(t.y);break;case wt:t.y=t.y<0?0:1;break;case _t:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}}),Object.defineProperty(Xe.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Ye.prototype,{isVector4:!0,set:function(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,i=this.y,n=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*i+a[8]*n+a[12]*r,this.y=a[1]*e+a[5]*i+a[9]*n+a[13]*r,this.z=a[2]*e+a[6]*i+a[10]*n+a[14]*r,this.w=a[3]*e+a[7]*i+a[11]*n+a[15]*r,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,i,n,r,a=t.elements,o=a[0],s=a[4],c=a[8],h=a[1],l=a[5],u=a[9],p=a[2],d=a[6],f=a[10];if(Math.abs(s-h)<.01&&Math.abs(c-p)<.01&&Math.abs(u-d)<.01){if(Math.abs(s+h)<.1&&Math.abs(c+p)<.1&&Math.abs(u+d)<.1&&Math.abs(o+l+f-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var m=(o+1)/2,g=(l+1)/2,v=(f+1)/2,y=(s+h)/4,x=(c+p)/4,b=(u+d)/4;return m>g&&m>v?m<.01?(i=0,n=.707106781,r=.707106781):(n=y/(i=Math.sqrt(m)),r=x/i):g>v?g<.01?(i=.707106781,n=0,r=.707106781):(i=y/(n=Math.sqrt(g)),r=b/n):v<.01?(i=.707106781,n=.707106781,r=0):(i=x/(r=Math.sqrt(v)),n=b/r),this.set(i,n,r,e),this}var w=Math.sqrt((d-u)*(d-u)+(c-p)*(c-p)+(h-s)*(h-s));return Math.abs(w)<.001&&(w=1),this.x=(d-u)/w,this.y=(c-p)/w,this.z=(h-s)/w,this.w=Math.acos((o+l+f-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(){var t,e;return function(i,n){return void 0===t&&(t=new Ye,e=new Ye),t.set(i,i,i,i),e.set(n,n,n,n),this.clamp(t,e)}}(),clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),Je.prototype=Object.assign(Object.create(n.prototype),{constructor:Je,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Ze.prototype=Object.create(Je.prototype),Ze.prototype.constructor=Ze,Ze.prototype.isWebGLRenderTargetCube=!0,Qe.prototype=Object.create(Xe.prototype),Qe.prototype.constructor=Qe,Qe.prototype.isDataTexture=!0,Object.assign(Ke.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,i=1/0,n=1/0,r=-1/0,a=-1/0,o=-1/0,s=0,c=t.length;s<c;s+=3){var h=t[s],l=t[s+1],u=t[s+2];h<e&&(e=h),l<i&&(i=l),u<n&&(n=u),h>r&&(r=h),l>a&&(a=l),u>o&&(o=u)}return this.min.set(e,i,n),this.max.set(r,a,o),this},setFromBufferAttribute:function(t){for(var e=1/0,i=1/0,n=1/0,r=-1/0,a=-1/0,o=-1/0,s=0,c=t.count;s<c;s++){var h=t.getX(s),l=t.getY(s),u=t.getZ(s);h<e&&(e=h),l<i&&(i=l),u<n&&(n=u),h>r&&(r=h),l>a&&(a=l),u>o&&(o=u)}return this.min.set(e,i,n),this.max.set(r,a,o),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new Ue;return function(e,i){var n=t.copy(i).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}}(),setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new Ue),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new Ue),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(){var t,e,i,n=new Ue;function r(r){var a=r.geometry;if(void 0!==a)if(a.isGeometry){var o=a.vertices;for(e=0,i=o.length;e<i;e++)n.copy(o[e]),n.applyMatrix4(r.matrixWorld),t.expandByPoint(n)}else if(a.isBufferGeometry){var s=a.attributes.position;if(void 0!==s)for(e=0,i=s.count;e<i;e++)n.fromBufferAttribute(s,e).applyMatrix4(r.matrixWorld),t.expandByPoint(n)}}return function(e){return t=this,e.updateMatrixWorld(!0),e.traverse(r),this}}(),containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new Ue),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:(He=new Ue,function(t){return this.clampPoint(t.center,He),He.distanceToSquared(t.center)<=t.radius*t.radius}),intersectsPlane:function(t){var e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant},intersectsTriangle:function(){var t=new Ue,e=new Ue,i=new Ue,n=new Ue,r=new Ue,a=new Ue,o=new Ue,s=new Ue,c=new Ue,h=new Ue;function l(n){var r,a;for(r=0,a=n.length-3;r<=a;r+=3){o.fromArray(n,r);var s=c.x*Math.abs(o.x)+c.y*Math.abs(o.y)+c.z*Math.abs(o.z),h=t.dot(o),l=e.dot(o),u=i.dot(o);if(Math.max(-Math.max(h,l,u),Math.min(h,l,u))>s)return!1}return!0}return function(o){if(this.isEmpty())return!1;this.getCenter(s),c.subVectors(this.max,s),t.subVectors(o.a,s),e.subVectors(o.b,s),i.subVectors(o.c,s),n.subVectors(e,t),r.subVectors(i,e),a.subVectors(t,i);var u=[0,-n.z,n.y,0,-r.z,r.y,0,-a.z,a.y,n.z,0,-n.x,r.z,0,-r.x,a.z,0,-a.x,-n.y,n.x,0,-r.y,r.x,0,-a.y,a.x,0];return!!l(u)&&(!!l(u=[1,0,0,0,1,0,0,0,1])&&(h.crossVectors(n,r),l(u=[h.x,h.y,h.z])))}}(),clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new Ue),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new Ue;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),getBoundingSphere:function(){var t=new Ue;return function(e){return void 0===e&&(console.warn("THREE.Box3: .getBoundingSphere() target is now required"),e=new $e),this.getCenter(e.center),e.radius=.5*this.getSize(t).length(),e}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:(Fe=[new Ue,new Ue,new Ue,new Ue,new Ue,new Ue,new Ue,new Ue],function(t){return this.isEmpty()?this:(Fe[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Fe[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Fe[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Fe[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Fe[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Fe[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Fe[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Fe[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Fe),this)}),translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign($e.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:(ke=new Ke,function(t,e){var i=this.center;void 0!==e?i.copy(e):ke.setFromPoints(t).getCenter(i);for(var n=0,r=0,a=t.length;r<a;r++)n=Math.max(n,i.distanceToSquared(t[r]));return this.radius=Math.sqrt(n),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var i=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new Ue),e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new Ke),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}}),Object.assign(ti.prototype,{set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(){var t=new Ue,e=new Ue;return function(i,n,r){var a=t.subVectors(r,n).cross(e.subVectors(i,n)).normalize();return this.setFromNormalAndCoplanarPoint(a,i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new Ue),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(){var t=new Ue;return function(e,i){void 0===i&&(console.warn("THREE.Plane: .intersectLine() target is now required"),i=new Ue);var n=e.delta(t),r=this.normal.dot(n);if(0===r)return 0===this.distanceToPoint(e.start)?i.copy(e.start):void 0;var a=-(e.start.dot(this.normal)+this.constant)/r;return a<0||a>1?void 0:i.copy(n).multiplyScalar(a).add(e.start)}}(),intersectsLine:function(t){var e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new Ue),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var t=new Ue,e=new Ge;return function(i,n){var r=n||e.getNormalMatrix(i),a=this.coplanarPoint(t).applyMatrix4(i),o=this.normal.applyMatrix3(r).normalize();return this.constant=-a.dot(o),this}}(),translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}),Object.assign(ei.prototype,{set:function(t,e,i,n,r,a){var o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(i),o[3].copy(n),o[4].copy(r),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,i=0;i<6;i++)e[i].copy(t.planes[i]);return this},setFromMatrix:function(t){var e=this.planes,i=t.elements,n=i[0],r=i[1],a=i[2],o=i[3],s=i[4],c=i[5],h=i[6],l=i[7],u=i[8],p=i[9],d=i[10],f=i[11],m=i[12],g=i[13],v=i[14],y=i[15];return e[0].setComponents(o-n,l-s,f-u,y-m).normalize(),e[1].setComponents(o+n,l+s,f+u,y+m).normalize(),e[2].setComponents(o+r,l+c,f+p,y+g).normalize(),e[3].setComponents(o-r,l-c,f-p,y-g).normalize(),e[4].setComponents(o-a,l-h,f-d,y-v).normalize(),e[5].setComponents(o+a,l+h,f+d,y+v).normalize(),this},intersectsObject:(je=new $e,function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),je.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(je)}),intersectsSprite:function(){var t=new $e;return function(e){return t.center.set(0,0,0),t.radius=.7071067811865476,t.applyMatrix4(e.matrixWorld),this.intersectsSphere(t)}}(),intersectsSphere:function(t){for(var e=this.planes,i=t.center,n=-t.radius,r=0;r<6;r++){if(e[r].distanceToPoint(i)<n)return!1}return!0},intersectsBox:(Ve=new Ue,function(t){for(var e=this.planes,i=0;i<6;i++){var n=e[i];if(Ve.x=n.normal.x>0?t.max.x:t.min.x,Ve.y=n.normal.y>0?t.max.y:t.min.y,Ve.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(Ve)<0)return!1}return!0}),containsPoint:function(t){for(var e=this.planes,i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}});var ii={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );",bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",lights_pars_begin:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif",normal_fragment_maps:"#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"};function ni(t){var e={};for(var i in t)for(var n in e[i]={},t[i]){var r=t[i][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?e[i][n]=r.clone():Array.isArray(r)?e[i][n]=r.slice():e[i][n]=r}return e}function ri(t){for(var e={},i=0;i<t.length;i++){var n=ni(t[i]);for(var r in n)e[r]=n[r]}return e}var ai,oi,si,ci={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function hi(t,e,i){return void 0===e&&void 0===i?this.set(t):this.setRGB(t,e,i)}Object.assign(hi.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,i){return this.r=t,this.g=e,this.b=i,this},setHSL:function(){function t(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}return function(e,i,n){if(e=De.euclideanModulo(e,1),i=De.clamp(i,0,1),n=De.clamp(n,0,1),0===i)this.r=this.g=this.b=n;else{var r=n<=.5?n*(1+i):n+i-n*i,a=2*n-r;this.r=t(a,r,e+1/3),this.g=t(a,r,e),this.b=t(a,r,e-1/3)}return this}}(),setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}var i;if(i=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){var n,r=i[1],a=i[2];switch(r){case"rgb":case"rgba":if(n=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,e(n[5]),this;if(n=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,e(n[5]),this;break;case"hsl":case"hsla":if(n=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(n[1])/360,s=parseInt(n[2],10)/100,c=parseInt(n[3],10)/100;return e(n[5]),this.setHSL(o,s,c)}}}else if(i=/^\#([A-Fa-f0-9]+)$/.exec(t)){var h,l=(h=i[1]).length;if(3===l)return this.r=parseInt(h.charAt(0)+h.charAt(0),16)/255,this.g=parseInt(h.charAt(1)+h.charAt(1),16)/255,this.b=parseInt(h.charAt(2)+h.charAt(2),16)/255,this;if(6===l)return this.r=parseInt(h.charAt(0)+h.charAt(1),16)/255,this.g=parseInt(h.charAt(2)+h.charAt(3),16)/255,this.b=parseInt(h.charAt(4)+h.charAt(5),16)/255,this}t&&t.length>0&&(void 0!==(h=ci[t])?this.setHex(h):console.warn("THREE.Color: Unknown color "+t));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var i=e>0?1/e:1;return this.r=Math.pow(t.r,i),this.g=Math.pow(t.g,i),this.b=Math.pow(t.b,i),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(){function t(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),copyLinearToSRGB:function(){function t(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,i,n=this.r,r=this.g,a=this.b,o=Math.max(n,r,a),s=Math.min(n,r,a),c=(s+o)/2;if(s===o)e=0,i=0;else{var h=o-s;switch(i=c<=.5?h/(o+s):h/(2-o-s),o){case n:e=(r-a)/h+(r<a?6:0);break;case r:e=(a-n)/h+2;break;case a:e=(n-r)/h+4}e/=6}return t.h=e,t.s=i,t.l=c,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:(si={},function(t,e,i){return this.getHSL(si),si.h+=t,si.s+=e,si.l+=i,this.setHSL(si.h,si.s,si.l),this}),add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},lerpHSL:(ai={h:0,s:0,l:0},oi={h:0,s:0,l:0},function(t,e){this.getHSL(ai),t.getHSL(oi);var i=De.lerp(ai.h,oi.h,e),n=De.lerp(ai.s,oi.s,e),r=De.lerp(ai.l,oi.l,e);return this.setHSL(i,n,r),this}),equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}});var li,ui={common:{diffuse:{value:new hi(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Ge},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Ne(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new hi(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new hi(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new Ge}},sprite:{diffuse:{value:new hi(15658734)},opacity:{value:1},center:{value:new Ne(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new Ge}}},pi={basic:{uniforms:ri([ui.common,ui.specularmap,ui.envmap,ui.aomap,ui.lightmap,ui.fog]),vertexShader:ii.meshbasic_vert,fragmentShader:ii.meshbasic_frag},lambert:{uniforms:ri([ui.common,ui.specularmap,ui.envmap,ui.aomap,ui.lightmap,ui.emissivemap,ui.fog,ui.lights,{emissive:{value:new hi(0)}}]),vertexShader:ii.meshlambert_vert,fragmentShader:ii.meshlambert_frag},phong:{uniforms:ri([ui.common,ui.specularmap,ui.envmap,ui.aomap,ui.lightmap,ui.emissivemap,ui.bumpmap,ui.normalmap,ui.displacementmap,ui.gradientmap,ui.fog,ui.lights,{emissive:{value:new hi(0)},specular:{value:new hi(1118481)},shininess:{value:30}}]),vertexShader:ii.meshphong_vert,fragmentShader:ii.meshphong_frag},standard:{uniforms:ri([ui.common,ui.envmap,ui.aomap,ui.lightmap,ui.emissivemap,ui.bumpmap,ui.normalmap,ui.displacementmap,ui.roughnessmap,ui.metalnessmap,ui.fog,ui.lights,{emissive:{value:new hi(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:ii.meshphysical_vert,fragmentShader:ii.meshphysical_frag},matcap:{uniforms:ri([ui.common,ui.bumpmap,ui.normalmap,ui.displacementmap,ui.fog,{matcap:{value:null}}]),vertexShader:ii.meshmatcap_vert,fragmentShader:ii.meshmatcap_frag},points:{uniforms:ri([ui.points,ui.fog]),vertexShader:ii.points_vert,fragmentShader:ii.points_frag},dashed:{uniforms:ri([ui.common,ui.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ii.linedashed_vert,fragmentShader:ii.linedashed_frag},depth:{uniforms:ri([ui.common,ui.displacementmap]),vertexShader:ii.depth_vert,fragmentShader:ii.depth_frag},normal:{uniforms:ri([ui.common,ui.bumpmap,ui.normalmap,ui.displacementmap,{opacity:{value:1}}]),vertexShader:ii.normal_vert,fragmentShader:ii.normal_frag},sprite:{uniforms:ri([ui.sprite,ui.fog]),vertexShader:ii.sprite_vert,fragmentShader:ii.sprite_frag},background:{uniforms:{uvTransform:{value:new Ge},t2D:{value:null}},vertexShader:ii.background_vert,fragmentShader:ii.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:ii.cube_vert,fragmentShader:ii.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ii.equirect_vert,fragmentShader:ii.equirect_frag},distanceRGBA:{uniforms:ri([ui.common,ui.displacementmap,{referencePosition:{value:new Ue},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ii.distanceRGBA_vert,fragmentShader:ii.distanceRGBA_frag},shadow:{uniforms:ri([ui.lights,ui.fog,{color:{value:new hi(0)},opacity:{value:1}}]),vertexShader:ii.shadow_vert,fragmentShader:ii.shadow_frag}};function di(){var t=null,e=!1,i=null;function n(r,a){!1!==e&&(i(r,a),t.requestAnimationFrame(n))}return{start:function(){!0!==e&&null!==i&&(t.requestAnimationFrame(n),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){i=t},setContext:function(e){t=e}}}function fi(t){var e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(i){i.isInterleavedBufferAttribute&&(i=i.data);var n=e.get(i);n&&(t.deleteBuffer(n.buffer),e.delete(i))},update:function(i,n){i.isInterleavedBufferAttribute&&(i=i.data);var r=e.get(i);void 0===r?e.set(i,function(e,i){var n=e.array,r=e.dynamic?35048:35044,a=t.createBuffer();t.bindBuffer(i,a),t.bufferData(i,n,r),e.onUploadCallback();var o=5126;return n instanceof Float32Array?o=5126:n instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):n instanceof Uint16Array?o=5123:n instanceof Int16Array?o=5122:n instanceof Uint32Array?o=5125:n instanceof Int32Array?o=5124:n instanceof Int8Array?o=5120:n instanceof Uint8Array&&(o=5121),{buffer:a,type:o,bytesPerElement:n.BYTES_PER_ELEMENT,version:e.version}}(i,n)):r.version<i.version&&(function(e,i,n){var r=i.array,a=i.updateRange;t.bindBuffer(n,e),!1===i.dynamic?t.bufferData(n,r,35044):-1===a.count?t.bufferSubData(n,0,r):0===a.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(t.bufferSubData(n,a.offset*r.BYTES_PER_ELEMENT,r.subarray(a.offset,a.offset+a.count)),a.count=-1)}(r.buffer,i,n),r.version=i.version)}}}function mi(t,e,i,n,r,a){this.a=t,this.b=e,this.c=i,this.normal=n&&n.isVector3?n:new Ue,this.vertexNormals=Array.isArray(n)?n:[],this.color=r&&r.isColor?r:new hi,this.vertexColors=Array.isArray(r)?r:[],this.materialIndex=void 0!==a?a:0}function gi(t,e,i,n){this._x=t||0,this._y=e||0,this._z=i||0,this._order=n||gi.DefaultOrder}function vi(){this.mask=1}pi.physical={uniforms:ri([pi.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:ii.meshphysical_vert,fragmentShader:ii.meshphysical_frag},Object.assign(mi.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,i=t.vertexNormals.length;e<i;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,i=t.vertexColors.length;e<i;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}}),gi.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],gi.DefaultOrder="XYZ",Object.defineProperties(gi.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this.onChangeCallback()}}}),Object.assign(gi.prototype,{isEuler:!0,set:function(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._order=n||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this.onChangeCallback(),this},setFromRotationMatrix:function(t,e,i){var n=De.clamp,r=t.elements,a=r[0],o=r[4],s=r[8],c=r[1],h=r[5],l=r[9],u=r[2],p=r[6],d=r[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(n(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-l,d),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(p,h),this._z=0)):"YXZ"===e?(this._x=Math.asin(-n(l,-1,1)),Math.abs(l)<.99999?(this._y=Math.atan2(s,d),this._z=Math.atan2(c,h)):(this._y=Math.atan2(-u,a),this._z=0)):"ZXY"===e?(this._x=Math.asin(n(p,-1,1)),Math.abs(p)<.99999?(this._y=Math.atan2(-u,d),this._z=Math.atan2(-o,h)):(this._y=0,this._z=Math.atan2(c,a))):"ZYX"===e?(this._y=Math.asin(-n(u,-1,1)),Math.abs(u)<.99999?(this._x=Math.atan2(p,d),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,h))):"YZX"===e?(this._z=Math.asin(n(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-l,h),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(s,d))):"XZY"===e?(this._z=Math.asin(-n(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(p,h),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-l,d),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==i&&this.onChangeCallback(),this},setFromQuaternion:function(){var t=new ze;return function(e,i,n){return t.makeRotationFromQuaternion(e),this.setFromRotationMatrix(t,i,n)}}(),setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:(li=new Be,function(t){return li.setFromEuler(this),this.setFromQuaternion(li,t)}),equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new Ue(this._x,this._y,this._z)},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(vi.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},test:function(t){return 0!=(this.mask&t.mask)}});var yi,xi,bi,wi,_i=0;function Mi(){Object.defineProperty(this,"id",{value:_i++}),this.uuid=De.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Mi.DefaultUp.clone();var t=new Ue,e=new gi,i=new Be,n=new Ue(1,1,1);e.onChange(function(){i.setFromEuler(e,!1)}),i.onChange(function(){e.setFromQuaternion(i,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new ze},normalMatrix:{value:new Ge}}),this.matrix=new ze,this.matrixWorld=new ze,this.matrixAutoUpdate=Mi.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new vi,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}Mi.DefaultUp=new Ue(0,1,0),Mi.DefaultMatrixAutoUpdate=!0,Mi.prototype=Object.assign(Object.create(n.prototype),{constructor:Mi,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(t){this.matrix.multiplyMatrices(t,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:(wi=new Be,function(t,e){return wi.setFromAxisAngle(t,e),this.quaternion.multiply(wi),this}),rotateOnWorldAxis:function(){var t=new Be;return function(e,i){return t.setFromAxisAngle(e,i),this.quaternion.premultiply(t),this}}(),rotateX:function(){var t=new Ue(1,0,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateY:function(){var t=new Ue(0,1,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateZ:function(){var t=new Ue(0,0,1);return function(e){return this.rotateOnAxis(t,e)}}(),translateOnAxis:function(){var t=new Ue;return function(e,i){return t.copy(e).applyQuaternion(this.quaternion),this.position.add(t.multiplyScalar(i)),this}}(),translateX:function(){var t=new Ue(1,0,0);return function(e){return this.translateOnAxis(t,e)}}(),translateY:function(){var t=new Ue(0,1,0);return function(e){return this.translateOnAxis(t,e)}}(),translateZ:function(){var t=new Ue(0,0,1);return function(e){return this.translateOnAxis(t,e)}}(),localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:(bi=new ze,function(t){return t.applyMatrix4(bi.getInverse(this.matrixWorld))}),lookAt:function(){var t=new Be,e=new ze,i=new Ue,n=new Ue;return function(r,a,o){r.isVector3?i.copy(r):i.set(r,a,o);var s=this.parent;this.updateWorldMatrix(!0,!1),n.setFromMatrixPosition(this.matrixWorld),this.isCamera?e.lookAt(n,i,this.up):e.lookAt(i,n,this.up),this.quaternion.setFromRotationMatrix(e),s&&(e.extractRotation(s.matrixWorld),t.setFromRotationMatrix(e),this.quaternion.premultiply(t.inverse()))}}(),add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,t.dispatchEvent({type:"added"}),this.children.push(t)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var i=this.children.indexOf(t);return-1!==i&&(t.parent=null,t.dispatchEvent({type:"removed"}),this.children.splice(i,1)),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var i=0,n=this.children.length;i<n;i++){var r=this.children[i].getObjectByProperty(t,e);if(void 0!==r)return r}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new Ue),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:(yi=new Ue,xi=new Ue,function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new Be),this.updateMatrixWorld(!0),this.matrixWorld.decompose(yi,t,xi),t}),getWorldScale:function(){var t=new Ue,e=new Be;return function(i){return void 0===i&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),i=new Ue),this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,e,i),i}}(),getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new Ue),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){var i=this.parent;if(!0===t&&null!==i&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e)for(var n=this.children,r=0,a=n.length;r<a;r++)n[r].updateWorldMatrix(!1,!0)},toJSON:function(t){var e=void 0===t||"string"==typeof t,i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var n={};function r(e,i){return void 0===e[i.uuid]&&(e[i.uuid]=i.toJSON(t)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isMesh||this.isLine||this.isPoints){n.geometry=r(t.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var s=0,c=o.length;s<c;s++){var h=o[s];r(t.shapes,h)}else r(t.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var l=[];for(s=0,c=this.material.length;s<c;s++)l.push(r(t.materials,this.material[s]));n.material=l}else n.material=r(t.materials,this.material);if(this.children.length>0){n.children=[];for(s=0;s<this.children.length;s++)n.children.push(this.children[s].toJSON(t).object)}if(e){var u=m(t.geometries),p=m(t.materials),d=m(t.textures),f=m(t.images);o=m(t.shapes);u.length>0&&(i.geometries=u),p.length>0&&(i.materials=p),d.length>0&&(i.textures=d),f.length>0&&(i.images=f),o.length>0&&(i.shapes=o)}return i.object=n,i;function m(t){var e=[];for(var i in t){var n=t[i];delete n.metadata,e.push(n)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var i=0;i<t.children.length;i++){var n=t.children[i];this.add(n.clone())}return this}});var Si,Ei,Ti=0;function Li(){Object.defineProperty(this,"id",{value:Ti+=2}),this.uuid=De.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function Ai(t,e,i){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===i,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Pi(t,e,i){Ai.call(this,new Int8Array(t),e,i)}function Ci(t,e,i){Ai.call(this,new Uint8Array(t),e,i)}function Ri(t,e,i){Ai.call(this,new Uint8ClampedArray(t),e,i)}function Oi(t,e,i){Ai.call(this,new Int16Array(t),e,i)}function Ii(t,e,i){Ai.call(this,new Uint16Array(t),e,i)}function Di(t,e,i){Ai.call(this,new Int32Array(t),e,i)}function Ni(t,e,i){Ai.call(this,new Uint32Array(t),e,i)}function zi(t,e,i){Ai.call(this,new Float32Array(t),e,i)}function Bi(t,e,i){Ai.call(this,new Float64Array(t),e,i)}function Ui(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function Gi(t){if(0===t.length)return-1/0;for(var e=t[0],i=1,n=t.length;i<n;++i)t[i]>e&&(e=t[i]);return e}Li.prototype=Object.assign(Object.create(n.prototype),{constructor:Li,isGeometry:!0,applyMatrix:function(t){for(var e=(new Ge).getNormalMatrix(t),i=0,n=this.vertices.length;i<n;i++){this.vertices[i].applyMatrix4(t)}for(i=0,n=this.faces.length;i<n;i++){var r=this.faces[i];r.normal.applyMatrix3(e).normalize();for(var a=0,o=r.vertexNormals.length;a<o;a++)r.vertexNormals[a].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var t=new ze;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new ze;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new ze;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new ze;return function(e,i,n){return t.makeTranslation(e,i,n),this.applyMatrix(t),this}}(),scale:function(){var t=new ze;return function(e,i,n){return t.makeScale(e,i,n),this.applyMatrix(t),this}}(),lookAt:(Ei=new Mi,function(t){Ei.lookAt(t),Ei.updateMatrix(),this.applyMatrix(Ei.matrix)}),fromBufferGeometry:function(t){var e=this,i=null!==t.index?t.index.array:void 0,n=t.attributes,r=n.position.array,a=void 0!==n.normal?n.normal.array:void 0,o=void 0!==n.color?n.color.array:void 0,s=void 0!==n.uv?n.uv.array:void 0,c=void 0!==n.uv2?n.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var h=0,l=0;h<r.length;h+=3,l+=2)e.vertices.push((new Ue).fromArray(r,h)),void 0!==o&&e.colors.push((new hi).fromArray(o,h));function u(t,i,n,r){var h=void 0===o?[]:[e.colors[t].clone(),e.colors[i].clone(),e.colors[n].clone()],l=new mi(t,i,n,void 0===a?[]:[(new Ue).fromArray(a,3*t),(new Ue).fromArray(a,3*i),(new Ue).fromArray(a,3*n)],h,r);e.faces.push(l),void 0!==s&&e.faceVertexUvs[0].push([(new Ne).fromArray(s,2*t),(new Ne).fromArray(s,2*i),(new Ne).fromArray(s,2*n)]),void 0!==c&&e.faceVertexUvs[1].push([(new Ne).fromArray(c,2*t),(new Ne).fromArray(c,2*i),(new Ne).fromArray(c,2*n)])}var p=t.groups;if(p.length>0)for(h=0;h<p.length;h++)for(var d=p[h],f=d.start,m=(l=f,f+d.count);l<m;l+=3)void 0!==i?u(i[l],i[l+1],i[l+2],d.materialIndex):u(l,l+1,l+2,d.materialIndex);else if(void 0!==i)for(h=0;h<i.length;h+=3)u(i[h],i[h+1],i[h+2]);else for(h=0;h<r.length/3;h+=3)u(h,h+1,h+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:(Si=new Ue,function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Si).negate(),this.translate(Si.x,Si.y,Si.z),this}),normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,i=0===e?1:1/e,n=new ze;return n.set(i,0,0,-i*t.x,0,i,0,-i*t.y,0,0,i,-i*t.z,0,0,0,1),this.applyMatrix(n),this},computeFaceNormals:function(){for(var t=new Ue,e=new Ue,i=0,n=this.faces.length;i<n;i++){var r=this.faces[i],a=this.vertices[r.a],o=this.vertices[r.b],s=this.vertices[r.c];t.subVectors(s,o),e.subVectors(a,o),t.cross(e),t.normalize(),r.normal.copy(t)}},computeVertexNormals:function(t){var e,i,n,r,a,o;for(void 0===t&&(t=!0),o=new Array(this.vertices.length),e=0,i=this.vertices.length;e<i;e++)o[e]=new Ue;if(t){var s,c,h,l=new Ue,u=new Ue;for(n=0,r=this.faces.length;n<r;n++)a=this.faces[n],s=this.vertices[a.a],c=this.vertices[a.b],h=this.vertices[a.c],l.subVectors(h,c),u.subVectors(s,c),l.cross(u),o[a.a].add(l),o[a.b].add(l),o[a.c].add(l)}else for(this.computeFaceNormals(),n=0,r=this.faces.length;n<r;n++)o[(a=this.faces[n]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(e=0,i=this.vertices.length;e<i;e++)o[e].normalize();for(n=0,r=this.faces.length;n<r;n++){var p=(a=this.faces[n]).vertexNormals;3===p.length?(p[0].copy(o[a.a]),p[1].copy(o[a.b]),p[2].copy(o[a.c])):(p[0]=o[a.a].clone(),p[1]=o[a.b].clone(),p[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,i;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var n=(i=this.faces[t]).vertexNormals;3===n.length?(n[0].copy(i.normal),n[1].copy(i.normal),n[2].copy(i.normal)):(n[0]=i.normal.clone(),n[1]=i.normal.clone(),n[2]=i.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,i,n,r;for(i=0,n=this.faces.length;i<n;i++)for((r=this.faces[i]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),t=0,e=r.vertexNormals.length;t<e;t++)r.__originalVertexNormals[t]?r.__originalVertexNormals[t].copy(r.vertexNormals[t]):r.__originalVertexNormals[t]=r.vertexNormals[t].clone();var a=new Li;for(a.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var o=this.morphNormals[t].faceNormals,s=this.morphNormals[t].vertexNormals;for(i=0,n=this.faces.length;i<n;i++)c=new Ue,h={a:new Ue,b:new Ue,c:new Ue},o.push(c),s.push(h)}var c,h,l=this.morphNormals[t];for(a.vertices=this.morphTargets[t].vertices,a.computeFaceNormals(),a.computeVertexNormals(),i=0,n=this.faces.length;i<n;i++)r=this.faces[i],c=l.faceNormals[i],h=l.vertexNormals[i],c.copy(r.normal),h.a.copy(r.vertexNormals[0]),h.b.copy(r.vertexNormals[1]),h.c.copy(r.vertexNormals[2])}for(i=0,n=this.faces.length;i<n;i++)(r=this.faces[i]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Ke),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new $e),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,i){if(t&&t.isGeometry){var n,r=this.vertices.length,a=this.vertices,o=t.vertices,s=this.faces,c=t.faces,h=this.faceVertexUvs[0],l=t.faceVertexUvs[0],u=this.colors,p=t.colors;void 0===i&&(i=0),void 0!==e&&(n=(new Ge).getNormalMatrix(e));for(var d=0,f=o.length;d<f;d++){var m=o[d].clone();void 0!==e&&m.applyMatrix4(e),a.push(m)}for(d=0,f=p.length;d<f;d++)u.push(p[d].clone());for(d=0,f=c.length;d<f;d++){var g,v,y,x=c[d],b=x.vertexNormals,w=x.vertexColors;(g=new mi(x.a+r,x.b+r,x.c+r)).normal.copy(x.normal),void 0!==n&&g.normal.applyMatrix3(n).normalize();for(var _=0,M=b.length;_<M;_++)v=b[_].clone(),void 0!==n&&v.applyMatrix3(n).normalize(),g.vertexNormals.push(v);g.color.copy(x.color);for(_=0,M=w.length;_<M;_++)y=w[_],g.vertexColors.push(y.clone());g.materialIndex=x.materialIndex+i,s.push(g)}for(d=0,f=l.length;d<f;d++){var S=l[d],E=[];if(void 0!==S){for(_=0,M=S.length;_<M;_++)E.push(S[_].clone());h.push(E)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,i,n,r,a,o,s,c={},h=[],l=[],u=Math.pow(10,4);for(i=0,n=this.vertices.length;i<n;i++)t=this.vertices[i],void 0===c[e=Math.round(t.x*u)+"_"+Math.round(t.y*u)+"_"+Math.round(t.z*u)]?(c[e]=i,h.push(this.vertices[i]),l[i]=h.length-1):l[i]=l[c[e]];var p=[];for(i=0,n=this.faces.length;i<n;i++){(r=this.faces[i]).a=l[r.a],r.b=l[r.b],r.c=l[r.c],a=[r.a,r.b,r.c];for(var d=0;d<3;d++)if(a[d]===a[(d+1)%3]){p.push(i);break}}for(i=p.length-1;i>=0;i--){var f=p[i];for(this.faces.splice(f,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(f,1)}var m=this.vertices.length-h.length;return this.vertices=h,m},setFromPoints:function(t){this.vertices=[];for(var e=0,i=t.length;e<i;e++){var n=t[e];this.vertices.push(new Ue(n.x,n.y,n.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,i=0;i<e;i++)t[i]._id=i;t.sort(function(t,e){return t.materialIndex-e.materialIndex});var n,r,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===e&&(n=[]),o&&o.length===e&&(r=[]);for(i=0;i<e;i++){var s=t[i]._id;n&&n.push(a[s]),r&&r.push(o[s])}n&&(this.faceVertexUvs[0]=n),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var t={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var i in e)void 0!==e[i]&&(t[i]=e[i]);return t}for(var n=[],r=0;r<this.vertices.length;r++){var a=this.vertices[r];n.push(a.x,a.y,a.z)}var o=[],s=[],c={},h=[],l={},u=[],p={};for(r=0;r<this.faces.length;r++){var d=this.faces[r],f=void 0!==this.faceVertexUvs[0][r],m=d.normal.length()>0,g=d.vertexNormals.length>0,v=1!==d.color.r||1!==d.color.g||1!==d.color.b,y=d.vertexColors.length>0,x=0;if(x=M(x,0,0),x=M(x,1,!0),x=M(x,2,!1),x=M(x,3,f),x=M(x,4,m),x=M(x,5,g),x=M(x,6,v),x=M(x,7,y),o.push(x),o.push(d.a,d.b,d.c),o.push(d.materialIndex),f){var b=this.faceVertexUvs[0][r];o.push(T(b[0]),T(b[1]),T(b[2]))}if(m&&o.push(S(d.normal)),g){var w=d.vertexNormals;o.push(S(w[0]),S(w[1]),S(w[2]))}if(v&&o.push(E(d.color)),y){var _=d.vertexColors;o.push(E(_[0]),E(_[1]),E(_[2]))}}function M(t,e,i){return i?t|1<<e:t&~(1<<e)}function S(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==c[e]?c[e]:(c[e]=s.length/3,s.push(t.x,t.y,t.z),c[e])}function E(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==l[e]?l[e]:(l[e]=h.length,h.push(t.getHex()),l[e])}function T(t){var e=t.x.toString()+t.y.toString();return void 0!==p[e]?p[e]:(p[e]=u.length/2,u.push(t.x,t.y),p[e])}return t.data={},t.data.vertices=n,t.data.normals=s,h.length>0&&(t.data.colors=h),u.length>0&&(t.data.uvs=[u]),t.data.faces=o,t},clone:function(){return(new Li).copy(this)},copy:function(t){var e,i,n,r,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var s=t.vertices;for(e=0,i=s.length;e<i;e++)this.vertices.push(s[e].clone());var c=t.colors;for(e=0,i=c.length;e<i;e++)this.colors.push(c[e].clone());var h=t.faces;for(e=0,i=h.length;e<i;e++)this.faces.push(h[e].clone());for(e=0,i=t.faceVertexUvs.length;e<i;e++){var l=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),n=0,r=l.length;n<r;n++){var u=l[n],p=[];for(a=0,o=u.length;a<o;a++){var d=u[a];p.push(d.clone())}this.faceVertexUvs[e].push(p)}}var f=t.morphTargets;for(e=0,i=f.length;e<i;e++){var m={};if(m.name=f[e].name,void 0!==f[e].vertices)for(m.vertices=[],n=0,r=f[e].vertices.length;n<r;n++)m.vertices.push(f[e].vertices[n].clone());if(void 0!==f[e].normals)for(m.normals=[],n=0,r=f[e].normals.length;n<r;n++)m.normals.push(f[e].normals[n].clone());this.morphTargets.push(m)}var g=t.morphNormals;for(e=0,i=g.length;e<i;e++){var v={};if(void 0!==g[e].vertexNormals)for(v.vertexNormals=[],n=0,r=g[e].vertexNormals.length;n<r;n++){var y=g[e].vertexNormals[n],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),v.vertexNormals.push(x)}if(void 0!==g[e].faceNormals)for(v.faceNormals=[],n=0,r=g[e].faceNormals.length;n<r;n++)v.faceNormals.push(g[e].faceNormals[n].clone());this.morphNormals.push(v)}var b=t.skinWeights;for(e=0,i=b.length;e<i;e++)this.skinWeights.push(b[e].clone());var w=t.skinIndices;for(e=0,i=w.length;e<i;e++)this.skinIndices.push(w[e].clone());var _=t.lineDistances;for(e=0,i=_.length;e<i;e++)this.lineDistances.push(_[e]);var M=t.boundingBox;null!==M&&(this.boundingBox=M.clone());var S=t.boundingSphere;return null!==S&&(this.boundingSphere=S.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(Ai.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Ai.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.itemSize:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.dynamic=t.dynamic,this},copyAt:function(t,e,i){t*=this.itemSize,i*=e.itemSize;for(var n=0,r=this.itemSize;n<r;n++)this.array[t+n]=e.array[i+n];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),a=new hi),e[i++]=a.r,e[i++]=a.g,e[i++]=a.b}return this},copyVector2sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),a=new Ne),e[i++]=a.x,e[i++]=a.y}return this},copyVector3sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),a=new Ue),e[i++]=a.x,e[i++]=a.y,e[i++]=a.z}return this},copyVector4sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),a=new Ye),e[i++]=a.x,e[i++]=a.y,e[i++]=a.z,e[i++]=a.w}return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this},setXYZW:function(t,e,i,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=r,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),Pi.prototype=Object.create(Ai.prototype),Pi.prototype.constructor=Pi,Ci.prototype=Object.create(Ai.prototype),Ci.prototype.constructor=Ci,Ri.prototype=Object.create(Ai.prototype),Ri.prototype.constructor=Ri,Oi.prototype=Object.create(Ai.prototype),Oi.prototype.constructor=Oi,Ii.prototype=Object.create(Ai.prototype),Ii.prototype.constructor=Ii,Di.prototype=Object.create(Ai.prototype),Di.prototype.constructor=Di,Ni.prototype=Object.create(Ai.prototype),Ni.prototype.constructor=Ni,zi.prototype=Object.create(Ai.prototype),zi.prototype.constructor=zi,Bi.prototype=Object.create(Ai.prototype),Bi.prototype.constructor=Bi,Object.assign(Ui.prototype,{computeGroups:function(t){for(var e,i=[],n=void 0,r=t.faces,a=0;a<r.length;a++){var o=r[a];o.materialIndex!==n&&(n=o.materialIndex,void 0!==e&&(e.count=3*a-e.start,i.push(e)),e={start:3*a,materialIndex:n})}void 0!==e&&(e.count=3*a-e.start,i.push(e)),this.groups=i},fromGeometry:function(t){var e,i=t.faces,n=t.vertices,r=t.faceVertexUvs,a=r[0]&&r[0].length>0,o=r[1]&&r[1].length>0,s=t.morphTargets,c=s.length;if(c>0){e=[];for(var h=0;h<c;h++)e[h]={name:s[h].name,data:[]};this.morphTargets.position=e}var l,u=t.morphNormals,p=u.length;if(p>0){l=[];for(h=0;h<p;h++)l[h]={name:u[h].name,data:[]};this.morphTargets.normal=l}var d=t.skinIndices,f=t.skinWeights,m=d.length===n.length,g=f.length===n.length;n.length>0&&0===i.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(h=0;h<i.length;h++){var v=i[h];this.vertices.push(n[v.a],n[v.b],n[v.c]);var y=v.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=v.normal;this.normals.push(x,x,x)}var b,w=v.vertexColors;if(3===w.length)this.colors.push(w[0],w[1],w[2]);else{var _=v.color;this.colors.push(_,_,_)}if(!0===a)void 0!==(b=r[0][h])?this.uvs.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",h),this.uvs.push(new Ne,new Ne,new Ne));if(!0===o)void 0!==(b=r[1][h])?this.uvs2.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",h),this.uvs2.push(new Ne,new Ne,new Ne));for(var M=0;M<c;M++){var S=s[M].vertices;e[M].data.push(S[v.a],S[v.b],S[v.c])}for(M=0;M<p;M++){var E=u[M].vertexNormals[h];l[M].data.push(E.a,E.b,E.c)}m&&this.skinIndices.push(d[v.a],d[v.b],d[v.c]),g&&this.skinWeights.push(f[v.a],f[v.b],f[v.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}});var Fi=1;function Hi(){Object.defineProperty(this,"id",{value:Fi+=2}),this.uuid=De.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}function ki(t,e,i,n,r,a){Li.call(this),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:a},this.fromBufferGeometry(new Vi(t,e,i,n,r,a)),this.mergeVertices()}function Vi(t,e,i,n,r,a){Hi.call(this),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:a};var o=this;t=t||1,e=e||1,i=i||1,n=Math.floor(n)||1,r=Math.floor(r)||1,a=Math.floor(a)||1;var s=[],c=[],h=[],l=[],u=0,p=0;function d(t,e,i,n,r,a,d,f,m,g,v){var y,x,b=a/m,w=d/g,_=a/2,M=d/2,S=f/2,E=m+1,T=g+1,L=0,A=0,P=new Ue;for(x=0;x<T;x++){var C=x*w-M;for(y=0;y<E;y++){var R=y*b-_;P[t]=R*n,P[e]=C*r,P[i]=S,c.push(P.x,P.y,P.z),P[t]=0,P[e]=0,P[i]=f>0?1:-1,h.push(P.x,P.y,P.z),l.push(y/m),l.push(1-x/g),L+=1}}for(x=0;x<g;x++)for(y=0;y<m;y++){var O=u+y+E*x,I=u+y+E*(x+1),D=u+(y+1)+E*(x+1),N=u+(y+1)+E*x;s.push(O,I,N),s.push(I,D,N),A+=6}o.addGroup(p,A,v),p+=A,u+=L}d("z","y","x",-1,-1,i,e,t,a,r,0),d("z","y","x",1,-1,i,e,-t,a,r,1),d("x","z","y",1,1,t,i,e,n,a,2),d("x","z","y",1,-1,t,i,-e,n,a,3),d("x","y","z",1,-1,t,e,i,n,r,4),d("x","y","z",-1,-1,t,e,-i,n,r,5),this.setIndex(s),this.addAttribute("position",new zi(c,3)),this.addAttribute("normal",new zi(h,3)),this.addAttribute("uv",new zi(l,2))}function ji(t,e,i,n){Li.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n},this.fromBufferGeometry(new Wi(t,e,i,n)),this.mergeVertices()}function Wi(t,e,i,n){Hi.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};var r,a,o=(t=t||1)/2,s=(e=e||1)/2,c=Math.floor(i)||1,h=Math.floor(n)||1,l=c+1,u=h+1,p=t/c,d=e/h,f=[],m=[],g=[],v=[];for(a=0;a<u;a++){var y=a*d-s;for(r=0;r<l;r++){var x=r*p-o;m.push(x,-y,0),g.push(0,0,1),v.push(r/c),v.push(1-a/h)}}for(a=0;a<h;a++)for(r=0;r<c;r++){var b=r+l*a,w=r+l*(a+1),_=r+1+l*(a+1),M=r+1+l*a;f.push(b,w,M),f.push(w,_,M)}this.setIndex(f),this.addAttribute("position",new zi(m,3)),this.addAttribute("normal",new zi(g,3)),this.addAttribute("uv",new zi(v,2))}Hi.prototype=Object.assign(Object.create(n.prototype),{constructor:Hi,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(Gi(t)>65535?Ni:Ii)(t,1):this.index=t},addAttribute:function(t,e){return e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):(this.attributes[t]=e,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(t,new Ai(arguments[1],arguments[2])))},getAttribute:function(t){return this.attributes[t]},removeAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,i){this.groups.push({start:t,count:e,materialIndex:void 0!==i?i:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToBufferAttribute(e),e.needsUpdate=!0);var i=this.attributes.normal;void 0!==i&&((new Ge).getNormalMatrix(t).applyToBufferAttribute(i),i.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var t=new ze;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new ze;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new ze;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new ze;return function(e,i,n){return t.makeTranslation(e,i,n),this.applyMatrix(t),this}}(),scale:function(){var t=new ze;return function(e,i,n){return t.makeScale(e,i,n),this.applyMatrix(t),this}}(),lookAt:function(){var t=new Mi;return function(e){t.lookAt(e),t.updateMatrix(),this.applyMatrix(t.matrix)}}(),center:function(){var t=new Ue;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(t).negate(),this.translate(t.x,t.y,t.z),this}}(),setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var i=new zi(3*e.vertices.length,3),n=new zi(3*e.colors.length,3);if(this.addAttribute("position",i.copyVector3sArray(e.vertices)),this.addAttribute("color",n.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var r=new zi(e.lineDistances.length,1);this.addAttribute("lineDistance",r.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i];e.push(r.x,r.y,r.z||0)}return this.addAttribute("position",new zi(e,3)),this},updateFromObject:function(t){var e,i=t.geometry;if(t.isMesh){var n=i.__directGeometry;if(!0===i.elementsNeedUpdate&&(n=void 0,i.elementsNeedUpdate=!1),void 0===n)return this.fromGeometry(i);n.verticesNeedUpdate=i.verticesNeedUpdate,n.normalsNeedUpdate=i.normalsNeedUpdate,n.colorsNeedUpdate=i.colorsNeedUpdate,n.uvsNeedUpdate=i.uvsNeedUpdate,n.groupsNeedUpdate=i.groupsNeedUpdate,i.verticesNeedUpdate=!1,i.normalsNeedUpdate=!1,i.colorsNeedUpdate=!1,i.uvsNeedUpdate=!1,i.groupsNeedUpdate=!1,i=n}return!0===i.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(i.vertices),e.needsUpdate=!0),i.verticesNeedUpdate=!1),!0===i.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(i.normals),e.needsUpdate=!0),i.normalsNeedUpdate=!1),!0===i.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(i.colors),e.needsUpdate=!0),i.colorsNeedUpdate=!1),i.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(i.uvs),e.needsUpdate=!0),i.uvsNeedUpdate=!1),i.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(i.lineDistances),e.needsUpdate=!0),i.lineDistancesNeedUpdate=!1),i.groupsNeedUpdate&&(i.computeGroups(t.geometry),this.groups=i.groups,i.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new Ui).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.addAttribute("position",new Ai(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var i=new Float32Array(3*t.normals.length);this.addAttribute("normal",new Ai(i,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var n=new Float32Array(3*t.colors.length);this.addAttribute("color",new Ai(n,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var r=new Float32Array(2*t.uvs.length);this.addAttribute("uv",new Ai(r,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var a=new Float32Array(2*t.uvs2.length);this.addAttribute("uv2",new Ai(a,2).copyVector2sArray(t.uvs2))}for(var o in this.groups=t.groups,t.morphTargets){for(var s=[],c=t.morphTargets[o],h=0,l=c.length;h<l;h++){var u=c[h],p=new zi(3*u.data.length,3);p.name=u.name,s.push(p.copyVector3sArray(u.data))}this.morphAttributes[o]=s}if(t.skinIndices.length>0){var d=new zi(4*t.skinIndices.length,4);this.addAttribute("skinIndex",d.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var f=new zi(4*t.skinWeights.length,4);this.addAttribute("skinWeight",f.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Ke);var t=this.attributes.position;void 0!==t?this.boundingBox.setFromBufferAttribute(t):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var t=new Ke,e=new Ue;return function(){null===this.boundingSphere&&(this.boundingSphere=new $e);var i=this.attributes.position;if(i){var n=this.boundingSphere.center;t.setFromBufferAttribute(i),t.getCenter(n);for(var r=0,a=0,o=i.count;a<o;a++)e.x=i.getX(a),e.y=i.getY(a),e.z=i.getZ(a),r=Math.max(r,n.distanceToSquared(e));this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes;if(e.position){var i=e.position.array;if(void 0===e.normal)this.addAttribute("normal",new Ai(new Float32Array(i.length),3));else for(var n=e.normal.array,r=0,a=n.length;r<a;r++)n[r]=0;var o,s,c,h=e.normal.array,l=new Ue,u=new Ue,p=new Ue,d=new Ue,f=new Ue;if(t){var m=t.array;for(r=0,a=t.count;r<a;r+=3)o=3*m[r+0],s=3*m[r+1],c=3*m[r+2],l.fromArray(i,o),u.fromArray(i,s),p.fromArray(i,c),d.subVectors(p,u),f.subVectors(l,u),d.cross(f),h[o]+=d.x,h[o+1]+=d.y,h[o+2]+=d.z,h[s]+=d.x,h[s+1]+=d.y,h[s+2]+=d.z,h[c]+=d.x,h[c+1]+=d.y,h[c+2]+=d.z}else for(r=0,a=i.length;r<a;r+=9)l.fromArray(i,r),u.fromArray(i,r+3),p.fromArray(i,r+6),d.subVectors(p,u),f.subVectors(l,u),d.cross(f),h[r]=d.x,h[r+1]=d.y,h[r+2]=d.z,h[r+3]=d.x,h[r+4]=d.y,h[r+5]=d.z,h[r+6]=d.x,h[r+7]=d.y,h[r+8]=d.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var i=this.attributes;for(var n in i)if(void 0!==t.attributes[n])for(var r=i[n].array,a=t.attributes[n],o=a.array,s=0,c=a.itemSize*e;s<o.length;s++,c++)r[c]=o[s];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){var t=new Ue;return function(){for(var e=this.attributes.normal,i=0,n=e.count;i<n;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.normalize(),e.setXYZ(i,t.x,t.y,t.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new Hi,e=this.index.array,i=this.attributes;for(var n in i){for(var r=i[n],a=r.array,o=r.itemSize,s=new a.constructor(e.length*o),c=0,h=0,l=0,u=e.length;l<u;l++){c=e[l]*o;for(var p=0;p<o;p++)s[h++]=a[c++]}t.addAttribute(n,new Ai(s,o))}var d=this.groups;for(l=0,u=d.length;l<u;l++){var f=d[l];t.addGroup(f.start,f.count,f.materialIndex)}return t},toJSON:function(){var t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){var e=this.parameters;for(var i in e)void 0!==e[i]&&(t[i]=e[i]);return t}t.data={attributes:{}};var n=this.index;if(null!==n){var r=Array.prototype.slice.call(n.array);t.data.index={type:n.array.constructor.name,array:r}}var a=this.attributes;for(var i in a){var o=a[i];r=Array.prototype.slice.call(o.array);t.data.attributes[i]={itemSize:o.itemSize,type:o.array.constructor.name,array:r,normalized:o.normalized}}var s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(t.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),t},clone:function(){return(new Hi).copy(this)},copy:function(t){var e,i,n;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var r=t.index;null!==r&&this.setIndex(r.clone());var a=t.attributes;for(e in a){var o=a[e];this.addAttribute(e,o.clone())}var s=t.morphAttributes;for(e in s){var c=[],h=s[e];for(i=0,n=h.length;i<n;i++)c.push(h[i].clone());this.morphAttributes[e]=c}var l=t.groups;for(i=0,n=l.length;i<n;i++){var u=l[i];this.addGroup(u.start,u.count,u.materialIndex)}var p=t.boundingBox;null!==p&&(this.boundingBox=p.clone());var d=t.boundingSphere;return null!==d&&(this.boundingSphere=d.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),ki.prototype=Object.create(Li.prototype),ki.prototype.constructor=ki,Vi.prototype=Object.create(Hi.prototype),Vi.prototype.constructor=Vi,ji.prototype=Object.create(Li.prototype),ji.prototype.constructor=ji,Wi.prototype=Object.create(Hi.prototype),Wi.prototype.constructor=Wi;var qi,Xi,Yi,Ji,Zi,Qi,Ki,$i,tn,en,nn,rn,an=0;function on(){Object.defineProperty(this,"id",{value:an++}),this.uuid=De.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=P,this.side=_,this.flatShading=!1,this.vertexColors=E,this.opacity=1,this.transparent=!1,this.blendSrc=V,this.blendDst=j,this.blendEquation=D,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=$,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.userData={},this.needsUpdate=!0}function sn(t){on.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function cn(t,e){this.origin=void 0!==t?t:new Ue,this.direction=void 0!==e?e:new Ue}function hn(t,e,i){this.a=void 0!==t?t:new Ue,this.b=void 0!==e?e:new Ue,this.c=void 0!==i?i:new Ue}function ln(t){on.call(this),this.type="MeshBasicMaterial",this.color=new hi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=rt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function un(t,e){Mi.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new Hi,this.material=void 0!==e?e:new ln({color:16777215*Math.random()}),this.drawMode=be,this.updateMorphTargets()}function pn(t,e,i,n){var r,a,o=new hi(0),s=0,c=null,h=0;function l(t,i){e.buffers.color.setClear(t.r,t.g,t.b,i,n)}return{getClearColor:function(){return o},setClearColor:function(t,e){o.set(t),l(o,s=void 0!==e?e:1)},getClearAlpha:function(){return s},setClearAlpha:function(t){l(o,s=t)},render:function(e,n,u,p){var d=n.background;if(null===d?(l(o,s),c=null,h=0):d&&d.isColor&&(l(d,1),p=!0,c=null,h=0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),d&&(d.isCubeTexture||d.isWebGLRenderTargetCube)){void 0===a&&((a=new un(new Vi(1,1,1),new sn({type:"BackgroundCubeMaterial",uniforms:ni(pi.cube.uniforms),vertexShader:pi.cube.vertexShader,fragmentShader:pi.cube.fragmentShader,side:M,depthTest:!0,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),a.geometry.removeAttribute("uv"),a.onBeforeRender=function(t,e,i){this.matrixWorld.copyPosition(i.matrixWorld)},Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.tCube.value}}),i.update(a));var f=d.isWebGLRenderTargetCube?d.texture:d;a.material.uniforms.tCube.value=f,a.material.uniforms.tFlip.value=d.isWebGLRenderTargetCube?1:-1,c===d&&h===f.version||(a.material.needsUpdate=!0,c=d,h=f.version),e.unshift(a,a.geometry,a.material,0,null)}else d&&d.isTexture&&(void 0===r&&((r=new un(new Wi(2,2),new sn({type:"BackgroundMaterial",uniforms:ni(pi.background.uniforms),vertexShader:pi.background.vertexShader,fragmentShader:pi.background.fragmentShader,side:_,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(r)),r.material.uniforms.t2D.value=d,!0===d.matrixAutoUpdate&&d.updateMatrix(),r.material.uniforms.uvTransform.value.copy(d.matrix),c===d&&h===d.version||(r.material.needsUpdate=!0,c=d,h=d.version),e.unshift(r,r.geometry,r.material,0,null))}}}function dn(t,e,i,n){var r;this.setMode=function(t){r=t},this.render=function(e,n){t.drawArrays(r,e,n),i.update(n,r)},this.renderInstances=function(a,o,s){var c;if(n.isWebGL2)c=t;else if(null===(c=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[n.isWebGL2?"drawArraysInstanced":"drawArraysInstancedANGLE"](r,o,s,a.maxInstancedCount),i.update(s,r,a.maxInstancedCount)}}function fn(t,e,i){var n;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,o=void 0!==i.precision?i.precision:"highp",s=r(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);var c=!0===i.logarithmicDepthBuffer,h=t.getParameter(34930),l=t.getParameter(35660),u=t.getParameter(3379),p=t.getParameter(34076),d=t.getParameter(34921),f=t.getParameter(36347),m=t.getParameter(36348),g=t.getParameter(36349),v=l>0,y=a||!!e.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==n)return n;var i=e.get("EXT_texture_filter_anisotropic");return n=null!==i?t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:l,maxTextureSize:u,maxCubemapSize:p,maxAttributes:d,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:g,vertexTextures:v,floatFragmentTextures:y,floatVertexTextures:v&&y}}function mn(){var t=this,e=null,i=0,n=!1,r=!1,a=new ti,o=new Ge,s={value:null,needsUpdate:!1};function c(){s.value!==e&&(s.value=e,s.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function h(e,i,n,r){var c=null!==e?e.length:0,h=null;if(0!==c){if(h=s.value,!0!==r||null===h){var l=n+4*c,u=i.matrixWorldInverse;o.getNormalMatrix(u),(null===h||h.length<l)&&(h=new Float32Array(l));for(var p=0,d=n;p!==c;++p,d+=4)a.copy(e[p]).applyMatrix4(u,o),a.normal.toArray(h,d),h[d+3]=a.constant}s.value=h,s.needsUpdate=!0}return t.numPlanes=c,h}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,r,a){var o=0!==t.length||r||0!==i||n;return n=r,e=h(t,a,0),i=t.length,o},this.beginShadows=function(){r=!0,h(null)},this.endShadows=function(){r=!1,c()},this.setState=function(t,a,o,l,u,p){if(!n||null===t||0===t.length||r&&!o)r?h(null):c();else{var d=r?0:i,f=4*d,m=u.clippingState||null;s.value=m,m=h(t,l,f,p);for(var g=0;g!==f;++g)m[g]=e[g];u.clippingState=m,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=d}}}function gn(t){var e={};return{get:function(i){if(void 0!==e[i])return e[i];var n;switch(i){case"WEBGL_depth_texture":n=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=t.getExtension(i)}return null===n&&console.warn("THREE.WebGLRenderer: "+i+" extension not supported."),e[i]=n,n}}}function vn(t,e,i){var n={},r={};function a(t){var o=t.target,s=n[o.id];for(var c in null!==s.index&&e.remove(s.index),s.attributes)e.remove(s.attributes[c]);o.removeEventListener("dispose",a),delete n[o.id];var h=r[s.id];h&&(e.remove(h),delete r[s.id]),i.memory.geometries--}return{get:function(t,e){var r=n[e.id];return r||(e.addEventListener("dispose",a),e.isBufferGeometry?r=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new Hi).setFromObject(t)),r=e._bufferGeometry),n[e.id]=r,i.memory.geometries++,r)},update:function(t){var i=t.index,n=t.attributes;for(var r in null!==i&&e.update(i,34963),n)e.update(n[r],34962);var a=t.morphAttributes;for(var r in a)for(var o=a[r],s=0,c=o.length;s<c;s++)e.update(o[s],34962)},getWireframeAttribute:function(t){var i=r[t.id];if(i)return i;var n,a=[],o=t.index,s=t.attributes;if(null!==o)for(var c=0,h=(n=o.array).length;c<h;c+=3){var l=n[c+0],u=n[c+1],p=n[c+2];a.push(l,u,u,p,p,l)}else for(c=0,h=(n=s.position.array).length/3-1;c<h;c+=3)l=c+0,u=c+1,p=c+2,a.push(l,u,u,p,p,l);return i=new(Gi(a)>65535?Ni:Ii)(a,1),e.update(i,34963),r[t.id]=i,i}}}function yn(t,e,i,n){var r,a,o;this.setMode=function(t){r=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,n){t.drawElements(r,n,a,e*o),i.update(n,r)},this.renderInstances=function(s,c,h){var l;if(n.isWebGL2)l=t;else if(null===(l=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[n.isWebGL2?"drawElementsInstanced":"drawElementsInstancedANGLE"](r,h,a,c*o,s.maxInstancedCount),i.update(h,r,s.maxInstancedCount)}}function xn(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,i,n){switch(n=n||1,e.calls++,i){case 4:e.triangles+=n*(t/3);break;case 5:case 6:e.triangles+=n*(t-2);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function bn(t,e){return Math.abs(e[1])-Math.abs(t[1])}function wn(t){var e={},i=new Float32Array(8);return{update:function(n,r,a,o){var s=n.morphTargetInfluences,c=s.length,h=e[r.id];if(void 0===h){h=[];for(var l=0;l<c;l++)h[l]=[l,0];e[r.id]=h}var u=a.morphTargets&&r.morphAttributes.position,p=a.morphNormals&&r.morphAttributes.normal;for(l=0;l<c;l++)0!==(d=h[l])[1]&&(u&&r.removeAttribute("morphTarget"+l),p&&r.removeAttribute("morphNormal"+l));for(l=0;l<c;l++)(d=h[l])[0]=l,d[1]=s[l];for(h.sort(bn),l=0;l<8;l++){var d;if(d=h[l]){var f=d[0],m=d[1];if(m){u&&r.addAttribute("morphTarget"+l,u[f]),p&&r.addAttribute("morphNormal"+l,p[f]),i[l]=m;continue}}i[l]=0}o.getUniforms().setValue(t,"morphTargetInfluences",i)}}}function _n(t,e){var i={};return{update:function(n){var r=e.render.frame,a=n.geometry,o=t.get(n,a);return i[o.id]!==r&&(a.isGeometry&&o.updateFromObject(n),t.update(o),i[o.id]=r),o},dispose:function(){i={}}}}function Mn(t,e,i,n,r,a,o,s,c,h){t=void 0!==t?t:[],e=void 0!==e?e:dt,Xe.call(this,t,e,i,n,r,a,o,s,c,h),this.flipY=!1}function Sn(t,e,i,n){Xe.call(this,null),this.image={data:t,width:e,height:i,depth:n},this.magFilter=Mt,this.minFilter=Mt,this.generateMipmaps=!1,this.flipY=!1}on.prototype=Object.assign(Object.create(n.prototype),{constructor:on,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var i=t[e];if(void 0!==i)if("shading"!==e){var n=this[e];void 0!==n?n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===i;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(t){var e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});var i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(t){var e=[];for(var i in t){var n=t[i];delete n.metadata,e.push(n)}return e}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearCoat&&(i.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(i.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,i.reflectivity=this.reflectivity,void 0!==this.combine&&(i.combine=this.combine),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(i.size=this.size),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==P&&(i.blending=this.blending),!0===this.flatShading&&(i.flatShading=this.flatShading),this.side!==_&&(i.side=this.side),this.vertexColors!==E&&(i.vertexColors=this.vertexColors),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(i.morphTargets=!0),!0===this.skinning&&(i.skinning=!0),!1===this.visible&&(i.visible=!1),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e){var r=n(t.textures),a=n(t.images);r.length>0&&(i.textures=r),a.length>0&&(i.images=a)}return i},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.lights=t.lights,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.userData=JSON.parse(JSON.stringify(t.userData)),this.clipShadows=t.clipShadows,this.clipIntersection=t.clipIntersection;var e=t.clippingPlanes,i=null;if(null!==e){var n=e.length;i=new Array(n);for(var r=0;r!==n;++r)i[r]=e[r].clone()}return this.clippingPlanes=i,this.shadowSide=t.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),sn.prototype=Object.create(on.prototype),sn.prototype.constructor=sn,sn.prototype.isShaderMaterial=!0,sn.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=ni(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},sn.prototype.toJSON=function(t){var e=on.prototype.toJSON.call(this,t);for(var i in e.uniforms={},this.uniforms){var n=this.uniforms[i].value;n.isTexture?e.uniforms[i]={type:"t",value:n.toJSON(t).uuid}:n.isColor?e.uniforms[i]={type:"c",value:n.getHex()}:n.isVector2?e.uniforms[i]={type:"v2",value:n.toArray()}:n.isVector3?e.uniforms[i]={type:"v3",value:n.toArray()}:n.isVector4?e.uniforms[i]={type:"v4",value:n.toArray()}:n.isMatrix4?e.uniforms[i]={type:"m4",value:n.toArray()}:e.uniforms[i]={value:n}}return Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e},Object.assign(cn.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new Ue),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(){var t=new Ue;return function(e){return this.origin.copy(this.at(e,t)),this}}(),closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new Ue),e.subVectors(t,this.origin);var i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(){var t=new Ue;return function(e){var i=t.subVectors(e,this.origin).dot(this.direction);return i<0?this.origin.distanceToSquared(e):(t.copy(this.direction).multiplyScalar(i).add(this.origin),t.distanceToSquared(e))}}(),distanceSqToSegment:(Xi=new Ue,Yi=new Ue,Ji=new Ue,function(t,e,i,n){Xi.copy(t).add(e).multiplyScalar(.5),Yi.copy(e).sub(t).normalize(),Ji.copy(this.origin).sub(Xi);var r,a,o,s,c=.5*t.distanceTo(e),h=-this.direction.dot(Yi),l=Ji.dot(this.direction),u=-Ji.dot(Yi),p=Ji.lengthSq(),d=Math.abs(1-h*h);if(d>0)if(a=h*l-u,s=c*d,(r=h*u-l)>=0)if(a>=-s)if(a<=s){var f=1/d;o=(r*=f)*(r+h*(a*=f)+2*l)+a*(h*r+a+2*u)+p}else a=c,o=-(r=Math.max(0,-(h*a+l)))*r+a*(a+2*u)+p;else a=-c,o=-(r=Math.max(0,-(h*a+l)))*r+a*(a+2*u)+p;else a<=-s?o=-(r=Math.max(0,-(-h*c+l)))*r+(a=r>0?-c:Math.min(Math.max(-c,-u),c))*(a+2*u)+p:a<=s?(r=0,o=(a=Math.min(Math.max(-c,-u),c))*(a+2*u)+p):o=-(r=Math.max(0,-(h*c+l)))*r+(a=r>0?c:Math.min(Math.max(-c,-u),c))*(a+2*u)+p;else a=h>0?-c:c,o=-(r=Math.max(0,-(h*a+l)))*r+a*(a+2*u)+p;return i&&i.copy(this.direction).multiplyScalar(r).add(this.origin),n&&n.copy(Yi).multiplyScalar(a).add(Xi),o}),intersectSphere:function(){var t=new Ue;return function(e,i){t.subVectors(e.center,this.origin);var n=t.dot(this.direction),r=t.dot(t)-n*n,a=e.radius*e.radius;if(r>a)return null;var o=Math.sqrt(a-r),s=n-o,c=n+o;return s<0&&c<0?null:s<0?this.at(c,i):this.at(s,i)}}(),intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null},intersectPlane:function(t,e){var i=this.distanceToPlane(t);return null===i?null:this.at(i,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var i,n,r,a,o,s,c=1/this.direction.x,h=1/this.direction.y,l=1/this.direction.z,u=this.origin;return c>=0?(i=(t.min.x-u.x)*c,n=(t.max.x-u.x)*c):(i=(t.max.x-u.x)*c,n=(t.min.x-u.x)*c),h>=0?(r=(t.min.y-u.y)*h,a=(t.max.y-u.y)*h):(r=(t.max.y-u.y)*h,a=(t.min.y-u.y)*h),i>a||r>n?null:((r>i||i!=i)&&(i=r),(a<n||n!=n)&&(n=a),l>=0?(o=(t.min.z-u.z)*l,s=(t.max.z-u.z)*l):(o=(t.max.z-u.z)*l,s=(t.min.z-u.z)*l),i>s||o>n?null:((o>i||i!=i)&&(i=o),(s<n||n!=n)&&(n=s),n<0?null:this.at(i>=0?i:n,e)))},intersectsBox:(qi=new Ue,function(t){return null!==this.intersectBox(t,qi)}),intersectTriangle:function(){var t=new Ue,e=new Ue,i=new Ue,n=new Ue;return function(r,a,o,s,c){e.subVectors(a,r),i.subVectors(o,r),n.crossVectors(e,i);var h,l=this.direction.dot(n);if(l>0){if(s)return null;h=1}else{if(!(l<0))return null;h=-1,l=-l}t.subVectors(this.origin,r);var u=h*this.direction.dot(i.crossVectors(t,i));if(u<0)return null;var p=h*this.direction.dot(e.cross(t));if(p<0)return null;if(u+p>l)return null;var d=-h*t.dot(n);return d<0?null:this.at(d/l,c)}}(),applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}}),Object.assign(hn,{getNormal:(Qi=new Ue,function(t,e,i,n){void 0===n&&(console.warn("THREE.Triangle: .getNormal() target is now required"),n=new Ue),n.subVectors(i,e),Qi.subVectors(t,e),n.cross(Qi);var r=n.lengthSq();return r>0?n.multiplyScalar(1/Math.sqrt(r)):n.set(0,0,0)}),getBarycoord:function(){var t=new Ue,e=new Ue,i=new Ue;return function(n,r,a,o,s){t.subVectors(o,r),e.subVectors(a,r),i.subVectors(n,r);var c=t.dot(t),h=t.dot(e),l=t.dot(i),u=e.dot(e),p=e.dot(i),d=c*u-h*h;if(void 0===s&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new Ue),0===d)return s.set(-2,-1,-1);var f=1/d,m=(u*l-h*p)*f,g=(c*p-h*l)*f;return s.set(1-m-g,g,m)}}(),containsPoint:function(){var t=new Ue;return function(e,i,n,r){return hn.getBarycoord(e,i,n,r,t),t.x>=0&&t.y>=0&&t.x+t.y<=1}}(),getUV:(Zi=new Ue,function(t,e,i,n,r,a,o,s){return this.getBarycoord(t,e,i,n,Zi),s.set(0,0),s.addScaledVector(r,Zi.x),s.addScaledVector(a,Zi.y),s.addScaledVector(o,Zi.z),s})}),Object.assign(hn.prototype,{set:function(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this},setFromPointsAndIndices:function(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){var t=new Ue,e=new Ue;return function(){return t.subVectors(this.c,this.b),e.subVectors(this.a,this.b),.5*t.cross(e).length()}}(),getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new Ue),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return hn.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new Ue),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return hn.getBarycoord(t,this.a,this.b,this.c,e)},containsPoint:function(t){return hn.containsPoint(t,this.a,this.b,this.c)},getUV:function(t,e,i,n,r){return hn.getUV(t,this.a,this.b,this.c,e,i,n,r)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:(Ki=new Ue,$i=new Ue,tn=new Ue,en=new Ue,nn=new Ue,rn=new Ue,function(t,e){void 0===e&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new Ue);var i,n,r=this.a,a=this.b,o=this.c;Ki.subVectors(a,r),$i.subVectors(o,r),en.subVectors(t,r);var s=Ki.dot(en),c=$i.dot(en);if(s<=0&&c<=0)return e.copy(r);nn.subVectors(t,a);var h=Ki.dot(nn),l=$i.dot(nn);if(h>=0&&l<=h)return e.copy(a);var u=s*l-h*c;if(u<=0&&s>=0&&h<=0)return i=s/(s-h),e.copy(r).addScaledVector(Ki,i);rn.subVectors(t,o);var p=Ki.dot(rn),d=$i.dot(rn);if(d>=0&&p<=d)return e.copy(o);var f=p*c-s*d;if(f<=0&&c>=0&&d<=0)return n=c/(c-d),e.copy(r).addScaledVector($i,n);var m=h*d-p*l;if(m<=0&&l-h>=0&&p-d>=0)return tn.subVectors(o,a),n=(l-h)/(l-h+(p-d)),e.copy(a).addScaledVector(tn,n);var g=1/(m+f+u);return i=f*g,n=u*g,e.copy(r).addScaledVector(Ki,i).addScaledVector($i,n)}),equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}),ln.prototype=Object.create(on.prototype),ln.prototype.constructor=ln,ln.prototype.isMeshBasicMaterial=!0,ln.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this},un.prototype=Object.assign(Object.create(Mi.prototype),{constructor:un,isMesh:!0,setDrawMode:function(t){this.drawMode=t},copy:function(t){return Mi.prototype.copy.call(this,t),this.drawMode=t.drawMode,void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,i,n=this.geometry;if(n.isBufferGeometry){var r=n.morphAttributes,a=Object.keys(r);if(a.length>0){var o=r[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=o.length;t<e;t++)i=o[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=t}}else{var s=n.morphTargets;if(void 0!==s&&s.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=s.length;t<e;t++)i=s[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=t}},raycast:function(){var t=new ze,e=new cn,i=new $e,n=new Ue,r=new Ue,a=new Ue,o=new Ue,s=new Ue,c=new Ue,h=new Ne,l=new Ne,u=new Ne,p=new Ue,d=new Ue;function f(t,e,i,n,r,a,o,s){if(null===(e.side===M?n.intersectTriangle(o,a,r,!0,s):n.intersectTriangle(r,a,o,e.side!==S,s)))return null;d.copy(s),d.applyMatrix4(t.matrixWorld);var c=i.ray.origin.distanceTo(d);return c<i.near||c>i.far?null:{distance:c,point:d.clone(),object:t}}function m(t,e,i,o,s,c,d,m,g){n.fromBufferAttribute(s,d),r.fromBufferAttribute(s,m),a.fromBufferAttribute(s,g);var v=f(t,e,i,o,n,r,a,p);if(v){c&&(h.fromBufferAttribute(c,d),l.fromBufferAttribute(c,m),u.fromBufferAttribute(c,g),v.uv=hn.getUV(p,n,r,a,h,l,u,new Ne));var y=new mi(d,m,g);hn.getNormal(n,r,a,y.normal),v.face=y}return v}return function(d,g){var v,y=this.geometry,x=this.material,b=this.matrixWorld;if(void 0!==x&&(null===y.boundingSphere&&y.computeBoundingSphere(),i.copy(y.boundingSphere),i.applyMatrix4(b),!1!==d.ray.intersectsSphere(i)&&(t.getInverse(b),e.copy(d.ray).applyMatrix4(t),null===y.boundingBox||!1!==e.intersectsBox(y.boundingBox))))if(y.isBufferGeometry){var w,_,M,S,E,T,L,A,P,C=y.index,R=y.attributes.position,O=y.attributes.uv,I=y.groups,D=y.drawRange;if(null!==C)if(Array.isArray(x))for(S=0,T=I.length;S<T;S++)for(P=x[(A=I[S]).materialIndex],E=Math.max(A.start,D.start),L=Math.min(A.start+A.count,D.start+D.count);E<L;E+=3)w=C.getX(E),_=C.getX(E+1),M=C.getX(E+2),(v=m(this,P,d,e,R,O,w,_,M))&&(v.faceIndex=Math.floor(E/3),g.push(v));else for(S=Math.max(0,D.start),T=Math.min(C.count,D.start+D.count);S<T;S+=3)w=C.getX(S),_=C.getX(S+1),M=C.getX(S+2),(v=m(this,x,d,e,R,O,w,_,M))&&(v.faceIndex=Math.floor(S/3),g.push(v));else if(void 0!==R)if(Array.isArray(x))for(S=0,T=I.length;S<T;S++)for(P=x[(A=I[S]).materialIndex],E=Math.max(A.start,D.start),L=Math.min(A.start+A.count,D.start+D.count);E<L;E+=3)(v=m(this,P,d,e,R,O,w=E,_=E+1,M=E+2))&&(v.faceIndex=Math.floor(E/3),g.push(v));else for(S=Math.max(0,D.start),T=Math.min(R.count,D.start+D.count);S<T;S+=3)(v=m(this,x,d,e,R,O,w=S,_=S+1,M=S+2))&&(v.faceIndex=Math.floor(S/3),g.push(v))}else if(y.isGeometry){var N,z,B,U,G=Array.isArray(x),F=y.vertices,H=y.faces,k=y.faceVertexUvs[0];k.length>0&&(U=k);for(var V=0,j=H.length;V<j;V++){var W=H[V],q=G?x[W.materialIndex]:x;if(void 0!==q){if(N=F[W.a],z=F[W.b],B=F[W.c],!0===q.morphTargets){var X=y.morphTargets,Y=this.morphTargetInfluences;n.set(0,0,0),r.set(0,0,0),a.set(0,0,0);for(var J=0,Z=X.length;J<Z;J++){var Q=Y[J];if(0!==Q){var K=X[J].vertices;n.addScaledVector(o.subVectors(K[W.a],N),Q),r.addScaledVector(s.subVectors(K[W.b],z),Q),a.addScaledVector(c.subVectors(K[W.c],B),Q)}}n.add(N),r.add(z),a.add(B),N=n,z=r,B=a}if(v=f(this,q,d,e,N,z,B,p)){if(U&&U[V]){var $=U[V];h.copy($[0]),l.copy($[1]),u.copy($[2]),v.uv=hn.getUV(p,N,z,B,h,l,u,new Ne)}v.face=W,v.faceIndex=V,g.push(v)}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Mn.prototype=Object.create(Xe.prototype),Mn.prototype.constructor=Mn,Mn.prototype.isCubeTexture=!0,Object.defineProperty(Mn.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}}),Sn.prototype=Object.create(Xe.prototype),Sn.prototype.constructor=Sn,Sn.prototype.isDataTexture3D=!0;var En=new Xe,Tn=new Sn,Ln=new Mn;function An(){this.seq=[],this.map={}}var Pn=[],Cn=[],Rn=new Float32Array(16),On=new Float32Array(9),In=new Float32Array(4);function Dn(t,e,i){var n=t[0];if(n<=0||n>0)return t;var r=e*i,a=Pn[r];if(void 0===a&&(a=new Float32Array(r),Pn[r]=a),0!==e){n.toArray(a,0);for(var o=1,s=0;o!==e;++o)s+=i,t[o].toArray(a,s)}return a}function Nn(t,e){if(t.length!==e.length)return!1;for(var i=0,n=t.length;i<n;i++)if(t[i]!==e[i])return!1;return!0}function zn(t,e){for(var i=0,n=e.length;i<n;i++)t[i]=e[i]}function Bn(t,e){var i=Cn[e];void 0===i&&(i=new Int32Array(e),Cn[e]=i);for(var n=0;n!==e;++n)i[n]=t.allocTextureUnit();return i}function Un(t,e){var i=this.cache;i[0]!==e&&(t.uniform1f(this.addr,e),i[0]=e)}function Gn(t,e){var i=this.cache;i[0]!==e&&(t.uniform1i(this.addr,e),i[0]=e)}function Fn(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(Nn(i,e))return;t.uniform2fv(this.addr,e),zn(i,e)}}function Hn(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else if(void 0!==e.r)i[0]===e.r&&i[1]===e.g&&i[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),i[0]=e.r,i[1]=e.g,i[2]=e.b);else{if(Nn(i,e))return;t.uniform3fv(this.addr,e),zn(i,e)}}function kn(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(Nn(i,e))return;t.uniform4fv(this.addr,e),zn(i,e)}}function Vn(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(Nn(i,e))return;t.uniformMatrix2fv(this.addr,!1,e),zn(i,e)}else{if(Nn(i,n))return;In.set(n),t.uniformMatrix2fv(this.addr,!1,In),zn(i,n)}}function jn(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(Nn(i,e))return;t.uniformMatrix3fv(this.addr,!1,e),zn(i,e)}else{if(Nn(i,n))return;On.set(n),t.uniformMatrix3fv(this.addr,!1,On),zn(i,n)}}function Wn(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(Nn(i,e))return;t.uniformMatrix4fv(this.addr,!1,e),zn(i,e)}else{if(Nn(i,n))return;Rn.set(n),t.uniformMatrix4fv(this.addr,!1,Rn),zn(i,n)}}function qn(t,e,i){var n=this.cache,r=i.allocTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture2D(e||En,r)}function Xn(t,e,i){var n=this.cache,r=i.allocTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture3D(e||Tn,r)}function Yn(t,e,i){var n=this.cache,r=i.allocTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTextureCube(e||Ln,r)}function Jn(t,e){var i=this.cache;Nn(i,e)||(t.uniform2iv(this.addr,e),zn(i,e))}function Zn(t,e){var i=this.cache;Nn(i,e)||(t.uniform3iv(this.addr,e),zn(i,e))}function Qn(t,e){var i=this.cache;Nn(i,e)||(t.uniform4iv(this.addr,e),zn(i,e))}function Kn(t,e){var i=this.cache;Nn(i,e)||(t.uniform1fv(this.addr,e),zn(i,e))}function $n(t,e){var i=this.cache;Nn(i,e)||(t.uniform1iv(this.addr,e),zn(i,e))}function tr(t,e){var i=this.cache,n=Dn(e,this.size,2);Nn(i,n)||(t.uniform2fv(this.addr,n),this.updateCache(n))}function er(t,e){var i=this.cache,n=Dn(e,this.size,3);Nn(i,n)||(t.uniform3fv(this.addr,n),this.updateCache(n))}function ir(t,e){var i=this.cache,n=Dn(e,this.size,4);Nn(i,n)||(t.uniform4fv(this.addr,n),this.updateCache(n))}function nr(t,e){var i=this.cache,n=Dn(e,this.size,4);Nn(i,n)||(t.uniformMatrix2fv(this.addr,!1,n),this.updateCache(n))}function rr(t,e){var i=this.cache,n=Dn(e,this.size,9);Nn(i,n)||(t.uniformMatrix3fv(this.addr,!1,n),this.updateCache(n))}function ar(t,e){var i=this.cache,n=Dn(e,this.size,16);Nn(i,n)||(t.uniformMatrix4fv(this.addr,!1,n),this.updateCache(n))}function or(t,e,i){var n=this.cache,r=e.length,a=Bn(i,r);!1===Nn(n,a)&&(t.uniform1iv(this.addr,a),zn(n,a));for(var o=0;o!==r;++o)i.setTexture2D(e[o]||En,a[o])}function sr(t,e,i){var n=this.cache,r=e.length,a=Bn(i,r);!1===Nn(n,a)&&(t.uniform1iv(this.addr,a),zn(n,a));for(var o=0;o!==r;++o)i.setTextureCube(e[o]||Ln,a[o])}function cr(t,e,i){this.id=t,this.addr=i,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Un;case 35664:return Fn;case 35665:return Hn;case 35666:return kn;case 35674:return Vn;case 35675:return jn;case 35676:return Wn;case 35678:case 36198:return qn;case 35679:return Xn;case 35680:return Yn;case 5124:case 35670:return Gn;case 35667:case 35671:return Jn;case 35668:case 35672:return Zn;case 35669:case 35673:return Qn}}(e.type)}function hr(t,e,i){this.id=t,this.addr=i,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Kn;case 35664:return tr;case 35665:return er;case 35666:return ir;case 35674:return nr;case 35675:return rr;case 35676:return ar;case 35678:return or;case 35680:return sr;case 5124:case 35670:return $n;case 35667:case 35671:return Jn;case 35668:case 35672:return Zn;case 35669:case 35673:return Qn}}(e.type)}function lr(t){this.id=t,An.call(this)}hr.prototype.updateCache=function(t){var e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),zn(e,t)},lr.prototype.setValue=function(t,e,i){for(var n=this.seq,r=0,a=n.length;r!==a;++r){var o=n[r];o.setValue(t,e[o.id],i)}};var ur=/([\w\d_]+)(\])?(\[|\.)?/g;function pr(t,e){t.seq.push(e),t.map[e.id]=e}function dr(t,e,i){var n=t.name,r=n.length;for(ur.lastIndex=0;;){var a=ur.exec(n),o=ur.lastIndex,s=a[1],c="]"===a[2],h=a[3];if(c&&(s|=0),void 0===h||"["===h&&o+2===r){pr(i,void 0===h?new cr(s,t,e):new hr(s,t,e));break}var l=i.map[s];void 0===l&&pr(i,l=new lr(s)),i=l}}function fr(t,e,i){An.call(this),this.renderer=i;for(var n=t.getProgramParameter(e,35718),r=0;r<n;++r){var a=t.getActiveUniform(e,r);dr(a,t.getUniformLocation(e,a.name),this)}}function mr(t,e,i){var n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),!1===t.getShaderParameter(n,35713)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(n)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",35633===e?"vertex":"fragment",t.getShaderInfoLog(n),function(t){for(var e=t.split("\n"),i=0;i<e.length;i++)e[i]=i+1+": "+e[i];return e.join("\n")}(i)),n}fr.prototype.setValue=function(t,e,i){var n=this.map[e];void 0!==n&&n.setValue(t,i,this.renderer)},fr.prototype.setOptional=function(t,e,i){var n=e[i];void 0!==n&&this.setValue(t,i,n)},fr.upload=function(t,e,i,n){for(var r=0,a=e.length;r!==a;++r){var o=e[r],s=i[o.id];!1!==s.needsUpdate&&o.setValue(t,s.value,n)}},fr.seqWithValue=function(t,e){for(var i=[],n=0,r=t.length;n!==r;++n){var a=t[n];a.id in e&&i.push(a)}return i};var gr=0;function vr(t){switch(t){case Me:return["Linear","( value )"];case Se:return["sRGB","( value )"];case Te:return["RGBE","( value )"];case Le:return["RGBM","( value, 7.0 )"];case Ae:return["RGBM","( value, 16.0 )"];case Pe:return["RGBD","( value, 256.0 )"];case Ee:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+t)}}function yr(t,e){var i=vr(e);return"vec4 "+t+"( vec4 value ) { return "+i[0]+"ToLinear"+i[1]+"; }"}function xr(t){return""!==t}function br(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights)}function wr(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}function _r(t){return t.replace(/^[ \t]*#include +<([\w\d.\/]+)>/gm,function(t,e){var i=ii[e];if(void 0===i)throw new Error("Can not resolve #include <"+e+">");return _r(i)})}function Mr(t){return t.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(t,e,i,n){for(var r="",a=parseInt(e);a<parseInt(i);a++)r+=n.replace(/\[ i \]/g,"[ "+a+" ]");return r})}function Sr(t,e,i,n,r,a,o){var s=t.context,c=n.defines,h=r.vertexShader,l=r.fragmentShader,u="SHADOWMAP_TYPE_BASIC";a.shadowMapType===b?u="SHADOWMAP_TYPE_PCF":a.shadowMapType===w&&(u="SHADOWMAP_TYPE_PCF_SOFT");var p="ENVMAP_TYPE_CUBE",d="ENVMAP_MODE_REFLECTION",f="ENVMAP_BLENDING_MULTIPLY";if(a.envMap){switch(n.envMap.mapping){case dt:case ft:p="ENVMAP_TYPE_CUBE";break;case yt:case xt:p="ENVMAP_TYPE_CUBE_UV";break;case mt:case gt:p="ENVMAP_TYPE_EQUIREC";break;case vt:p="ENVMAP_TYPE_SPHERE"}switch(n.envMap.mapping){case ft:case gt:d="ENVMAP_MODE_REFRACTION"}switch(n.combine){case rt:f="ENVMAP_BLENDING_MULTIPLY";break;case at:f="ENVMAP_BLENDING_MIX";break;case ot:f="ENVMAP_BLENDING_ADD"}}var m,g,v,y,x,_=t.gammaFactor>0?t.gammaFactor:1,M=o.isWebGL2?"":function(t,e,i){return[(t=t||{}).derivatives||e.envMapCubeUV||e.bumpMap||e.normalMap&&!e.objectSpaceNormalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(t.fragDepth||e.logarithmicDepthBuffer)&&i.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",t.drawBuffers&&i.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(t.shaderTextureLOD||e.envMap)&&i.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(xr).join("\n")}(n.extensions,a,e),S=function(t){var e=[];for(var i in t){var n=t[i];!1!==n&&e.push("#define "+i+" "+n)}return e.join("\n")}(c),E=s.createProgram();if(n.isRawShaderMaterial?((m=[S].filter(xr).join("\n")).length>0&&(m+="\n"),(g=[M,S].filter(xr).join("\n")).length>0&&(g+="\n")):(m=["precision "+a.precision+" float;","precision "+a.precision+" int;","#define SHADER_NAME "+r.name,S,a.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+_,"#define MAX_BONES "+a.maxBones,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+d:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.displacementMap&&a.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexColors?"#define USE_COLOR":"",a.flatShading?"#define FLAT_SHADED":"",a.skinning?"#define USE_SKINNING":"",a.useVertexTexture?"#define BONE_TEXTURE":"",a.morphTargets?"#define USE_MORPHTARGETS":"",a.morphNormals&&!1===a.flatShading?"#define USE_MORPHNORMALS":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+u:"",a.sizeAttenuation?"#define USE_SIZEATTENUATION":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(o.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(xr).join("\n"),g=[M,"precision "+a.precision+" float;","precision "+a.precision+" int;","#define SHADER_NAME "+r.name,S,a.alphaTest?"#define ALPHATEST "+a.alphaTest+(a.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+_,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.matcap?"#define USE_MATCAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+p:"",a.envMap?"#define "+d:"",a.envMap?"#define "+f:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexColors?"#define USE_COLOR":"",a.gradientMap?"#define USE_GRADIENTMAP":"",a.flatShading?"#define FLAT_SHADED":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+u:"",a.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",a.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(o.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",a.envMap&&(o.isWebGL2||e.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",a.toneMapping!==st?"#define TONE_MAPPING":"",a.toneMapping!==st?ii.tonemapping_pars_fragment:"",a.toneMapping!==st?function(t,e){var i;switch(e){case ct:i="Linear";break;case ht:i="Reinhard";break;case lt:i="Uncharted2";break;case ut:i="OptimizedCineon";break;case pt:i="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}("toneMapping",a.toneMapping):"",a.dithering?"#define DITHERING":"",a.outputEncoding||a.mapEncoding||a.matcapEncoding||a.envMapEncoding||a.emissiveMapEncoding?ii.encodings_pars_fragment:"",a.mapEncoding?yr("mapTexelToLinear",a.mapEncoding):"",a.matcapEncoding?yr("matcapTexelToLinear",a.matcapEncoding):"",a.envMapEncoding?yr("envMapTexelToLinear",a.envMapEncoding):"",a.emissiveMapEncoding?yr("emissiveMapTexelToLinear",a.emissiveMapEncoding):"",a.outputEncoding?(v="linearToOutputTexel",y=a.outputEncoding,x=vr(y),"vec4 "+v+"( vec4 value ) { return LinearTo"+x[0]+x[1]+"; }"):"",a.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(xr).join("\n")),h=wr(h=br(h=_r(h),a),a),l=wr(l=br(l=_r(l),a),a),h=Mr(h),l=Mr(l),o.isWebGL2&&!n.isRawShaderMaterial){var T=!1,L=/^\s*#version\s+300\s+es\s*\n/;n.isShaderMaterial&&null!==h.match(L)&&null!==l.match(L)&&(T=!0,h=h.replace(L,""),l=l.replace(L,"")),m=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+m,g=["#version 300 es\n","#define varying in",T?"":"out highp vec4 pc_fragColor;",T?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+g}var A=g+l,P=mr(s,35633,m+h),C=mr(s,35632,A);s.attachShader(E,P),s.attachShader(E,C),void 0!==n.index0AttributeName?s.bindAttribLocation(E,0,n.index0AttributeName):!0===a.morphTargets&&s.bindAttribLocation(E,0,"position"),s.linkProgram(E);var R,O,I=s.getProgramInfoLog(E).trim(),D=s.getShaderInfoLog(P).trim(),N=s.getShaderInfoLog(C).trim(),z=!0,B=!0;return!1===s.getProgramParameter(E,35714)?(z=!1,console.error("THREE.WebGLProgram: shader error: ",s.getError(),"35715",s.getProgramParameter(E,35715),"gl.getProgramInfoLog",I,D,N)):""!==I?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",I):""!==D&&""!==N||(B=!1),B&&(this.diagnostics={runnable:z,material:n,programLog:I,vertexShader:{log:D,prefix:m},fragmentShader:{log:N,prefix:g}}),s.deleteShader(P),s.deleteShader(C),this.getUniforms=function(){return void 0===R&&(R=new fr(s,E,t)),R},this.getAttributes=function(){return void 0===O&&(O=function(t,e){for(var i={},n=t.getProgramParameter(e,35721),r=0;r<n;r++){var a=t.getActiveAttrib(e,r).name;i[a]=t.getAttribLocation(e,a)}return i}(s,E)),O},this.destroy=function(){s.deleteProgram(E),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.name=r.name,this.id=gr++,this.code=i,this.usedTimes=1,this.program=E,this.vertexShader=P,this.fragmentShader=C,this}function Er(t,e,i){var n=[],r={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},a=["precision","supportsVertexTextures","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function o(t,e){var i;return t?t.isTexture?i=t.encoding:t.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),i=t.texture.encoding):i=Me,i===Me&&e&&(i=Ee),i}this.getParameters=function(e,n,a,s,c,h,l){var u=r[e.type],p=l.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(i.floatVertexTextures)return 1024;var n=i.maxVertexUniforms,r=Math.floor((n-20)/4),a=Math.min(r,e.length);return a<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+a+"."),0):a}(l):0,d=i.precision;null!==e.precision&&(d=i.getMaxPrecision(e.precision))!==e.precision&&console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",d,"instead.");var f=t.getRenderTarget();return{shaderID:u,precision:d,supportsVertexTextures:i.vertexTextures,outputEncoding:o(f?f.texture:null,t.gammaOutput),map:!!e.map,mapEncoding:o(e.map,t.gammaInput),matcap:!!e.matcap,matcapEncoding:o(e.matcap,t.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:o(e.envMap,t.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===yt||e.envMap.mapping===xt),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:o(e.emissiveMap,t.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,objectSpaceNormalMap:e.normalMapType===Ie,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,combine:e.combine,vertexColors:e.vertexColors,fog:!!s,useFog:e.fog,fogExp:s&&s.isFogExp2,flatShading:e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:i.logarithmicDepthBuffer,skinning:e.skinning&&p>0,maxBones:p,useVertexTexture:i.floatVertexTextures,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:n.directional.length,numPointLights:n.point.length,numSpotLights:n.spot.length,numRectAreaLights:n.rectArea.length,numHemiLights:n.hemi.length,numClippingPlanes:c,numClipIntersection:h,dithering:e.dithering,shadowMapEnabled:t.shadowMap.enabled&&l.receiveShadow&&a.length>0,shadowMapType:t.shadowMap.type,toneMapping:t.toneMapping,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===S,flipSided:e.side===M,depthPacking:void 0!==e.depthPacking&&e.depthPacking}},this.getProgramCode=function(e,i){var n=[];if(i.shaderID?n.push(i.shaderID):(n.push(e.fragmentShader),n.push(e.vertexShader)),void 0!==e.defines)for(var r in e.defines)n.push(r),n.push(e.defines[r]);for(var o=0;o<a.length;o++)n.push(i[a[o]]);return n.push(e.onBeforeCompile.toString()),n.push(t.gammaOutput),n.push(t.gammaFactor),n.join()},this.acquireProgram=function(r,a,o,s){for(var c,h=0,l=n.length;h<l;h++){var u=n[h];if(u.code===s){++(c=u).usedTimes;break}}return void 0===c&&(c=new Sr(t,e,s,r,a,o,i),n.push(c)),c},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=n.indexOf(t);n[e]=n[n.length-1],n.pop(),t.destroy()}},this.programs=n}function Tr(){var t=new WeakMap;return{get:function(e){var i=t.get(e);return void 0===i&&(i={},t.set(e,i)),i},remove:function(e){t.delete(e)},update:function(e,i,n){t.get(e)[i]=n},dispose:function(){t=new WeakMap}}}function Lr(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program&&e.program&&t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Ar(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Pr(){var t=[],e=0,i=[],n=[];function r(i,n,r,a,o){var s=t[e];return void 0===s?(s={id:i.id,object:i,geometry:n,material:r,program:r.program,renderOrder:i.renderOrder,z:a,group:o},t[e]=s):(s.id=i.id,s.object=i,s.geometry=n,s.material=r,s.program=r.program,s.renderOrder=i.renderOrder,s.z=a,s.group=o),e++,s}return{opaque:i,transparent:n,init:function(){e=0,i.length=0,n.length=0},push:function(t,e,a,o,s){var c=r(t,e,a,o,s);(!0===a.transparent?n:i).push(c)},unshift:function(t,e,a,o,s){var c=r(t,e,a,o,s);(!0===a.transparent?n:i).unshift(c)},sort:function(){i.length>1&&i.sort(Lr),n.length>1&&n.sort(Ar)}}}function Cr(){var t={};return{get:function(e,i){var n,r=t[e.id];return void 0===r?(n=new Pr,t[e.id]={},t[e.id][i.id]=n):void 0===(n=r[i.id])&&(n=new Pr,r[i.id]=n),n},dispose:function(){t={}}}}function Rr(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var i;switch(e.type){case"DirectionalLight":i={direction:new Ue,color:new hi,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ne};break;case"SpotLight":i={position:new Ue,direction:new Ue,color:new hi,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ne};break;case"PointLight":i={position:new Ue,color:new hi,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ne,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":i={direction:new Ue,skyColor:new hi,groundColor:new hi};break;case"RectAreaLight":i={color:new hi,position:new Ue,halfWidth:new Ue,halfHeight:new Ue}}return t[e.id]=i,i}}}var Or=0;function Ir(){var t=new Rr,e={id:Or++,hash:{stateID:-1,directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,shadowsLength:-1},ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},i=new Ue,n=new ze,r=new ze;return{setup:function(a,o,s){for(var c=0,h=0,l=0,u=0,p=0,d=0,f=0,m=0,g=s.matrixWorldInverse,v=0,y=a.length;v<y;v++){var x=a[v],b=x.color,w=x.intensity,_=x.distance,M=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)c+=b.r*w,h+=b.g*w,l+=b.b*w;else if(x.isDirectionalLight){if((E=t.get(x)).color.copy(x.color).multiplyScalar(x.intensity),E.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(i),E.direction.transformDirection(g),E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize}e.directionalShadowMap[u]=M,e.directionalShadowMatrix[u]=x.shadow.matrix,e.directional[u]=E,u++}else if(x.isSpotLight)(E=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(g),E.color.copy(b).multiplyScalar(w),E.distance=_,E.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(i),E.direction.transformDirection(g),E.coneCos=Math.cos(x.angle),E.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),E.decay=x.decay,E.shadow=x.castShadow,x.castShadow&&(S=x.shadow,E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize),e.spotShadowMap[d]=M,e.spotShadowMatrix[d]=x.shadow.matrix,e.spot[d]=E,d++;else if(x.isRectAreaLight)(E=t.get(x)).color.copy(b).multiplyScalar(w),E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(g),r.identity(),n.copy(x.matrixWorld),n.premultiply(g),r.extractRotation(n),E.halfWidth.set(.5*x.width,0,0),E.halfHeight.set(0,.5*x.height,0),E.halfWidth.applyMatrix4(r),E.halfHeight.applyMatrix4(r),e.rectArea[f]=E,f++;else if(x.isPointLight)(E=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(g),E.color.copy(x.color).multiplyScalar(x.intensity),E.distance=x.distance,E.decay=x.decay,E.shadow=x.castShadow,x.castShadow&&(S=x.shadow,E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize,E.shadowCameraNear=S.camera.near,E.shadowCameraFar=S.camera.far),e.pointShadowMap[p]=M,e.pointShadowMatrix[p]=x.shadow.matrix,e.point[p]=E,p++;else if(x.isHemisphereLight){var E;(E=t.get(x)).direction.setFromMatrixPosition(x.matrixWorld),E.direction.transformDirection(g),E.direction.normalize(),E.skyColor.copy(x.color).multiplyScalar(w),E.groundColor.copy(x.groundColor).multiplyScalar(w),e.hemi[m]=E,m++}}e.ambient[0]=c,e.ambient[1]=h,e.ambient[2]=l,e.directional.length=u,e.spot.length=d,e.rectArea.length=f,e.point.length=p,e.hemi.length=m,e.hash.stateID=e.id,e.hash.directionalLength=u,e.hash.pointLength=p,e.hash.spotLength=d,e.hash.rectAreaLength=f,e.hash.hemiLength=m,e.hash.shadowsLength=o.length},state:e}}function Dr(){var t=new Ir,e=[],i=[];return{init:function(){e.length=0,i.length=0},state:{lightsArray:e,shadowsArray:i,lights:t},setupLights:function(n){t.setup(e,i,n)},pushLight:function(t){e.push(t)},pushShadow:function(t){i.push(t)}}}function Nr(){var t={};return{get:function(e,i){var n;return void 0===t[e.id]?(n=new Dr,t[e.id]={},t[e.id][i.id]=n):void 0===t[e.id][i.id]?(n=new Dr,t[e.id][i.id]=n):n=t[e.id][i.id],n},dispose:function(){t={}}}}function zr(t){on.call(this),this.type="MeshDepthMaterial",this.depthPacking=Ce,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(t)}function Br(t){on.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new Ue,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(t)}function Ur(t,e,i){for(var n=new ei,r=new ze,a=new Ne,o=new Ne(i,i),s=new Ue,c=new Ue,h=1,l=2,u=1+(h|l),p=new Array(u),d=new Array(u),f={},m={0:M,1:_,2:S},g=[new Ue(1,0,0),new Ue(-1,0,0),new Ue(0,0,1),new Ue(0,0,-1),new Ue(0,1,0),new Ue(0,-1,0)],v=[new Ue(0,1,0),new Ue(0,1,0),new Ue(0,1,0),new Ue(0,1,0),new Ue(0,0,1),new Ue(0,0,-1)],y=[new Ye,new Ye,new Ye,new Ye,new Ye,new Ye],x=0;x!==u;++x){var w=0!=(x&h),E=0!=(x&l),T=new zr({depthPacking:Re,morphTargets:w,skinning:E});p[x]=T;var L=new Br({morphTargets:w,skinning:E});d[x]=L}var A=this;function P(e,i,n,r,a,o){var s=e.geometry,c=null,u=p,g=e.customDepthMaterial;if(n&&(u=d,g=e.customDistanceMaterial),g)c=g;else{var v=!1;i.morphTargets&&(s&&s.isBufferGeometry?v=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(v=s.morphTargets&&s.morphTargets.length>0)),e.isSkinnedMesh&&!1===i.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e);var y=e.isSkinnedMesh&&i.skinning,x=0;v&&(x|=h),y&&(x|=l),c=u[x]}if(t.localClippingEnabled&&!0===i.clipShadows&&0!==i.clippingPlanes.length){var b=c.uuid,w=i.uuid,_=f[b];void 0===_&&(_={},f[b]=_);var M=_[w];void 0===M&&(M=c.clone(),_[w]=M),c=M}return c.visible=i.visible,c.wireframe=i.wireframe,c.side=null!=i.shadowSide?i.shadowSide:m[i.side],c.clipShadows=i.clipShadows,c.clippingPlanes=i.clippingPlanes,c.clipIntersection=i.clipIntersection,c.wireframeLinewidth=i.wireframeLinewidth,c.linewidth=i.linewidth,n&&c.isMeshDistanceMaterial&&(c.referencePosition.copy(r),c.nearDistance=a,c.farDistance=o),c}function C(i,r,a,o){if(!1!==i.visible){if(i.layers.test(r.layers)&&(i.isMesh||i.isLine||i.isPoints)&&i.castShadow&&(!i.frustumCulled||n.intersectsObject(i))){i.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,i.matrixWorld);var s=e.update(i),h=i.material;if(Array.isArray(h))for(var l=s.groups,u=0,p=l.length;u<p;u++){var d=l[u],f=h[d.materialIndex];if(f&&f.visible){var m=P(i,f,o,c,a.near,a.far);t.renderBufferDirect(a,null,s,m,i,d)}}else if(h.visible){m=P(i,h,o,c,a.near,a.far);t.renderBufferDirect(a,null,s,m,i,null)}}for(var g=i.children,v=0,y=g.length;v<y;v++)C(g[v],r,a,o)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=b,this.render=function(e,i,h){if(!1!==A.enabled&&(!1!==A.autoUpdate||!1!==A.needsUpdate)&&0!==e.length){t.context;var l,u=t.state;u.disable(3042),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);for(var p=0,d=e.length;p<d;p++){var f=e[p],m=f.shadow,x=f&&f.isPointLight;if(void 0!==m){var b=m.camera;if(a.copy(m.mapSize),a.min(o),x){var w=a.x,_=a.y;y[0].set(2*w,_,w,_),y[1].set(0,_,w,_),y[2].set(3*w,_,w,_),y[3].set(w,_,w,_),y[4].set(3*w,0,w,_),y[5].set(w,0,w,_),a.x*=4,a.y*=2}if(null===m.map){var M={minFilter:Mt,magFilter:Mt,format:Vt};m.map=new Je(a.x,a.y,M),m.map.texture.name=f.name+".shadowMap",b.updateProjectionMatrix()}m.isSpotLightShadow&&m.update(f);var S=m.map,E=m.matrix;c.setFromMatrixPosition(f.matrixWorld),b.position.copy(c),x?(l=6,E.makeTranslation(-c.x,-c.y,-c.z)):(l=1,s.setFromMatrixPosition(f.target.matrixWorld),b.lookAt(s),b.updateMatrixWorld(),E.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),E.multiply(b.projectionMatrix),E.multiply(b.matrixWorldInverse)),t.setRenderTarget(S),t.clear();for(var T=0;T<l;T++){if(x){s.copy(b.position),s.add(g[T]),b.up.copy(v[T]),b.lookAt(s),b.updateMatrixWorld();var L=y[T];u.viewport(L)}r.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),n.setFromMatrix(r),C(i,h,b,x)}}else console.warn("THREE.WebGLShadowMap:",f,"has no shadow.")}A.needsUpdate=!1}}}function Gr(t,e,i,n){var r=new function(){var e=!1,i=new Ye,n=null,r=new Ye(0,0,0,0);return{setMask:function(i){n===i||e||(t.colorMask(i,i,i,i),n=i)},setLocked:function(t){e=t},setClear:function(e,n,a,o,s){!0===s&&(e*=o,n*=o,a*=o),i.set(e,n,a,o),!1===r.equals(i)&&(t.clearColor(e,n,a,o),r.copy(i))},reset:function(){e=!1,n=null,r.set(-1,0,0,0)}}},a=new function(){var e=!1,i=null,n=null,r=null;return{setTest:function(t){t?at(2929):ot(2929)},setMask:function(n){i===n||e||(t.depthMask(n),i=n)},setFunc:function(e){if(n!==e){if(e)switch(e){case Z:t.depthFunc(512);break;case Q:t.depthFunc(519);break;case K:t.depthFunc(513);break;case $:t.depthFunc(515);break;case tt:t.depthFunc(514);break;case et:t.depthFunc(518);break;case it:t.depthFunc(516);break;case nt:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);n=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,i=null,n=null,r=null}}},o=new function(){var e=!1,i=null,n=null,r=null,a=null,o=null,s=null,c=null,h=null;return{setTest:function(t){t?at(2960):ot(2960)},setMask:function(n){i===n||e||(t.stencilMask(n),i=n)},setFunc:function(e,i,o){n===e&&r===i&&a===o||(t.stencilFunc(e,i,o),n=e,r=i,a=o)},setOp:function(e,i,n){o===e&&s===i&&c===n||(t.stencilOp(e,i,n),o=e,s=i,c=n)},setLocked:function(t){e=t},setClear:function(e){h!==e&&(t.clearStencil(e),h=e)},reset:function(){e=!1,i=null,n=null,r=null,a=null,o=null,s=null,c=null,h=null}}},s=t.getParameter(34921),c=new Uint8Array(s),h=new Uint8Array(s),l=new Uint8Array(s),u={},p=null,d=null,f=null,m=null,g=null,b=null,w=null,_=null,E=null,T=null,L=!1,N=null,z=null,B=null,U=null,G=null,F=t.getParameter(35661),H=!1,k=0,V=t.getParameter(7938);-1!==V.indexOf("WebGL")?(k=parseFloat(/^WebGL\ ([0-9])/.exec(V)[1]),H=k>=1):-1!==V.indexOf("OpenGL ES")&&(k=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(V)[1]),H=k>=2);var j=null,W={},q=new Ye,X=new Ye;function Y(e,i,n){var r=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(var o=0;o<n;o++)t.texImage2D(i+o,0,6408,1,1,0,6408,5121,r);return a}var J={};function rt(i,r){(c[i]=1,0===h[i]&&(t.enableVertexAttribArray(i),h[i]=1),l[i]!==r)&&((n.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](i,r),l[i]=r)}function at(e){!0!==u[e]&&(t.enable(e),u[e]=!0)}function ot(e){!1!==u[e]&&(t.disable(e),u[e]=!1)}function st(e,n,r,a,o,s,c,h){if(e!==A){if(f||(at(3042),f=!0),e===I)o=o||n,s=s||r,c=c||a,n===g&&o===_||(t.blendEquationSeparate(i.convert(n),i.convert(o)),g=n,_=o),r===b&&a===w&&s===E&&c===T||(t.blendFuncSeparate(i.convert(r),i.convert(a),i.convert(s),i.convert(c)),b=r,w=a,E=s,T=c),m=e,L=null;else if(e!==m||h!==L){if(g===D&&_===D||(t.blendEquation(32774),g=D,_=D),h)switch(e){case P:t.blendFuncSeparate(1,771,1,771);break;case C:t.blendFunc(1,1);break;case R:t.blendFuncSeparate(0,0,769,771);break;case O:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case P:t.blendFuncSeparate(770,771,1,771);break;case C:t.blendFunc(770,1);break;case R:t.blendFunc(0,769);break;case O:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}b=null,w=null,E=null,T=null,m=e,L=h}}else f&&(ot(3042),f=!1)}function ct(e){N!==e&&(e?t.frontFace(2304):t.frontFace(2305),N=e)}function ht(e){e!==v?(at(2884),e!==z&&(e===y?t.cullFace(1029):e===x?t.cullFace(1028):t.cullFace(1032))):ot(2884),z=e}function lt(e,i,n){e?(at(32823),U===i&&G===n||(t.polygonOffset(i,n),U=i,G=n)):ot(32823)}function ut(e){void 0===e&&(e=33984+F-1),j!==e&&(t.activeTexture(e),j=e)}return J[3553]=Y(3553,3553,1),J[34067]=Y(34067,34069,6),r.setClear(0,0,0,1),a.setClear(1),o.setClear(0),at(2929),a.setFunc($),ct(!1),ht(y),at(2884),st(A),{buffers:{color:r,depth:a,stencil:o},initAttributes:function(){for(var t=0,e=c.length;t<e;t++)c[t]=0},enableAttribute:function(t){rt(t,0)},enableAttributeAndDivisor:rt,disableUnusedAttributes:function(){for(var e=0,i=h.length;e!==i;++e)h[e]!==c[e]&&(t.disableVertexAttribArray(e),h[e]=0)},enable:at,disable:ot,getCompressedTextureFormats:function(){if(null===p&&(p=[],e.get("WEBGL_compressed_texture_pvrtc")||e.get("WEBGL_compressed_texture_s3tc")||e.get("WEBGL_compressed_texture_etc1")||e.get("WEBGL_compressed_texture_astc")))for(var i=t.getParameter(34467),n=0;n<i.length;n++)p.push(i[n]);return p},useProgram:function(e){return d!==e&&(t.useProgram(e),d=e,!0)},setBlending:st,setMaterial:function(t,e){t.side===S?ot(2884):at(2884);var i=t.side===M;e&&(i=!i),ct(i),t.blending===P&&!1===t.transparent?st(A):st(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite),lt(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:ct,setCullFace:ht,setLineWidth:function(e){e!==B&&(H&&t.lineWidth(e),B=e)},setPolygonOffset:lt,setScissorTest:function(t){t?at(3089):ot(3089)},activeTexture:ut,bindTexture:function(e,i){null===j&&ut();var n=W[j];void 0===n&&(n={type:void 0,texture:void 0},W[j]=n),n.type===e&&n.texture===i||(t.bindTexture(e,i||J[e]),n.type=e,n.texture=i)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===q.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),q.copy(e))},viewport:function(e){!1===X.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),X.copy(e))},reset:function(){for(var e=0;e<h.length;e++)1===h[e]&&(t.disableVertexAttribArray(e),h[e]=0);u={},p=null,j=null,W={},d=null,m=null,N=null,z=null,r.reset(),a.reset(),o.reset()}}}function Fr(t,e,i,n,r,a,o){var s,c={};function h(t,e){if(t.width>e||t.height>e){if("data"in t)return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big ("+t.width+"x"+t.height+").");var i=e/Math.max(t.width,t.height),n=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return n.width=Math.floor(t.width*i),n.height=Math.floor(t.height*i),n.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,n.width,n.height),console.warn("THREE.WebGLRenderer: image is too big ("+t.width+"x"+t.height+"). Resized to "+n.width+"x"+n.height),n}return t}function l(t){return De.isPowerOfTwo(t.width)&&De.isPowerOfTwo(t.height)}function u(t,e){return t.generateMipmaps&&e&&t.minFilter!==Mt&&t.minFilter!==Tt}function p(e,i,r,a){t.generateMipmap(e),n.get(i).__maxMipLevel=Math.log(Math.max(r,a))*Math.LOG2E}function d(t,e){if(!r.isWebGL2)return t;if(6403===t){if(5126===e)return 33326;if(5131===e)return 33325;if(5121===e)return 33321}if(6407===t){if(5126===e)return 34837;if(5131===e)return 34843;if(5121===e)return 32849}if(6408===t){if(5126===e)return 34836;if(5131===e)return 34842;if(5121===e)return 32856}return t}function f(t){return t===Mt||t===St||t===Et?9728:9729}function m(e){var i=e.target;i.removeEventListener("dispose",m),function(e){var i=n.get(e);if(e.image&&i.__image__webglTextureCube)t.deleteTexture(i.__image__webglTextureCube);else{if(void 0===i.__webglInit)return;t.deleteTexture(i.__webglTexture)}n.remove(e)}(i),i.isVideoTexture&&delete c[i.id],o.memory.textures--}function g(e){var i=e.target;i.removeEventListener("dispose",g),function(e){var i=n.get(e),r=n.get(e.texture);if(!e)return;void 0!==r.__webglTexture&&t.deleteTexture(r.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLRenderTargetCube)for(var a=0;a<6;a++)t.deleteFramebuffer(i.__webglFramebuffer[a]),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer[a]);else t.deleteFramebuffer(i.__webglFramebuffer),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer);n.remove(e.texture),n.remove(e)}(i),o.memory.textures--}function v(t,e){var r=n.get(t);if(t.isVideoTexture&&function(t){var e=t.id,i=o.render.frame;c[e]!==i&&(c[e]=i,t.update())}(t),t.version>0&&r.__version!==t.version){var a=t.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void x(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}i.activeTexture(33984+e),i.bindTexture(3553,r.__webglTexture)}function y(i,o,s){var c;if(s?(t.texParameteri(i,10242,a.convert(o.wrapS)),t.texParameteri(i,10243,a.convert(o.wrapT)),t.texParameteri(i,10240,a.convert(o.magFilter)),t.texParameteri(i,10241,a.convert(o.minFilter))):(t.texParameteri(i,10242,33071),t.texParameteri(i,10243,33071),o.wrapS===wt&&o.wrapT===wt||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(i,10240,f(o.magFilter)),t.texParameteri(i,10241,f(o.minFilter)),o.minFilter!==Mt&&o.minFilter!==Tt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),c=e.get("EXT_texture_filter_anisotropic")){if(o.type===Nt&&null===e.get("OES_texture_float_linear"))return;if(o.type===zt&&null===(r.isWebGL2||e.get("OES_texture_half_float_linear")))return;(o.anisotropy>1||n.get(o).__currentAnisotropy)&&(t.texParameterf(i,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,r.getMaxAnisotropy())),n.get(o).__currentAnisotropy=o.anisotropy)}}function x(e,n,c){var f;f=n.isDataTexture3D?32879:3553,void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",m),e.__webglTexture=t.createTexture(),o.memory.textures++),i.activeTexture(33984+c),i.bindTexture(f,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment);var g=h(n.image,r.maxTextureSize);(function(t){return!r.isWebGL2&&(t.wrapS!==wt||t.wrapT!==wt||t.minFilter!==Mt&&t.minFilter!==Tt)})(n)&&!1===l(g)&&(g=function(t){return t instanceof HTMLImageElement||t instanceof HTMLCanvasElement||t instanceof ImageBitmap?(void 0===s&&(s=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),s.width=De.floorPowerOfTwo(t.width),s.height=De.floorPowerOfTwo(t.height),s.getContext("2d").drawImage(t,0,0,s.width,s.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+t.width+"x"+t.height+"). Resized to "+s.width+"x"+s.height),s):t}(g));var v=l(g),x=a.convert(n.format),b=a.convert(n.type),w=d(x,b);y(f,n,v);var _,M=n.mipmaps;if(n.isDepthTexture){if(w=6402,n.type===Nt){if(!r.isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");w=36012}else r.isWebGL2&&(w=33189);n.format===qt&&6402===w&&n.type!==Ot&&n.type!==Dt&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=Ot,b=a.convert(n.type)),n.format===Xt&&(w=34041,n.type!==Ft&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=Ft,b=a.convert(n.type))),i.texImage2D(3553,0,w,g.width,g.height,0,x,b,null)}else if(n.isDataTexture)if(M.length>0&&v){for(var S=0,E=M.length;S<E;S++)_=M[S],i.texImage2D(3553,S,w,_.width,_.height,0,x,b,_.data);n.generateMipmaps=!1,e.__maxMipLevel=M.length-1}else i.texImage2D(3553,0,w,g.width,g.height,0,x,b,g.data),e.__maxMipLevel=0;else if(n.isCompressedTexture){for(S=0,E=M.length;S<E;S++)_=M[S],n.format!==Vt&&n.format!==kt?i.getCompressedTextureFormats().indexOf(x)>-1?i.compressedTexImage2D(3553,S,w,_.width,_.height,0,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):i.texImage2D(3553,S,w,_.width,_.height,0,x,b,_.data);e.__maxMipLevel=M.length-1}else if(n.isDataTexture3D)i.texImage3D(32879,0,w,g.width,g.height,g.depth,0,x,b,g.data),e.__maxMipLevel=0;else if(M.length>0&&v){for(S=0,E=M.length;S<E;S++)_=M[S],i.texImage2D(3553,S,w,x,b,_);n.generateMipmaps=!1,e.__maxMipLevel=M.length-1}else i.texImage2D(3553,0,w,x,b,g),e.__maxMipLevel=0;u(n,v)&&p(3553,n,g.width,g.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}function b(e,r,o,s){var c=a.convert(r.texture.format),h=a.convert(r.texture.type),l=d(c,h);i.texImage2D(s,0,l,r.width,r.height,0,c,h,null),t.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,o,s,n.get(r.texture).__webglTexture,0),t.bindFramebuffer(36160,null)}function w(e,i){t.bindRenderbuffer(36161,e),i.depthBuffer&&!i.stencilBuffer?(t.renderbufferStorage(36161,33189,i.width,i.height),t.framebufferRenderbuffer(36160,36096,36161,e)):i.depthBuffer&&i.stencilBuffer?(t.renderbufferStorage(36161,34041,i.width,i.height),t.framebufferRenderbuffer(36160,33306,36161,e)):t.renderbufferStorage(36161,32854,i.width,i.height),t.bindRenderbuffer(36161,null)}function _(e){var i=n.get(e),r=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,i){if(i&&i.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,e),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),v(i.depthTexture,0);var r=n.get(i.depthTexture).__webglTexture;if(i.depthTexture.format===qt)t.framebufferTexture2D(36160,36096,3553,r,0);else{if(i.depthTexture.format!==Xt)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,r,0)}}(i.__webglFramebuffer,e)}else if(r){i.__webglDepthbuffer=[];for(var a=0;a<6;a++)t.bindFramebuffer(36160,i.__webglFramebuffer[a]),i.__webglDepthbuffer[a]=t.createRenderbuffer(),w(i.__webglDepthbuffer[a],e)}else t.bindFramebuffer(36160,i.__webglFramebuffer),i.__webglDepthbuffer=t.createRenderbuffer(),w(i.__webglDepthbuffer,e);t.bindFramebuffer(36160,null)}this.setTexture2D=v,this.setTexture3D=function(t,e){var r=n.get(t);t.version>0&&r.__version!==t.version?x(r,t,e):(i.activeTexture(33984+e),i.bindTexture(32879,r.__webglTexture))},this.setTextureCube=function(e,s){var c=n.get(e);if(6===e.image.length)if(e.version>0&&c.__version!==e.version){c.__image__webglTextureCube||(e.addEventListener("dispose",m),c.__image__webglTextureCube=t.createTexture(),o.memory.textures++),i.activeTexture(33984+s),i.bindTexture(34067,c.__image__webglTextureCube),t.pixelStorei(37440,e.flipY);for(var f=e&&e.isCompressedTexture,g=e.image[0]&&e.image[0].isDataTexture,v=[],x=0;x<6;x++)v[x]=f||g?g?e.image[x].image:e.image[x]:h(e.image[x],r.maxCubemapSize);var b=v[0],w=l(b),_=a.convert(e.format),M=a.convert(e.type),S=d(_,M);for(y(34067,e,w),x=0;x<6;x++)if(f)for(var E,T=v[x].mipmaps,L=0,A=T.length;L<A;L++)E=T[L],e.format!==Vt&&e.format!==kt?i.getCompressedTextureFormats().indexOf(_)>-1?i.compressedTexImage2D(34069+x,L,S,E.width,E.height,0,E.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):i.texImage2D(34069+x,L,S,E.width,E.height,0,_,M,E.data);else g?i.texImage2D(34069+x,0,S,v[x].width,v[x].height,0,_,M,v[x].data):i.texImage2D(34069+x,0,S,_,M,v[x]);c.__maxMipLevel=f?T.length-1:0,u(e,w)&&p(34067,e,b.width,b.height),c.__version=e.version,e.onUpdate&&e.onUpdate(e)}else i.activeTexture(33984+s),i.bindTexture(34067,c.__image__webglTextureCube)},this.setTextureCubeDynamic=function(t,e){i.activeTexture(33984+e),i.bindTexture(34067,n.get(t).__webglTexture)},this.setupRenderTarget=function(e){var r=n.get(e),a=n.get(e.texture);e.addEventListener("dispose",g),a.__webglTexture=t.createTexture(),o.memory.textures++;var s=!0===e.isWebGLRenderTargetCube,c=l(e);if(s){r.__webglFramebuffer=[];for(var h=0;h<6;h++)r.__webglFramebuffer[h]=t.createFramebuffer()}else r.__webglFramebuffer=t.createFramebuffer();if(s){for(i.bindTexture(34067,a.__webglTexture),y(34067,e.texture,c),h=0;h<6;h++)b(r.__webglFramebuffer[h],e,36064,34069+h);u(e.texture,c)&&p(34067,e.texture,e.width,e.height),i.bindTexture(34067,null)}else i.bindTexture(3553,a.__webglTexture),y(3553,e.texture,c),b(r.__webglFramebuffer,e,36064,3553),u(e.texture,c)&&p(3553,e.texture,e.width,e.height),i.bindTexture(3553,null);e.depthBuffer&&_(e)},this.updateRenderTargetMipmap=function(t){var e=t.texture;if(u(e,l(t))){var r=t.isWebGLRenderTargetCube?34067:3553,a=n.get(e).__webglTexture;i.bindTexture(r,a),p(r,e,t.width,t.height),i.bindTexture(r,null)}}}function Hr(t,e,i){return{convert:function(t){var n;if(t===bt)return 10497;if(t===wt)return 33071;if(t===_t)return 33648;if(t===Mt)return 9728;if(t===St)return 9984;if(t===Et)return 9986;if(t===Tt)return 9729;if(t===Lt)return 9985;if(t===At)return 9987;if(t===Pt)return 5121;if(t===Bt)return 32819;if(t===Ut)return 32820;if(t===Gt)return 33635;if(t===Ct)return 5120;if(t===Rt)return 5122;if(t===Ot)return 5123;if(t===It)return 5124;if(t===Dt)return 5125;if(t===Nt)return 5126;if(t===zt){if(i.isWebGL2)return 5131;if(null!==(n=e.get("OES_texture_half_float")))return n.HALF_FLOAT_OES}if(t===Ht)return 6406;if(t===kt)return 6407;if(t===Vt)return 6408;if(t===jt)return 6409;if(t===Wt)return 6410;if(t===qt)return 6402;if(t===Xt)return 34041;if(t===Yt)return 6403;if(t===D)return 32774;if(t===N)return 32778;if(t===z)return 32779;if(t===G)return 0;if(t===F)return 1;if(t===H)return 768;if(t===k)return 769;if(t===V)return 770;if(t===j)return 771;if(t===W)return 772;if(t===q)return 773;if(t===X)return 774;if(t===Y)return 775;if(t===J)return 776;if((t===Jt||t===Zt||t===Qt||t===Kt)&&null!==(n=e.get("WEBGL_compressed_texture_s3tc"))){if(t===Jt)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===Zt)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===Qt)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===Kt)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===$t||t===te||t===ee||t===ie)&&null!==(n=e.get("WEBGL_compressed_texture_pvrtc"))){if(t===$t)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===te)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ee)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===ie)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===ne&&null!==(n=e.get("WEBGL_compressed_texture_etc1")))return n.COMPRESSED_RGB_ETC1_WEBGL;if((t===re||t===ae||t===oe||t===se||t===ce||t===he||t===le||t===ue||t===pe||t===de||t===fe||t===me||t===ge||t===ve)&&null!==(n=e.get("WEBGL_compressed_texture_astc")))return t;if(t===B||t===U){if(i.isWebGL2){if(t===B)return 32775;if(t===U)return 32776}if(null!==(n=e.get("EXT_blend_minmax"))){if(t===B)return n.MIN_EXT;if(t===U)return n.MAX_EXT}}if(t===Ft){if(i.isWebGL2)return 34042;if(null!==(n=e.get("WEBGL_depth_texture")))return n.UNSIGNED_INT_24_8_WEBGL}return 0}}}function kr(){Mi.call(this),this.type="Group"}function Vr(){Mi.call(this),this.type="Camera",this.matrixWorldInverse=new ze,this.projectionMatrix=new ze,this.projectionMatrixInverse=new ze}function jr(t,e,i,n){Vr.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==i?i:.1,this.far=void 0!==n?n:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function Wr(t){jr.call(this),this.cameras=t||[]}zr.prototype=Object.create(on.prototype),zr.prototype.constructor=zr,zr.prototype.isMeshDepthMaterial=!0,zr.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},Br.prototype=Object.create(on.prototype),Br.prototype.constructor=Br,Br.prototype.isMeshDistanceMaterial=!0,Br.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this},kr.prototype=Object.assign(Object.create(Mi.prototype),{constructor:kr,isGroup:!0}),Vr.prototype=Object.assign(Object.create(Mi.prototype),{constructor:Vr,isCamera:!0,copy:function(t,e){return Mi.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new Ue),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){Mi.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),jr.prototype=Object.assign(Object.create(Vr.prototype),{constructor:jr,isPerspectiveCamera:!0,copy:function(t,e){return Vr.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*De.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*De.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*De.RAD2DEG*Math.atan(Math.tan(.5*De.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,i,n,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*De.DEG2RAD*this.fov)/this.zoom,i=2*e,n=this.aspect*i,r=-.5*n,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,s=a.fullHeight;r+=a.offsetX*n/o,e-=a.offsetY*i/s,n*=a.width/o,i*=a.height/s}var c=this.filmOffset;0!==c&&(r+=t*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+n,e,e-i,t,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Mi.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}),Wr.prototype=Object.assign(Object.create(jr.prototype),{constructor:Wr,isArrayCamera:!0});var qr,Xr,Yr,Jr,Zr,Qr,Kr=new Ue,$r=new Ue;function ta(t,e,i){Kr.setFromMatrixPosition(e.matrixWorld),$r.setFromMatrixPosition(i.matrixWorld);var n=Kr.distanceTo($r),r=e.projectionMatrix.elements,a=i.projectionMatrix.elements,o=r[14]/(r[10]-1),s=r[14]/(r[10]+1),c=(r[9]+1)/r[5],h=(r[9]-1)/r[5],l=(r[8]-1)/r[0],u=(a[8]+1)/a[0],p=o*l,d=o*u,f=n/(-l+u),m=f*-l;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.getInverse(t.matrixWorld);var g=o+f,v=s+f,y=p-m,x=d+(n-m),b=c*s/v*g,w=h*s/v*g;t.projectionMatrix.makePerspective(y,x,b,w,g,v)}function ea(t){var e=this,i=null,n=null,r=null,a=[],o=new ze,s=new ze,c=1,h="stage";"undefined"!=typeof window&&"VRFrameData"in window&&(n=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",x,!1));var l=new ze,u=new Be,p=new Ue,d=new jr;d.bounds=new Ye(0,0,.5,1),d.layers.enable(1);var f=new jr;f.bounds=new Ye(.5,0,.5,1),f.layers.enable(2);var m,g,v=new Wr([d,f]);function y(){return null!==i&&!0===i.isPresenting}function x(){if(y()){var n=i.getEyeParameters("left"),r=n.renderWidth*c,a=n.renderHeight*c;g=t.getPixelRatio(),m=t.getSize(),t.setDrawingBufferSize(2*r,a,1),_.start()}else e.enabled&&t.setDrawingBufferSize(m.width,m.height,g),_.stop()}v.layers.enable(1),v.layers.enable(2);var b=[];function w(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),i=0,n=0,r=e.length;i<r;i++){var a=e[i];if(a&&("Daydream Controller"===a.id||"Gear VR Controller"===a.id||"Oculus Go Controller"===a.id||"OpenVR Gamepad"===a.id||a.id.startsWith("Oculus Touch")||a.id.startsWith("Spatial Controller"))){if(n===t)return a;n++}}}this.enabled=!1,this.getController=function(t){var e=a[t];return void 0===e&&((e=new kr).matrixAutoUpdate=!1,e.visible=!1,a[t]=e),e},this.getDevice=function(){return i},this.setDevice=function(t){void 0!==t&&(i=t),_.setContext(t)},this.setFramebufferScaleFactor=function(t){c=t},this.setFrameOfReferenceType=function(t){h=t},this.setPoseTarget=function(t){void 0!==t&&(r=t)},this.getCamera=function(t){var e="stage"===h?1.6:0;if(null===i)return t.position.set(0,e,0),t;if(i.depthNear=t.near,i.depthFar=t.far,i.getFrameData(n),"stage"===h){var c=i.stageParameters;c?o.fromArray(c.sittingToStandingTransform):o.makeTranslation(0,e,0)}var m=n.pose,g=null!==r?r:t;if(g.matrix.copy(o),g.matrix.decompose(g.position,g.quaternion,g.scale),null!==m.orientation&&(u.fromArray(m.orientation),g.quaternion.multiply(u)),null!==m.position&&(u.setFromRotationMatrix(o),p.fromArray(m.position),p.applyQuaternion(u),g.position.add(p)),g.updateMatrixWorld(),!1===i.isPresenting)return t;d.near=t.near,f.near=t.near,d.far=t.far,f.far=t.far,d.matrixWorldInverse.fromArray(n.leftViewMatrix),f.matrixWorldInverse.fromArray(n.rightViewMatrix),s.getInverse(o),"stage"===h&&(d.matrixWorldInverse.multiply(s),f.matrixWorldInverse.multiply(s));var y=g.parent;null!==y&&(l.getInverse(y.matrixWorld),d.matrixWorldInverse.multiply(l),f.matrixWorldInverse.multiply(l)),d.matrixWorld.getInverse(d.matrixWorldInverse),f.matrixWorld.getInverse(f.matrixWorldInverse),d.projectionMatrix.fromArray(n.leftProjectionMatrix),f.projectionMatrix.fromArray(n.rightProjectionMatrix),ta(v,d,f);var x=i.getLayers();if(x.length){var _=x[0];null!==_.leftBounds&&4===_.leftBounds.length&&d.bounds.fromArray(_.leftBounds),null!==_.rightBounds&&4===_.rightBounds.length&&f.bounds.fromArray(_.rightBounds)}return function(){for(var t=0;t<a.length;t++){var e=a[t],i=w(t);if(void 0!==i&&void 0!==i.pose){if(null===i.pose)return;var n=i.pose;!1===n.hasPosition&&e.position.set(.2,-.6,-.05),null!==n.position&&e.position.fromArray(n.position),null!==n.orientation&&e.quaternion.fromArray(n.orientation),e.matrix.compose(e.position,e.quaternion,e.scale),e.matrix.premultiply(o),e.matrix.decompose(e.position,e.quaternion,e.scale),e.matrixWorldNeedsUpdate=!0,e.visible=!0;var r="Daydream Controller"===i.id?0:1;b[t]!==i.buttons[r].pressed&&(b[t]=i.buttons[r].pressed,!0===b[t]?e.dispatchEvent({type:"selectstart"}):(e.dispatchEvent({type:"selectend"}),e.dispatchEvent({type:"select"})))}else e.visible=!1}}(),v},this.getStandingMatrix=function(){return o},this.isPresenting=y;var _=new di;this.setAnimationLoop=function(t){_.setAnimationLoop(t)},this.submitFrame=function(){y()&&i.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",x)}}function ia(t){var e=t.context,i=null,n=null,r=1,a=null,o="stage",s=null,c=[],h=[];function l(){return null!==n&&null!==a}var u=new jr;u.layers.enable(1),u.viewport=new Ye;var p=new jr;p.layers.enable(2),p.viewport=new Ye;var d=new Wr([u,p]);function f(t){var e=c[h.indexOf(t.inputSource)];e&&e.dispatchEvent({type:t.type})}function m(){t.setFramebuffer(null),y.stop()}function g(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}d.layers.enable(1),d.layers.enable(2),this.enabled=!1,this.getController=function(t){var e=c[t];return void 0===e&&((e=new kr).matrixAutoUpdate=!1,e.visible=!1,c[t]=e),e},this.getDevice=function(){return i},this.setDevice=function(t){void 0!==t&&(i=t),t instanceof XRDevice&&e.setCompatibleXRDevice(t)},this.setFramebufferScaleFactor=function(t){r=t},this.setFrameOfReferenceType=function(t){o=t},this.setSession=function(i){null!==(n=i)&&(n.addEventListener("select",f),n.addEventListener("selectstart",f),n.addEventListener("selectend",f),n.addEventListener("end",m),n.baseLayer=new XRWebGLLayer(n,e,{framebufferScaleFactor:r}),n.requestFrameOfReference(o).then(function(e){a=e,t.setFramebuffer(n.baseLayer.framebuffer),y.setContext(n),y.start()}),h=n.getInputSources(),n.addEventListener("inputsourceschange",function(){h=n.getInputSources(),console.log(h);for(var t=0;t<c.length;t++){c[t].userData.inputSource=h[t]}}))},this.getCamera=function(t){if(l()){var e=t.parent,i=d.cameras;g(d,e);for(var n=0;n<i.length;n++)g(i[n],e);t.matrixWorld.copy(d.matrixWorld);for(var r=t.children,a=(n=0,r.length);n<a;n++)r[n].updateMatrixWorld(!0);return ta(d,u,p),d}return t},this.isPresenting=l;var v=null;var y=new di;y.setAnimationLoop(function(t,e){if(null!==(s=e.getDevicePose(a)))for(var i=n.baseLayer,r=e.views,o=0;o<r.length;o++){var l=r[o],u=i.getViewport(l),p=s.getViewMatrix(l),f=d.cameras[o];f.matrix.fromArray(p).getInverse(f.matrix),f.projectionMatrix.fromArray(l.projectionMatrix),f.viewport.set(u.x,u.y,u.width,u.height),0===o&&d.matrix.copy(f.matrix)}for(o=0;o<c.length;o++){var m=c[o],g=h[o];if(g){var y=e.getInputPose(g,a);if(null!==y){"targetRay"in y?m.matrix.elements=y.targetRay.transformMatrix:"pointerMatrix"in y&&(m.matrix.elements=y.pointerMatrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.visible=!0;continue}}m.visible=!1}v&&v(t)}),this.setAnimationLoop=function(t){v=t},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new THREE.Matrix4},this.submitFrame=function(){}}function na(t){console.log("THREE.WebGLRenderer",g);var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),i=void 0!==t.context?t.context:null,n=void 0!==t.alpha&&t.alpha,r=void 0===t.depth||t.depth,a=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,s=void 0===t.premultipliedAlpha||t.premultipliedAlpha,c=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,h=void 0!==t.powerPreference?t.powerPreference:"default",l=null,u=null;this.domElement=e,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=ct,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var p,d,f,m,v,y,x,b,w,_,S,E,T,L,A,P,C,R,O=this,I=!1,D=null,N=null,z=null,B=-1,U={geometry:null,program:null,wireframe:!1},G=null,F=null,H=new Ye,k=new Ye,V=null,j=0,W=e.width,q=e.height,X=1,Y=new Ye(0,0,W,q),J=new Ye(0,0,W,q),Z=!1,Q=new ei,K=new mn,$=!1,tt=!1,et=new ze,it=new Ue;function nt(){return null===N?X:1}try{var rt={alpha:n,depth:r,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:c,powerPreference:h};if(e.addEventListener("webglcontextlost",ht,!1),e.addEventListener("webglcontextrestored",lt,!1),null===(p=i||e.getContext("webgl",rt)||e.getContext("experimental-webgl",rt)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===p.getShaderPrecisionFormat&&(p.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){console.error("THREE.WebGLRenderer: "+t.message)}function at(){d=new gn(p),(f=new fn(p,d,t)).isWebGL2||(d.get("WEBGL_depth_texture"),d.get("OES_texture_float"),d.get("OES_texture_half_float"),d.get("OES_texture_half_float_linear"),d.get("OES_standard_derivatives"),d.get("OES_element_index_uint"),d.get("ANGLE_instanced_arrays")),d.get("OES_texture_float_linear"),R=new Hr(p,d,f),(m=new Gr(p,d,R,f)).scissor(k.copy(J).multiplyScalar(X)),m.viewport(H.copy(Y).multiplyScalar(X)),v=new xn(p),y=new Tr,x=new Fr(p,d,m,y,f,R,v),b=new fi(p),w=new vn(p,b,v),_=new _n(w,v),A=new wn(p),S=new Er(O,d,f),E=new Cr,T=new Nr,L=new pn(O,m,_,s),P=new dn(p,d,v,f),C=new yn(p,d,v,f),v.programs=S.programs,O.context=p,O.capabilities=f,O.extensions=d,O.properties=y,O.renderLists=E,O.state=m,O.info=v}at();var ot=null;"undefined"!=typeof navigator&&(ot="xr"in navigator?new ia(O):new ea(O)),this.vr=ot;var st=new Ur(O,_,f.maxTextureSize);function ht(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),I=!0}function lt(){console.log("THREE.WebGLRenderer: Context Restored."),I=!1,at()}function ut(t){var e=t.target;e.removeEventListener("dispose",ut),function(t){pt(t),y.remove(t)}(e)}function pt(t){var e=y.get(t).program;t.program=void 0,void 0!==e&&S.releaseProgram(e)}this.shadowMap=st,this.getContext=function(){return p},this.getContextAttributes=function(){return p.getContextAttributes()},this.forceContextLoss=function(){var t=d.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=d.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return X},this.setPixelRatio=function(t){void 0!==t&&(X=t,this.setSize(W,q,!1))},this.getSize=function(){return{width:W,height:q}},this.setSize=function(t,i,n){ot.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(W=t,q=i,e.width=t*X,e.height=i*X,!1!==n&&(e.style.width=t+"px",e.style.height=i+"px"),this.setViewport(0,0,t,i))},this.getDrawingBufferSize=function(){return{width:W*X,height:q*X}},this.setDrawingBufferSize=function(t,i,n){W=t,q=i,X=n,e.width=t*n,e.height=i*n,this.setViewport(0,0,t,i)},this.getCurrentViewport=function(){return H},this.setViewport=function(t,e,i,n){Y.set(t,q-e-n,i,n),m.viewport(H.copy(Y).multiplyScalar(X))},this.setScissor=function(t,e,i,n){J.set(t,q-e-n,i,n),m.scissor(k.copy(J).multiplyScalar(X))},this.setScissorTest=function(t){m.setScissorTest(Z=t)},this.getClearColor=function(){return L.getClearColor()},this.setClearColor=function(){L.setClearColor.apply(L,arguments)},this.getClearAlpha=function(){return L.getClearAlpha()},this.setClearAlpha=function(){L.setClearAlpha.apply(L,arguments)},this.clear=function(t,e,i){var n=0;(void 0===t||t)&&(n|=16384),(void 0===e||e)&&(n|=256),(void 0===i||i)&&(n|=1024),p.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",ht,!1),e.removeEventListener("webglcontextrestored",lt,!1),E.dispose(),T.dispose(),y.dispose(),_.dispose(),ot.dispose(),mt.stop()},this.renderBufferImmediate=function(t,e){m.initAttributes();var i=y.get(t);t.hasPositions&&!i.position&&(i.position=p.createBuffer()),t.hasNormals&&!i.normal&&(i.normal=p.createBuffer()),t.hasUvs&&!i.uv&&(i.uv=p.createBuffer()),t.hasColors&&!i.color&&(i.color=p.createBuffer());var n=e.getAttributes();t.hasPositions&&(p.bindBuffer(34962,i.position),p.bufferData(34962,t.positionArray,35048),m.enableAttribute(n.position),p.vertexAttribPointer(n.position,3,5126,!1,0,0)),t.hasNormals&&(p.bindBuffer(34962,i.normal),p.bufferData(34962,t.normalArray,35048),m.enableAttribute(n.normal),p.vertexAttribPointer(n.normal,3,5126,!1,0,0)),t.hasUvs&&(p.bindBuffer(34962,i.uv),p.bufferData(34962,t.uvArray,35048),m.enableAttribute(n.uv),p.vertexAttribPointer(n.uv,2,5126,!1,0,0)),t.hasColors&&(p.bindBuffer(34962,i.color),p.bufferData(34962,t.colorArray,35048),m.enableAttribute(n.color),p.vertexAttribPointer(n.color,3,5126,!1,0,0)),m.disableUnusedAttributes(),p.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,i,n,r,a){var o=r.isMesh&&r.normalMatrix.determinant()<0;m.setMaterial(n,o);var s=xt(t,e,n,r),c=!1;U.geometry===i.id&&U.program===s.id&&U.wireframe===(!0===n.wireframe)||(U.geometry=i.id,U.program=s.id,U.wireframe=!0===n.wireframe,c=!0),r.morphTargetInfluences&&(A.update(r,i,n,s),c=!0);var h,l=i.index,u=i.attributes.position,g=1;!0===n.wireframe&&(l=w.getWireframeAttribute(i),g=2);var v=P;null!==l&&(h=b.get(l),(v=C).setIndex(h)),c&&(!function(t,e,i){if(i&&i.isInstancedBufferGeometry&!f.isWebGL2&&null===d.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");m.initAttributes();var n=i.attributes,r=e.getAttributes(),a=t.defaultAttributeValues;for(var o in r){var s=r[o];if(s>=0){var c=n[o];if(void 0!==c){var h=c.normalized,l=c.itemSize,u=b.get(c);if(void 0===u)continue;var g=u.buffer,v=u.type,y=u.bytesPerElement;if(c.isInterleavedBufferAttribute){var x=c.data,w=x.stride,_=c.offset;x&&x.isInstancedInterleavedBuffer?(m.enableAttributeAndDivisor(s,x.meshPerAttribute),void 0===i.maxInstancedCount&&(i.maxInstancedCount=x.meshPerAttribute*x.count)):m.enableAttribute(s),p.bindBuffer(34962,g),p.vertexAttribPointer(s,l,v,h,w*y,_*y)}else c.isInstancedBufferAttribute?(m.enableAttributeAndDivisor(s,c.meshPerAttribute),void 0===i.maxInstancedCount&&(i.maxInstancedCount=c.meshPerAttribute*c.count)):m.enableAttribute(s),p.bindBuffer(34962,g),p.vertexAttribPointer(s,l,v,h,0,0)}else if(void 0!==a){var M=a[o];if(void 0!==M)switch(M.length){case 2:p.vertexAttrib2fv(s,M);break;case 3:p.vertexAttrib3fv(s,M);break;case 4:p.vertexAttrib4fv(s,M);break;default:p.vertexAttrib1fv(s,M)}}}}m.disableUnusedAttributes()}(n,s,i),null!==l&&p.bindBuffer(34963,h.buffer));var y=1/0;null!==l?y=l.count:void 0!==u&&(y=u.count);var x=i.drawRange.start*g,_=i.drawRange.count*g,M=null!==a?a.start*g:0,S=null!==a?a.count*g:1/0,E=Math.max(x,M),T=Math.min(y,x+_,M+S)-1,L=Math.max(0,T-E+1);if(0!==L){if(r.isMesh)if(!0===n.wireframe)m.setLineWidth(n.wireframeLinewidth*nt()),v.setMode(1);else switch(r.drawMode){case be:v.setMode(4);break;case we:v.setMode(5);break;case _e:v.setMode(6)}else if(r.isLine){var R=n.linewidth;void 0===R&&(R=1),m.setLineWidth(R*nt()),r.isLineSegments?v.setMode(1):r.isLineLoop?v.setMode(2):v.setMode(3)}else r.isPoints?v.setMode(0):r.isSprite&&v.setMode(4);i&&i.isInstancedBufferGeometry?i.maxInstancedCount>0&&v.renderInstances(i,E,L):v.render(E,L)}},this.compile=function(t,e){(u=T.get(t,e)).init(),t.traverse(function(t){t.isLight&&(u.pushLight(t),t.castShadow&&u.pushShadow(t))}),u.setupLights(e),t.traverse(function(e){if(e.material)if(Array.isArray(e.material))for(var i=0;i<e.material.length;i++)yt(e.material[i],t.fog,e);else yt(e.material,t.fog,e)})};var dt=null;var ft,mt=new di;function gt(t,e,i,n){for(var r=0,a=t.length;r<a;r++){var o=t[r],s=o.object,c=o.geometry,h=void 0===n?o.material:n,l=o.group;if(i.isArrayCamera){F=i;for(var p=i.cameras,d=0,f=p.length;d<f;d++){var g=p[d];if(s.layers.test(g.layers)){if("viewport"in g)m.viewport(H.copy(g.viewport));else{var v=g.bounds,y=v.x*W,x=v.y*q,b=v.z*W,w=v.w*q;m.viewport(H.set(y,x,b,w).multiplyScalar(X))}u.setupLights(g),vt(s,e,g,c,h,l)}}}else F=null,vt(s,e,i,c,h,l)}}function vt(t,e,i,n,r,a){if(t.onBeforeRender(O,e,i,n,r,a),u=T.get(e,F||i),t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){m.setMaterial(r);var o=xt(i,e.fog,r,t);U.geometry=null,U.program=null,U.wireframe=!1,function(t,e){t.render(function(t){O.renderBufferImmediate(t,e)})}(t,o)}else O.renderBufferDirect(i,e.fog,n,r,t,a);t.onAfterRender(O,e,i,n,r,a),u=T.get(e,F||i)}function yt(t,e,i){var n=y.get(t),r=u.state.lights,a=u.state.shadowsArray,o=n.lightsHash,s=r.state.hash,c=S.getParameters(t,r.state,a,e,K.numPlanes,K.numIntersection,i),h=S.getProgramCode(t,c),l=n.program,p=!0;if(void 0===l)t.addEventListener("dispose",ut);else if(l.code!==h)pt(t);else if(o.stateID!==s.stateID||o.directionalLength!==s.directionalLength||o.pointLength!==s.pointLength||o.spotLength!==s.spotLength||o.rectAreaLength!==s.rectAreaLength||o.hemiLength!==s.hemiLength||o.shadowsLength!==s.shadowsLength)o.stateID=s.stateID,o.directionalLength=s.directionalLength,o.pointLength=s.pointLength,o.spotLength=s.spotLength,o.rectAreaLength=s.rectAreaLength,o.hemiLength=s.hemiLength,o.shadowsLength=s.shadowsLength,p=!1;else{if(void 0!==c.shaderID)return;p=!1}if(p){if(c.shaderID){var d=pi[c.shaderID];n.shader={name:t.type,uniforms:ni(d.uniforms),vertexShader:d.vertexShader,fragmentShader:d.fragmentShader}}else n.shader={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};t.onBeforeCompile(n.shader,O),h=S.getProgramCode(t,c),l=S.acquireProgram(t,n.shader,c,h),n.program=l,t.program=l}var f=l.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var m=0;m<O.maxMorphTargets;m++)f["morphTarget"+m]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(m=0;m<O.maxMorphNormals;m++)f["morphNormal"+m]>=0&&t.numSupportedMorphNormals++}var g=n.shader.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(n.numClippingPlanes=K.numPlanes,n.numIntersection=K.numIntersection,g.clippingPlanes=K.uniform),n.fog=e,void 0===o&&(n.lightsHash=o={}),o.stateID=s.stateID,o.directionalLength=s.directionalLength,o.pointLength=s.pointLength,o.spotLength=s.spotLength,o.rectAreaLength=s.rectAreaLength,o.hemiLength=s.hemiLength,o.shadowsLength=s.shadowsLength,t.lights&&(g.ambientLightColor.value=r.state.ambient,g.directionalLights.value=r.state.directional,g.spotLights.value=r.state.spot,g.rectAreaLights.value=r.state.rectArea,g.pointLights.value=r.state.point,g.hemisphereLights.value=r.state.hemi,g.directionalShadowMap.value=r.state.directionalShadowMap,g.directionalShadowMatrix.value=r.state.directionalShadowMatrix,g.spotShadowMap.value=r.state.spotShadowMap,g.spotShadowMatrix.value=r.state.spotShadowMatrix,g.pointShadowMap.value=r.state.pointShadowMap,g.pointShadowMatrix.value=r.state.pointShadowMatrix);var v=n.program.getUniforms(),x=fr.seqWithValue(v.seq,g);n.uniformsList=x}function xt(t,e,i,n){j=0;var r=y.get(i),a=u.state.lights,o=r.lightsHash,s=a.state.hash;if($&&(tt||t!==G)){var c=t===G&&i.id===B;K.setState(i.clippingPlanes,i.clipIntersection,i.clipShadows,t,r,c)}!1===i.needsUpdate&&(void 0===r.program?i.needsUpdate=!0:i.fog&&r.fog!==e?i.needsUpdate=!0:(!i.lights||o.stateID===s.stateID&&o.directionalLength===s.directionalLength&&o.pointLength===s.pointLength&&o.spotLength===s.spotLength&&o.rectAreaLength===s.rectAreaLength&&o.hemiLength===s.hemiLength&&o.shadowsLength===s.shadowsLength)&&(void 0===r.numClippingPlanes||r.numClippingPlanes===K.numPlanes&&r.numIntersection===K.numIntersection)||(i.needsUpdate=!0)),i.needsUpdate&&(yt(i,e,n),i.needsUpdate=!1);var h,l,d=!1,g=!1,v=!1,x=r.program,b=x.getUniforms(),w=r.shader.uniforms;if(m.useProgram(x.program)&&(d=!0,g=!0,v=!0),i.id!==B&&(B=i.id,g=!0),d||G!==t){if(b.setValue(p,"projectionMatrix",t.projectionMatrix),f.logarithmicDepthBuffer&&b.setValue(p,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),G!==t&&(G=t,g=!0,v=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshStandardMaterial||i.envMap){var _=b.map.cameraPosition;void 0!==_&&_.setValue(p,it.setFromMatrixPosition(t.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.skinning)&&b.setValue(p,"viewMatrix",t.matrixWorldInverse)}if(i.skinning){b.setOptional(p,n,"bindMatrix"),b.setOptional(p,n,"bindMatrixInverse");var S=n.skeleton;if(S){var E=S.bones;if(f.floatVertexTextures){if(void 0===S.boneTexture){var T=Math.sqrt(4*E.length);T=De.ceilPowerOfTwo(T),T=Math.max(T,4);var L=new Float32Array(T*T*4);L.set(S.boneMatrices);var A=new Qe(L,T,T,Vt,Nt);A.needsUpdate=!0,S.boneMatrices=L,S.boneTexture=A,S.boneTextureSize=T}b.setValue(p,"boneTexture",S.boneTexture),b.setValue(p,"boneTextureSize",S.boneTextureSize)}else b.setOptional(p,S,"boneMatrices")}}return g&&(b.setValue(p,"toneMappingExposure",O.toneMappingExposure),b.setValue(p,"toneMappingWhitePoint",O.toneMappingWhitePoint),i.lights&&(l=v,(h=w).ambientLightColor.needsUpdate=l,h.directionalLights.needsUpdate=l,h.pointLights.needsUpdate=l,h.spotLights.needsUpdate=l,h.rectAreaLights.needsUpdate=l,h.hemisphereLights.needsUpdate=l),e&&i.fog&&function(t,e){t.fogColor.value=e.color,e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(w,e),i.isMeshBasicMaterial?bt(w,i):i.isMeshLambertMaterial?(bt(w,i),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(w,i)):i.isMeshPhongMaterial?(bt(w,i),i.isMeshToonMaterial?function(t,e){wt(t,e),e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(w,i):wt(w,i)):i.isMeshStandardMaterial?(bt(w,i),i.isMeshPhysicalMaterial?function(t,e){_t(t,e),t.reflectivity.value=e.reflectivity,t.clearCoat.value=e.clearCoat,t.clearCoatRoughness.value=e.clearCoatRoughness}(w,i):_t(w,i)):i.isMeshMatcapMaterial?(bt(w,i),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===M&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===M&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshDepthMaterial?(bt(w,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshDistanceMaterial?(bt(w,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(w,i)):i.isMeshNormalMaterial?(bt(w,i),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===M&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===M&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isLineBasicMaterial?(function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity}(w,i),i.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(w,i)):i.isPointsMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.size.value=e.size*X,t.scale.value=.5*q,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(w,i):i.isSpriteMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.rotation.value=e.rotation,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(w,i):i.isShadowMaterial&&(w.color.value=i.color,w.opacity.value=i.opacity),void 0!==w.ltc_1&&(w.ltc_1.value=ui.LTC_1),void 0!==w.ltc_2&&(w.ltc_2.value=ui.LTC_2),fr.upload(p,r.uniformsList,w,O)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(fr.upload(p,r.uniformsList,w,O),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&b.setValue(p,"center",n.center),b.setValue(p,"modelViewMatrix",n.modelViewMatrix),b.setValue(p,"normalMatrix",n.normalMatrix),b.setValue(p,"modelMatrix",n.matrixWorld),x}function bt(t,e){var i;t.opacity.value=e.opacity,e.color&&(t.diffuse.value=e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap),e.envMap&&(t.envMap.value=e.envMap,t.flipEnvMap.value=e.envMap.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=y.get(e.envMap).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?i=e.map:e.specularMap?i=e.specularMap:e.displacementMap?i=e.displacementMap:e.normalMap?i=e.normalMap:e.bumpMap?i=e.bumpMap:e.roughnessMap?i=e.roughnessMap:e.metalnessMap?i=e.metalnessMap:e.alphaMap?i=e.alphaMap:e.emissiveMap&&(i=e.emissiveMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}function wt(t,e){t.specular.value=e.specular,t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===M&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===M&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}function _t(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===M&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===M&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}mt.setAnimationLoop(function(t){ot.isPresenting()||dt&&dt(t)}),"undefined"!=typeof window&&mt.setContext(window),this.setAnimationLoop=function(t){dt=t,ot.setAnimationLoop(t),mt.start()},this.render=function(t,e,i,n){if(e&&e.isCamera){if(!I){U.geometry=null,U.program=null,U.wireframe=!1,B=-1,G=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),ot.enabled&&(e=ot.getCamera(e)),(u=T.get(t,e)).init(),t.onBeforeRender(O,t,e,i),et.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),Q.setFromMatrix(et),tt=this.localClippingEnabled,$=K.init(this.clippingPlanes,tt,e),(l=E.get(t,e)).init(),function t(e,i,n){if(!1===e.visible)return;var r=e.layers.test(i.layers);if(r)if(e.isLight)u.pushLight(e),e.castShadow&&u.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||Q.intersectsSprite(e)){n&&it.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et);var a=_.update(e),o=e.material;l.push(e,a,o,it.z,null)}}else if(e.isImmediateRenderObject)n&&it.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et),l.push(e,null,e.material,it.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.update(),!e.frustumCulled||Q.intersectsObject(e))){n&&it.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et);var a=_.update(e),o=e.material;if(Array.isArray(o))for(var s=a.groups,c=0,h=s.length;c<h;c++){var p=s[c],d=o[p.materialIndex];d&&d.visible&&l.push(e,a,d,it.z,p)}else o.visible&&l.push(e,a,o,it.z,null)}var f=e.children;for(var c=0,h=f.length;c<h;c++)t(f[c],i,n)}(t,e,O.sortObjects),!0===O.sortObjects&&l.sort(),$&&K.beginShadows();var r=u.state.shadowsArray;st.render(r,t,e),u.setupLights(e),$&&K.endShadows(),this.info.autoReset&&this.info.reset(),void 0===i&&(i=null),this.setRenderTarget(i),L.render(l,t,e,n);var a=l.opaque,o=l.transparent;if(t.overrideMaterial){var s=t.overrideMaterial;a.length&&gt(a,t,e,s),o.length&&gt(o,t,e,s)}else a.length&&gt(a,t,e),o.length&&gt(o,t,e);i&&x.updateRenderTargetMipmap(i),m.buffers.depth.setTest(!0),m.buffers.depth.setMask(!0),m.buffers.color.setMask(!0),m.setPolygonOffset(!1),t.onAfterRender(O,t,e),ot.enabled&&ot.submitFrame(),l=null,u=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.allocTextureUnit=function(){var t=j;return t>=f.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+t+" texture units while this GPU supports only "+f.maxTextures),j+=1,t},this.setTexture2D=(ft=!1,function(t,e){t&&t.isWebGLRenderTarget&&(ft||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),ft=!0),t=t.texture),x.setTexture2D(t,e)}),this.setTexture3D=function(t,e){x.setTexture3D(t,e)},this.setTexture=function(){var t=!1;return function(e,i){t||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),t=!0),x.setTexture2D(e,i)}}(),this.setTextureCube=function(){var t=!1;return function(e,i){e&&e.isWebGLRenderTargetCube&&(t||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),t=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?x.setTextureCube(e,i):x.setTextureCubeDynamic(e,i)}}(),this.setFramebuffer=function(t){D=t},this.getRenderTarget=function(){return N},this.setRenderTarget=function(t){N=t,t&&void 0===y.get(t).__webglFramebuffer&&x.setupRenderTarget(t);var e=D,i=!1;if(t){var n=y.get(t).__webglFramebuffer;t.isWebGLRenderTargetCube?(e=n[t.activeCubeFace],i=!0):e=n,H.copy(t.viewport),k.copy(t.scissor),V=t.scissorTest}else H.copy(Y).multiplyScalar(X),k.copy(J).multiplyScalar(X),V=Z;if(z!==e&&(p.bindFramebuffer(36160,e),z=e),m.viewport(H),m.scissor(k),m.setScissorTest(V),i){var r=y.get(t.texture);p.framebufferTexture2D(36160,36064,34069+t.activeCubeFace,r.__webglTexture,t.activeMipMapLevel)}},this.readRenderTargetPixels=function(t,e,i,n,r,a){if(t&&t.isWebGLRenderTarget){var o=y.get(t).__webglFramebuffer;if(o){var s=!1;o!==z&&(p.bindFramebuffer(36160,o),s=!0);try{var c=t.texture,h=c.format,l=c.type;if(h!==Vt&&R.convert(h)!==p.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(l===Pt||R.convert(l)===p.getParameter(35738)||l===Nt&&(f.isWebGL2||d.get("OES_texture_float")||d.get("WEBGL_color_buffer_float"))||l===zt&&(f.isWebGL2?d.get("EXT_color_buffer_float"):d.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===p.checkFramebufferStatus(36160)?e>=0&&e<=t.width-n&&i>=0&&i<=t.height-r&&p.readPixels(e,i,n,r,R.convert(h),R.convert(l),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{s&&p.bindFramebuffer(36160,z)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,i){var n=e.image.width,r=e.image.height,a=R.convert(e.format);this.setTexture2D(e,0),p.copyTexImage2D(3553,i||0,a,t.x,t.y,n,r,0)},this.copyTextureToTexture=function(t,e,i,n){var r=e.image.width,a=e.image.height,o=R.convert(i.format),s=R.convert(i.type);this.setTexture2D(i,0),e.isDataTexture?p.texSubImage2D(3553,n||0,t.x,t.y,r,a,o,s,e.image.data):p.texSubImage2D(3553,n||0,t.x,t.y,o,s,e.image)}}function ra(t,e){this.name="",this.color=new hi(t),this.density=void 0!==e?e:25e-5}function aa(t,e,i){this.name="",this.color=new hi(t),this.near=void 0!==e?e:1,this.far=void 0!==i?i:1e3}function oa(){Mi.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function sa(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function ca(t,e,i,n){this.data=t,this.itemSize=e,this.offset=i,this.normalized=!0===n}function ha(t){on.call(this),this.type="SpriteMaterial",this.color=new hi(16777215),this.map=null,this.rotation=0,this.sizeAttenuation=!0,this.lights=!1,this.transparent=!0,this.setValues(t)}function la(t){if(Mi.call(this),this.type="Sprite",void 0===qr){qr=new Hi;var e=new sa(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);qr.setIndex([0,1,2,0,2,3]),qr.addAttribute("position",new ca(e,3,0,!1)),qr.addAttribute("uv",new ca(e,2,3,!1))}this.geometry=qr,this.material=void 0!==t?t:new ha,this.center=new Ne(.5,.5)}function ua(){Mi.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function pa(t,e){t&&t.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),un.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new ze,this.bindMatrixInverse=new ze}function da(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var i=0,n=this.bones.length;i<n;i++)this.boneInverses.push(new ze)}}function fa(){Mi.call(this),this.type="Bone"}function ma(t){on.call(this),this.type="LineBasicMaterial",this.color=new hi(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(t)}function ga(t,e,i){1===i&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),Mi.call(this),this.type="Line",this.geometry=void 0!==t?t:new Hi,this.material=void 0!==e?e:new ma({color:16777215*Math.random()})}function va(t,e){ga.call(this,t,e),this.type="LineSegments"}function ya(t,e){ga.call(this,t,e),this.type="LineLoop"}function xa(t){on.call(this),this.type="PointsMaterial",this.color=new hi(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function ba(t,e){Mi.call(this),this.type="Points",this.geometry=void 0!==t?t:new Hi,this.material=void 0!==e?e:new xa({color:16777215*Math.random()})}function wa(t,e,i,n,r,a,o,s,c){Xe.call(this,t,e,i,n,r,a,o,s,c),this.format=void 0!==o?o:kt,this.minFilter=void 0!==a?a:Tt,this.magFilter=void 0!==r?r:Tt,this.generateMipmaps=!1}function _a(t,e,i,n,r,a,o,s,c,h,l,u){Xe.call(this,null,a,o,s,c,h,n,r,l,u),this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function Ma(t,e,i,n,r,a,o,s,c){Xe.call(this,t,e,i,n,r,a,o,s,c),this.needsUpdate=!0}function Sa(t,e,i,n,r,a,o,s,c,h){if((h=void 0!==h?h:qt)!==qt&&h!==Xt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&h===qt&&(i=Ot),void 0===i&&h===Xt&&(i=Ft),Xe.call(this,null,n,r,a,o,s,h,i,c),this.image={width:t,height:e},this.magFilter=void 0!==o?o:Mt,this.minFilter=void 0!==s?s:Mt,this.flipY=!1,this.generateMipmaps=!1}function Ea(t){Hi.call(this),this.type="WireframeGeometry";var e,i,n,r,a,o,s,c,h,l,u=[],p=[0,0],d={},f=["a","b","c"];if(t&&t.isGeometry){var m=t.faces;for(e=0,n=m.length;e<n;e++){var g=m[e];for(i=0;i<3;i++)s=g[f[i]],c=g[f[(i+1)%3]],p[0]=Math.min(s,c),p[1]=Math.max(s,c),void 0===d[h=p[0]+","+p[1]]&&(d[h]={index1:p[0],index2:p[1]})}for(h in d)o=d[h],l=t.vertices[o.index1],u.push(l.x,l.y,l.z),l=t.vertices[o.index2],u.push(l.x,l.y,l.z)}else if(t&&t.isBufferGeometry){var v,y,x,b,w,_,M;if(l=new Ue,null!==t.index){for(v=t.attributes.position,y=t.index,0===(x=t.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),r=0,a=x.length;r<a;++r)for(e=w=(b=x[r]).start,n=w+b.count;e<n;e+=3)for(i=0;i<3;i++)s=y.getX(e+i),c=y.getX(e+(i+1)%3),p[0]=Math.min(s,c),p[1]=Math.max(s,c),void 0===d[h=p[0]+","+p[1]]&&(d[h]={index1:p[0],index2:p[1]});for(h in d)o=d[h],l.fromBufferAttribute(v,o.index1),u.push(l.x,l.y,l.z),l.fromBufferAttribute(v,o.index2),u.push(l.x,l.y,l.z)}else for(e=0,n=(v=t.attributes.position).count/3;e<n;e++)for(i=0;i<3;i++)_=3*e+i,l.fromBufferAttribute(v,_),u.push(l.x,l.y,l.z),M=3*e+(i+1)%3,l.fromBufferAttribute(v,M),u.push(l.x,l.y,l.z)}this.addAttribute("position",new zi(u,3))}function Ta(t,e,i){Li.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:i},this.fromBufferGeometry(new La(t,e,i)),this.mergeVertices()}function La(t,e,i){Hi.call(this),this.type="ParametricBufferGeometry",this.parameters={func:t,slices:e,stacks:i};var n,r,a=[],o=[],s=[],c=[],h=new Ue,l=new Ue,u=new Ue,p=new Ue,d=new Ue;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var f=e+1;for(n=0;n<=i;n++){var m=n/i;for(r=0;r<=e;r++){var g=r/e;t(g,m,l),o.push(l.x,l.y,l.z),g-1e-5>=0?(t(g-1e-5,m,u),p.subVectors(l,u)):(t(g+1e-5,m,u),p.subVectors(u,l)),m-1e-5>=0?(t(g,m-1e-5,u),d.subVectors(l,u)):(t(g,m+1e-5,u),d.subVectors(u,l)),h.crossVectors(p,d).normalize(),s.push(h.x,h.y,h.z),c.push(g,m)}}for(n=0;n<i;n++)for(r=0;r<e;r++){var v=n*f+r,y=n*f+r+1,x=(n+1)*f+r+1,b=(n+1)*f+r;a.push(v,y,b),a.push(y,x,b)}this.setIndex(a),this.addAttribute("position",new zi(o,3)),this.addAttribute("normal",new zi(s,3)),this.addAttribute("uv",new zi(c,2))}function Aa(t,e,i,n){Li.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:n},this.fromBufferGeometry(new Pa(t,e,i,n)),this.mergeVertices()}function Pa(t,e,i,n){Hi.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:n},i=i||1;var r=[],a=[];function o(t,e,i,n){var r,a,o=Math.pow(2,n),c=[];for(r=0;r<=o;r++){c[r]=[];var h=t.clone().lerp(i,r/o),l=e.clone().lerp(i,r/o),u=o-r;for(a=0;a<=u;a++)c[r][a]=0===a&&r===o?h:h.clone().lerp(l,a/u)}for(r=0;r<o;r++)for(a=0;a<2*(o-r)-1;a++){var p=Math.floor(a/2);a%2==0?(s(c[r][p+1]),s(c[r+1][p]),s(c[r][p])):(s(c[r][p+1]),s(c[r+1][p+1]),s(c[r+1][p]))}}function s(t){r.push(t.x,t.y,t.z)}function c(e,i){var n=3*e;i.x=t[n+0],i.y=t[n+1],i.z=t[n+2]}function h(t,e,i,n){n<0&&1===t.x&&(a[e]=t.x-1),0===i.x&&0===i.z&&(a[e]=n/2/Math.PI+.5)}function l(t){return Math.atan2(t.z,-t.x)}!function(t){for(var i=new Ue,n=new Ue,r=new Ue,a=0;a<e.length;a+=3)c(e[a+0],i),c(e[a+1],n),c(e[a+2],r),o(i,n,r,t)}(n=n||0),function(t){for(var e=new Ue,i=0;i<r.length;i+=3)e.x=r[i+0],e.y=r[i+1],e.z=r[i+2],e.normalize().multiplyScalar(t),r[i+0]=e.x,r[i+1]=e.y,r[i+2]=e.z}(i),function(){for(var t=new Ue,e=0;e<r.length;e+=3){t.x=r[e+0],t.y=r[e+1],t.z=r[e+2];var i=l(t)/2/Math.PI+.5,n=(o=t,Math.atan2(-o.y,Math.sqrt(o.x*o.x+o.z*o.z))/Math.PI+.5);a.push(i,1-n)}var o;(function(){for(var t=new Ue,e=new Ue,i=new Ue,n=new Ue,o=new Ne,s=new Ne,c=new Ne,u=0,p=0;u<r.length;u+=9,p+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),i.set(r[u+6],r[u+7],r[u+8]),o.set(a[p+0],a[p+1]),s.set(a[p+2],a[p+3]),c.set(a[p+4],a[p+5]),n.copy(t).add(e).add(i).divideScalar(3);var d=l(n);h(o,p+0,t,d),h(s,p+2,e,d),h(c,p+4,i,d)}})(),function(){for(var t=0;t<a.length;t+=6){var e=a[t+0],i=a[t+2],n=a[t+4],r=Math.max(e,i,n),o=Math.min(e,i,n);r>.9&&o<.1&&(e<.2&&(a[t+0]+=1),i<.2&&(a[t+2]+=1),n<.2&&(a[t+4]+=1))}}()}(),this.addAttribute("position",new zi(r,3)),this.addAttribute("normal",new zi(r.slice(),3)),this.addAttribute("uv",new zi(a,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}function Ca(t,e){Li.call(this),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Ra(t,e)),this.mergeVertices()}function Ra(t,e){Pa.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Oa(t,e){Li.call(this),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Ia(t,e)),this.mergeVertices()}function Ia(t,e){Pa.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Da(t,e){Li.call(this),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Na(t,e)),this.mergeVertices()}function Na(t,e){var i=(1+Math.sqrt(5))/2,n=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1];Pa.call(this,n,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronBufferGeometry",this.parameters={radius:t,detail:e}}function za(t,e){Li.call(this),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Ba(t,e)),this.mergeVertices()}function Ba(t,e){var i=(1+Math.sqrt(5))/2,n=1/i,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-i,0,-n,i,0,n,-i,0,n,i,-n,-i,0,-n,i,0,n,-i,0,n,i,0,-i,0,-n,i,0,-n,-i,0,n,i,0,n];Pa.call(this,r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Ua(t,e,i,n,r,a){Li.call(this),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new Ga(t,e,i,n,r);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function Ga(t,e,i,n,r){Hi.call(this),this.type="TubeBufferGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r},e=e||64,i=i||1,n=n||8,r=r||!1;var a=t.computeFrenetFrames(e,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,s,c=new Ue,h=new Ue,l=new Ne,u=new Ue,p=[],d=[],f=[],m=[];function g(r){u=t.getPointAt(r/e,u);var o=a.normals[r],l=a.binormals[r];for(s=0;s<=n;s++){var f=s/n*Math.PI*2,m=Math.sin(f),g=-Math.cos(f);h.x=g*o.x+m*l.x,h.y=g*o.y+m*l.y,h.z=g*o.z+m*l.z,h.normalize(),d.push(h.x,h.y,h.z),c.x=u.x+i*h.x,c.y=u.y+i*h.y,c.z=u.z+i*h.z,p.push(c.x,c.y,c.z)}}!function(){for(o=0;o<e;o++)g(o);g(!1===r?e:0),function(){for(o=0;o<=e;o++)for(s=0;s<=n;s++)l.x=o/e,l.y=s/n,f.push(l.x,l.y)}(),function(){for(s=1;s<=e;s++)for(o=1;o<=n;o++){var t=(n+1)*(s-1)+(o-1),i=(n+1)*s+(o-1),r=(n+1)*s+o,a=(n+1)*(s-1)+o;m.push(t,i,a),m.push(i,r,a)}}()}(),this.setIndex(m),this.addAttribute("position",new zi(p,3)),this.addAttribute("normal",new zi(d,3)),this.addAttribute("uv",new zi(f,2))}function Fa(t,e,i,n,r,a,o){Li.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new Ha(t,e,i,n,r,a)),this.mergeVertices()}function Ha(t,e,i,n,r,a){Hi.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:a},t=t||1,e=e||.4,i=Math.floor(i)||64,n=Math.floor(n)||8,r=r||2,a=a||3;var o,s,c=[],h=[],l=[],u=[],p=new Ue,d=new Ue,f=new Ue,m=new Ue,g=new Ue,v=new Ue,y=new Ue;for(o=0;o<=i;++o){var x=o/i*r*Math.PI*2;for(L(x,r,a,t,f),L(x+.01,r,a,t,m),v.subVectors(m,f),y.addVectors(m,f),g.crossVectors(v,y),y.crossVectors(g,v),g.normalize(),y.normalize(),s=0;s<=n;++s){var b=s/n*Math.PI*2,w=-e*Math.cos(b),_=e*Math.sin(b);p.x=f.x+(w*y.x+_*g.x),p.y=f.y+(w*y.y+_*g.y),p.z=f.z+(w*y.z+_*g.z),h.push(p.x,p.y,p.z),d.subVectors(p,f).normalize(),l.push(d.x,d.y,d.z),u.push(o/i),u.push(s/n)}}for(s=1;s<=i;s++)for(o=1;o<=n;o++){var M=(n+1)*(s-1)+(o-1),S=(n+1)*s+(o-1),E=(n+1)*s+o,T=(n+1)*(s-1)+o;c.push(M,S,T),c.push(S,E,T)}function L(t,e,i,n,r){var a=Math.cos(t),o=Math.sin(t),s=i/e*t,c=Math.cos(s);r.x=n*(2+c)*.5*a,r.y=n*(2+c)*o*.5,r.z=n*Math.sin(s)*.5}this.setIndex(c),this.addAttribute("position",new zi(h,3)),this.addAttribute("normal",new zi(l,3)),this.addAttribute("uv",new zi(u,2))}function ka(t,e,i,n,r){Li.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},this.fromBufferGeometry(new Va(t,e,i,n,r)),this.mergeVertices()}function Va(t,e,i,n,r){Hi.call(this),this.type="TorusBufferGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},t=t||1,e=e||.4,i=Math.floor(i)||8,n=Math.floor(n)||6,r=r||2*Math.PI;var a,o,s=[],c=[],h=[],l=[],u=new Ue,p=new Ue,d=new Ue;for(a=0;a<=i;a++)for(o=0;o<=n;o++){var f=o/n*r,m=a/i*Math.PI*2;p.x=(t+e*Math.cos(m))*Math.cos(f),p.y=(t+e*Math.cos(m))*Math.sin(f),p.z=e*Math.sin(m),c.push(p.x,p.y,p.z),u.x=t*Math.cos(f),u.y=t*Math.sin(f),d.subVectors(p,u).normalize(),h.push(d.x,d.y,d.z),l.push(o/n),l.push(a/i)}for(a=1;a<=i;a++)for(o=1;o<=n;o++){var g=(n+1)*a+o-1,v=(n+1)*(a-1)+o-1,y=(n+1)*(a-1)+o,x=(n+1)*a+o;s.push(g,v,x),s.push(v,y,x)}this.setIndex(s),this.addAttribute("position",new zi(c,3)),this.addAttribute("normal",new zi(h,3)),this.addAttribute("uv",new zi(l,2))}ra.prototype.isFogExp2=!0,ra.prototype.clone=function(){return new ra(this.color,this.density)},ra.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}},aa.prototype.isFog=!0,aa.prototype.clone=function(){return new aa(this.color,this.near,this.far)},aa.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}},oa.prototype=Object.assign(Object.create(Mi.prototype),{constructor:oa,copy:function(t,e){return Mi.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=Mi.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}),Object.defineProperty(sa.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(sa.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.stride:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.dynamic=t.dynamic,this},copyAt:function(t,e,i){t*=this.stride,i*=e.stride;for(var n=0,r=this.stride;n<r;n++)this.array[t+n]=e.array[i+n];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}}),Object.defineProperties(ca.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(ca.prototype,{isInterleavedBufferAttribute:!0,setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this},setXYZW:function(t,e,i,n,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=r,this}}),ha.prototype=Object.create(on.prototype),ha.prototype.constructor=ha,ha.prototype.isSpriteMaterial=!0,ha.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this},la.prototype=Object.assign(Object.create(Mi.prototype),{constructor:la,isSprite:!0,raycast:function(){var t=new Ue,e=new Ue,i=new Ue,n=new Ne,r=new Ne,a=new ze,o=new Ue,s=new Ue,c=new Ue,h=new Ne,l=new Ne,u=new Ne;function p(t,e,i,o,s,c){n.subVectors(t,i).addScalar(.5).multiply(o),void 0!==s?(r.x=c*n.x-s*n.y,r.y=s*n.x+c*n.y):r.copy(n),t.copy(e),t.x+=r.x,t.y+=r.y,t.applyMatrix4(a)}return function(n,r){e.setFromMatrixScale(this.matrixWorld),a.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld),i.setFromMatrixPosition(this.modelViewMatrix);var d,f,m=this.material.rotation;0!==m&&(f=Math.cos(m),d=Math.sin(m));var g=this.center;p(o.set(-.5,-.5,0),i,g,e,d,f),p(s.set(.5,-.5,0),i,g,e,d,f),p(c.set(.5,.5,0),i,g,e,d,f),h.set(0,0),l.set(1,0),u.set(1,1);var v=n.ray.intersectTriangle(o,s,c,!1,t);if(null!==v||(p(s.set(-.5,.5,0),i,g,e,d,f),l.set(0,1),null!==(v=n.ray.intersectTriangle(o,c,s,!1,t)))){var y=n.ray.origin.distanceTo(t);y<n.near||y>n.far||r.push({distance:y,point:t.clone(),uv:hn.getUV(t,o,s,c,h,l,u,new Ne),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return Mi.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}}),ua.prototype=Object.assign(Object.create(Mi.prototype),{constructor:ua,copy:function(t){Mi.prototype.copy.call(this,t,!1);for(var e=t.levels,i=0,n=e.length;i<n;i++){var r=e[i];this.addLevel(r.object.clone(),r.distance)}return this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var i=this.levels,n=0;n<i.length&&!(e<i[n].distance);n++);i.splice(n,0,{distance:e,object:t}),this.add(t)},getObjectForDistance:function(t){for(var e=this.levels,i=1,n=e.length;i<n&&!(t<e[i].distance);i++);return e[i-1].object},raycast:(Xr=new Ue,function(t,e){Xr.setFromMatrixPosition(this.matrixWorld);var i=t.ray.origin.distanceTo(Xr);this.getObjectForDistance(i).raycast(t,e)}),update:function(){var t=new Ue,e=new Ue;return function(i){var n=this.levels;if(n.length>1){t.setFromMatrixPosition(i.matrixWorld),e.setFromMatrixPosition(this.matrixWorld);var r=t.distanceTo(e);n[0].object.visible=!0;for(var a=1,o=n.length;a<o&&r>=n[a].distance;a++)n[a-1].object.visible=!1,n[a].object.visible=!0;for(;a<o;a++)n[a].object.visible=!1}}}(),toJSON:function(t){var e=Mi.prototype.toJSON.call(this,t);e.object.levels=[];for(var i=this.levels,n=0,r=i.length;n<r;n++){var a=i[n];e.object.levels.push({object:a.object.uuid,distance:a.distance})}return e}}),pa.prototype=Object.assign(Object.create(un.prototype),{constructor:pa,isSkinnedMesh:!0,bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var t=new Ye,e=this.geometry.attributes.skinWeight,i=0,n=e.count;i<n;i++){t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.w=e.getW(i);var r=1/t.manhattanLength();r!==1/0?t.multiplyScalar(r):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}},updateMatrixWorld:function(t){un.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Object.assign(da.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var i=new ze;this.bones[t]&&i.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(i)}},pose:function(){var t,e,i;for(e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:(Yr=new ze,Jr=new ze,function(){for(var t=this.bones,e=this.boneInverses,i=this.boneMatrices,n=this.boneTexture,r=0,a=t.length;r<a;r++){var o=t[r]?t[r].matrixWorld:Jr;Yr.multiplyMatrices(o,e[r]),Yr.toArray(i,16*r)}void 0!==n&&(n.needsUpdate=!0)}),clone:function(){return new da(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,i=this.bones.length;e<i;e++){var n=this.bones[e];if(n.name===t)return n}}}),fa.prototype=Object.assign(Object.create(Mi.prototype),{constructor:fa,isBone:!0}),ma.prototype=Object.create(on.prototype),ma.prototype.constructor=ma,ma.prototype.isLineBasicMaterial=!0,ma.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this},ga.prototype=Object.assign(Object.create(Mi.prototype),{constructor:ga,isLine:!0,computeLineDistances:(Zr=new Ue,Qr=new Ue,function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,i=[0],n=1,r=e.count;n<r;n++)Zr.fromBufferAttribute(e,n-1),Qr.fromBufferAttribute(e,n),i[n]=i[n-1],i[n]+=Zr.distanceTo(Qr);t.addAttribute("lineDistance",new zi(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;for((i=t.lineDistances)[0]=0,n=1,r=a.length;n<r;n++)i[n]=i[n-1],i[n]+=a[n-1].distanceTo(a[n])}return this}),raycast:function(){var t=new ze,e=new cn,i=new $e;return function(n,r){var a=n.linePrecision,o=this.geometry,s=this.matrixWorld;if(null===o.boundingSphere&&o.computeBoundingSphere(),i.copy(o.boundingSphere),i.applyMatrix4(s),i.radius+=a,!1!==n.ray.intersectsSphere(i)){t.getInverse(s),e.copy(n.ray).applyMatrix4(t);var c=a/((this.scale.x+this.scale.y+this.scale.z)/3),h=c*c,l=new Ue,u=new Ue,p=new Ue,d=new Ue,f=this&&this.isLineSegments?2:1;if(o.isBufferGeometry){var m=o.index,g=o.attributes.position.array;if(null!==m)for(var v=m.array,y=0,x=v.length-1;y<x;y+=f){var b=v[y],w=v[y+1];if(l.fromArray(g,3*b),u.fromArray(g,3*w),!(e.distanceSqToSegment(l,u,d,p)>h))d.applyMatrix4(this.matrixWorld),(S=n.ray.origin.distanceTo(d))<n.near||S>n.far||r.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}else for(y=0,x=g.length/3-1;y<x;y+=f){if(l.fromArray(g,3*y),u.fromArray(g,3*y+3),!(e.distanceSqToSegment(l,u,d,p)>h))d.applyMatrix4(this.matrixWorld),(S=n.ray.origin.distanceTo(d))<n.near||S>n.far||r.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}else if(o.isGeometry){var _=o.vertices,M=_.length;for(y=0;y<M-1;y+=f){var S;if(!(e.distanceSqToSegment(_[y],_[y+1],d,p)>h))d.applyMatrix4(this.matrixWorld),(S=n.ray.origin.distanceTo(d))<n.near||S>n.far||r.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}}}}(),copy:function(t){return Mi.prototype.copy.call(this,t),this.geometry.copy(t.geometry),this.material.copy(t.material),this},clone:function(){return(new this.constructor).copy(this)}}),va.prototype=Object.assign(Object.create(ga.prototype),{constructor:va,isLineSegments:!0,computeLineDistances:function(){var t=new Ue,e=new Ue;return function(){var i=this.geometry;if(i.isBufferGeometry)if(null===i.index){for(var n=i.attributes.position,r=[],a=0,o=n.count;a<o;a+=2)t.fromBufferAttribute(n,a),e.fromBufferAttribute(n,a+1),r[a]=0===a?0:r[a-1],r[a+1]=r[a]+t.distanceTo(e);i.addAttribute("lineDistance",new zi(r,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(i.isGeometry){var s=i.vertices;for(r=i.lineDistances,a=0,o=s.length;a<o;a+=2)t.copy(s[a]),e.copy(s[a+1]),r[a]=0===a?0:r[a-1],r[a+1]=r[a]+t.distanceTo(e)}return this}}()}),ya.prototype=Object.assign(Object.create(ga.prototype),{constructor:ya,isLineLoop:!0}),xa.prototype=Object.create(on.prototype),xa.prototype.constructor=xa,xa.prototype.isPointsMaterial=!0,xa.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this},ba.prototype=Object.assign(Object.create(Mi.prototype),{constructor:ba,isPoints:!0,raycast:function(){var t=new ze,e=new cn,i=new $e;return function(n,r){var a=this,o=this.geometry,s=this.matrixWorld,c=n.params.Points.threshold;if(null===o.boundingSphere&&o.computeBoundingSphere(),i.copy(o.boundingSphere),i.applyMatrix4(s),i.radius+=c,!1!==n.ray.intersectsSphere(i)){t.getInverse(s),e.copy(n.ray).applyMatrix4(t);var h=c/((this.scale.x+this.scale.y+this.scale.z)/3),l=h*h,u=new Ue,p=new Ue;if(o.isBufferGeometry){var d=o.index,f=o.attributes.position.array;if(null!==d)for(var m=d.array,g=0,v=m.length;g<v;g++){var y=m[g];u.fromArray(f,3*y),w(u,y)}else{g=0;for(var x=f.length/3;g<x;g++)u.fromArray(f,3*g),w(u,g)}}else{var b=o.vertices;for(g=0,x=b.length;g<x;g++)w(b[g],g)}}function w(t,i){var o=e.distanceSqToPoint(t);if(o<l){e.closestPointToPoint(t,p),p.applyMatrix4(s);var c=n.ray.origin.distanceTo(p);if(c<n.near||c>n.far)return;r.push({distance:c,distanceToRay:Math.sqrt(o),point:p.clone(),index:i,face:null,object:a})}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),wa.prototype=Object.assign(Object.create(Xe.prototype),{constructor:wa,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),_a.prototype=Object.create(Xe.prototype),_a.prototype.constructor=_a,_a.prototype.isCompressedTexture=!0,Ma.prototype=Object.create(Xe.prototype),Ma.prototype.constructor=Ma,Ma.prototype.isCanvasTexture=!0,Sa.prototype=Object.create(Xe.prototype),Sa.prototype.constructor=Sa,Sa.prototype.isDepthTexture=!0,Ea.prototype=Object.create(Hi.prototype),Ea.prototype.constructor=Ea,Ta.prototype=Object.create(Li.prototype),Ta.prototype.constructor=Ta,La.prototype=Object.create(Hi.prototype),La.prototype.constructor=La,Aa.prototype=Object.create(Li.prototype),Aa.prototype.constructor=Aa,Pa.prototype=Object.create(Hi.prototype),Pa.prototype.constructor=Pa,Ca.prototype=Object.create(Li.prototype),Ca.prototype.constructor=Ca,Ra.prototype=Object.create(Pa.prototype),Ra.prototype.constructor=Ra,Oa.prototype=Object.create(Li.prototype),Oa.prototype.constructor=Oa,Ia.prototype=Object.create(Pa.prototype),Ia.prototype.constructor=Ia,Da.prototype=Object.create(Li.prototype),Da.prototype.constructor=Da,Na.prototype=Object.create(Pa.prototype),Na.prototype.constructor=Na,za.prototype=Object.create(Li.prototype),za.prototype.constructor=za,Ba.prototype=Object.create(Pa.prototype),Ba.prototype.constructor=Ba,Ua.prototype=Object.create(Li.prototype),Ua.prototype.constructor=Ua,Ga.prototype=Object.create(Hi.prototype),Ga.prototype.constructor=Ga,Fa.prototype=Object.create(Li.prototype),Fa.prototype.constructor=Fa,Ha.prototype=Object.create(Hi.prototype),Ha.prototype.constructor=Ha,ka.prototype=Object.create(Li.prototype),ka.prototype.constructor=ka,Va.prototype=Object.create(Hi.prototype),Va.prototype.constructor=Va;var ja=function(t,e,i){i=i||2;var n,r,a,o,s,c,h,l=e&&e.length,u=l?e[0]*i:t.length,p=Wa(t,0,u,i,!0),d=[];if(!p)return d;if(l&&(p=function(t,e,i,n){var r,a,o,s,c,h=[];for(r=0,a=e.length;r<a;r++)o=e[r]*n,s=r<a-1?e[r+1]*n:t.length,(c=Wa(t,o,s,n,!1))===c.next&&(c.steiner=!0),h.push(eo(c));for(h.sort(Ka),r=0;r<h.length;r++)$a(h[r],i),i=qa(i,i.next);return i}(t,e,p,i)),t.length>80*i){n=a=t[0],r=o=t[1];for(var f=i;f<u;f+=i)(s=t[f])<n&&(n=s),(c=t[f+1])<r&&(r=c),s>a&&(a=s),c>o&&(o=c);h=0!==(h=Math.max(a-n,o-r))?1/h:0}return Xa(p,d,i,n,r,h),d};function Wa(t,e,i,n,r){var a,o;if(r===function(t,e,i,n){for(var r=0,a=e,o=i-n;a<i;a+=n)r+=(t[o]-t[a])*(t[a+1]+t[o+1]),o=a;return r}(t,e,i,n)>0)for(a=e;a<i;a+=n)o=ho(a,t[a],t[a+1],o);else for(a=i-n;a>=e;a-=n)o=ho(a,t[a],t[a+1],o);return o&&ao(o,o.next)&&(lo(o),o=o.next),o}function qa(t,e){if(!t)return t;e||(e=t);var i,n=t;do{if(i=!1,n.steiner||!ao(n,n.next)&&0!==ro(n.prev,n,n.next))n=n.next;else{if(lo(n),(n=e=n.prev)===n.next)break;i=!0}}while(i||n!==e);return e}function Xa(t,e,i,n,r,a,o){if(t){!o&&a&&function(t,e,i,n){var r=t;do{null===r.z&&(r.z=to(r.x,r.y,e,i,n)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){var e,i,n,r,a,o,s,c,h=1;do{for(i=t,t=null,a=null,o=0;i;){for(o++,n=i,s=0,e=0;e<h&&(s++,n=n.nextZ);e++);for(c=h;s>0||c>0&&n;)0!==s&&(0===c||!n||i.z<=n.z)?(r=i,i=i.nextZ,s--):(r=n,n=n.nextZ,c--),a?a.nextZ=r:t=r,r.prevZ=a,a=r;i=n}a.nextZ=null,h*=2}while(o>1)}(r)}(t,n,r,a);for(var s,c,h=t;t.prev!==t.next;)if(s=t.prev,c=t.next,a?Ja(t,n,r,a):Ya(t))e.push(s.i/i),e.push(t.i/i),e.push(c.i/i),lo(t),t=c.next,h=c.next;else if((t=c)===h){o?1===o?Xa(t=Za(t,e,i),e,i,n,r,a,2):2===o&&Qa(t,e,i,n,r,a):Xa(qa(t),e,i,n,r,a,1);break}}}function Ya(t){var e=t.prev,i=t,n=t.next;if(ro(e,i,n)>=0)return!1;for(var r=t.next.next;r!==t.prev;){if(io(e.x,e.y,i.x,i.y,n.x,n.y,r.x,r.y)&&ro(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function Ja(t,e,i,n){var r=t.prev,a=t,o=t.next;if(ro(r,a,o)>=0)return!1;for(var s=r.x<a.x?r.x<o.x?r.x:o.x:a.x<o.x?a.x:o.x,c=r.y<a.y?r.y<o.y?r.y:o.y:a.y<o.y?a.y:o.y,h=r.x>a.x?r.x>o.x?r.x:o.x:a.x>o.x?a.x:o.x,l=r.y>a.y?r.y>o.y?r.y:o.y:a.y>o.y?a.y:o.y,u=to(s,c,e,i,n),p=to(h,l,e,i,n),d=t.nextZ;d&&d.z<=p;){if(d!==t.prev&&d!==t.next&&io(r.x,r.y,a.x,a.y,o.x,o.y,d.x,d.y)&&ro(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(d=t.prevZ;d&&d.z>=u;){if(d!==t.prev&&d!==t.next&&io(r.x,r.y,a.x,a.y,o.x,o.y,d.x,d.y)&&ro(d.prev,d,d.next)>=0)return!1;d=d.prevZ}return!0}function Za(t,e,i){var n=t;do{var r=n.prev,a=n.next.next;!ao(r,a)&&oo(r,n,n.next,a)&&so(r,a)&&so(a,r)&&(e.push(r.i/i),e.push(n.i/i),e.push(a.i/i),lo(n),lo(n.next),n=t=a),n=n.next}while(n!==t);return n}function Qa(t,e,i,n,r,a){var o=t;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&no(o,s)){var c=co(o,s);return o=qa(o,o.next),c=qa(c,c.next),Xa(o,e,i,n,r,a),void Xa(c,e,i,n,r,a)}s=s.next}o=o.next}while(o!==t)}function Ka(t,e){return t.x-e.x}function $a(t,e){if(e=function(t,e){var i,n=e,r=t.x,a=t.y,o=-1/0;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){var s=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(s<=r&&s>o){if(o=s,s===r){if(a===n.y)return n;if(a===n.next.y)return n.next}i=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!i)return null;if(r===o)return i.prev;var c,h=i,l=i.x,u=i.y,p=1/0;n=i.next;for(;n!==h;)r>=n.x&&n.x>=l&&r!==n.x&&io(a<u?r:o,a,l,u,a<u?o:r,a,n.x,n.y)&&((c=Math.abs(a-n.y)/(r-n.x))<p||c===p&&n.x>i.x)&&so(n,t)&&(i=n,p=c),n=n.next;return i}(t,e)){var i=co(e,t);qa(i,i.next)}}function to(t,e,i,n,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function eo(t){var e=t,i=t;do{e.x<i.x&&(i=e),e=e.next}while(e!==t);return i}function io(t,e,i,n,r,a,o,s){return(r-o)*(e-s)-(t-o)*(a-s)>=0&&(t-o)*(n-s)-(i-o)*(e-s)>=0&&(i-o)*(a-s)-(r-o)*(n-s)>=0}function no(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&oo(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&so(t,e)&&so(e,t)&&function(t,e){var i=t,n=!1,r=(t.x+e.x)/2,a=(t.y+e.y)/2;do{i.y>a!=i.next.y>a&&i.next.y!==i.y&&r<(i.next.x-i.x)*(a-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next}while(i!==t);return n}(t,e)}function ro(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function ao(t,e){return t.x===e.x&&t.y===e.y}function oo(t,e,i,n){return!!(ao(t,e)&&ao(i,n)||ao(t,n)&&ao(i,e))||ro(t,e,i)>0!=ro(t,e,n)>0&&ro(i,n,t)>0!=ro(i,n,e)>0}function so(t,e){return ro(t.prev,t,t.next)<0?ro(t,e,t.next)>=0&&ro(t,t.prev,e)>=0:ro(t,e,t.prev)<0||ro(t,t.next,e)<0}function co(t,e){var i=new uo(t.i,t.x,t.y),n=new uo(e.i,e.x,e.y),r=t.next,a=e.prev;return t.next=e,e.prev=t,i.next=r,r.prev=i,n.next=i,i.prev=n,a.next=n,n.prev=a,n}function ho(t,e,i,n){var r=new uo(t,e,i);return n?(r.next=n.next,r.prev=n,n.next.prev=r,n.next=r):(r.prev=r,r.next=r),r}function lo(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function uo(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var po={area:function(t){for(var e=t.length,i=0,n=e-1,r=0;r<e;n=r++)i+=t[n].x*t[r].y-t[r].x*t[n].y;return.5*i},isClockWise:function(t){return po.area(t)<0},triangulateShape:function(t,e){var i=[],n=[],r=[];fo(t),mo(i,t);var a=t.length;e.forEach(fo);for(var o=0;o<e.length;o++)n.push(a),a+=e[o].length,mo(i,e[o]);var s=ja(i,n);for(o=0;o<s.length;o+=3)r.push(s.slice(o,o+3));return r}};function fo(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function mo(t,e){for(var i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}function go(t,e){Li.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new vo(t,e)),this.mergeVertices()}function vo(t,e){Hi.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];for(var i=this,n=[],r=[],a=0,o=t.length;a<o;a++){s(t[a])}function s(t){var a=[],o=void 0!==e.curveSegments?e.curveSegments:12,s=void 0!==e.steps?e.steps:1,c=void 0!==e.depth?e.depth:100,h=void 0===e.bevelEnabled||e.bevelEnabled,l=void 0!==e.bevelThickness?e.bevelThickness:6,u=void 0!==e.bevelSize?e.bevelSize:l-2,p=void 0!==e.bevelSegments?e.bevelSegments:3,d=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:yo;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),c=e.amount);var m,g,v,y,x,b,w,_,M=!1;d&&(m=d.getSpacedPoints(s),M=!0,h=!1,g=d.computeFrenetFrames(s,!1),v=new Ue,y=new Ue,x=new Ue),h||(p=0,l=0,u=0);var S=t.extractPoints(o),E=S.shape,T=S.holes;if(!po.isClockWise(E))for(E=E.reverse(),w=0,_=T.length;w<_;w++)b=T[w],po.isClockWise(b)&&(T[w]=b.reverse());var L=po.triangulateShape(E,T),A=E;for(w=0,_=T.length;w<_;w++)b=T[w],E=E.concat(b);function P(t,e,i){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(i).add(t)}var C,R,O,I,D,N,z=E.length,B=L.length;function U(t,e,i){var n,r,a,o=t.x-e.x,s=t.y-e.y,c=i.x-t.x,h=i.y-t.y,l=o*o+s*s,u=o*h-s*c;if(Math.abs(u)>Number.EPSILON){var p=Math.sqrt(l),d=Math.sqrt(c*c+h*h),f=e.x-s/p,m=e.y+o/p,g=((i.x-h/d-f)*h-(i.y+c/d-m)*c)/(o*h-s*c),v=(n=f+o*g-t.x)*n+(r=m+s*g-t.y)*r;if(v<=2)return new Ne(n,r);a=Math.sqrt(v/2)}else{var y=!1;o>Number.EPSILON?c>Number.EPSILON&&(y=!0):o<-Number.EPSILON?c<-Number.EPSILON&&(y=!0):Math.sign(s)===Math.sign(h)&&(y=!0),y?(n=-s,r=o,a=Math.sqrt(l)):(n=o,r=s,a=Math.sqrt(l/2))}return new Ne(n/a,r/a)}for(var G=[],F=0,H=A.length,k=H-1,V=F+1;F<H;F++,k++,V++)k===H&&(k=0),V===H&&(V=0),G[F]=U(A[F],A[k],A[V]);var j,W,q=[],X=G.concat();for(w=0,_=T.length;w<_;w++){for(b=T[w],j=[],F=0,k=(H=b.length)-1,V=F+1;F<H;F++,k++,V++)k===H&&(k=0),V===H&&(V=0),j[F]=U(b[F],b[k],b[V]);q.push(j),X=X.concat(j)}for(C=0;C<p;C++){for(O=C/p,I=l*Math.cos(O*Math.PI/2),R=u*Math.sin(O*Math.PI/2),F=0,H=A.length;F<H;F++)J((D=P(A[F],G[F],R)).x,D.y,-I);for(w=0,_=T.length;w<_;w++)for(b=T[w],j=q[w],F=0,H=b.length;F<H;F++)J((D=P(b[F],j[F],R)).x,D.y,-I)}for(R=u,F=0;F<z;F++)D=h?P(E[F],X[F],R):E[F],M?(y.copy(g.normals[0]).multiplyScalar(D.x),v.copy(g.binormals[0]).multiplyScalar(D.y),x.copy(m[0]).add(y).add(v),J(x.x,x.y,x.z)):J(D.x,D.y,0);for(W=1;W<=s;W++)for(F=0;F<z;F++)D=h?P(E[F],X[F],R):E[F],M?(y.copy(g.normals[W]).multiplyScalar(D.x),v.copy(g.binormals[W]).multiplyScalar(D.y),x.copy(m[W]).add(y).add(v),J(x.x,x.y,x.z)):J(D.x,D.y,c/s*W);for(C=p-1;C>=0;C--){for(O=C/p,I=l*Math.cos(O*Math.PI/2),R=u*Math.sin(O*Math.PI/2),F=0,H=A.length;F<H;F++)J((D=P(A[F],G[F],R)).x,D.y,c+I);for(w=0,_=T.length;w<_;w++)for(b=T[w],j=q[w],F=0,H=b.length;F<H;F++)D=P(b[F],j[F],R),M?J(D.x,D.y+m[s-1].y,m[s-1].x+I):J(D.x,D.y,c+I)}function Y(t,e){var i,n;for(F=t.length;--F>=0;){i=F,(n=F-1)<0&&(n=t.length-1);var r=0,a=s+2*p;for(r=0;r<a;r++){var o=z*r,c=z*(r+1);Q(e+i+o,e+n+o,e+n+c,e+i+c)}}}function J(t,e,i){a.push(t),a.push(e),a.push(i)}function Z(t,e,r){K(t),K(e),K(r);var a=n.length/3,o=f.generateTopUV(i,n,a-3,a-2,a-1);$(o[0]),$(o[1]),$(o[2])}function Q(t,e,r,a){K(t),K(e),K(a),K(e),K(r),K(a);var o=n.length/3,s=f.generateSideWallUV(i,n,o-6,o-3,o-2,o-1);$(s[0]),$(s[1]),$(s[3]),$(s[1]),$(s[2]),$(s[3])}function K(t){n.push(a[3*t+0]),n.push(a[3*t+1]),n.push(a[3*t+2])}function $(t){r.push(t.x),r.push(t.y)}!function(){var t=n.length/3;if(h){var e=0,r=z*e;for(F=0;F<B;F++)Z((N=L[F])[2]+r,N[1]+r,N[0]+r);for(r=z*(e=s+2*p),F=0;F<B;F++)Z((N=L[F])[0]+r,N[1]+r,N[2]+r)}else{for(F=0;F<B;F++)Z((N=L[F])[2],N[1],N[0]);for(F=0;F<B;F++)Z((N=L[F])[0]+z*s,N[1]+z*s,N[2]+z*s)}i.addGroup(t,n.length/3-t,0)}(),function(){var t=n.length/3,e=0;for(Y(A,e),e+=A.length,w=0,_=T.length;w<_;w++)Y(b=T[w],e),e+=b.length;i.addGroup(t,n.length/3-t,1)}()}this.addAttribute("position",new zi(n,3)),this.addAttribute("uv",new zi(r,2)),this.computeVertexNormals()}go.prototype=Object.create(Li.prototype),go.prototype.constructor=go,go.prototype.toJSON=function(){var t=Li.prototype.toJSON.call(this);return xo(this.parameters.shapes,this.parameters.options,t)},vo.prototype=Object.create(Hi.prototype),vo.prototype.constructor=vo,vo.prototype.toJSON=function(){var t=Hi.prototype.toJSON.call(this);return xo(this.parameters.shapes,this.parameters.options,t)};var yo={generateTopUV:function(t,e,i,n,r){var a=e[3*i],o=e[3*i+1],s=e[3*n],c=e[3*n+1],h=e[3*r],l=e[3*r+1];return[new Ne(a,o),new Ne(s,c),new Ne(h,l)]},generateSideWallUV:function(t,e,i,n,r,a){var o=e[3*i],s=e[3*i+1],c=e[3*i+2],h=e[3*n],l=e[3*n+1],u=e[3*n+2],p=e[3*r],d=e[3*r+1],f=e[3*r+2],m=e[3*a],g=e[3*a+1],v=e[3*a+2];return Math.abs(s-l)<.01?[new Ne(o,1-c),new Ne(h,1-u),new Ne(p,1-f),new Ne(m,1-v)]:[new Ne(s,1-c),new Ne(l,1-u),new Ne(d,1-f),new Ne(g,1-v)]}};function xo(t,e,i){if(i.shapes=[],Array.isArray(t))for(var n=0,r=t.length;n<r;n++){var a=t[n];i.shapes.push(a.uuid)}else i.shapes.push(t.uuid);return void 0!==e.extrudePath&&(i.options.extrudePath=e.extrudePath.toJSON()),i}function bo(t,e){Li.call(this),this.type="TextGeometry",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new wo(t,e)),this.mergeVertices()}function wo(t,e){var i=(e=e||{}).font;if(!i||!i.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Li;var n=i.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),vo.call(this,n,e),this.type="TextBufferGeometry"}function _o(t,e,i,n,r,a,o){Li.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new Mo(t,e,i,n,r,a,o)),this.mergeVertices()}function Mo(t,e,i,n,r,a,o){Hi.call(this),this.type="SphereBufferGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:a,thetaLength:o},t=t||1,e=Math.max(3,Math.floor(e)||8),i=Math.max(2,Math.floor(i)||6),n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI;var s,c,h=(a=void 0!==a?a:0)+(o=void 0!==o?o:Math.PI),l=0,u=[],p=new Ue,d=new Ue,f=[],m=[],g=[],v=[];for(c=0;c<=i;c++){var y=[],x=c/i;for(s=0;s<=e;s++){var b=s/e;p.x=-t*Math.cos(n+b*r)*Math.sin(a+x*o),p.y=t*Math.cos(a+x*o),p.z=t*Math.sin(n+b*r)*Math.sin(a+x*o),m.push(p.x,p.y,p.z),d.set(p.x,p.y,p.z).normalize(),g.push(d.x,d.y,d.z),v.push(b,1-x),y.push(l++)}u.push(y)}for(c=0;c<i;c++)for(s=0;s<e;s++){var w=u[c][s+1],_=u[c][s],M=u[c+1][s],S=u[c+1][s+1];(0!==c||a>0)&&f.push(w,_,S),(c!==i-1||h<Math.PI)&&f.push(_,M,S)}this.setIndex(f),this.addAttribute("position",new zi(m,3)),this.addAttribute("normal",new zi(g,3)),this.addAttribute("uv",new zi(v,2))}function So(t,e,i,n,r,a){Li.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:a},this.fromBufferGeometry(new Eo(t,e,i,n,r,a)),this.mergeVertices()}function Eo(t,e,i,n,r,a){Hi.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:a},t=t||.5,e=e||1,r=void 0!==r?r:0,a=void 0!==a?a:2*Math.PI,i=void 0!==i?Math.max(3,i):8;var o,s,c,h=[],l=[],u=[],p=[],d=t,f=(e-t)/(n=void 0!==n?Math.max(1,n):1),m=new Ue,g=new Ne;for(s=0;s<=n;s++){for(c=0;c<=i;c++)o=r+c/i*a,m.x=d*Math.cos(o),m.y=d*Math.sin(o),l.push(m.x,m.y,m.z),u.push(0,0,1),g.x=(m.x/e+1)/2,g.y=(m.y/e+1)/2,p.push(g.x,g.y);d+=f}for(s=0;s<n;s++){var v=s*(i+1);for(c=0;c<i;c++){var y=o=c+v,x=o+i+1,b=o+i+2,w=o+1;h.push(y,x,w),h.push(x,b,w)}}this.setIndex(h),this.addAttribute("position",new zi(l,3)),this.addAttribute("normal",new zi(u,3)),this.addAttribute("uv",new zi(p,2))}function To(t,e,i,n){Li.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},this.fromBufferGeometry(new Lo(t,e,i,n)),this.mergeVertices()}function Lo(t,e,i,n){Hi.call(this),this.type="LatheBufferGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},e=Math.floor(e)||12,i=i||0,n=n||2*Math.PI,n=De.clamp(n,0,2*Math.PI);var r,a,o,s=[],c=[],h=[],l=1/e,u=new Ue,p=new Ne;for(a=0;a<=e;a++){var d=i+a*l*n,f=Math.sin(d),m=Math.cos(d);for(o=0;o<=t.length-1;o++)u.x=t[o].x*f,u.y=t[o].y,u.z=t[o].x*m,c.push(u.x,u.y,u.z),p.x=a/e,p.y=o/(t.length-1),h.push(p.x,p.y)}for(a=0;a<e;a++)for(o=0;o<t.length-1;o++){var g=r=o+a*t.length,v=r+t.length,y=r+t.length+1,x=r+1;s.push(g,v,x),s.push(v,y,x)}if(this.setIndex(s),this.addAttribute("position",new zi(c,3)),this.addAttribute("uv",new zi(h,2)),this.computeVertexNormals(),n===2*Math.PI){var b=this.attributes.normal.array,w=new Ue,_=new Ue,M=new Ue;for(r=e*t.length*3,a=0,o=0;a<t.length;a++,o+=3)w.x=b[o+0],w.y=b[o+1],w.z=b[o+2],_.x=b[r+o+0],_.y=b[r+o+1],_.z=b[r+o+2],M.addVectors(w,_).normalize(),b[o+0]=b[r+o+0]=M.x,b[o+1]=b[r+o+1]=M.y,b[o+2]=b[r+o+2]=M.z}}function Ao(t,e){Li.call(this),this.type="ShapeGeometry","object"==typeof e&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new Po(t,e)),this.mergeVertices()}function Po(t,e){Hi.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;var i=[],n=[],r=[],a=[],o=0,s=0;if(!1===Array.isArray(t))h(t);else for(var c=0;c<t.length;c++)h(t[c]),this.addGroup(o,s,c),o+=s,s=0;function h(t){var o,c,h,l=n.length/3,u=t.extractPoints(e),p=u.shape,d=u.holes;if(!1===po.isClockWise(p))for(p=p.reverse(),o=0,c=d.length;o<c;o++)h=d[o],!0===po.isClockWise(h)&&(d[o]=h.reverse());var f=po.triangulateShape(p,d);for(o=0,c=d.length;o<c;o++)h=d[o],p=p.concat(h);for(o=0,c=p.length;o<c;o++){var m=p[o];n.push(m.x,m.y,0),r.push(0,0,1),a.push(m.x,m.y)}for(o=0,c=f.length;o<c;o++){var g=f[o],v=g[0]+l,y=g[1]+l,x=g[2]+l;i.push(v,y,x),s+=3}}this.setIndex(i),this.addAttribute("position",new zi(n,3)),this.addAttribute("normal",new zi(r,3)),this.addAttribute("uv",new zi(a,2))}function Co(t,e){if(e.shapes=[],Array.isArray(t))for(var i=0,n=t.length;i<n;i++){var r=t[i];e.shapes.push(r.uuid)}else e.shapes.push(t.uuid);return e}function Ro(t,e){Hi.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var i,n,r,a,o=[],s=Math.cos(De.DEG2RAD*e),c=[0,0],h={},l=["a","b","c"];t.isBufferGeometry?(a=new Li).fromBufferGeometry(t):a=t.clone(),a.mergeVertices(),a.computeFaceNormals();for(var u=a.vertices,p=a.faces,d=0,f=p.length;d<f;d++)for(var m=p[d],g=0;g<3;g++)i=m[l[g]],n=m[l[(g+1)%3]],c[0]=Math.min(i,n),c[1]=Math.max(i,n),void 0===h[r=c[0]+","+c[1]]?h[r]={index1:c[0],index2:c[1],face1:d,face2:void 0}:h[r].face2=d;for(r in h){var v=h[r];if(void 0===v.face2||p[v.face1].normal.dot(p[v.face2].normal)<=s){var y=u[v.index1];o.push(y.x,y.y,y.z),y=u[v.index2],o.push(y.x,y.y,y.z)}}this.addAttribute("position",new zi(o,3))}function Oo(t,e,i,n,r,a,o,s){Li.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new Io(t,e,i,n,r,a,o,s)),this.mergeVertices()}function Io(t,e,i,n,r,a,o,s){Hi.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:s};var c=this;t=void 0!==t?t:1,e=void 0!==e?e:1,i=i||1,n=Math.floor(n)||8,r=Math.floor(r)||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var h=[],l=[],u=[],p=[],d=0,f=[],m=i/2,g=0;function v(i){var r,a,f,v=new Ne,y=new Ue,x=0,b=!0===i?t:e,w=!0===i?1:-1;for(a=d,r=1;r<=n;r++)l.push(0,m*w,0),u.push(0,w,0),p.push(.5,.5),d++;for(f=d,r=0;r<=n;r++){var _=r/n*s+o,M=Math.cos(_),S=Math.sin(_);y.x=b*S,y.y=m*w,y.z=b*M,l.push(y.x,y.y,y.z),u.push(0,w,0),v.x=.5*M+.5,v.y=.5*S*w+.5,p.push(v.x,v.y),d++}for(r=0;r<n;r++){var E=a+r,T=f+r;!0===i?h.push(T,T+1,E):h.push(T+1,T,E),x+=3}c.addGroup(g,x,!0===i?1:2),g+=x}!function(){var a,v,y=new Ue,x=new Ue,b=0,w=(e-t)/i;for(v=0;v<=r;v++){var _=[],M=v/r,S=M*(e-t)+t;for(a=0;a<=n;a++){var E=a/n,T=E*s+o,L=Math.sin(T),A=Math.cos(T);x.x=S*L,x.y=-M*i+m,x.z=S*A,l.push(x.x,x.y,x.z),y.set(L,w,A).normalize(),u.push(y.x,y.y,y.z),p.push(E,1-M),_.push(d++)}f.push(_)}for(a=0;a<n;a++)for(v=0;v<r;v++){var P=f[v][a],C=f[v+1][a],R=f[v+1][a+1],O=f[v][a+1];h.push(P,C,O),h.push(C,R,O),b+=6}c.addGroup(g,b,0),g+=b}(),!1===a&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(h),this.addAttribute("position",new zi(l,3)),this.addAttribute("normal",new zi(u,3)),this.addAttribute("uv",new zi(p,2))}function Do(t,e,i,n,r,a,o){Oo.call(this,0,t,e,i,n,r,a,o),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:a,thetaLength:o}}function No(t,e,i,n,r,a,o){Io.call(this,0,t,e,i,n,r,a,o),this.type="ConeBufferGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:a,thetaLength:o}}function zo(t,e,i,n){Li.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},this.fromBufferGeometry(new Bo(t,e,i,n)),this.mergeVertices()}function Bo(t,e,i,n){Hi.call(this),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},t=t||1,e=void 0!==e?Math.max(3,e):8,i=void 0!==i?i:0,n=void 0!==n?n:2*Math.PI;var r,a,o=[],s=[],c=[],h=[],l=new Ue,u=new Ne;for(s.push(0,0,0),c.push(0,0,1),h.push(.5,.5),a=0,r=3;a<=e;a++,r+=3){var p=i+a/e*n;l.x=t*Math.cos(p),l.y=t*Math.sin(p),s.push(l.x,l.y,l.z),c.push(0,0,1),u.x=(s[r]/t+1)/2,u.y=(s[r+1]/t+1)/2,h.push(u.x,u.y)}for(r=1;r<=e;r++)o.push(r,r+1,0);this.setIndex(o),this.addAttribute("position",new zi(s,3)),this.addAttribute("normal",new zi(c,3)),this.addAttribute("uv",new zi(h,2))}bo.prototype=Object.create(Li.prototype),bo.prototype.constructor=bo,wo.prototype=Object.create(vo.prototype),wo.prototype.constructor=wo,_o.prototype=Object.create(Li.prototype),_o.prototype.constructor=_o,Mo.prototype=Object.create(Hi.prototype),Mo.prototype.constructor=Mo,So.prototype=Object.create(Li.prototype),So.prototype.constructor=So,Eo.prototype=Object.create(Hi.prototype),Eo.prototype.constructor=Eo,To.prototype=Object.create(Li.prototype),To.prototype.constructor=To,Lo.prototype=Object.create(Hi.prototype),Lo.prototype.constructor=Lo,Ao.prototype=Object.create(Li.prototype),Ao.prototype.constructor=Ao,Ao.prototype.toJSON=function(){var t=Li.prototype.toJSON.call(this);return Co(this.parameters.shapes,t)},Po.prototype=Object.create(Hi.prototype),Po.prototype.constructor=Po,Po.prototype.toJSON=function(){var t=Hi.prototype.toJSON.call(this);return Co(this.parameters.shapes,t)},Ro.prototype=Object.create(Hi.prototype),Ro.prototype.constructor=Ro,Oo.prototype=Object.create(Li.prototype),Oo.prototype.constructor=Oo,Io.prototype=Object.create(Hi.prototype),Io.prototype.constructor=Io,Do.prototype=Object.create(Oo.prototype),Do.prototype.constructor=Do,No.prototype=Object.create(Io.prototype),No.prototype.constructor=No,zo.prototype=Object.create(Li.prototype),zo.prototype.constructor=zo,Bo.prototype=Object.create(Hi.prototype),Bo.prototype.constructor=Bo;var Uo=Object.freeze({WireframeGeometry:Ea,ParametricGeometry:Ta,ParametricBufferGeometry:La,TetrahedronGeometry:Ca,TetrahedronBufferGeometry:Ra,OctahedronGeometry:Oa,OctahedronBufferGeometry:Ia,IcosahedronGeometry:Da,IcosahedronBufferGeometry:Na,DodecahedronGeometry:za,DodecahedronBufferGeometry:Ba,PolyhedronGeometry:Aa,PolyhedronBufferGeometry:Pa,TubeGeometry:Ua,TubeBufferGeometry:Ga,TorusKnotGeometry:Fa,TorusKnotBufferGeometry:Ha,TorusGeometry:ka,TorusBufferGeometry:Va,TextGeometry:bo,TextBufferGeometry:wo,SphereGeometry:_o,SphereBufferGeometry:Mo,RingGeometry:So,RingBufferGeometry:Eo,PlaneGeometry:ji,PlaneBufferGeometry:Wi,LatheGeometry:To,LatheBufferGeometry:Lo,ShapeGeometry:Ao,ShapeBufferGeometry:Po,ExtrudeGeometry:go,ExtrudeBufferGeometry:vo,EdgesGeometry:Ro,ConeGeometry:Do,ConeBufferGeometry:No,CylinderGeometry:Oo,CylinderBufferGeometry:Io,CircleGeometry:zo,CircleBufferGeometry:Bo,BoxGeometry:ki,BoxBufferGeometry:Vi});function Go(t){on.call(this),this.type="ShadowMaterial",this.color=new hi(0),this.transparent=!0,this.setValues(t)}function Fo(t){sn.call(this,t),this.type="RawShaderMaterial"}function Ho(t){on.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new hi(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new hi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oe,this.normalScale=new Ne(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function ko(t){Ho.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(t)}function Vo(t){on.call(this),this.type="MeshPhongMaterial",this.color=new hi(16777215),this.specular=new hi(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new hi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oe,this.normalScale=new Ne(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=rt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function jo(t){Vo.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(t)}function Wo(t){on.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oe,this.normalScale=new Ne(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function qo(t){on.call(this),this.type="MeshLambertMaterial",this.color=new hi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new hi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=rt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Xo(t){on.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new hi(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Oe,this.normalScale=new Ne(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.lights=!1,this.setValues(t)}function Yo(t){ma.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}Go.prototype=Object.create(on.prototype),Go.prototype.constructor=Go,Go.prototype.isShadowMaterial=!0,Go.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.color.copy(t.color),this},Fo.prototype=Object.create(sn.prototype),Fo.prototype.constructor=Fo,Fo.prototype.isRawShaderMaterial=!0,Ho.prototype=Object.create(on.prototype),Ho.prototype.constructor=Ho,Ho.prototype.isMeshStandardMaterial=!0,Ho.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},ko.prototype=Object.create(Ho.prototype),ko.prototype.constructor=ko,ko.prototype.isMeshPhysicalMaterial=!0,ko.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.defines={PHYSICAL:""},this.reflectivity=t.reflectivity,this.clearCoat=t.clearCoat,this.clearCoatRoughness=t.clearCoatRoughness,this},Vo.prototype=Object.create(on.prototype),Vo.prototype.constructor=Vo,Vo.prototype.isMeshPhongMaterial=!0,Vo.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},jo.prototype=Object.create(Vo.prototype),jo.prototype.constructor=jo,jo.prototype.isMeshToonMaterial=!0,jo.prototype.copy=function(t){return Vo.prototype.copy.call(this,t),this.gradientMap=t.gradientMap,this},Wo.prototype=Object.create(on.prototype),Wo.prototype.constructor=Wo,Wo.prototype.isMeshNormalMaterial=!0,Wo.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},qo.prototype=Object.create(on.prototype),qo.prototype.constructor=qo,qo.prototype.isMeshLambertMaterial=!0,qo.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Xo.prototype=Object.create(on.prototype),Xo.prototype.constructor=Xo,Xo.prototype.isMeshMatcapMaterial=!0,Xo.prototype.copy=function(t){return on.prototype.copy.call(this,t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Yo.prototype=Object.create(ma.prototype),Yo.prototype.constructor=Yo,Yo.prototype.isLineDashedMaterial=!0,Yo.prototype.copy=function(t){return ma.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var Jo=Object.freeze({ShadowMaterial:Go,SpriteMaterial:ha,RawShaderMaterial:Fo,ShaderMaterial:sn,PointsMaterial:xa,MeshPhysicalMaterial:ko,MeshStandardMaterial:Ho,MeshPhongMaterial:Vo,MeshToonMaterial:jo,MeshNormalMaterial:Wo,MeshLambertMaterial:qo,MeshDepthMaterial:zr,MeshDistanceMaterial:Br,MeshBasicMaterial:ln,MeshMatcapMaterial:Xo,LineDashedMaterial:Yo,LineBasicMaterial:ma,Material:on}),Zo={arraySlice:function(t,e,i){return Zo.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==i?i:t.length)):t.slice(e,i)},convertArray:function(t,e,i){return!t||!i&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,i=new Array(e),n=0;n!==e;++n)i[n]=n;return i.sort(function(e,i){return t[e]-t[i]}),i},sortedArray:function(t,e,i){for(var n=t.length,r=new t.constructor(n),a=0,o=0;o!==n;++a)for(var s=i[a]*e,c=0;c!==e;++c)r[o++]=t[s+c];return r},flattenJSON:function(t,e,i,n){for(var r=1,a=t[0];void 0!==a&&void 0===a[n];)a=t[r++];if(void 0!==a){var o=a[n];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[n])&&(e.push(a.time),i.push.apply(i,o)),a=t[r++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[n])&&(e.push(a.time),o.toArray(i,i.length)),a=t[r++]}while(void 0!==a);else do{void 0!==(o=a[n])&&(e.push(a.time),i.push(o)),a=t[r++]}while(void 0!==a)}}};function Qo(t,e,i,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(i),this.sampleValues=e,this.valueSize=i}function Ko(t,e,i,n){Qo.call(this,t,e,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function $o(t,e,i,n){Qo.call(this,t,e,i,n)}function ts(t,e,i,n){Qo.call(this,t,e,i,n)}function es(t,e,i,n){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Zo.convertArray(e,this.TimeBufferType),this.values=Zo.convertArray(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}function is(t,e,i){es.call(this,t,e,i)}function ns(t,e,i,n){es.call(this,t,e,i,n)}function rs(t,e,i,n){es.call(this,t,e,i,n)}function as(t,e,i,n){Qo.call(this,t,e,i,n)}function os(t,e,i,n){es.call(this,t,e,i,n)}function ss(t,e,i,n){es.call(this,t,e,i,n)}function cs(t,e,i,n){es.call(this,t,e,i,n)}function hs(t,e,i){this.name=t,this.tracks=i,this.duration=void 0!==e?e:-1,this.uuid=De.generateUUID(),this.duration<0&&this.resetDuration()}function ls(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return rs;case"vector":case"vector2":case"vector3":case"vector4":return cs;case"color":return ns;case"quaternion":return os;case"bool":case"boolean":return is;case"string":return ss}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){var i=[],n=[];Zo.flattenJSON(t.keys,i,n,"value"),t.times=i,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}Object.assign(Qo.prototype,{evaluate:function(t){var e=this.parameterPositions,i=this._cachedIndex,n=e[i],r=e[i-1];t:{e:{var a;i:{n:if(!(t<n)){for(var o=i+2;;){if(void 0===n){if(t<r)break n;return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,t,r)}if(i===o)break;if(r=n,t<(n=e[++i]))break e}a=e.length;break i}if(t>=r)break t;var s=e[1];t<s&&(i=2,r=s);for(o=i-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(i===o)break;if(n=r,t>=(r=e[--i-1]))break e}a=i,i=0}for(;i<a;){var c=i+a>>>1;t<e[c]?a=c:i=c+1}if(n=e[i],void 0===(r=e[i-1]))return this._cachedIndex=0,this.beforeStart_(0,t,n);if(void 0===n)return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,r,t)}this._cachedIndex=i,this.intervalChanged_(i,r,n)}return this.interpolate_(i,r,t,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,i=this.sampleValues,n=this.valueSize,r=t*n,a=0;a!==n;++a)e[a]=i[r+a];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Qo.prototype,{beforeStart_:Qo.prototype.copySampleValue_,afterEnd_:Qo.prototype.copySampleValue_}),Ko.prototype=Object.assign(Object.create(Qo.prototype),{constructor:Ko,DefaultSettings_:{endingStart:xe,endingEnd:xe},intervalChanged_:function(t,e,i){var n=this.parameterPositions,r=t-2,a=t+1,o=n[r],s=n[a];if(void 0===o)switch(this.getSettings_().endingStart){case 2401:r=t,o=2*e-i;break;case 2402:o=e+n[r=n.length-2]-n[r+1];break;default:r=t,o=i}if(void 0===s)switch(this.getSettings_().endingEnd){case 2401:a=t,s=2*i-e;break;case 2402:a=1,s=i+n[1]-n[0];break;default:a=t-1,s=e}var c=.5*(i-e),h=this.valueSize;this._weightPrev=c/(e-o),this._weightNext=c/(s-i),this._offsetPrev=r*h,this._offsetNext=a*h},interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,c=s-o,h=this._offsetPrev,l=this._offsetNext,u=this._weightPrev,p=this._weightNext,d=(i-e)/(n-e),f=d*d,m=f*d,g=-u*m+2*u*f-u*d,v=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*d+1,y=(-1-p)*m+(1.5+p)*f+.5*d,x=p*m-p*f,b=0;b!==o;++b)r[b]=g*a[h+b]+v*a[c+b]+y*a[s+b]+x*a[l+b];return r}}),$o.prototype=Object.assign(Object.create(Qo.prototype),{constructor:$o,interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,c=s-o,h=(i-e)/(n-e),l=1-h,u=0;u!==o;++u)r[u]=a[c+u]*l+a[s+u]*h;return r}}),ts.prototype=Object.assign(Object.create(Qo.prototype),{constructor:ts,interpolate_:function(t){return this.copySampleValue_(t-1)}}),Object.assign(es,{toJSON:function(t){var e,i=t.constructor;if(void 0!==i.toJSON)e=i.toJSON(t);else{e={name:t.name,times:Zo.convertArray(t.times,Array),values:Zo.convertArray(t.values,Array)};var n=t.getInterpolation();n!==t.DefaultInterpolation&&(e.interpolation=n)}return e.type=t.ValueTypeName,e}}),Object.assign(es.prototype,{constructor:es,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(t){return new ts(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new $o(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new Ko(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case 2300:e=this.InterpolantFactoryMethodDiscrete;break;case 2301:e=this.InterpolantFactoryMethodLinear;break;case 2302:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){var i="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(i);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",i),this}return this.createInterpolant=e,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,i=0,n=e.length;i!==n;++i)e[i]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,i=0,n=e.length;i!==n;++i)e[i]*=t;return this},trim:function(t,e){for(var i=this.times,n=i.length,r=0,a=n-1;r!==n&&i[r]<t;)++r;for(;-1!==a&&i[a]>e;)--a;if(++a,0!==r||a!==n){r>=a&&(r=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=Zo.arraySlice(i,r,a),this.values=Zo.arraySlice(this.values,r*o,a*o)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);var i=this.times,n=this.values,r=i.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);for(var a=null,o=0;o!==r;o++){var s=i[o];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,s),t=!1;break}if(null!==a&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,s,a),t=!1;break}a=s}if(void 0!==n&&Zo.isTypedArray(n)){o=0;for(var c=n.length;o!==c;++o){var h=n[o];if(isNaN(h)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,h),t=!1;break}}}return t},optimize:function(){for(var t=this.times,e=this.values,i=this.getValueSize(),n=2302===this.getInterpolation(),r=1,a=t.length-1,o=1;o<a;++o){var s=!1,c=t[o];if(c!==t[o+1]&&(1!==o||c!==c[0]))if(n)s=!0;else for(var h=o*i,l=h-i,u=h+i,p=0;p!==i;++p){var d=e[h+p];if(d!==e[l+p]||d!==e[u+p]){s=!0;break}}if(s){if(o!==r){t[r]=t[o];var f=o*i,m=r*i;for(p=0;p!==i;++p)e[m+p]=e[f+p]}++r}}if(a>0){t[r]=t[a];for(f=a*i,m=r*i,p=0;p!==i;++p)e[m+p]=e[f+p];++r}return r!==t.length&&(this.times=Zo.arraySlice(t,0,r),this.values=Zo.arraySlice(e,0,r*i)),this}}),is.prototype=Object.assign(Object.create(es.prototype),{constructor:is,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),ns.prototype=Object.assign(Object.create(es.prototype),{constructor:ns,ValueTypeName:"color"}),rs.prototype=Object.assign(Object.create(es.prototype),{constructor:rs,ValueTypeName:"number"}),as.prototype=Object.assign(Object.create(Qo.prototype),{constructor:as,interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,c=(i-e)/(n-e),h=s+o;s!==h;s+=4)Be.slerpFlat(r,0,a,s-o,a,s,c);return r}}),os.prototype=Object.assign(Object.create(es.prototype),{constructor:os,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(t){return new as(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),ss.prototype=Object.assign(Object.create(es.prototype),{constructor:ss,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),cs.prototype=Object.assign(Object.create(es.prototype),{constructor:cs,ValueTypeName:"vector"}),Object.assign(hs,{parse:function(t){for(var e=[],i=t.tracks,n=1/(t.fps||1),r=0,a=i.length;r!==a;++r)e.push(ls(i[r]).scale(n));return new hs(t.name,t.duration,e)},toJSON:function(t){for(var e=[],i=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid},r=0,a=i.length;r!==a;++r)e.push(es.toJSON(i[r]));return n},CreateFromMorphTargetSequence:function(t,e,i,n){for(var r=e.length,a=[],o=0;o<r;o++){var s=[],c=[];s.push((o+r-1)%r,o,(o+1)%r),c.push(0,1,0);var h=Zo.getKeyframeOrder(s);s=Zo.sortedArray(s,1,h),c=Zo.sortedArray(c,1,h),n||0!==s[0]||(s.push(r),c.push(c[0])),a.push(new rs(".morphTargetInfluences["+e[o].name+"]",s,c).scale(1/i))}return new hs(t,-1,a)},findByName:function(t,e){var i=t;if(!Array.isArray(t)){var n=t;i=n.geometry&&n.geometry.animations||n.animations}for(var r=0;r<i.length;r++)if(i[r].name===e)return i[r];return null},CreateClipsFromMorphTargetSequences:function(t,e,i){for(var n={},r=/^([\w-]*?)([\d]+)$/,a=0,o=t.length;a<o;a++){var s=t[a],c=s.name.match(r);if(c&&c.length>1){var h=n[u=c[1]];h||(n[u]=h=[]),h.push(s)}}var l=[];for(var u in n)l.push(hs.CreateFromMorphTargetSequence(u,n[u],e,i));return l},parseAnimation:function(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var i=function(t,e,i,n,r){if(0!==i.length){var a=[],o=[];Zo.flattenJSON(i,a,o,n),0!==a.length&&r.push(new t(e,a,o))}},n=[],r=t.name||"default",a=t.length||-1,o=t.fps||30,s=t.hierarchy||[],c=0;c<s.length;c++){var h=s[c].keys;if(h&&0!==h.length)if(h[0].morphTargets){for(var l={},u=0;u<h.length;u++)if(h[u].morphTargets)for(var p=0;p<h[u].morphTargets.length;p++)l[h[u].morphTargets[p]]=-1;for(var d in l){var f=[],m=[];for(p=0;p!==h[u].morphTargets.length;++p){var g=h[u];f.push(g.time),m.push(g.morphTarget===d?1:0)}n.push(new rs(".morphTargetInfluence["+d+"]",f,m))}a=l.length*(o||1)}else{var v=".bones["+e[c].name+"]";i(cs,v+".position",h,"pos",n),i(os,v+".quaternion",h,"rot",n),i(cs,v+".scale",h,"scl",n)}}return 0===n.length?null:new hs(r,a,n)}}),Object.assign(hs.prototype,{resetDuration:function(){for(var t=0,e=0,i=this.tracks.length;e!==i;++e){var n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},validate:function(){for(var t=!0,e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}});var us={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function ps(t,e,i){var n=this,r=!1,a=0,o=0,s=void 0;this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){o++,!1===r&&void 0!==n.onStart&&n.onStart(t,a,o),r=!0},this.itemEnd=function(t){a++,void 0!==n.onProgress&&n.onProgress(t,a,o),a===o&&(r=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this}}var ds=new ps,fs={};function ms(t){this.manager=void 0!==t?t:ds}function gs(t){this.manager=void 0!==t?t:ds,this._parser=null}function vs(t){this.manager=void 0!==t?t:ds}function ys(t){this.manager=void 0!==t?t:ds}function xs(t){this.manager=void 0!==t?t:ds}function bs(){this.type="Curve",this.arcLengthDivisions=200}function ws(t,e,i,n,r,a,o,s){bs.call(this),this.type="EllipseCurve",this.aX=t||0,this.aY=e||0,this.xRadius=i||1,this.yRadius=n||1,this.aStartAngle=r||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=s||0}function _s(t,e,i,n,r,a){ws.call(this,t,e,i,i,n,r,a),this.type="ArcCurve"}function Ms(){var t=0,e=0,i=0,n=0;function r(r,a,o,s){t=r,e=o,i=-3*r+3*a-2*o-s,n=2*r-2*a+o+s}return{initCatmullRom:function(t,e,i,n,a){r(e,i,a*(i-t),a*(n-e))},initNonuniformCatmullRom:function(t,e,i,n,a,o,s){var c=(e-t)/a-(i-t)/(a+o)+(i-e)/o,h=(i-e)/o-(n-e)/(o+s)+(n-i)/s;r(e,i,c*=o,h*=o)},calc:function(r){var a=r*r;return t+e*r+i*a+n*(a*r)}}}Object.assign(ms.prototype,{load:function(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=us.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout(function(){e&&e(a),r.manager.itemEnd(t)},0),a;if(void 0===fs[t]){var o=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var s=o[1],c=!!o[2],h=o[3];h=decodeURIComponent(h),c&&(h=atob(h));try{var l,u=(this.responseType||"").toLowerCase();switch(u){case"arraybuffer":case"blob":for(var p=new Uint8Array(h.length),d=0;d<h.length;d++)p[d]=h.charCodeAt(d);l="blob"===u?new Blob([p.buffer],{type:s}):p.buffer;break;case"document":var f=new DOMParser;l=f.parseFromString(h,s);break;case"json":l=JSON.parse(h);break;default:l=h}setTimeout(function(){e&&e(l),r.manager.itemEnd(t)},0)}catch(e){setTimeout(function(){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)},0)}}else{fs[t]=[],fs[t].push({onLoad:e,onProgress:i,onError:n});var m=new XMLHttpRequest;for(var g in m.open("GET",t,!0),m.addEventListener("load",function(e){var i=this.response;us.add(t,i);var n=fs[t];if(delete fs[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");for(var a=0,o=n.length;a<o;a++){(s=n[a]).onLoad&&s.onLoad(i)}r.manager.itemEnd(t)}else{for(a=0,o=n.length;a<o;a++){var s;(s=n[a]).onError&&s.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}},!1),m.addEventListener("progress",function(e){for(var i=fs[t],n=0,r=i.length;n<r;n++){var a=i[n];a.onProgress&&a.onProgress(e)}},!1),m.addEventListener("error",function(e){var i=fs[t];delete fs[t];for(var n=0,a=i.length;n<a;n++){var o=i[n];o.onError&&o.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)},!1),m.addEventListener("abort",function(e){var i=fs[t];delete fs[t];for(var n=0,a=i.length;n<a;n++){var o=i[n];o.onError&&o.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)},!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(g,this.requestHeader[g]);m.send(null)}return r.manager.itemStart(t),m}fs[t].push({onLoad:e,onProgress:i,onError:n})},setPath:function(t){return this.path=t,this},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),Object.assign(function(t){this.manager=void 0!==t?t:ds}.prototype,{load:function(t,e,i,n){var r=this,a=new ms(r.manager);a.setPath(r.path),a.load(t,function(t){e(r.parse(JSON.parse(t)))},i,n)},parse:function(t,e){for(var i=[],n=0;n<t.length;n++){var r=hs.parse(t[n]);i.push(r)}e(i)},setPath:function(t){return this.path=t,this}}),Object.assign(function(t){this.manager=void 0!==t?t:ds,this._parser=null}.prototype,{load:function(t,e,i,n){var r=this,a=[],o=new _a;o.image=a;var s=new ms(this.manager);function c(c){s.load(t[c],function(t){var i=r._parser(t,!0);a[c]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},6===(h+=1)&&(1===i.mipmapCount&&(o.minFilter=Tt),o.format=i.format,o.needsUpdate=!0,e&&e(o))},i,n)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(t))for(var h=0,l=0,u=t.length;l<u;++l)c(l);else s.load(t,function(t){var i=r._parser(t,!0);if(i.isCubemap)for(var n=i.mipmaps.length/i.mipmapCount,s=0;s<n;s++){a[s]={mipmaps:[]};for(var c=0;c<i.mipmapCount;c++)a[s].mipmaps.push(i.mipmaps[s*i.mipmapCount+c]),a[s].format=i.format,a[s].width=i.width,a[s].height=i.height}else o.image.width=i.width,o.image.height=i.height,o.mipmaps=i.mipmaps;1===i.mipmapCount&&(o.minFilter=Tt),o.format=i.format,o.needsUpdate=!0,e&&e(o)},i,n);return o},setPath:function(t){return this.path=t,this}}),Object.assign(gs.prototype,{load:function(t,e,i,n){var r=this,a=new Qe,o=new ms(this.manager);return o.setResponseType("arraybuffer"),o.setPath(this.path),o.load(t,function(t){var i=r._parser(t);i&&(void 0!==i.image?a.image=i.image:void 0!==i.data&&(a.image.width=i.width,a.image.height=i.height,a.image.data=i.data),a.wrapS=void 0!==i.wrapS?i.wrapS:wt,a.wrapT=void 0!==i.wrapT?i.wrapT:wt,a.magFilter=void 0!==i.magFilter?i.magFilter:Tt,a.minFilter=void 0!==i.minFilter?i.minFilter:At,a.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.format&&(a.format=i.format),void 0!==i.type&&(a.type=i.type),void 0!==i.mipmaps&&(a.mipmaps=i.mipmaps),1===i.mipmapCount&&(a.minFilter=Tt),a.needsUpdate=!0,e&&e(a,i))},i,n),a},setPath:function(t){return this.path=t,this}}),Object.assign(vs.prototype,{crossOrigin:"anonymous",load:function(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=us.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout(function(){e&&e(a),r.manager.itemEnd(t)},0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),us.add(t,this),e&&e(this),r.manager.itemEnd(t)}function c(e){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)}return o.addEventListener("load",s,!1),o.addEventListener("error",c,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(t),o.src=t,o},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(ys.prototype,{crossOrigin:"anonymous",load:function(t,e,i,n){var r=new Mn,a=new vs(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function s(i){a.load(t[i],function(t){r.images[i]=t,6===++o&&(r.needsUpdate=!0,e&&e(r))},void 0,n)}for(var c=0;c<t.length;++c)s(c);return r},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(xs.prototype,{crossOrigin:"anonymous",load:function(t,e,i,n){var r=new Xe,a=new vs(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,function(i){r.image=i;var n=t.search(/\.jpe?g($|\?)/i)>0||0===t.search(/^data\:image\/jpeg/);r.format=n?kt:Vt,r.needsUpdate=!0,void 0!==e&&e(r)},i,n),r},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(bs.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){var i=this.getUtoTmapping(t);return this.getPoint(i,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],i=0;i<=t;i++)e.push(this.getPoint(i/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,i,n=[],r=this.getPoint(0),a=0;for(n.push(0),i=1;i<=t;i++)a+=(e=this.getPoint(i/t)).distanceTo(r),n.push(a),r=e;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var i,n=this.getLengths(),r=0,a=n.length;i=e||t*n[a-1];for(var o,s=0,c=a-1;s<=c;)if((o=n[r=Math.floor(s+(c-s)/2)]-i)<0)s=r+1;else{if(!(o>0)){c=r;break}c=r-1}if(n[r=c]===i)return r/(a-1);var h=n[r];return(r+(i-h)/(n[r+1]-h))/(a-1)},getTangent:function(t){var e=t-1e-4,i=t+1e-4;e<0&&(e=0),i>1&&(i=1);var n=this.getPoint(e);return this.getPoint(i).clone().sub(n).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var i,n,r,a=new Ue,o=[],s=[],c=[],h=new Ue,l=new ze;for(i=0;i<=t;i++)n=i/t,o[i]=this.getTangentAt(n),o[i].normalize();s[0]=new Ue,c[0]=new Ue;var u=Number.MAX_VALUE,p=Math.abs(o[0].x),d=Math.abs(o[0].y),f=Math.abs(o[0].z);for(p<=u&&(u=p,a.set(1,0,0)),d<=u&&(u=d,a.set(0,1,0)),f<=u&&a.set(0,0,1),h.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],h),c[0].crossVectors(o[0],s[0]),i=1;i<=t;i++)s[i]=s[i-1].clone(),c[i]=c[i-1].clone(),h.crossVectors(o[i-1],o[i]),h.length()>Number.EPSILON&&(h.normalize(),r=Math.acos(De.clamp(o[i-1].dot(o[i]),-1,1)),s[i].applyMatrix4(l.makeRotationAxis(h,r))),c[i].crossVectors(o[i],s[i]);if(!0===e)for(r=Math.acos(De.clamp(s[0].dot(s[t]),-1,1)),r/=t,o[0].dot(h.crossVectors(s[0],s[t]))>0&&(r=-r),i=1;i<=t;i++)s[i].applyMatrix4(l.makeRotationAxis(o[i],r*i)),c[i].crossVectors(o[i],s[i]);return{tangents:o,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),ws.prototype=Object.create(bs.prototype),ws.prototype.constructor=ws,ws.prototype.isEllipseCurve=!0,ws.prototype.getPoint=function(t,e){for(var i=e||new Ne,n=2*Math.PI,r=this.aEndAngle-this.aStartAngle,a=Math.abs(r)<Number.EPSILON;r<0;)r+=n;for(;r>n;)r-=n;r<Number.EPSILON&&(r=a?0:n),!0!==this.aClockwise||a||(r===n?r=-n:r-=n);var o=this.aStartAngle+t*r,s=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var h=Math.cos(this.aRotation),l=Math.sin(this.aRotation),u=s-this.aX,p=c-this.aY;s=u*h-p*l+this.aX,c=u*l+p*h+this.aY}return i.set(s,c)},ws.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},ws.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},ws.prototype.fromJSON=function(t){return bs.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},_s.prototype=Object.create(ws.prototype),_s.prototype.constructor=_s,_s.prototype.isArcCurve=!0;var Ss=new Ue,Es=new Ms,Ts=new Ms,Ls=new Ms;function As(t,e,i,n){bs.call(this),this.type="CatmullRomCurve3",this.points=t||[],this.closed=e||!1,this.curveType=i||"centripetal",this.tension=n||.5}function Ps(t,e,i,n,r){var a=.5*(n-e),o=.5*(r-i),s=t*t;return(2*i-2*n+a+o)*(t*s)+(-3*i+3*n-2*a-o)*s+a*t+i}function Cs(t,e,i,n){return function(t,e){var i=1-t;return i*i*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,i)+function(t,e){return t*t*e}(t,n)}function Rs(t,e,i,n,r){return function(t,e){var i=1-t;return i*i*i*e}(t,e)+function(t,e){var i=1-t;return 3*i*i*t*e}(t,i)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,r)}function Os(t,e,i,n){bs.call(this),this.type="CubicBezierCurve",this.v0=t||new Ne,this.v1=e||new Ne,this.v2=i||new Ne,this.v3=n||new Ne}function Is(t,e,i,n){bs.call(this),this.type="CubicBezierCurve3",this.v0=t||new Ue,this.v1=e||new Ue,this.v2=i||new Ue,this.v3=n||new Ue}function Ds(t,e){bs.call(this),this.type="LineCurve",this.v1=t||new Ne,this.v2=e||new Ne}function Ns(t,e){bs.call(this),this.type="LineCurve3",this.v1=t||new Ue,this.v2=e||new Ue}function zs(t,e,i){bs.call(this),this.type="QuadraticBezierCurve",this.v0=t||new Ne,this.v1=e||new Ne,this.v2=i||new Ne}function Bs(t,e,i){bs.call(this),this.type="QuadraticBezierCurve3",this.v0=t||new Ue,this.v1=e||new Ue,this.v2=i||new Ue}function Us(t){bs.call(this),this.type="SplineCurve",this.points=t||[]}As.prototype=Object.create(bs.prototype),As.prototype.constructor=As,As.prototype.isCatmullRomCurve3=!0,As.prototype.getPoint=function(t,e){var i,n,r,a,o=e||new Ue,s=this.points,c=s.length,h=(c-(this.closed?0:1))*t,l=Math.floor(h),u=h-l;if(this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/c)+1)*c:0===u&&l===c-1&&(l=c-2,u=1),this.closed||l>0?i=s[(l-1)%c]:(Ss.subVectors(s[0],s[1]).add(s[0]),i=Ss),n=s[l%c],r=s[(l+1)%c],this.closed||l+2<c?a=s[(l+2)%c]:(Ss.subVectors(s[c-1],s[c-2]).add(s[c-1]),a=Ss),"centripetal"===this.curveType||"chordal"===this.curveType){var p="chordal"===this.curveType?.5:.25,d=Math.pow(i.distanceToSquared(n),p),f=Math.pow(n.distanceToSquared(r),p),m=Math.pow(r.distanceToSquared(a),p);f<1e-4&&(f=1),d<1e-4&&(d=f),m<1e-4&&(m=f),Es.initNonuniformCatmullRom(i.x,n.x,r.x,a.x,d,f,m),Ts.initNonuniformCatmullRom(i.y,n.y,r.y,a.y,d,f,m),Ls.initNonuniformCatmullRom(i.z,n.z,r.z,a.z,d,f,m)}else"catmullrom"===this.curveType&&(Es.initCatmullRom(i.x,n.x,r.x,a.x,this.tension),Ts.initCatmullRom(i.y,n.y,r.y,a.y,this.tension),Ls.initCatmullRom(i.z,n.z,r.z,a.z,this.tension));return o.set(Es.calc(u),Ts.calc(u),Ls.calc(u)),o},As.prototype.copy=function(t){bs.prototype.copy.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},As.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);t.points=[];for(var e=0,i=this.points.length;e<i;e++){var n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},As.prototype.fromJSON=function(t){bs.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push((new Ue).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Os.prototype=Object.create(bs.prototype),Os.prototype.constructor=Os,Os.prototype.isCubicBezierCurve=!0,Os.prototype.getPoint=function(t,e){var i=e||new Ne,n=this.v0,r=this.v1,a=this.v2,o=this.v3;return i.set(Rs(t,n.x,r.x,a.x,o.x),Rs(t,n.y,r.y,a.y,o.y)),i},Os.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Os.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Os.prototype.fromJSON=function(t){return bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Is.prototype=Object.create(bs.prototype),Is.prototype.constructor=Is,Is.prototype.isCubicBezierCurve3=!0,Is.prototype.getPoint=function(t,e){var i=e||new Ue,n=this.v0,r=this.v1,a=this.v2,o=this.v3;return i.set(Rs(t,n.x,r.x,a.x,o.x),Rs(t,n.y,r.y,a.y,o.y),Rs(t,n.z,r.z,a.z,o.z)),i},Is.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Is.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Is.prototype.fromJSON=function(t){return bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Ds.prototype=Object.create(bs.prototype),Ds.prototype.constructor=Ds,Ds.prototype.isLineCurve=!0,Ds.prototype.getPoint=function(t,e){var i=e||new Ne;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i},Ds.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Ds.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},Ds.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Ds.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Ds.prototype.fromJSON=function(t){return bs.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ns.prototype=Object.create(bs.prototype),Ns.prototype.constructor=Ns,Ns.prototype.isLineCurve3=!0,Ns.prototype.getPoint=function(t,e){var i=e||new Ue;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i},Ns.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Ns.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Ns.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Ns.prototype.fromJSON=function(t){return bs.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},zs.prototype=Object.create(bs.prototype),zs.prototype.constructor=zs,zs.prototype.isQuadraticBezierCurve=!0,zs.prototype.getPoint=function(t,e){var i=e||new Ne,n=this.v0,r=this.v1,a=this.v2;return i.set(Cs(t,n.x,r.x,a.x),Cs(t,n.y,r.y,a.y)),i},zs.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},zs.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},zs.prototype.fromJSON=function(t){return bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Bs.prototype=Object.create(bs.prototype),Bs.prototype.constructor=Bs,Bs.prototype.isQuadraticBezierCurve3=!0,Bs.prototype.getPoint=function(t,e){var i=e||new Ue,n=this.v0,r=this.v1,a=this.v2;return i.set(Cs(t,n.x,r.x,a.x),Cs(t,n.y,r.y,a.y),Cs(t,n.z,r.z,a.z)),i},Bs.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Bs.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Bs.prototype.fromJSON=function(t){return bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Us.prototype=Object.create(bs.prototype),Us.prototype.constructor=Us,Us.prototype.isSplineCurve=!0,Us.prototype.getPoint=function(t,e){var i=e||new Ne,n=this.points,r=(n.length-1)*t,a=Math.floor(r),o=r-a,s=n[0===a?a:a-1],c=n[a],h=n[a>n.length-2?n.length-1:a+1],l=n[a>n.length-3?n.length-1:a+2];return i.set(Ps(o,s.x,c.x,h.x,l.x),Ps(o,s.y,c.y,h.y,l.y)),i},Us.prototype.copy=function(t){bs.prototype.copy.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push(n.clone())}return this},Us.prototype.toJSON=function(){var t=bs.prototype.toJSON.call(this);t.points=[];for(var e=0,i=this.points.length;e<i;e++){var n=this.points[e];t.points.push(n.toArray())}return t},Us.prototype.fromJSON=function(t){bs.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push((new Ne).fromArray(n))}return this};var Gs=Object.freeze({ArcCurve:_s,CatmullRomCurve3:As,CubicBezierCurve:Os,CubicBezierCurve3:Is,EllipseCurve:ws,LineCurve:Ds,LineCurve3:Ns,QuadraticBezierCurve:zs,QuadraticBezierCurve3:Bs,SplineCurve:Us});function Fs(){bs.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function Hs(t){Fs.call(this),this.type="Path",this.currentPoint=new Ne,t&&this.setFromPoints(t)}function ks(t){Hs.call(this,t),this.uuid=De.generateUUID(),this.type="Shape",this.holes=[]}function Vs(t,e){Mi.call(this),this.type="Light",this.color=new hi(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function js(t,e,i){Vs.call(this,t,i),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(Mi.DefaultUp),this.updateMatrix(),this.groundColor=new hi(e)}function Ws(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new Ne(512,512),this.map=null,this.matrix=new ze}function qs(){Ws.call(this,new jr(50,1,.5,500))}function Xs(t,e,i,n,r,a){Vs.call(this,t,e),this.type="SpotLight",this.position.copy(Mi.DefaultUp),this.updateMatrix(),this.target=new Mi,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==i?i:0,this.angle=void 0!==n?n:Math.PI/3,this.penumbra=void 0!==r?r:0,this.decay=void 0!==a?a:1,this.shadow=new qs}function Ys(t,e,i,n){Vs.call(this,t,e),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==i?i:0,this.decay=void 0!==n?n:1,this.shadow=new Ws(new jr(90,1,.5,500))}function Js(t,e,i,n,r,a){Vr.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==t?t:-1,this.right=void 0!==e?e:1,this.top=void 0!==i?i:1,this.bottom=void 0!==n?n:-1,this.near=void 0!==r?r:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function Zs(){Ws.call(this,new Js(-5,5,5,-5,.5,500))}function Qs(t,e){Vs.call(this,t,e),this.type="DirectionalLight",this.position.copy(Mi.DefaultUp),this.updateMatrix(),this.target=new Mi,this.shadow=new Zs}function Ks(t,e){Vs.call(this,t,e),this.type="AmbientLight",this.castShadow=void 0}function $s(t,e,i,n){Vs.call(this,t,e),this.type="RectAreaLight",this.width=void 0!==i?i:10,this.height=void 0!==n?n:10}function tc(t){this.manager=void 0!==t?t:ds,this.textures={}}Fs.prototype=Object.assign(Object.create(bs.prototype),{constructor:Fs,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new Ds(e,t))},getPoint:function(t){for(var e=t*this.getLength(),i=this.getCurveLengths(),n=0;n<i.length;){if(i[n]>=e){var r=i[n]-e,a=this.curves[n],o=a.getLength(),s=0===o?0:1-r/o;return a.getPointAt(s)}n++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,i=0,n=this.curves.length;i<n;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,i=[],n=0,r=this.curves;n<r.length;n++)for(var a=r[n],o=a&&a.isEllipseCurve?2*t:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?t*a.points.length:t,s=a.getPoints(o),c=0;c<s.length;c++){var h=s[c];e&&e.equals(h)||(i.push(h),e=h)}return this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])&&i.push(i[0]),i},copy:function(t){bs.prototype.copy.call(this,t),this.curves=[];for(var e=0,i=t.curves.length;e<i;e++){var n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=bs.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,i=this.curves.length;e<i;e++){var n=this.curves[e];t.curves.push(n.toJSON())}return t},fromJSON:function(t){bs.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,i=t.curves.length;e<i;e++){var n=t.curves[e];this.curves.push((new Gs[n.type]).fromJSON(n))}return this}}),Hs.prototype=Object.assign(Object.create(Fs.prototype),{constructor:Hs,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y)},moveTo:function(t,e){this.currentPoint.set(t,e)},lineTo:function(t,e){var i=new Ds(this.currentPoint.clone(),new Ne(t,e));this.curves.push(i),this.currentPoint.set(t,e)},quadraticCurveTo:function(t,e,i,n){var r=new zs(this.currentPoint.clone(),new Ne(t,e),new Ne(i,n));this.curves.push(r),this.currentPoint.set(i,n)},bezierCurveTo:function(t,e,i,n,r,a){var o=new Os(this.currentPoint.clone(),new Ne(t,e),new Ne(i,n),new Ne(r,a));this.curves.push(o),this.currentPoint.set(r,a)},splineThru:function(t){var e=new Us([this.currentPoint.clone()].concat(t));this.curves.push(e),this.currentPoint.copy(t[t.length-1])},arc:function(t,e,i,n,r,a){var o=this.currentPoint.x,s=this.currentPoint.y;this.absarc(t+o,e+s,i,n,r,a)},absarc:function(t,e,i,n,r,a){this.absellipse(t,e,i,i,n,r,a)},ellipse:function(t,e,i,n,r,a,o,s){var c=this.currentPoint.x,h=this.currentPoint.y;this.absellipse(t+c,e+h,i,n,r,a,o,s)},absellipse:function(t,e,i,n,r,a,o,s){var c=new ws(t,e,i,n,r,a,o,s);if(this.curves.length>0){var h=c.getPoint(0);h.equals(this.currentPoint)||this.lineTo(h.x,h.y)}this.curves.push(c);var l=c.getPoint(1);this.currentPoint.copy(l)},copy:function(t){return Fs.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=Fs.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return Fs.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),ks.prototype=Object.assign(Object.create(Hs.prototype),{constructor:ks,getPointsHoles:function(t){for(var e=[],i=0,n=this.holes.length;i<n;i++)e[i]=this.holes[i].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){Hs.prototype.copy.call(this,t),this.holes=[];for(var e=0,i=t.holes.length;e<i;e++){var n=t.holes[e];this.holes.push(n.clone())}return this},toJSON:function(){var t=Hs.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,i=this.holes.length;e<i;e++){var n=this.holes[e];t.holes.push(n.toJSON())}return t},fromJSON:function(t){Hs.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,i=t.holes.length;e<i;e++){var n=t.holes[e];this.holes.push((new Hs).fromJSON(n))}return this}}),Vs.prototype=Object.assign(Object.create(Mi.prototype),{constructor:Vs,isLight:!0,copy:function(t){return Mi.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=Mi.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),js.prototype=Object.assign(Object.create(Vs.prototype),{constructor:js,isHemisphereLight:!0,copy:function(t){return Vs.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(Ws.prototype,{copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),qs.prototype=Object.assign(Object.create(Ws.prototype),{constructor:qs,isSpotLightShadow:!0,update:function(t){var e=this.camera,i=2*De.RAD2DEG*t.angle,n=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;i===e.fov&&n===e.aspect&&r===e.far||(e.fov=i,e.aspect=n,e.far=r,e.updateProjectionMatrix())}}),Xs.prototype=Object.assign(Object.create(Vs.prototype),{constructor:Xs,isSpotLight:!0,copy:function(t){return Vs.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),Ys.prototype=Object.assign(Object.create(Vs.prototype),{constructor:Ys,isPointLight:!0,copy:function(t){return Vs.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),Js.prototype=Object.assign(Object.create(Vr.prototype),{constructor:Js,isOrthographicCamera:!0,copy:function(t,e){return Vr.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,i,n,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2,r=i-t,a=i+t,o=n+e,s=n-e;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),h=this.zoom/(this.view.height/this.view.fullHeight),l=(this.right-this.left)/this.view.width,u=(this.top-this.bottom)/this.view.height;a=(r+=l*(this.view.offsetX/c))+l*(this.view.width/c),s=(o-=u*(this.view.offsetY/h))-u*(this.view.height/h)}this.projectionMatrix.makeOrthographic(r,a,o,s,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Mi.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),Zs.prototype=Object.assign(Object.create(Ws.prototype),{constructor:Zs}),Qs.prototype=Object.assign(Object.create(Vs.prototype),{constructor:Qs,isDirectionalLight:!0,copy:function(t){return Vs.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),Ks.prototype=Object.assign(Object.create(Vs.prototype),{constructor:Ks,isAmbientLight:!0}),$s.prototype=Object.assign(Object.create(Vs.prototype),{constructor:$s,isRectAreaLight:!0,copy:function(t){return Vs.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=Vs.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),Object.assign(tc.prototype,{load:function(t,e,i,n){var r=this,a=new ms(r.manager);a.setPath(r.path),a.load(t,function(t){e(r.parse(JSON.parse(t)))},i,n)},parse:function(t){var e=this.textures;function i(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}var n=new Jo[t.type];if(void 0!==t.uuid&&(n.uuid=t.uuid),void 0!==t.name&&(n.name=t.name),void 0!==t.color&&n.color.setHex(t.color),void 0!==t.roughness&&(n.roughness=t.roughness),void 0!==t.metalness&&(n.metalness=t.metalness),void 0!==t.emissive&&n.emissive.setHex(t.emissive),void 0!==t.specular&&n.specular.setHex(t.specular),void 0!==t.shininess&&(n.shininess=t.shininess),void 0!==t.clearCoat&&(n.clearCoat=t.clearCoat),void 0!==t.clearCoatRoughness&&(n.clearCoatRoughness=t.clearCoatRoughness),void 0!==t.vertexColors&&(n.vertexColors=t.vertexColors),void 0!==t.fog&&(n.fog=t.fog),void 0!==t.flatShading&&(n.flatShading=t.flatShading),void 0!==t.blending&&(n.blending=t.blending),void 0!==t.combine&&(n.combine=t.combine),void 0!==t.side&&(n.side=t.side),void 0!==t.opacity&&(n.opacity=t.opacity),void 0!==t.transparent&&(n.transparent=t.transparent),void 0!==t.alphaTest&&(n.alphaTest=t.alphaTest),void 0!==t.depthTest&&(n.depthTest=t.depthTest),void 0!==t.depthWrite&&(n.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(n.colorWrite=t.colorWrite),void 0!==t.wireframe&&(n.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(n.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(n.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(n.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(n.rotation=t.rotation),1!==t.linewidth&&(n.linewidth=t.linewidth),void 0!==t.dashSize&&(n.dashSize=t.dashSize),void 0!==t.gapSize&&(n.gapSize=t.gapSize),void 0!==t.scale&&(n.scale=t.scale),void 0!==t.polygonOffset&&(n.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(n.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(n.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(n.skinning=t.skinning),void 0!==t.morphTargets&&(n.morphTargets=t.morphTargets),void 0!==t.dithering&&(n.dithering=t.dithering),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.uniforms)for(var r in t.uniforms){var a=t.uniforms[r];switch(n.uniforms[r]={},a.type){case"t":n.uniforms[r].value=i(a.value);break;case"c":n.uniforms[r].value=(new hi).setHex(a.value);break;case"v2":n.uniforms[r].value=(new Ne).fromArray(a.value);break;case"v3":n.uniforms[r].value=(new Ue).fromArray(a.value);break;case"v4":n.uniforms[r].value=(new Ye).fromArray(a.value);break;case"m4":n.uniforms[r].value=(new ze).fromArray(a.value);break;default:n.uniforms[r].value=a.value}}if(void 0!==t.defines&&(n.defines=t.defines),void 0!==t.vertexShader&&(n.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(n.fragmentShader=t.fragmentShader),void 0!==t.shading&&(n.flatShading=1===t.shading),void 0!==t.size&&(n.size=t.size),void 0!==t.sizeAttenuation&&(n.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(n.map=i(t.map)),void 0!==t.alphaMap&&(n.alphaMap=i(t.alphaMap),n.transparent=!0),void 0!==t.bumpMap&&(n.bumpMap=i(t.bumpMap)),void 0!==t.bumpScale&&(n.bumpScale=t.bumpScale),void 0!==t.normalMap&&(n.normalMap=i(t.normalMap)),void 0!==t.normalMapType&&(n.normalMapType=t.normalMapType),void 0!==t.normalScale){var o=t.normalScale;!1===Array.isArray(o)&&(o=[o,o]),n.normalScale=(new Ne).fromArray(o)}return void 0!==t.displacementMap&&(n.displacementMap=i(t.displacementMap)),void 0!==t.displacementScale&&(n.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(n.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(n.roughnessMap=i(t.roughnessMap)),void 0!==t.metalnessMap&&(n.metalnessMap=i(t.metalnessMap)),void 0!==t.emissiveMap&&(n.emissiveMap=i(t.emissiveMap)),void 0!==t.emissiveIntensity&&(n.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(n.specularMap=i(t.specularMap)),void 0!==t.envMap&&(n.envMap=i(t.envMap)),void 0!==t.envMapIntensity&&(n.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(n.reflectivity=t.reflectivity),void 0!==t.lightMap&&(n.lightMap=i(t.lightMap)),void 0!==t.lightMapIntensity&&(n.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(n.aoMap=i(t.aoMap)),void 0!==t.aoMapIntensity&&(n.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(n.gradientMap=i(t.gradientMap)),n},setPath:function(t){return this.path=t,this},setTextures:function(t){return this.textures=t,this}});var ec=function(t){var e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)};function ic(t){this.manager=void 0!==t?t:ds}Object.assign(ic.prototype,{load:function(t,e,i,n){var r=this,a=new ms(r.manager);a.setPath(r.path),a.load(t,function(t){e(r.parse(JSON.parse(t)))},i,n)},parse:function(t){var e=new Hi,i=t.data.index;if(void 0!==i){var n=new nc[i.type](i.array);e.setIndex(new Ai(n,1))}var r=t.data.attributes;for(var a in r){var o=r[a];n=new nc[o.type](o.array);e.addAttribute(a,new Ai(n,o.itemSize,o.normalized))}var s=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==s)for(var c=0,h=s.length;c!==h;++c){var l=s[c];e.addGroup(l.start,l.count,l.materialIndex)}var u=t.data.boundingSphere;if(void 0!==u){var p=new Ue;void 0!==u.center&&p.fromArray(u.center),e.boundingSphere=new $e(p,u.radius)}return t.name&&(e.name=t.name),t.userData&&(e.userData=t.userData),e},setPath:function(t){return this.path=t,this}});var nc={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function rc(t){this.manager=void 0!==t?t:ds,this.resourcePath=""}Object.assign(rc.prototype,{crossOrigin:"anonymous",load:function(t,e,i,n){var r=this,a=void 0===this.path?ec(t):this.path;this.resourcePath=this.resourcePath||a;var o=new ms(r.manager);o.setPath(this.path),o.load(t,function(i){var a=null;try{a=JSON.parse(i)}catch(e){return void 0!==n&&n(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?r.parse(a,e):console.error("THREE.ObjectLoader: Can't load "+t)},i,n)},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this},setCrossOrigin:function(t){return this.crossOrigin=t,this},parse:function(t,e){var i=this.parseShape(t.shapes),n=this.parseGeometries(t.geometries,i),r=this.parseImages(t.images,function(){void 0!==e&&e(s)}),a=this.parseTextures(t.textures,r),o=this.parseMaterials(t.materials,a),s=this.parseObject(t.object,n,o);return t.animations&&(s.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(s),s},parseShape:function(t){var e={};if(void 0!==t)for(var i=0,n=t.length;i<n;i++){var r=(new ks).fromJSON(t[i]);e[r.uuid]=r}return e},parseGeometries:function(t,e){var i={};if(void 0!==t)for(var n=new ic,r=0,a=t.length;r<a;r++){var o,s=t[r];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new Uo[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new Uo[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new Uo[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new Uo[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new Uo[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new Uo[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new Uo[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new Uo[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new Uo[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new Uo[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"LatheGeometry":case"LatheBufferGeometry":o=new Uo[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new Uo[s.type](s.vertices,s.indices,s.radius,s.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var c=[],h=0,l=s.shapes.length;h<l;h++){var u=e[s.shapes[h]];c.push(u)}o=new Uo[s.type](c,s.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(c=[],h=0,l=s.shapes.length;h<l;h++){u=e[s.shapes[h]];c.push(u)}var p=s.options.extrudePath;void 0!==p&&(s.options.extrudePath=(new Gs[p.type]).fromJSON(p)),o=new Uo[s.type](c,s.options);break;case"BufferGeometry":o=n.parse(s);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in THREE)o=(new THREE.LegacyJSONLoader).parse(s,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),!0===o.isBufferGeometry&&void 0!==s.userData&&(o.userData=s.userData),i[s.uuid]=o}return i},parseMaterials:function(t,e){var i={},n={};if(void 0!==t){var r=new tc;r.setTextures(e);for(var a=0,o=t.length;a<o;a++){var s=t[a];if("MultiMaterial"===s.type){for(var c=[],h=0;h<s.materials.length;h++){var l=s.materials[h];void 0===i[l.uuid]&&(i[l.uuid]=r.parse(l)),c.push(i[l.uuid])}n[s.uuid]=c}else n[s.uuid]=r.parse(s),i[s.uuid]=n[s.uuid]}}return n},parseAnimations:function(t){for(var e=[],i=0;i<t.length;i++){var n=t[i],r=hs.parse(n);void 0!==n.uuid&&(r.uuid=n.uuid),e.push(r)}return e},parseImages:function(t,e){var i=this,n={};function r(t){return i.manager.itemStart(t),a.load(t,function(){i.manager.itemEnd(t)},void 0,function(){i.manager.itemError(t),i.manager.itemEnd(t)})}if(void 0!==t&&t.length>0){var a=new vs(new ps(e));a.setCrossOrigin(this.crossOrigin);for(var o=0,s=t.length;o<s;o++){var c=t[o],h=c.url;if(Array.isArray(h)){n[c.uuid]=[];for(var l=0,u=h.length;l<u;l++){var p=h[l],d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(p)?p:i.resourcePath+p;n[c.uuid].push(r(d))}}else{d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:i.resourcePath+c.url;n[c.uuid]=r(d)}}}return n},parseTextures:function(t,e){function i(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}var n={};if(void 0!==t)for(var r=0,a=t.length;r<a;r++){var o,s=t[r];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(o=Array.isArray(e[s.image])?new Mn(e[s.image]):new Xe(e[s.image])).needsUpdate=!0,o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),void 0!==s.mapping&&(o.mapping=i(s.mapping,lc)),void 0!==s.offset&&o.offset.fromArray(s.offset),void 0!==s.repeat&&o.repeat.fromArray(s.repeat),void 0!==s.center&&o.center.fromArray(s.center),void 0!==s.rotation&&(o.rotation=s.rotation),void 0!==s.wrap&&(o.wrapS=i(s.wrap[0],uc),o.wrapT=i(s.wrap[1],uc)),void 0!==s.format&&(o.format=s.format),void 0!==s.minFilter&&(o.minFilter=i(s.minFilter,pc)),void 0!==s.magFilter&&(o.magFilter=i(s.magFilter,pc)),void 0!==s.anisotropy&&(o.anisotropy=s.anisotropy),void 0!==s.flipY&&(o.flipY=s.flipY),n[s.uuid]=o}return n},parseObject:function(t,e,i){var n;function r(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function a(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],n=0,r=t.length;n<r;n++){var a=t[n];void 0===i[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),e.push(i[a])}return e}return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),i[t]}}switch(t.type){case"Scene":n=new oa,void 0!==t.background&&Number.isInteger(t.background)&&(n.background=new hi(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?n.fog=new aa(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(n.fog=new ra(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":n=new jr(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(n.focus=t.focus),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.filmGauge&&(n.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(n.filmOffset=t.filmOffset),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case"OrthographicCamera":n=new Js(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case"AmbientLight":n=new Ks(t.color,t.intensity);break;case"DirectionalLight":n=new Qs(t.color,t.intensity);break;case"PointLight":n=new Ys(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":n=new $s(t.color,t.intensity,t.width,t.height);break;case"SpotLight":n=new Xs(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":n=new js(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var o=r(t.geometry),s=a(t.material);n=o.bones&&o.bones.length>0?new pa(o,s):new un(o,s);break;case"LOD":n=new ua;break;case"Line":n=new ga(r(t.geometry),a(t.material),t.mode);break;case"LineLoop":n=new ya(r(t.geometry),a(t.material));break;case"LineSegments":n=new va(r(t.geometry),a(t.material));break;case"PointCloud":case"Points":n=new ba(r(t.geometry),a(t.material));break;case"Sprite":n=new la(a(t.material));break;case"Group":n=new kr;break;default:n=new Mi}if(n.uuid=t.uuid,void 0!==t.name&&(n.name=t.name),void 0!==t.matrix?(n.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(n.matrixAutoUpdate=t.matrixAutoUpdate),n.matrixAutoUpdate&&n.matrix.decompose(n.position,n.quaternion,n.scale)):(void 0!==t.position&&n.position.fromArray(t.position),void 0!==t.rotation&&n.rotation.fromArray(t.rotation),void 0!==t.quaternion&&n.quaternion.fromArray(t.quaternion),void 0!==t.scale&&n.scale.fromArray(t.scale)),void 0!==t.castShadow&&(n.castShadow=t.castShadow),void 0!==t.receiveShadow&&(n.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(n.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(n.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&n.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(n.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.frustumCulled&&(n.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(n.renderOrder=t.renderOrder),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.layers&&(n.layers.mask=t.layers),void 0!==t.children)for(var c=t.children,h=0;h<c.length;h++)n.add(this.parseObject(c[h],e,i));if("LOD"===t.type)for(var l=t.levels,u=0;u<l.length;u++){var p=l[u],d=n.getObjectByProperty("uuid",p.object);void 0!==d&&n.addLevel(d,p.distance)}return n}});var ac,oc,sc,cc,hc,lc={UVMapping:300,CubeReflectionMapping:dt,CubeRefractionMapping:ft,EquirectangularReflectionMapping:mt,EquirectangularRefractionMapping:gt,SphericalReflectionMapping:vt,CubeUVReflectionMapping:yt,CubeUVRefractionMapping:xt},uc={RepeatWrapping:bt,ClampToEdgeWrapping:wt,MirroredRepeatWrapping:_t},pc={NearestFilter:Mt,NearestMipMapNearestFilter:St,NearestMipMapLinearFilter:Et,LinearFilter:Tt,LinearMipMapNearestFilter:Lt,LinearMipMapLinearFilter:At};function dc(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.manager=void 0!==t?t:ds,this.options=void 0}function fc(){this.type="ShapePath",this.color=new hi,this.subPaths=[],this.currentPath=null}function mc(t){this.type="Font",this.data=t}function gc(t,e,i,n,r){var a=r.glyphs[t]||r.glyphs["?"];if(a){var o,s,c,h,l,u,p,d,f=new fc;if(a.o)for(var m=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),g=0,v=m.length;g<v;){switch(m[g++]){case"m":o=m[g++]*e+i,s=m[g++]*e+n,f.moveTo(o,s);break;case"l":o=m[g++]*e+i,s=m[g++]*e+n,f.lineTo(o,s);break;case"q":c=m[g++]*e+i,h=m[g++]*e+n,l=m[g++]*e+i,u=m[g++]*e+n,f.quadraticCurveTo(l,u,c,h);break;case"b":c=m[g++]*e+i,h=m[g++]*e+n,l=m[g++]*e+i,u=m[g++]*e+n,p=m[g++]*e+i,d=m[g++]*e+n,f.bezierCurveTo(l,u,p,d,c,h)}}return{offsetX:a.ha*e,path:f}}}function vc(){}dc.prototype={constructor:dc,setOptions:function(t){return this.options=t,this},load:function(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=us.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout(function(){e&&e(a),r.manager.itemEnd(t)},0),a;fetch(t).then(function(t){return t.blob()}).then(function(t){return createImageBitmap(t,r.options)}).then(function(i){us.add(t,i),e&&e(i),r.manager.itemEnd(t)}).catch(function(e){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)})},setCrossOrigin:function(){return this},setPath:function(t){return this.path=t,this}},Object.assign(fc.prototype,{moveTo:function(t,e){this.currentPath=new Hs,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e)},lineTo:function(t,e){this.currentPath.lineTo(t,e)},quadraticCurveTo:function(t,e,i,n){this.currentPath.quadraticCurveTo(t,e,i,n)},bezierCurveTo:function(t,e,i,n,r,a){this.currentPath.bezierCurveTo(t,e,i,n,r,a)},splineThru:function(t){this.currentPath.splineThru(t)},toShapes:function(t,e){function i(t){for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i],a=new ks;a.curves=r.curves,e.push(a)}return e}function n(t,e){for(var i=e.length,n=!1,r=i-1,a=0;a<i;r=a++){var o=e[r],s=e[a],c=s.x-o.x,h=s.y-o.y;if(Math.abs(h)>Number.EPSILON){if(h<0&&(o=e[a],c=-c,s=e[r],h=-h),t.y<o.y||t.y>s.y)continue;if(t.y===o.y){if(t.x===o.x)return!0}else{var l=h*(t.x-o.x)-c*(t.y-o.y);if(0===l)return!0;if(l<0)continue;n=!n}}else{if(t.y!==o.y)continue;if(s.x<=t.x&&t.x<=o.x||o.x<=t.x&&t.x<=s.x)return!0}}return n}var r=po.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===e)return i(a);var o,s,c,h=[];if(1===a.length)return s=a[0],(c=new ks).curves=s.curves,h.push(c),h;var l=!r(a[0].getPoints());l=t?!l:l;var u,p,d=[],f=[],m=[],g=0;f[g]=void 0,m[g]=[];for(var v=0,y=a.length;v<y;v++)o=r(u=(s=a[v]).getPoints()),(o=t?!o:o)?(!l&&f[g]&&g++,f[g]={s:new ks,p:u},f[g].s.curves=s.curves,l&&g++,m[g]=[]):m[g].push({h:s,p:u[0]});if(!f[0])return i(a);if(f.length>1){for(var x=!1,b=[],w=0,_=f.length;w<_;w++)d[w]=[];for(w=0,_=f.length;w<_;w++)for(var M=m[w],S=0;S<M.length;S++){for(var E=M[S],T=!0,L=0;L<f.length;L++)n(E.p,f[L].p)&&(w!==L&&b.push({froms:w,tos:L,hole:S}),T?(T=!1,d[L].push(E)):x=!0);T&&d[w].push(E)}b.length>0&&(x||(m=d))}v=0;for(var A=f.length;v<A;v++){c=f[v].s,h.push(c);for(var P=0,C=(p=m[v]).length;P<C;P++)c.holes.push(p[P].h)}return h}}),Object.assign(mc.prototype,{isFont:!0,generateShapes:function(t,e){void 0===e&&(e=100);for(var i=[],n=function(t,e,i){for(var n=Array.from?Array.from(t):String(t).split(""),r=e/i.resolution,a=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*r,o=[],s=0,c=0,h=0;h<n.length;h++){var l=n[h];if("\n"===l)s=0,c-=a;else{var u=gc(l,r,s,c,i);s+=u.offsetX,o.push(u.path)}}return o}(t,e,this.data),r=0,a=n.length;r<a;r++)Array.prototype.push.apply(i,n[r].toShapes());return i}}),Object.assign(function(t){this.manager=void 0!==t?t:ds}.prototype,{load:function(t,e,i,n){var r=this,a=new ms(this.manager);a.setPath(this.path),a.load(t,function(t){var i;try{i=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),i=JSON.parse(t.substring(65,t.length-2))}var n=r.parse(i);e&&e(n)},i,n)},parse:function(t){return new mc(t)},setPath:function(t){return this.path=t,this}}),vc.Handlers={handlers:[],add:function(t,e){this.handlers.push(t,e)},get:function(t){for(var e=this.handlers,i=0,n=e.length;i<n;i+=2){var r=e[i],a=e[i+1];if(r.test(t))return a}return null}},Object.assign(vc.prototype,{crossOrigin:"anonymous",onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(t,e,i){for(var n=[],r=0;r<t.length;++r)n[r]=this.createMaterial(t[r],e,i);return n},createMaterial:(ac={NoBlending:A,NormalBlending:P,AdditiveBlending:C,SubtractiveBlending:R,MultiplyBlending:O,CustomBlending:I},oc=new hi,sc=new xs,cc=new tc,function(t,e,i){var n={};function r(t,r,a,o,s){var c,h=e+t,l=vc.Handlers.get(h);null!==l?c=l.load(h):(sc.setCrossOrigin(i),c=sc.load(h)),void 0!==r&&(c.repeat.fromArray(r),1!==r[0]&&(c.wrapS=bt),1!==r[1]&&(c.wrapT=bt)),void 0!==a&&c.offset.fromArray(a),void 0!==o&&("repeat"===o[0]&&(c.wrapS=bt),"mirror"===o[0]&&(c.wrapS=_t),"repeat"===o[1]&&(c.wrapT=bt),"mirror"===o[1]&&(c.wrapT=_t)),void 0!==s&&(c.anisotropy=s);var u=De.generateUUID();return n[u]=c,u}var a={uuid:De.generateUUID(),type:"MeshLambertMaterial"};for(var o in t){var s=t[o];switch(o){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":a.name=s;break;case"blending":a.blending=ac[s];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",o,"is no longer supported.");break;case"colorDiffuse":a.color=oc.fromArray(s).getHex();break;case"colorSpecular":a.specular=oc.fromArray(s).getHex();break;case"colorEmissive":a.emissive=oc.fromArray(s).getHex();break;case"specularCoef":a.shininess=s;break;case"shading":"basic"===s.toLowerCase()&&(a.type="MeshBasicMaterial"),"phong"===s.toLowerCase()&&(a.type="MeshPhongMaterial"),"standard"===s.toLowerCase()&&(a.type="MeshStandardMaterial");break;case"mapDiffuse":a.map=r(s,t.mapDiffuseRepeat,t.mapDiffuseOffset,t.mapDiffuseWrap,t.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":a.emissiveMap=r(s,t.mapEmissiveRepeat,t.mapEmissiveOffset,t.mapEmissiveWrap,t.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":a.lightMap=r(s,t.mapLightRepeat,t.mapLightOffset,t.mapLightWrap,t.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":a.aoMap=r(s,t.mapAORepeat,t.mapAOOffset,t.mapAOWrap,t.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":a.bumpMap=r(s,t.mapBumpRepeat,t.mapBumpOffset,t.mapBumpWrap,t.mapBumpAnisotropy);break;case"mapBumpScale":a.bumpScale=s;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":a.normalMap=r(s,t.mapNormalRepeat,t.mapNormalOffset,t.mapNormalWrap,t.mapNormalAnisotropy);break;case"mapNormalFactor":a.normalScale=s;break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":a.specularMap=r(s,t.mapSpecularRepeat,t.mapSpecularOffset,t.mapSpecularWrap,t.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":a.metalnessMap=r(s,t.mapMetalnessRepeat,t.mapMetalnessOffset,t.mapMetalnessWrap,t.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":a.roughnessMap=r(s,t.mapRoughnessRepeat,t.mapRoughnessOffset,t.mapRoughnessWrap,t.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":a.alphaMap=r(s,t.mapAlphaRepeat,t.mapAlphaOffset,t.mapAlphaWrap,t.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":a.side=M;break;case"doubleSided":a.side=S;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),a.opacity=s;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":a[o]=s;break;case"vertexColors":!0===s&&(a.vertexColors=L),"face"===s&&(a.vertexColors=T);break;default:console.error("THREE.Loader.createMaterial: Unsupported",o,s)}}return"MeshBasicMaterial"===a.type&&delete a.emissive,"MeshPhongMaterial"!==a.type&&delete a.specular,a.opacity<1&&(a.transparent=!0),cc.setTextures(n),cc.parse(a)})});var yc,xc,bc,wc,_c,Mc,Sc,Ec,Tc,Lc,Ac={getContext:function(){return void 0===hc&&(hc=new(window.AudioContext||window.webkitAudioContext)),hc},setContext:function(t){hc=t}};function Pc(t){this.manager=void 0!==t?t:ds}function Cc(t,e,i,n){Mi.call(this),this.type="CubeCamera";var r=new jr(90,1,t,e);r.up.set(0,-1,0),r.lookAt(new Ue(1,0,0)),this.add(r);var a=new jr(90,1,t,e);a.up.set(0,-1,0),a.lookAt(new Ue(-1,0,0)),this.add(a);var o=new jr(90,1,t,e);o.up.set(0,0,1),o.lookAt(new Ue(0,1,0)),this.add(o);var s=new jr(90,1,t,e);s.up.set(0,0,-1),s.lookAt(new Ue(0,-1,0)),this.add(s);var c=new jr(90,1,t,e);c.up.set(0,-1,0),c.lookAt(new Ue(0,0,1)),this.add(c);var h=new jr(90,1,t,e);h.up.set(0,-1,0),h.lookAt(new Ue(0,0,-1)),this.add(h),n=n||{format:kt,magFilter:Tt,minFilter:Tt},this.renderTarget=new Ze(i,i,n),this.renderTarget.texture.name="CubeCamera",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var i=this.renderTarget,n=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,i.activeCubeFace=0,t.render(e,r,i),i.activeCubeFace=1,t.render(e,a,i),i.activeCubeFace=2,t.render(e,o,i),i.activeCubeFace=3,t.render(e,s,i),i.activeCubeFace=4,t.render(e,c,i),i.texture.generateMipmaps=n,i.activeCubeFace=5,t.render(e,h,i),t.setRenderTarget(null)},this.clear=function(t,e,i,n){for(var r=this.renderTarget,a=0;a<6;a++)r.activeCubeFace=a,t.setRenderTarget(r),t.clear(e,i,n);t.setRenderTarget(null)}}function Rc(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function Oc(){Mi.call(this),this.type="AudioListener",this.context=Ac.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0}function Ic(t){Mi.call(this),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function Dc(t){Ic.call(this,t),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function Nc(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function zc(t,e,i){this.binding=t,this.valueSize=i;var n,r=Float64Array;switch(e){case"quaternion":n=this._slerp;break;case"string":case"bool":r=Array,n=this._select;break;default:n=this._lerp}this.buffer=new r(4*i),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(Pc.prototype,{load:function(t,e,i,n){var r=new ms(this.manager);r.setResponseType("arraybuffer"),r.setPath(this.path),r.load(t,function(t){var i=t.slice(0);Ac.getContext().decodeAudioData(i,function(t){e(t)})},i,n)},setPath:function(t){return this.path=t,this}}),Object.assign(function(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new jr,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new jr,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}.prototype,{update:(Tc=new ze,Lc=new ze,function(t){if(yc!==this||xc!==t.focus||bc!==t.fov||wc!==t.aspect*this.aspect||_c!==t.near||Mc!==t.far||Sc!==t.zoom||Ec!==this.eyeSep){yc=this,xc=t.focus,bc=t.fov,wc=t.aspect*this.aspect,_c=t.near,Mc=t.far,Sc=t.zoom;var e,i,n=t.projectionMatrix.clone(),r=(Ec=this.eyeSep/2)*_c/xc,a=_c*Math.tan(De.DEG2RAD*bc*.5)/Sc;Lc.elements[12]=-Ec,Tc.elements[12]=Ec,e=-a*wc+r,i=a*wc+r,n.elements[0]=2*_c/(i-e),n.elements[8]=(i+e)/(i-e),this.cameraL.projectionMatrix.copy(n),e=-a*wc-r,i=a*wc-r,n.elements[0]=2*_c/(i-e),n.elements[8]=(i+e)/(i-e),this.cameraR.projectionMatrix.copy(n)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Lc),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Tc)})}),Cc.prototype=Object.create(Mi.prototype),Cc.prototype.constructor=Cc,Object.assign(Rc.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}),Oc.prototype=Object.assign(Object.create(Mi.prototype),{constructor:Oc,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this},updateMatrixWorld:function(){var t=new Ue,e=new Be,i=new Ue,n=new Ue,r=new Rc;return function(a){Mi.prototype.updateMatrixWorld.call(this,a);var o=this.context.listener,s=this.up;if(this.timeDelta=r.getDelta(),this.matrixWorld.decompose(t,e,i),n.set(0,0,-1).applyQuaternion(e),o.positionX){var c=this.context.currentTime+this.timeDelta;o.positionX.linearRampToValueAtTime(t.x,c),o.positionY.linearRampToValueAtTime(t.y,c),o.positionZ.linearRampToValueAtTime(t.z,c),o.forwardX.linearRampToValueAtTime(n.x,c),o.forwardY.linearRampToValueAtTime(n.y,c),o.forwardZ.linearRampToValueAtTime(n.z,c),o.upX.linearRampToValueAtTime(s.x,c),o.upY.linearRampToValueAtTime(s.y,c),o.upZ.linearRampToValueAtTime(s.z,c)}else o.setPosition(t.x,t.y,t.z),o.setOrientation(n.x,n.y,n.z,s.x,s.y,s.z)}}()}),Ic.prototype=Object.assign(Object.create(Mi.prototype),{constructor:Ic,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this},setMediaElementSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var t=this.context.createBufferSource();return t.buffer=this.buffer,t.detune.value=this.detune,t.loop=this.loop,t.onended=this.onEnded.bind(this),t.playbackRate.setValueAtTime(this.playbackRate,this.startTime),this.startTime=this.context.currentTime,t.start(this.startTime,this.offset),this.isPlaying=!0,this.source=t,this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.source.onended=null,this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.source.onended=null,this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},setDetune:function(t){return this.detune=t,!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}),Dc.prototype=Object.assign(Object.create(Ic.prototype),{constructor:Dc,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){return this.panner.refDistance=t,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){return this.panner.rolloffFactor=t,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){return this.panner.distanceModel=t,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){return this.panner.maxDistance=t,this},setDirectionalCone:function(t,e,i){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=i,this},updateMatrixWorld:function(){var t=new Ue,e=new Be,i=new Ue,n=new Ue;return function(r){Mi.prototype.updateMatrixWorld.call(this,r);var a=this.panner;if(this.matrixWorld.decompose(t,e,i),n.set(0,0,1).applyQuaternion(e),a.positionX){var o=this.context.currentTime+this.listener.timeDelta;a.positionX.linearRampToValueAtTime(t.x,o),a.positionY.linearRampToValueAtTime(t.y,o),a.positionZ.linearRampToValueAtTime(t.z,o),a.orientationX.linearRampToValueAtTime(n.x,o),a.orientationY.linearRampToValueAtTime(n.y,o),a.orientationZ.linearRampToValueAtTime(n.z,o)}else a.setPosition(t.x,t.y,t.z),a.setOrientation(n.x,n.y,n.z)}}()}),Object.assign(Nc.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),i=0;i<e.length;i++)t+=e[i];return t/e.length}}),Object.assign(zc.prototype,{accumulate:function(t,e){var i=this.buffer,n=this.valueSize,r=t*n+n,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==n;++o)i[r+o]=i[o];a=e}else{var s=e/(a+=e);this._mixBufferRegion(i,r,0,s,n)}this.cumulativeWeight=a},apply:function(t){var e=this.valueSize,i=this.buffer,n=t*e+e,r=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,r<1){var o=3*e;this._mixBufferRegion(i,n,o,1-r,e)}for(var s=e,c=e+e;s!==c;++s)if(i[s]!==i[s+e]){a.setValue(i,n);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,i=this.valueSize,n=3*i;t.getValue(e,n);for(var r=i,a=n;r!==a;++r)e[r]=e[n+r%i];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,i,n,r){if(n>=.5)for(var a=0;a!==r;++a)t[e+a]=t[i+a]},_slerp:function(t,e,i,n){Be.slerpFlat(t,e,t,e,t,i,n)},_lerp:function(t,e,i,n,r){for(var a=1-n,o=0;o!==r;++o){var s=e+o;t[s]=t[s]*a+t[i+o]*n}}});var Bc,Uc,Gc,Fc,Hc,kc,Vc,jc,Wc,qc,Xc,Yc,Jc,Zc,Qc;function Kc(t,e,i){var n=i||$c.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}function $c(t,e,i){this.path=e,this.parsedPath=i||$c.parseTrackName(e),this.node=$c.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function th(t,e,i){this._mixer=t,this._clip=e,this._localRoot=i||null;for(var n=e.tracks,r=n.length,a=new Array(r),o={endingStart:xe,endingEnd:xe},s=0;s!==r;++s){var c=n[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=ye,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function eh(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function ih(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}function nh(){Hi.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function rh(t,e,i){sa.call(this,t,e),this.meshPerAttribute=i||1}function ah(t,e,i,n){"number"==typeof i&&(n=i,i=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Ai.call(this,t,e,i),this.meshPerAttribute=n||1}function oh(t,e){return t.distance-e.distance}function sh(t,e,i,n){if(!1!==t.visible&&(t.raycast(e,i),!0===n))for(var r=t.children,a=0,o=r.length;a<o;a++)sh(r[a],e,i,!0)}function ch(t,e){this.min=void 0!==t?t:new Ne(1/0,1/0),this.max=void 0!==e?e:new Ne(-1/0,-1/0)}function hh(t,e){this.start=void 0!==t?t:new Ue,this.end=void 0!==e?e:new Ue}function lh(t){Mi.call(this),this.material=t,this.render=function(){}}function uh(t,e,i,n){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==i?i:16711680,a=void 0!==n?n:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=3*s.faces.length:s&&s.isBufferGeometry&&(o=s.attributes.normal.count);var c=new Hi,h=new zi(2*o*3,3);c.addAttribute("position",h),va.call(this,c,new ma({color:r,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function ph(t,e){Mi.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var i=new Hi,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],r=0,a=1;r<32;r++,a++){var o=r/32*Math.PI*2,s=a/32*Math.PI*2;n.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}i.addAttribute("position",new zi(n,3));var c=new ma({fog:!1});this.cone=new va(i,c),this.add(this.cone),this.update()}function dh(t){for(var e=function t(e){var i=[];e&&e.isBone&&i.push(e);for(var n=0;n<e.children.length;n++)i.push.apply(i,t(e.children[n]));return i}(t),i=new Hi,n=[],r=[],a=new hi(0,0,1),o=new hi(0,1,0),s=0;s<e.length;s++){var c=e[s];c.parent&&c.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),r.push(a.r,a.g,a.b),r.push(o.r,o.g,o.b))}i.addAttribute("position",new zi(n,3)),i.addAttribute("color",new zi(r,3));var h=new ma({vertexColors:L,depthTest:!1,depthWrite:!1,transparent:!0});va.call(this,i,h),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function fh(t,e,i){this.light=t,this.light.updateMatrixWorld(),this.color=i;var n=new Mo(e,4,2),r=new ln({wireframe:!0,fog:!1});un.call(this,n,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function mh(t,e){Mi.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;var i=new ma({fog:!1}),n=new Hi;n.addAttribute("position",new Ai(new Float32Array(15),3)),this.line=new ga(n,i),this.add(this.line),this.update()}function gh(t,e,i){Mi.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i;var n=new Ia(e);n.rotateY(.5*Math.PI),this.material=new ln({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=L);var r=n.getAttribute("position"),a=new Float32Array(3*r.count);n.addAttribute("color",new Ai(a,3)),this.add(new un(n,this.material)),this.update()}function vh(t,e,i,n){t=t||10,e=e||10,i=new hi(void 0!==i?i:4473924),n=new hi(void 0!==n?n:8947848);for(var r=e/2,a=t/e,o=t/2,s=[],c=[],h=0,l=0,u=-o;h<=e;h++,u+=a){s.push(-o,0,u,o,0,u),s.push(u,0,-o,u,0,o);var p=h===r?i:n;p.toArray(c,l),l+=3,p.toArray(c,l),l+=3,p.toArray(c,l),l+=3,p.toArray(c,l),l+=3}var d=new Hi;d.addAttribute("position",new zi(s,3)),d.addAttribute("color",new zi(c,3));var f=new ma({vertexColors:L});va.call(this,d,f)}function yh(t,e,i,n,r,a){t=t||10,e=e||16,i=i||8,n=n||64,r=new hi(void 0!==r?r:4473924),a=new hi(void 0!==a?a:8947848);var o,s,c,h,l,u,p,d=[],f=[];for(h=0;h<=e;h++)c=h/e*(2*Math.PI),o=Math.sin(c)*t,s=Math.cos(c)*t,d.push(0,0,0),d.push(o,0,s),p=1&h?r:a,f.push(p.r,p.g,p.b),f.push(p.r,p.g,p.b);for(h=0;h<=i;h++)for(p=1&h?r:a,u=t-t/i*h,l=0;l<n;l++)c=l/n*(2*Math.PI),o=Math.sin(c)*u,s=Math.cos(c)*u,d.push(o,0,s),f.push(p.r,p.g,p.b),c=(l+1)/n*(2*Math.PI),o=Math.sin(c)*u,s=Math.cos(c)*u,d.push(o,0,s),f.push(p.r,p.g,p.b);var m=new Hi;m.addAttribute("position",new zi(d,3)),m.addAttribute("color",new zi(f,3));var g=new ma({vertexColors:L});va.call(this,m,g)}function xh(t,e,i,n){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==i?i:16776960,a=void 0!==n?n:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new Hi,h=new zi(2*o*3,3);c.addAttribute("position",h),va.call(this,c,new ma({color:r,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function bh(t,e,i){Mi.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,void 0===e&&(e=1);var n=new Hi;n.addAttribute("position",new zi([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var r=new ma({fog:!1});this.lightPlane=new ga(n,r),this.add(this.lightPlane),(n=new Hi).addAttribute("position",new zi([0,0,0,0,0,1],3)),this.targetLine=new ga(n,r),this.add(this.targetLine),this.update()}function wh(t){var e=new Hi,i=new ma({color:16777215,vertexColors:T}),n=[],r=[],a={},o=new hi(16755200),s=new hi(16711680),c=new hi(43775),h=new hi(16777215),l=new hi(3355443);function u(t,e,i){p(t,i),p(e,i)}function p(t,e){n.push(0,0,0),r.push(e.r,e.g,e.b),void 0===a[t]&&(a[t]=[]),a[t].push(n.length/3-1)}u("n1","n2",o),u("n2","n4",o),u("n4","n3",o),u("n3","n1",o),u("f1","f2",o),u("f2","f4",o),u("f4","f3",o),u("f3","f1",o),u("n1","f1",o),u("n2","f2",o),u("n3","f3",o),u("n4","f4",o),u("p","n1",s),u("p","n2",s),u("p","n3",s),u("p","n4",s),u("u1","u2",c),u("u2","u3",c),u("u3","u1",c),u("c","t",h),u("p","c",l),u("cn1","cn2",l),u("cn3","cn4",l),u("cf1","cf2",l),u("cf3","cf4",l),e.addAttribute("position",new zi(n,3)),e.addAttribute("color",new zi(r,3)),va.call(this,e,i),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function _h(t,e){this.object=t,void 0===e&&(e=16776960);var i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),r=new Hi;r.setIndex(new Ai(i,1)),r.addAttribute("position",new Ai(n,3)),va.call(this,r,new ma({color:e})),this.matrixAutoUpdate=!1,this.update()}function Mh(t,e){this.type="Box3Helper",this.box=t;var i=void 0!==e?e:16776960,n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Hi;r.setIndex(new Ai(n,1)),r.addAttribute("position",new zi([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),va.call(this,r,new ma({color:i})),this.geometry.computeBoundingSphere()}function Sh(t,e,i){this.type="PlaneHelper",this.plane=t,this.size=void 0===e?1:e;var n=void 0!==i?i:16776960,r=new Hi;r.addAttribute("position",new zi([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),ga.call(this,r,new ma({color:n}));var a=new Hi;a.addAttribute("position",new zi([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new un(a,new ln({color:n,opacity:.2,transparent:!0,depthWrite:!1})))}function Eh(t,e,i,n,r,a){Mi.call(this),void 0===t&&(t=new THREE.Vector3(0,0,1)),void 0===e&&(e=new THREE.Vector3(0,0,0)),void 0===i&&(i=1),void 0===n&&(n=16776960),void 0===r&&(r=.2*i),void 0===a&&(a=.2*r),void 0===Yc&&((Yc=new Hi).addAttribute("position",new zi([0,0,0,0,1,0],3)),(Jc=new Io(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new ga(Yc,new ma({color:n})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new un(Jc,new ln({color:n})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,r,a)}function Th(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],i=new Hi;i.addAttribute("position",new zi(e,3)),i.addAttribute("color",new zi([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var n=new ma({vertexColors:L});va.call(this,i,n)}Object.assign(Kc.prototype,{getValue:function(t,e){this.bind();var i=this._targetGroup.nCachedObjects_,n=this._bindings[i];void 0!==n&&n.getValue(t,e)},setValue:function(t,e){for(var i=this._bindings,n=this._targetGroup.nCachedObjects_,r=i.length;n!==r;++n)i[n].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}}),Object.assign($c,{Composite:Kc,create:function(t,e,i){return t&&t.isAnimationObjectGroup?new $c.Composite(t,e,i):new $c(t,e,i)},sanitizeNodeName:(Wc=new RegExp("[\\[\\]\\.:\\/]","g"),function(t){return t.replace(/\s/g,"_").replace(Wc,"")}),parseTrackName:(Bc="[^\\[\\]\\.:\\/]",Uc="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Gc=/((?:WC+[\/:])*)/.source.replace("WC",Bc),Fc=/(WCOD+)?/.source.replace("WCOD",Uc),Hc=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Bc),kc=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Bc),Vc=new RegExp("^"+Gc+Fc+Hc+kc+"$"),jc=["material","materials","bones"],function(t){var e=Vc.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);var i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){var r=i.nodeName.substring(n+1);-1!==jc.indexOf(r)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=r)}if(null===i.propertyName||0===i.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return i}),findNode:function(t,e){if(!e||""===e||"root"===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var i=t.skeleton.getBoneByName(e);if(void 0!==i)return i}if(t.children){var n=function(t){for(var i=0;i<t.length;i++){var r=t[i];if(r.name===e||r.uuid===e)return r;var a=n(r.children);if(a)return a}return null},r=n(t.children);if(r)return r}return null}}),Object.assign($c.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)t[e++]=i[n]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++]},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,i=e.objectName,n=e.propertyName,r=e.propertyIndex;if(t||(t=$c.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(i){var a=e.objectIndex;switch(i){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(var o=0;o<t.length;o++)if(t[o].name===a){a=o;break}break;default:if(void 0===t[i])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[i]}if(void 0!==a){if(void 0===t[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[a]}}var s=t[n];if(void 0!==s){var c=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);var h=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===n){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(t.geometry.morphAttributes.position[o].name===r){r=o;break}}else{if(!t.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(t.geometry.morphTargets[o].name===r){r=o;break}}}h=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(h=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(h=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=n;this.getValue=this.GetterByBindingType[h],this.setValue=this.SetterByBindingTypeAndVersioning[h][c]}else{var l=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+n+" but it wasn't found.",t)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign($c.prototype,{_getValue_unbound:$c.prototype.getValue,_setValue_unbound:$c.prototype.setValue}),Object.assign(function(){this.uuid=De.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,i=arguments.length;e!==i;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var n=this;this.stats={objects:{get total(){return n._objects.length},get inUse(){return this.total-n.nCachedObjects_}},get bindingsPerObject(){return n._bindings.length}}}.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,i=this.nCachedObjects_,n=this._indicesByUUID,r=this._paths,a=this._parsedPaths,o=this._bindings,s=o.length,c=void 0,h=0,l=arguments.length;h!==l;++h){var u=arguments[h],p=u.uuid,d=n[p];if(void 0===d){d=e++,n[p]=d,t.push(u);for(var f=0,m=s;f!==m;++f)o[f].push(new $c(u,r[f],a[f]))}else if(d<i){c=t[d];var g=--i,v=t[g];n[v.uuid]=d,t[d]=v,n[p]=g,t[g]=u;for(f=0,m=s;f!==m;++f){var y=o[f],x=y[g],b=y[d];y[d]=x,void 0===b&&(b=new $c(u,r[f],a[f])),y[g]=b}}else t[d]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=i},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,i=this._indicesByUUID,n=this._bindings,r=n.length,a=0,o=arguments.length;a!==o;++a){var s=arguments[a],c=s.uuid,h=i[c];if(void 0!==h&&h>=e){var l=e++,u=t[l];i[u.uuid]=h,t[h]=u,i[c]=l,t[l]=s;for(var p=0,d=r;p!==d;++p){var f=n[p],m=f[l],g=f[h];f[h]=m,f[l]=g}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,i=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,a=r.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o].uuid,h=n[c];if(void 0!==h)if(delete n[c],h<i){var l=--i,u=t[l],p=t[v=--e];n[u.uuid]=h,t[h]=u,n[p.uuid]=l,t[l]=p,t.pop();for(var d=0,f=a;d!==f;++d){var m=(y=r[d])[l],g=y[v];y[h]=m,y[l]=g,y.pop()}}else{var v;n[(p=t[v=--e]).uuid]=h,t[h]=p,t.pop();for(d=0,f=a;d!==f;++d){var y;(y=r[d])[h]=y[v],y.pop()}}}this.nCachedObjects_=i},subscribe_:function(t,e){var i=this._bindingsIndicesByPath,n=i[t],r=this._bindings;if(void 0!==n)return r[n];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,h=this.nCachedObjects_,l=new Array(c);n=r.length,i[t]=n,a.push(t),o.push(e),r.push(l);for(var u=h,p=s.length;u!==p;++u){var d=s[u];l[u]=new $c(d,t,e)}return l},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,i=e[t];if(void 0!==i){var n=this._paths,r=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];e[t[o]]=i,a[i]=s,a.pop(),r[i]=r[o],r.pop(),n[i]=n[o],n.pop()}}}),Object.assign(th.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){var n=this._clip.duration,r=t._clip.duration,a=r/n,o=n/r;t.warp(1,a,e),this.warp(o,1,e)}return this},crossFadeTo:function(t,e,i){return t.crossFadeFrom(this,e,i)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,i){var n=this._mixer,r=n.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=r,s[1]=r+i,c[0]=t/o,c[1]=e/o,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,i,n){if(this.enabled){var r=this._startTime;if(null!==r){var a=(t-r)*i;if(a<0||0===i)return;this._startTime=null,e=i*a}e*=this._updateTimeScale(t);var o=this._updateTime(e),s=this._updateWeight(t);if(s>0)for(var c=this._interpolants,h=this._propertyBindings,l=0,u=c.length;l!==u;++l)c[l].evaluate(o),h[l].accumulate(n,s)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var i=this._weightInterpolant;if(null!==i){var n=i.evaluate(t)[0];e*=n,t>i.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var i=this._timeScaleInterpolant;if(null!==i)e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t,i=this._clip.duration,n=this.loop,r=this._loopCount,a=2202===n;if(0===t)return-1===r?e:a&&1==(1&r)?i-e:e;if(2200===n){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=i)e=i;else{if(!(e<0))break t;e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),e>=i||e<0){var o=Math.floor(e/i);e-=i*o,r+=Math.abs(o);var s=this.repetitions-r;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?i:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===s){var c=t<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}if(a&&1==(1&r))return this.time=e,i-e}return this.time=e,e},_setEndings:function(t,e,i){var n=this._interpolantSettings;i?(n.endingStart=2401,n.endingEnd=2401):(n.endingStart=t?this.zeroSlopeAtStart?2401:xe:2402,n.endingEnd=e?this.zeroSlopeAtEnd?2401:xe:2402)},_scheduleFading:function(t,e,i){var n=this._mixer,r=n.time,a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=r,s[0]=e,o[1]=r+t,s[1]=i,this}}),eh.prototype=Object.assign(Object.create(n.prototype),{constructor:eh,_bindAction:function(t,e){var i=t._localRoot||this._root,n=t._clip.tracks,r=n.length,a=t._propertyBindings,o=t._interpolants,s=i.uuid,c=this._bindingsByRootAndName,h=c[s];void 0===h&&(h={},c[s]=h);for(var l=0;l!==r;++l){var u=n[l],p=u.name,d=h[p];if(void 0!==d)a[l]=d;else{if(void 0!==(d=a[l])){null===d._cacheIndex&&(++d.referenceCount,this._addInactiveBinding(d,s,p));continue}var f=e&&e._propertyBindings[l].binding.parsedPath;++(d=new zc($c.create(i,p,f),u.ValueTypeName,u.getValueSize())).referenceCount,this._addInactiveBinding(d,s,p),a[l]=d}o[l].resultBuffer=d.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,i=t._clip.uuid,n=this._actionsByClip[i];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,i,e)}for(var r=t._propertyBindings,a=0,o=r.length;a!==o;++a){var s=r[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,i=0,n=e.length;i!==n;++i){var r=e[i];0==--r.useCount&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,i){var n=this._actions,r=this._actionsByClip,a=r[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=a;else{var o=a.knownActions;t._byClipCacheIndex=o.length,o.push(t)}t._cacheIndex=n.length,n.push(t),a.actionByRoot[i]=t},_removeInactiveAction:function(t){var e=this._actions,i=e[e.length-1],n=t._cacheIndex;i._cacheIndex=n,e[n]=i,e.pop(),t._cacheIndex=null;var r=t._clip.uuid,a=this._actionsByClip,o=a[r],s=o.knownActions,c=s[s.length-1],h=t._byClipCacheIndex;c._byClipCacheIndex=h,s[h]=c,s.pop(),t._byClipCacheIndex=null,delete o.actionByRoot[(t._localRoot||this._root).uuid],0===s.length&&delete a[r],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,i=0,n=e.length;i!==n;++i){var r=e[i];0==--r.referenceCount&&this._removeInactiveBinding(r)}},_lendAction:function(t){var e=this._actions,i=t._cacheIndex,n=this._nActiveActions++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_takeBackAction:function(t){var e=this._actions,i=t._cacheIndex,n=--this._nActiveActions,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_addInactiveBinding:function(t,e,i){var n=this._bindingsByRootAndName,r=n[e],a=this._bindings;void 0===r&&(r={},n[e]=r),r[i]=t,t._cacheIndex=a.length,a.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,i=t.binding,n=i.rootNode.uuid,r=i.path,a=this._bindingsByRootAndName,o=a[n],s=e[e.length-1],c=t._cacheIndex;s._cacheIndex=c,e[c]=s,e.pop(),delete o[r];t:{for(var h in o)break t;delete a[n]}},_lendBinding:function(t){var e=this._bindings,i=t._cacheIndex,n=this._nActiveBindings++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_takeBackBinding:function(t){var e=this._bindings,i=t._cacheIndex,n=--this._nActiveBindings,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,i=t[e];return void 0===i&&((i=new $o(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=i),i},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,i=t.__cacheIndex,n=--this._nActiveControlInterpolants,r=e[n];t.__cacheIndex=n,e[n]=t,r.__cacheIndex=i,e[i]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var i=e||this._root,n=i.uuid,r="string"==typeof t?hs.findByName(i,t):t,a=null!==r?r.uuid:t,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[n];if(void 0!==c)return c;s=o.knownActions[0],null===r&&(r=s._clip)}if(null===r)return null;var h=new th(this,r,e);return this._bindAction(h,s),this._addInactiveAction(h,a,n),h},existingAction:function(t,e){var i=e||this._root,n=i.uuid,r="string"==typeof t?hs.findByName(i,t):t,a=r?r.uuid:t,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[n]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,i=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var r=0;r!==e;++r)t[r].reset();for(r=0;r!==n;++r)i[r].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,i=this._nActiveActions,n=this.time+=t,r=Math.sign(t),a=this._accuIndex^=1,o=0;o!==i;++o){e[o]._update(n,t,r,a)}var s=this._bindings,c=this._nActiveBindings;for(o=0;o!==c;++o)s[o].apply(a);return this},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,i=t.uuid,n=this._actionsByClip,r=n[i];if(void 0!==r){for(var a=r.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var h=c._cacheIndex,l=e[e.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,l._cacheIndex=h,e[h]=l,e.pop(),this._removeInactiveBindingsForAction(c)}delete n[i]}},uncacheRoot:function(t){var e=t.uuid,i=this._actionsByClip;for(var n in i){var r=i[n].actionByRoot[e];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}var a=this._bindingsByRootAndName[e];if(void 0!==a)for(var o in a){var s=a[o];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(t,e){var i=this.existingAction(t,e);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}}),ih.prototype.clone=function(){return new ih(void 0===this.value.clone?this.value:this.value.clone())},nh.prototype=Object.assign(Object.create(Hi.prototype),{constructor:nh,isInstancedBufferGeometry:!0,copy:function(t){return Hi.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),rh.prototype=Object.assign(Object.create(sa.prototype),{constructor:rh,isInstancedInterleavedBuffer:!0,copy:function(t){return sa.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),ah.prototype=Object.assign(Object.create(Ai.prototype),{constructor:ah,isInstancedBufferAttribute:!0,copy:function(t){return Ai.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(function(t,e,i,n){this.ray=new cn(t,e),this.near=i||0,this.far=n||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}.prototype,{linePrecision:1,set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize()):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e,i){var n=i||[];return sh(t,this,n,e),n.sort(oh),n},intersectObjects:function(t,e,i){var n=i||[];if(!1===Array.isArray(t))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),n;for(var r=0,a=t.length;r<a;r++)sh(t[r],this,n,e);return n.sort(oh),n}}),Object.assign(function(t,e,i){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==i?i:0,this}.prototype,{set:function(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(De.clamp(e/this.radius,-1,1))),this}}),Object.assign(function(t,e,i){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==i?i:0,this}.prototype,{set:function(t,e,i){return this.radius=t,this.theta=e,this.y=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,i){return this.radius=Math.sqrt(t*t+i*i),this.theta=Math.atan2(t,i),this.y=e,this}}),Object.assign(ch.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new Ne;return function(e,i){var n=t.copy(i).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new Ne),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new Ne),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new Ne),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new Ne),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new Ne;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign(hh.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new Ue),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new Ue),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new Ue),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:(qc=new Ue,Xc=new Ue,function(t,e){qc.subVectors(t,this.start),Xc.subVectors(this.end,this.start);var i=Xc.dot(Xc),n=Xc.dot(qc)/i;return e&&(n=De.clamp(n,0,1)),n}),closestPointToPoint:function(t,e,i){var n=this.closestPointToPointParameter(t,e);return void 0===i&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),i=new Ue),this.delta(i).multiplyScalar(n).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),lh.prototype=Object.create(Mi.prototype),lh.prototype.constructor=lh,lh.prototype.isImmediateRenderObject=!0,uh.prototype=Object.create(va.prototype),uh.prototype.constructor=uh,uh.prototype.update=function(){var t=new Ue,e=new Ue,i=new Ge;return function(){var n=["a","b","c"];this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var r=this.object.matrixWorld,a=this.geometry.attributes.position,o=this.object.geometry;if(o&&o.isGeometry)for(var s=o.vertices,c=o.faces,h=0,l=0,u=c.length;l<u;l++)for(var p=c[l],d=0,f=p.vertexNormals.length;d<f;d++){var m=s[p[n[d]]],g=p.vertexNormals[d];t.copy(m).applyMatrix4(r),e.copy(g).applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),a.setXYZ(h,t.x,t.y,t.z),h+=1,a.setXYZ(h,e.x,e.y,e.z),h+=1}else if(o&&o.isBufferGeometry){var v=o.attributes.position,y=o.attributes.normal;for(h=0,d=0,f=v.count;d<f;d++)t.set(v.getX(d),v.getY(d),v.getZ(d)).applyMatrix4(r),e.set(y.getX(d),y.getY(d),y.getZ(d)),e.applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),a.setXYZ(h,t.x,t.y,t.z),h+=1,a.setXYZ(h,e.x,e.y,e.z),h+=1}a.needsUpdate=!0}}(),ph.prototype=Object.create(Mi.prototype),ph.prototype.constructor=ph,ph.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},ph.prototype.update=function(){var t=new Ue;return function(){this.light.updateMatrixWorld();var e=this.light.distance?this.light.distance:1e3,i=e*Math.tan(this.light.angle);this.cone.scale.set(i,i,e),t.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),dh.prototype=Object.create(va.prototype),dh.prototype.constructor=dh,dh.prototype.updateMatrixWorld=function(){var t=new Ue,e=new ze,i=new ze;return function(n){var r=this.bones,a=this.geometry,o=a.getAttribute("position");i.getInverse(this.root.matrixWorld);for(var s=0,c=0;s<r.length;s++){var h=r[s];h.parent&&h.parent.isBone&&(e.multiplyMatrices(i,h.matrixWorld),t.setFromMatrixPosition(e),o.setXYZ(c,t.x,t.y,t.z),e.multiplyMatrices(i,h.parent.matrixWorld),t.setFromMatrixPosition(e),o.setXYZ(c+1,t.x,t.y,t.z),c+=2)}a.getAttribute("position").needsUpdate=!0,Mi.prototype.updateMatrixWorld.call(this,n)}}(),fh.prototype=Object.create(un.prototype),fh.prototype.constructor=fh,fh.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},fh.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},mh.prototype=Object.create(Mi.prototype),mh.prototype.constructor=mh,mh.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},mh.prototype.update=function(){var t=.5*this.light.width,e=.5*this.light.height,i=this.line.geometry.attributes.position,n=i.array;n[0]=t,n[1]=-e,n[2]=0,n[3]=t,n[4]=e,n[5]=0,n[6]=-t,n[7]=e,n[8]=0,n[9]=-t,n[10]=-e,n[11]=0,n[12]=t,n[13]=-e,n[14]=0,i.needsUpdate=!0,void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)},gh.prototype=Object.create(Mi.prototype),gh.prototype.constructor=gh,gh.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},gh.prototype.update=function(){var t=new Ue,e=new hi,i=new hi;return function(){var n=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var r=n.geometry.getAttribute("color");e.copy(this.light.color),i.copy(this.light.groundColor);for(var a=0,o=r.count;a<o;a++){var s=a<o/2?e:i;r.setXYZ(a,s.r,s.g,s.b)}r.needsUpdate=!0}n.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),vh.prototype=Object.create(va.prototype),vh.prototype.constructor=vh,yh.prototype=Object.create(va.prototype),yh.prototype.constructor=yh,xh.prototype=Object.create(va.prototype),xh.prototype.constructor=xh,xh.prototype.update=function(){var t=new Ue,e=new Ue,i=new Ge;return function(){this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);for(var n=this.object.matrixWorld,r=this.geometry.attributes.position,a=this.object.geometry,o=a.vertices,s=a.faces,c=0,h=0,l=s.length;h<l;h++){var u=s[h],p=u.normal;t.copy(o[u.a]).add(o[u.b]).add(o[u.c]).divideScalar(3).applyMatrix4(n),e.copy(p).applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),r.setXYZ(c,t.x,t.y,t.z),c+=1,r.setXYZ(c,e.x,e.y,e.z),c+=1}r.needsUpdate=!0}}(),bh.prototype=Object.create(Mi.prototype),bh.prototype.constructor=bh,bh.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},bh.prototype.update=function(){var t=new Ue,e=new Ue,i=new Ue;return function(){t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),i.subVectors(e,t),this.lightPlane.lookAt(e),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(e),this.targetLine.scale.z=i.length()}}(),wh.prototype=Object.create(va.prototype),wh.prototype.constructor=wh,wh.prototype.update=function(){var t,e,i=new Ue,n=new Vr;function r(r,a,o,s){i.set(a,o,s).unproject(n);var c=e[r];if(void 0!==c)for(var h=t.getAttribute("position"),l=0,u=c.length;l<u;l++)h.setXYZ(c[l],i.x,i.y,i.z)}return function(){t=this.geometry,e=this.pointMap;n.projectionMatrix.copy(this.camera.projectionMatrix),r("c",0,0,-1),r("t",0,0,1),r("n1",-1,-1,-1),r("n2",1,-1,-1),r("n3",-1,1,-1),r("n4",1,1,-1),r("f1",-1,-1,1),r("f2",1,-1,1),r("f3",-1,1,1),r("f4",1,1,1),r("u1",.7,1.1,-1),r("u2",-.7,1.1,-1),r("u3",0,2,-1),r("cf1",-1,0,1),r("cf2",1,0,1),r("cf3",0,-1,1),r("cf4",0,1,1),r("cn1",-1,0,-1),r("cn2",1,0,-1),r("cn3",0,-1,-1),r("cn4",0,1,-1),t.getAttribute("position").needsUpdate=!0}}(),_h.prototype=Object.create(va.prototype),_h.prototype.constructor=_h,_h.prototype.update=function(){var t=new Ke;return function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&t.setFromObject(this.object),!t.isEmpty()){var i=t.min,n=t.max,r=this.geometry.attributes.position,a=r.array;a[0]=n.x,a[1]=n.y,a[2]=n.z,a[3]=i.x,a[4]=n.y,a[5]=n.z,a[6]=i.x,a[7]=i.y,a[8]=n.z,a[9]=n.x,a[10]=i.y,a[11]=n.z,a[12]=n.x,a[13]=n.y,a[14]=i.z,a[15]=i.x,a[16]=n.y,a[17]=i.z,a[18]=i.x,a[19]=i.y,a[20]=i.z,a[21]=n.x,a[22]=i.y,a[23]=i.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),_h.prototype.setFromObject=function(t){return this.object=t,this.update(),this},_h.prototype.copy=function(t){return va.prototype.copy.call(this,t),this.object=t.object,this},_h.prototype.clone=function(){return(new this.constructor).copy(this)},Mh.prototype=Object.create(va.prototype),Mh.prototype.constructor=Mh,Mh.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),Mi.prototype.updateMatrixWorld.call(this,t))},Sh.prototype=Object.create(ga.prototype),Sh.prototype.constructor=Sh,Sh.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?M:_,this.lookAt(this.plane.normal),Mi.prototype.updateMatrixWorld.call(this,t)},Eh.prototype=Object.create(Mi.prototype),Eh.prototype.constructor=Eh,Eh.prototype.setDirection=(Qc=new Ue,function(t){t.y>.99999?this.quaternion.set(0,0,0,1):t.y<-.99999?this.quaternion.set(1,0,0,0):(Qc.set(t.z,0,-t.x).normalize(),Zc=Math.acos(t.y),this.quaternion.setFromAxisAngle(Qc,Zc))}),Eh.prototype.setLength=function(t,e,i){void 0===e&&(e=.2*t),void 0===i&&(i=.2*e),this.line.scale.set(1,Math.max(0,t-e),1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()},Eh.prototype.setColor=function(t){this.line.material.color.copy(t),this.cone.material.color.copy(t)},Eh.prototype.copy=function(t){return Mi.prototype.copy.call(this,t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this},Eh.prototype.clone=function(){return(new this.constructor).copy(this)},Th.prototype=Object.create(va.prototype),Th.prototype.constructor=Th;function Lh(t){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),As.call(this,t),this.type="catmullrom"}bs.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(bs.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign(Fs.prototype,{createPointsGeometry:function(t){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var e=new Li,i=0,n=t.length;i<n;i++){var r=t[i];e.vertices.push(new Ue(r.x,r.y,r.z||0))}return e}}),Object.assign(Hs.prototype,{fromPoints:function(t){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)}}),Object.create(As.prototype),Object.create(As.prototype),Lh.prototype=Object.create(As.prototype),Object.assign(Lh.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),vh.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},dh.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(vc.prototype,{extractUrlBase:function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),ec(t)}}),Object.assign(rc.prototype,{setTexturePath:function(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}),Object.assign(ch.prototype,{center:function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},size:function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)}}),Object.assign(Ke.prototype,{center:function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},size:function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)}}),hh.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Object.assign(De,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),De.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),De.ceilPowerOfTwo(t)}}),Object.assign(Ge.prototype,{flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(ze.prototype,{extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},getPosition:function(){var t;return function(){return void 0===t&&(t=new Ue),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),t.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(t,e,i,n,r,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,n,i,r,a)}}),ti.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},Be.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Object.assign(cn.prototype,{isIntersectionBox:function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)}}),Object.assign(hn.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},midpoint:function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},normal:function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},plane:function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)}}),Object.assign(hn,{barycoordFromPoint:function(t,e,i,n,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),hn.getBarycoord(t,e,i,n,r)},normal:function(t,e,i,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),hn.getNormal(t,e,i,n)}}),Object.assign(ks.prototype,{extractAllPoints:function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},extrude:function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new go(this,t)},makeGeometry:function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Ao(this,t)}}),Object.assign(Ne.prototype,{fromAttribute:function(t,e,i){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},distanceToManhattan:function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Ue.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},fromAttribute:function(t,e,i){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},distanceToManhattan:function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Ye.prototype,{fromAttribute:function(t,e,i){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Li.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(Mi.prototype,{getChildByName:function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(Mi.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(ua.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(da.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),pa.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(bs.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),jr.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(Vs.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Ai.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")}}),Object.assign(Hi.prototype,{addIndex:function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},addDrawCall:function(t,e,i){void 0!==i&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(Hi.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(vo.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(ih.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(on.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new hi}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===t}}}),Object.defineProperties(Vo.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(sn.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Object.assign(na.prototype,{clearTarget:function(t,e,i,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,i,n)},animate:function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")}}),Object.defineProperties(na.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Ur.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Je.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(ea.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),Ic.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var e=this;return(new Pc).load(t,function(t){e.setBuffer(t)}),this},Nc.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Cc.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)};We.crossOrigin=void 0,We.loadTexture=function(t,e,i,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var r=new xs;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,i,void 0,n);return e&&(a.mapping=e),a},We.loadTextureCube=function(t,e,i,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var r=new ys;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,i,void 0,n);return e&&(a.mapping=e),a},We.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},We.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var Ah,Ph,Ch=function(t,e,i,n){return new(i||(i=Promise))(function(r,a){function o(t){try{c(n.next(t))}catch(t){a(t)}}function s(t){try{c(n.throw(t))}catch(t){a(t)}}function c(t){t.done?r(t.value):new i(function(e){e(t.value)}).then(o,s)}c((n=n.apply(t,e||[])).next())})};class Rh{constructor(){this._textures={}}static get instance(){return this._instance||(this._instance=new this)}getTexture(t){if(void 0===this._textures[t])throw new Error("Texture not found. Check url and ensure texture is being loaded.");return this._textures[t]}set textures(t){this._textures=t}}function Oh(t,e,i=0){return e.sequence=t,e.frame=i,e}function Ih(t){return t[t.length-1]}function Dh(t){var e,i,n,r,a;e=window.innerWidth/t.offsetWidth,i=window.innerHeight/t.offsetHeight,n=Math.min(e,i),t.style.transformOrigin="0 0",t.style.transform="scale("+n+")","horizontally"===(r=t.offsetWidth>t.offsetHeight?t.offsetWidth*n<window.innerWidth?"horizontally":"vertically":t.offsetHeight*n<window.innerHeight?"vertically":"horizontally")&&(a=(window.innerWidth-t.offsetWidth*n)/2,t.style.marginTop="0px",t.style.marginBottom="0px",t.style.marginLeft=a+"px",t.style.marginRight=a+"px"),"vertically"===r&&(a=(window.innerHeight-t.offsetHeight*n)/2,t.style.marginTop=a+"px",t.style.marginBottom=a+"px",t.style.marginLeft="0px",t.style.marginRight="0px"),t.style.paddingLeft="0px",t.style.paddingRight="0px",t.style.paddingTop="0px",t.style.paddingBottom="0px",t.style.display="block",document.body.style.backgroundColor="black";var o=navigator.userAgent.toLowerCase();return-1!=o.indexOf("safari")&&o.indexOf("chrome"),n}class Nh{}!function(t){t[t.test=0]="test"}(Ah||(Ah={})),function(t){t[t.idle=0]="idle",t[t.walk=1]="walk",t[t.run=2]="run",t[t.attack=3]="attack"}(Ph||(Ph={}));const zh={[Ph.walk]:[{ticks:0,texture:"../data/textures/msknight.png",nextFrame:0}],[Ph.attack]:[{ticks:0,texture:"../data/textures/snow.png",nextFrame:0}]};class Bh{constructor(t){this.entities=[];let e=new Nh;var i,n;e.pos={x:-100,y:-100,z:5},e.sprite=function(t,e,i){let n=Rh.instance.getTexture(t);var r=new ji(n.image.width*i,n.image.height*i);n.magFilter=Mt;var a=new un(r,new ln({map:n,transparent:!0}));return e.add(a),a}("../data/textures/msknight.png",t,4),e.control={jump:!1,attack:!1,attackTimer:0,attacked:!1,left:!1,right:!1},e.vel={left:!1,right:!1,up:!1,down:!1,speed:2},e.anim={sequence:i=Ph.walk,blob:n=zh,ticks:n[i][0].ticks,frame:0},e.hurtBox=function(t,e,i=0,n=0,r,a){let o={type:e,height:0,width:0};if(void 0!==r&&void 0!==a)o.height=r-n,o.width=a+i;else{const e=(new Ke).setFromObject(t);o.height=e.max.y-e.min.y-n,o.width=e.max.x-e.min.x+i}return o}(e.sprite,Ah.test),function(t,e){const i=new un(new ji(e.width,e.height),new ln({color:"#DC143C"}));t.add(i)}(e.sprite,e.hurtBox),this.entities.push(e)}update(){var t;(t=this.entities).forEach(e=>{if(void 0!==e.control&&void 0!==e.vel&&void 0!==e.pos){if(e.control.left?(e.vel.left=!0,e.anim=Oh(Ph.attack,e.anim)):e.vel.left=!1,e.control.right?(e.vel.right=!0,e.anim=Oh(Ph.walk,e.anim)):e.vel.right=!1,e.control.attack&&!e.control.attacked){e.control.attacked=!0;let i=new Nh;i.timer={ticks:15},i.pos={x:e.pos.x+100,y:e.pos.y+50,z:5},i.hitBox={collidesWith:[Ah.test],height:50,width:50,onHit:function(){console.log("hit")}},t.push(i)}e.control.attacked&&e.control.attackTimer++,e.control.attackTimer>75&&(e.control.attacked=!1,e.control.attackTimer=0)}}),function(t){t.forEach(t=>{void 0!==t.vel&&void 0!==t.pos&&(t.vel.left&&(t.pos.x-=t.vel.speed),t.vel.right&&(t.pos.x+=t.vel.speed),t.vel.up&&(t.pos.y-=t.vel.speed),t.vel.down&&(t.pos.y+=t.vel.speed))})}(this.entities),function(t){t.forEach(e=>{void 0!==e.hitBox&&void 0!==e.pos&&t.forEach(t=>{void 0!==t.hurtBox&&void 0!==t.pos&&e.hitBox.collidesWith.indexOf(t.hurtBox.type)>-1&&e.pos.x<t.pos.x+t.hurtBox.width&&e.pos.x+e.hitBox.width>t.pos.x&&e.pos.y<t.pos.y+t.hurtBox.height&&e.hitBox.height+e.pos.y>t.pos.y&&(e.hitBox.onHit(),t.hurtBox.onHurt())})})}(this.entities),function(t){t.forEach(t=>{if(void 0!==t.anim&&void 0!==t.sprite&&(t.anim.ticks--,t.anim.ticks<=0)){t.anim.frame=t.anim.blob[t.anim.sequence][t.anim.frame].nextFrame,t.anim.ticks=t.anim.blob[t.anim.sequence][t.anim.frame].ticks;const e=Rh.instance.getTexture(t.anim.blob[t.anim.sequence][t.anim.frame].texture);e.magFilter=Mt,t.sprite.material=new ln({map:e,transparent:!0})}})}(this.entities),function(t){t.forEach(e=>{void 0!==e.timer&&(e.timer.ticks--,e.timer.ticks<=0&&t.splice(t.indexOf(e),1))})}(this.entities)}render(t,e,i){!function(t){for(let e=0;e<t.length;e++)t.forEach(t=>{void 0!==t.sprite&&void 0!==t.pos&&t.sprite.position.set(t.pos.x,t.pos.y,t.pos.z)})}(this.entities),t.render(i,e)}}(function(t){return Ch(this,void 0,void 0,function*(){const e=new xs;let i={};return new Promise((n,r)=>{for(let r=0;r<t.length;r++){let a=e.load(t[r],function(e){r===t.length-1&&n(i)});i[t[r]]=a}})})})(["../data/textures/cottage.png","../data/textures/girl.png","../data/textures/msknight.png","../data/textures/snow.png"]).then(t=>{Rh.instance.textures=t,function(t){const e=new na;e.setSize(1280,720);const i=e.getSize();let n=new oa;n.background=new hi("#FFFFFF");const r=new Js(i.width/-2,i.width/2,i.height/2,i.height/-2,-1e3,1e3);n.add(r),t.append(e.domElement);let a=[],o=new Bh(n);a.push(o);let s=0,c=0,h=0;(function(t,e){Dh(t),window.addEventListener("resize",function(){Dh(t)}),t.addEventListener("mousedown",function(e){t.setAttribute("class","default")}),t.addEventListener("mousemove",function(t){}),window.onkeydown=function(t){37===t.keyCode&&Ih(e).entities.forEach(t=>{void 0!==t.control&&(t.control.left=!0)}),39===t.keyCode&&Ih(e).entities.forEach(t=>{void 0!==t.control&&(t.control.right=!0)}),90===t.keyCode&&Ih(e).entities.forEach(t=>{void 0!==t.control&&(t.control.attack=!0)})},window.onkeyup=function(t){37===t.keyCode&&Ih(e).entities.forEach(t=>{void 0!==t.control&&(t.control.left=!1)}),39===t.keyCode&&Ih(e).entities.forEach(t=>{void 0!==t.control&&(t.control.right=!1)}),90===t.keyCode&&Ih(e).entities.forEach(t=>{void 0!==t.control&&(t.control.attack=!1)})}})(e.domElement,a),setInterval(function(){if(!(a.length>0))throw"No states to update";Ih(a).update()},16),function t(i){requestAnimationFrame(t);h=i-c;c=i;s=1/(h/1e3);if(!(a.length>0))throw"No states to render";Ih(a).render(e,r,n)}(0)}(document.getElementById("canvasContainer"))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlL2J1aWxkL3RocmVlLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZWNvbXBvbmVudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FuaW1hdGlvbnNjaGVtYS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VtYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy9lbnRpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vZGF0YS9hbmltYXRpb25zL3BsYXllci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZXN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3Jlc3lzdGVtcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2V0ZXZlbnRsaXN0ZW5lcnMudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJFdmVudERpc3BhdGNoZXIiLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJFUFNJTE9OIiwiTWF0aCIsInBvdyIsImlzSW50ZWdlciIsImlzRmluaXRlIiwiZmxvb3IiLCJzaWduIiwieCIsIkZ1bmN0aW9uIiwidGhpcyIsInRvU3RyaW5nIiwibWF0Y2giLCJhc3NpZ24iLCJ0YXJnZXQiLCJUeXBlRXJyb3IiLCJvdXRwdXQiLCJpbmRleCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsIm5leHRLZXkiLCJhZGRFdmVudExpc3RlbmVyIiwidHlwZSIsImxpc3RlbmVyIiwiX2xpc3RlbmVycyIsImxpc3RlbmVycyIsImluZGV4T2YiLCJwdXNoIiwiaGFzRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lckFycmF5Iiwic3BsaWNlIiwiZGlzcGF0Y2hFdmVudCIsImV2ZW50IiwiYXJyYXkiLCJzbGljZSIsIm1pbiIsIm1heCIsInZlY3RvciIsIm1hdHJpeCIsInkiLCJ6IiwiemVybyIsIm9uZSIsInYxIiwicXVhdGVybmlvbiIsIl9jYW52YXMiLCJSRVZJU0lPTiIsIkN1bGxGYWNlTm9uZSIsIkN1bGxGYWNlQmFjayIsIkN1bGxGYWNlRnJvbnQiLCJQQ0ZTaGFkb3dNYXAiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiRnJvbnRTaWRlIiwiQmFja1NpZGUiLCJEb3VibGVTaWRlIiwiTm9Db2xvcnMiLCJGYWNlQ29sb3JzIiwiVmVydGV4Q29sb3JzIiwiTm9CbGVuZGluZyIsIk5vcm1hbEJsZW5kaW5nIiwiQWRkaXRpdmVCbGVuZGluZyIsIlN1YnRyYWN0aXZlQmxlbmRpbmciLCJNdWx0aXBseUJsZW5kaW5nIiwiQ3VzdG9tQmxlbmRpbmciLCJBZGRFcXVhdGlvbiIsIlN1YnRyYWN0RXF1YXRpb24iLCJSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiIsIk1pbkVxdWF0aW9uIiwiTWF4RXF1YXRpb24iLCJaZXJvRmFjdG9yIiwiT25lRmFjdG9yIiwiU3JjQ29sb3JGYWN0b3IiLCJPbmVNaW51c1NyY0NvbG9yRmFjdG9yIiwiU3JjQWxwaGFGYWN0b3IiLCJPbmVNaW51c1NyY0FscGhhRmFjdG9yIiwiRHN0QWxwaGFGYWN0b3IiLCJPbmVNaW51c0RzdEFscGhhRmFjdG9yIiwiRHN0Q29sb3JGYWN0b3IiLCJPbmVNaW51c0RzdENvbG9yRmFjdG9yIiwiU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciIsIk5ldmVyRGVwdGgiLCJBbHdheXNEZXB0aCIsIkxlc3NEZXB0aCIsIkxlc3NFcXVhbERlcHRoIiwiRXF1YWxEZXB0aCIsIkdyZWF0ZXJFcXVhbERlcHRoIiwiR3JlYXRlckRlcHRoIiwiTm90RXF1YWxEZXB0aCIsIk11bHRpcGx5T3BlcmF0aW9uIiwiTWl4T3BlcmF0aW9uIiwiQWRkT3BlcmF0aW9uIiwiTm9Ub25lTWFwcGluZyIsIkxpbmVhclRvbmVNYXBwaW5nIiwiUmVpbmhhcmRUb25lTWFwcGluZyIsIlVuY2hhcnRlZDJUb25lTWFwcGluZyIsIkNpbmVvblRvbmVNYXBwaW5nIiwiQUNFU0ZpbG1pY1RvbmVNYXBwaW5nIiwiQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVJlZnJhY3Rpb25NYXBwaW5nIiwiRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyIsIlNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlVVZSZWZyYWN0aW9uTWFwcGluZyIsIlJlcGVhdFdyYXBwaW5nIiwiQ2xhbXBUb0VkZ2VXcmFwcGluZyIsIk1pcnJvcmVkUmVwZWF0V3JhcHBpbmciLCJOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyIiwiTGluZWFyRmlsdGVyIiwiTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciIsIkxpbmVhck1pcE1hcExpbmVhckZpbHRlciIsIlVuc2lnbmVkQnl0ZVR5cGUiLCJCeXRlVHlwZSIsIlNob3J0VHlwZSIsIlVuc2lnbmVkU2hvcnRUeXBlIiwiSW50VHlwZSIsIlVuc2lnbmVkSW50VHlwZSIsIkZsb2F0VHlwZSIsIkhhbGZGbG9hdFR5cGUiLCJVbnNpZ25lZFNob3J0NDQ0NFR5cGUiLCJVbnNpZ25lZFNob3J0NTU1MVR5cGUiLCJVbnNpZ25lZFNob3J0NTY1VHlwZSIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIkFscGhhRm9ybWF0IiwiUkdCRm9ybWF0IiwiUkdCQUZvcm1hdCIsIkx1bWluYW5jZUZvcm1hdCIsIkx1bWluYW5jZUFscGhhRm9ybWF0IiwiRGVwdGhGb3JtYXQiLCJEZXB0aFN0ZW5jaWxGb3JtYXQiLCJSZWRGb3JtYXQiLCJSR0JfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQzX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCIsIlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJSR0JfRVRDMV9Gb3JtYXQiLCJSR0JBX0FTVENfNHg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4NV9Gb3JtYXQiLCJSR0JBX0FTVENfOHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDVfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDZfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTJfRm9ybWF0IiwiTG9vcFJlcGVhdCIsIlplcm9DdXJ2YXR1cmVFbmRpbmciLCJUcmlhbmdsZXNEcmF3TW9kZSIsIlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSIsIlRyaWFuZ2xlRmFuRHJhd01vZGUiLCJMaW5lYXJFbmNvZGluZyIsInNSR0JFbmNvZGluZyIsIkdhbW1hRW5jb2RpbmciLCJSR0JFRW5jb2RpbmciLCJSR0JNN0VuY29kaW5nIiwiUkdCTTE2RW5jb2RpbmciLCJSR0JERW5jb2RpbmciLCJCYXNpY0RlcHRoUGFja2luZyIsIlJHQkFEZXB0aFBhY2tpbmciLCJUYW5nZW50U3BhY2VOb3JtYWxNYXAiLCJPYmplY3RTcGFjZU5vcm1hbE1hcCIsIl9NYXRoIiwiREVHMlJBRCIsIlBJIiwiUkFEMkRFRyIsImdlbmVyYXRlVVVJRCIsImx1dCIsImQwIiwicmFuZG9tIiwiZDEiLCJkMiIsImQzIiwidG9VcHBlckNhc2UiLCJjbGFtcCIsImV1Y2xpZGVhbk1vZHVsbyIsIm1hcExpbmVhciIsImExIiwiYTIiLCJiMSIsImIyIiwibGVycCIsInNtb290aHN0ZXAiLCJzbW9vdGhlcnN0ZXAiLCJyYW5kSW50IiwibG93IiwiaGlnaCIsInJhbmRGbG9hdCIsInJhbmRGbG9hdFNwcmVhZCIsInJhbmdlIiwiZGVnVG9SYWQiLCJkZWdyZWVzIiwicmFkVG9EZWciLCJyYWRpYW5zIiwiaXNQb3dlck9mVHdvIiwiY2VpbFBvd2VyT2ZUd28iLCJjZWlsIiwibG9nIiwiTE4yIiwiZmxvb3JQb3dlck9mVHdvIiwiVmVjdG9yMiIsIk1hdHJpeDQiLCJlbGVtZW50cyIsImNvbnNvbGUiLCJlcnJvciIsIlF1YXRlcm5pb24iLCJ3IiwiX3giLCJfeSIsIl96IiwiX3ciLCJWZWN0b3IzIiwiTWF0cml4MyIsImRlZmluZVByb3BlcnRpZXMiLCJ3aWR0aCIsInNldCIsImhlaWdodCIsImlzVmVjdG9yMiIsInNldFNjYWxhciIsInNjYWxhciIsInNldFgiLCJzZXRZIiwic2V0Q29tcG9uZW50IiwiRXJyb3IiLCJnZXRDb21wb25lbnQiLCJjbG9uZSIsImNvbnN0cnVjdG9yIiwiY29weSIsInYiLCJhZGQiLCJ3YXJuIiwiYWRkVmVjdG9ycyIsImFkZFNjYWxhciIsImEiLCJiIiwiYWRkU2NhbGVkVmVjdG9yIiwic3ViIiwic3ViVmVjdG9ycyIsInN1YlNjYWxhciIsIm11bHRpcGx5IiwibXVsdGlwbHlTY2FsYXIiLCJkaXZpZGUiLCJkaXZpZGVTY2FsYXIiLCJhcHBseU1hdHJpeDMiLCJlIiwiY2xhbXBTY2FsYXIiLCJtaW5WYWwiLCJtYXhWYWwiLCJjbGFtcExlbmd0aCIsInJvdW5kIiwicm91bmRUb1plcm8iLCJuZWdhdGUiLCJkb3QiLCJjcm9zcyIsImxlbmd0aFNxIiwic3FydCIsIm1hbmhhdHRhbkxlbmd0aCIsImFicyIsIm5vcm1hbGl6ZSIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZVRvIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJkeCIsImR5IiwibWFuaGF0dGFuRGlzdGFuY2VUbyIsInNldExlbmd0aCIsImFscGhhIiwibGVycFZlY3RvcnMiLCJ2MiIsImVxdWFscyIsImZyb21BcnJheSIsIm9mZnNldCIsInRvQXJyYXkiLCJmcm9tQnVmZmVyQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZ2V0WCIsImdldFkiLCJyb3RhdGVBcm91bmQiLCJjZW50ZXIiLCJjb3MiLCJzaW4iLCJpc01hdHJpeDQiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMTQiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMjQiLCJuMzEiLCJuMzIiLCJuMzMiLCJuMzQiLCJuNDEiLCJuNDIiLCJuNDMiLCJuNDQiLCJ0ZSIsImlkZW50aXR5IiwibWUiLCJjb3B5UG9zaXRpb24iLCJleHRyYWN0QmFzaXMiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwibWFrZUJhc2lzIiwiZXh0cmFjdFJvdGF0aW9uIiwic2NhbGVYIiwic2NhbGVZIiwic2NhbGVaIiwibWFrZVJvdGF0aW9uRnJvbUV1bGVyIiwiZXVsZXIiLCJpc0V1bGVyIiwiZiIsIm9yZGVyIiwiYWUiLCJhZiIsImJlIiwiYmYiLCJjZSIsImNmIiwiZGUiLCJkZiIsImFjIiwiYWQiLCJiYyIsImJkIiwibWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJxIiwiY29tcG9zZSIsImxvb2tBdCIsImV5ZSIsInVwIiwiY3Jvc3NWZWN0b3JzIiwibXVsdGlwbHlNYXRyaWNlcyIsInByZW11bHRpcGx5IiwiYTExIiwiYTEyIiwiYTEzIiwiYTE0IiwiYTIxIiwiYTIyIiwiYTIzIiwiYTI0IiwiYTMxIiwiYTMyIiwiYTMzIiwiYTM0IiwiYTQxIiwiYTQyIiwiYTQzIiwiYTQ0IiwiYjExIiwiYjEyIiwiYjEzIiwiYjE0IiwiYjIxIiwiYjIyIiwiYjIzIiwiYjI0IiwiYjMxIiwiYjMyIiwiYjMzIiwiYjM0IiwiYjQxIiwiYjQyIiwiYjQzIiwiYjQ0IiwiYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSIsImNvdW50IiwiZ2V0WiIsImFwcGx5TWF0cml4NCIsInNldFhZWiIsImRldGVybWluYW50IiwidHJhbnNwb3NlIiwidG1wIiwic2V0UG9zaXRpb24iLCJnZXRJbnZlcnNlIiwidGhyb3dPbkRlZ2VuZXJhdGUiLCJ0MTEiLCJ0MTIiLCJ0MTMiLCJ0MTQiLCJkZXQiLCJtc2ciLCJkZXRJbnYiLCJzY2FsZSIsImdldE1heFNjYWxlT25BeGlzIiwic2NhbGVYU3EiLCJzY2FsZVlTcSIsInNjYWxlWlNxIiwibWFrZVRyYW5zbGF0aW9uIiwibWFrZVJvdGF0aW9uWCIsInRoZXRhIiwibWFrZVJvdGF0aW9uWSIsIm1ha2VSb3RhdGlvbloiLCJtYWtlUm90YXRpb25BeGlzIiwiYXhpcyIsInR4IiwidHkiLCJtYWtlU2NhbGUiLCJtYWtlU2hlYXIiLCJwb3NpdGlvbiIsIngyIiwieTIiLCJ6MiIsInh4IiwieHkiLCJ4eiIsInl5IiwieXoiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsInN4Iiwic3kiLCJzeiIsImRlY29tcG9zZSIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsInNldEZyb21Sb3RhdGlvbk1hdHJpeCIsIm1ha2VQZXJzcGVjdGl2ZSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5lYXIiLCJmYXIiLCJtYWtlT3J0aG9ncmFwaGljIiwiaCIsInNsZXJwIiwicWEiLCJxYiIsInFtIiwic2xlcnBGbGF0IiwiZHN0IiwiZHN0T2Zmc2V0Iiwic3JjMCIsInNyY09mZnNldDAiLCJzcmMxIiwic3JjT2Zmc2V0MSIsIngwIiwieTAiLCJ6MCIsIncwIiwieDEiLCJ5MSIsInoxIiwidzEiLCJkaXIiLCJzcXJTaW4iLCJsZW4iLCJ0RGlyIiwib25DaGFuZ2VDYWxsYmFjayIsImlzUXVhdGVybmlvbiIsInNldEZyb21FdWxlciIsInVwZGF0ZSIsImMxIiwiYzIiLCJjMyIsInMxIiwiczIiLCJzMyIsInNldEZyb21BeGlzQW5nbGUiLCJoYWxmQW5nbGUiLCJtMTEiLCJtMTIiLCJtMTMiLCJtMjEiLCJtMjIiLCJtMjMiLCJtMzEiLCJtMzIiLCJtMzMiLCJ0cmFjZSIsInNldEZyb21Vbml0VmVjdG9ycyIsInZGcm9tIiwidlRvIiwiYW5nbGVUbyIsImFjb3MiLCJyb3RhdGVUb3dhcmRzIiwic3RlcCIsImludmVyc2UiLCJjb25qdWdhdGUiLCJtdWx0aXBseVF1YXRlcm5pb25zIiwicWF4IiwicWF5IiwicWF6IiwicWF3IiwicWJ4IiwicWJ5IiwicWJ6IiwicWJ3IiwiY29zSGFsZlRoZXRhIiwic3FyU2luSGFsZlRoZXRhIiwic2luSGFsZlRoZXRhIiwiaGFsZlRoZXRhIiwicmF0aW9BIiwicmF0aW9CIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImlzVmVjdG9yMyIsInNldFoiLCJtdWx0aXBseVZlY3RvcnMiLCJhcHBseUV1bGVyIiwiYXBwbHlRdWF0ZXJuaW9uIiwiYXBwbHlBeGlzQW5nbGUiLCJxeCIsInF5IiwicXoiLCJxdyIsIml4IiwiaXkiLCJpeiIsIml3IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXgiLCJ1bnByb2plY3QiLCJtYXRyaXhXb3JsZCIsInRyYW5zZm9ybURpcmVjdGlvbiIsImF4IiwiYXkiLCJheiIsImJ4IiwiYnkiLCJieiIsInByb2plY3RPblZlY3RvciIsInByb2plY3RPblBsYW5lIiwicGxhbmVOb3JtYWwiLCJyZWZsZWN0Iiwibm9ybWFsIiwiZHoiLCJzZXRGcm9tU3BoZXJpY2FsIiwic2V0RnJvbVNwaGVyaWNhbENvb3JkcyIsInJhZGl1cyIsInBoaSIsInNpblBoaVJhZGl1cyIsInNldEZyb21DeWxpbmRyaWNhbCIsInNldEZyb21DeWxpbmRyaWNhbENvb3JkcyIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsInNldEZyb21NYXRyaXhTY2FsZSIsImlzTWF0cml4MyIsInNldEZyb21NYXRyaXg0IiwiZyIsImdldE5vcm1hbE1hdHJpeCIsIm1hdHJpeDQiLCJ0cmFuc3Bvc2VJbnRvQXJyYXkiLCJzZXRVdlRyYW5zZm9ybSIsInJvdGF0aW9uIiwiY3giLCJjeSIsInJvdGF0ZSIsInRyYW5zbGF0ZSIsInBvaW50cyIsImNsb3Nlc3RQb2ludCIsImJveCIsInNwaGVyZSIsIkltYWdlVXRpbHMiLCJnZXREYXRhVVJMIiwiaW1hZ2UiLCJjYW52YXMiLCJIVE1MQ2FudmFzRWxlbWVudCIsInNyYyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY29udGV4dCIsImdldENvbnRleHQiLCJJbWFnZURhdGEiLCJwdXRJbWFnZURhdGEiLCJkcmF3SW1hZ2UiLCJ0b0RhdGFVUkwiLCJ0ZXh0dXJlSWQiLCJUZXh0dXJlIiwibWFwcGluZyIsIndyYXBTIiwid3JhcFQiLCJtYWdGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJmb3JtYXQiLCJhbmlzb3Ryb3B5IiwiZW5jb2RpbmciLCJ1dWlkIiwiREVGQVVMVF9JTUFHRSIsIm1pcG1hcHMiLCJERUZBVUxUX01BUFBJTkciLCJyZXBlYXQiLCJtYXRyaXhBdXRvVXBkYXRlIiwiZ2VuZXJhdGVNaXBtYXBzIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwidmVyc2lvbiIsIm9uVXBkYXRlIiwiVmVjdG9yNCIsIldlYkdMUmVuZGVyVGFyZ2V0Iiwib3B0aW9ucyIsInNjaXNzb3IiLCJzY2lzc29yVGVzdCIsInZpZXdwb3J0IiwidGV4dHVyZSIsImRlcHRoQnVmZmVyIiwic3RlbmNpbEJ1ZmZlciIsImRlcHRoVGV4dHVyZSIsIldlYkdMUmVuZGVyVGFyZ2V0Q3ViZSIsImFjdGl2ZUN1YmVGYWNlIiwiYWN0aXZlTWlwTWFwTGV2ZWwiLCJEYXRhVGV4dHVyZSIsImRhdGEiLCJCb3gzIiwiSW5maW5pdHkiLCJTcGhlcmUiLCJQbGFuZSIsImNvbnN0YW50IiwiRnJ1c3R1bSIsInAwIiwicDEiLCJwMiIsInAzIiwicDQiLCJwNSIsInBsYW5lcyIsImlzVGV4dHVyZSIsInVwZGF0ZU1hdHJpeCIsInRvSlNPTiIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJ0ZXh0dXJlcyIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwid3JhcCIsImltYWdlcyIsInVybCIsIkFycmF5IiwiaXNBcnJheSIsImRpc3Bvc2UiLCJ0cmFuc2Zvcm1VdiIsInV2IiwiaXNWZWN0b3I0Iiwic2V0VyIsInNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uIiwic2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4IiwiZ2V0VyIsImlzV2ViR0xSZW5kZXJUYXJnZXQiLCJzZXRTaXplIiwiaXNXZWJHTFJlbmRlclRhcmdldEN1YmUiLCJpc0RhdGFUZXh0dXJlIiwiaXNCb3gzIiwic2V0RnJvbUFycmF5IiwibWluWCIsIm1pblkiLCJtaW5aIiwibWF4WCIsIm1heFkiLCJtYXhaIiwic2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSIsInNldEZyb21Qb2ludHMiLCJtYWtlRW1wdHkiLCJpbCIsImV4cGFuZEJ5UG9pbnQiLCJzZXRGcm9tQ2VudGVyQW5kU2l6ZSIsInNpemUiLCJoYWxmU2l6ZSIsInNldEZyb21PYmplY3QiLCJleHBhbmRCeU9iamVjdCIsImlzRW1wdHkiLCJnZXRDZW50ZXIiLCJnZXRTaXplIiwicG9pbnQiLCJleHBhbmRCeVZlY3RvciIsImV4cGFuZEJ5U2NhbGFyIiwic2NvcGUiLCJ0cmF2ZXJzZSIsIm5vZGUiLCJnZW9tZXRyeSIsImlzR2VvbWV0cnkiLCJ2ZXJ0aWNlcyIsImlzQnVmZmVyR2VvbWV0cnkiLCJhdHRyaWJ1dGVzIiwidXBkYXRlTWF0cml4V29ybGQiLCJjb250YWluc1BvaW50IiwiY29udGFpbnNCb3giLCJnZXRQYXJhbWV0ZXIiLCJpbnRlcnNlY3RzQm94IiwiaW50ZXJzZWN0c1NwaGVyZSIsImNsYW1wUG9pbnQiLCJpbnRlcnNlY3RzUGxhbmUiLCJwbGFuZSIsImludGVyc2VjdHNUcmlhbmdsZSIsInYwIiwiZjAiLCJmMSIsImYyIiwidGVzdEF4aXMiLCJleHRlbnRzIiwidHJpYW5nbGVOb3JtYWwiLCJzYXRGb3JBeGVzIiwiYXhlcyIsImoiLCJ0cmlhbmdsZSIsImRpc3RhbmNlVG9Qb2ludCIsImdldEJvdW5kaW5nU3BoZXJlIiwiaW50ZXJzZWN0IiwidW5pb24iLCJvcHRpb25hbENlbnRlciIsIm1heFJhZGl1c1NxIiwiZW1wdHkiLCJyYWRpdXNTdW0iLCJkZWx0YUxlbmd0aFNxIiwiZ2V0Qm91bmRpbmdCb3giLCJzZXRDb21wb25lbnRzIiwic2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQiLCJzZXRGcm9tQ29wbGFuYXJQb2ludHMiLCJpbnZlcnNlTm9ybWFsTGVuZ3RoIiwiZGlzdGFuY2VUb1NwaGVyZSIsInByb2plY3RQb2ludCIsImludGVyc2VjdExpbmUiLCJsaW5lIiwiZGlyZWN0aW9uIiwiZGVsdGEiLCJkZW5vbWluYXRvciIsInN0YXJ0IiwiaW50ZXJzZWN0c0xpbmUiLCJzdGFydFNpZ24iLCJlbmRTaWduIiwiZW5kIiwiY29wbGFuYXJQb2ludCIsIm0xIiwib3B0aW9uYWxOb3JtYWxNYXRyaXgiLCJub3JtYWxNYXRyaXgiLCJyZWZlcmVuY2VQb2ludCIsImZydXN0dW0iLCJzZXRGcm9tTWF0cml4IiwibWUwIiwibWUxIiwibWUyIiwibWUzIiwibWU0IiwibWU1IiwibWU2IiwibWU3IiwibWU4IiwibWU5IiwibWUxMCIsIm1lMTEiLCJtZTEyIiwibWUxMyIsIm1lMTQiLCJtZTE1IiwiaW50ZXJzZWN0c09iamVjdCIsImJvdW5kaW5nU3BoZXJlIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwiaW50ZXJzZWN0c1Nwcml0ZSIsInNwcml0ZSIsIm5lZ1JhZGl1cyIsIlNoYWRlckNodW5rIiwiYWxwaGFtYXBfZnJhZ21lbnQiLCJhbHBoYW1hcF9wYXJzX2ZyYWdtZW50IiwiYWxwaGF0ZXN0X2ZyYWdtZW50IiwiYW9tYXBfZnJhZ21lbnQiLCJhb21hcF9wYXJzX2ZyYWdtZW50IiwiYmVnaW5fdmVydGV4IiwiYmVnaW5ub3JtYWxfdmVydGV4IiwiYnNkZnMiLCJidW1wbWFwX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCIsImNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgiLCJjb2xvcl9mcmFnbWVudCIsImNvbG9yX3BhcnNfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX3ZlcnRleCIsImNvbG9yX3ZlcnRleCIsImNvbW1vbiIsImN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCIsImRlZmF1bHRub3JtYWxfdmVydGV4IiwiZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4IiwiZGlzcGxhY2VtZW50bWFwX3ZlcnRleCIsImVtaXNzaXZlbWFwX2ZyYWdtZW50IiwiZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCIsImVuY29kaW5nc19mcmFnbWVudCIsImVuY29kaW5nc19wYXJzX2ZyYWdtZW50IiwiZW52bWFwX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfcGFyc192ZXJ0ZXgiLCJlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImVudm1hcF92ZXJ0ZXgiLCJmb2dfdmVydGV4IiwiZm9nX3BhcnNfdmVydGV4IiwiZm9nX2ZyYWdtZW50IiwiZm9nX3BhcnNfZnJhZ21lbnQiLCJncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRtYXBfZnJhZ21lbnQiLCJsaWdodG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2xhbWJlcnRfdmVydGV4IiwibGlnaHRzX3BhcnNfYmVnaW4iLCJsaWdodHNfcGhvbmdfZnJhZ21lbnQiLCJsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCIsImxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCIsImxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2ZyYWdtZW50X2JlZ2luIiwibGlnaHRzX2ZyYWdtZW50X21hcHMiLCJsaWdodHNfZnJhZ21lbnRfZW5kIiwibG9nZGVwdGhidWZfZnJhZ21lbnQiLCJsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgiLCJsb2dkZXB0aGJ1Zl92ZXJ0ZXgiLCJtYXBfZnJhZ21lbnQiLCJtYXBfcGFyc19mcmFnbWVudCIsIm1hcF9wYXJ0aWNsZV9mcmFnbWVudCIsIm1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50IiwibWV0YWxuZXNzbWFwX2ZyYWdtZW50IiwibWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQiLCJtb3JwaG5vcm1hbF92ZXJ0ZXgiLCJtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCIsIm1vcnBodGFyZ2V0X3ZlcnRleCIsIm5vcm1hbF9mcmFnbWVudF9iZWdpbiIsIm5vcm1hbF9mcmFnbWVudF9tYXBzIiwibm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQiLCJwYWNraW5nIiwicHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCIsInByb2plY3RfdmVydGV4IiwiZGl0aGVyaW5nX2ZyYWdtZW50IiwiZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQiLCJyb3VnaG5lc3NtYXBfZnJhZ21lbnQiLCJyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX2ZyYWdtZW50Iiwic2hhZG93bWFwX3BhcnNfdmVydGV4Iiwic2hhZG93bWFwX3ZlcnRleCIsInNoYWRvd21hc2tfcGFyc19mcmFnbWVudCIsInNraW5iYXNlX3ZlcnRleCIsInNraW5uaW5nX3BhcnNfdmVydGV4Iiwic2tpbm5pbmdfdmVydGV4Iiwic2tpbm5vcm1hbF92ZXJ0ZXgiLCJzcGVjdWxhcm1hcF9mcmFnbWVudCIsInNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQiLCJ0b25lbWFwcGluZ19mcmFnbWVudCIsInRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQiLCJ1dl9wYXJzX2ZyYWdtZW50IiwidXZfcGFyc192ZXJ0ZXgiLCJ1dl92ZXJ0ZXgiLCJ1djJfcGFyc19mcmFnbWVudCIsInV2Ml9wYXJzX3ZlcnRleCIsInV2Ml92ZXJ0ZXgiLCJ3b3JsZHBvc192ZXJ0ZXgiLCJiYWNrZ3JvdW5kX2ZyYWciLCJiYWNrZ3JvdW5kX3ZlcnQiLCJjdWJlX2ZyYWciLCJjdWJlX3ZlcnQiLCJkZXB0aF9mcmFnIiwiZGVwdGhfdmVydCIsImRpc3RhbmNlUkdCQV9mcmFnIiwiZGlzdGFuY2VSR0JBX3ZlcnQiLCJlcXVpcmVjdF9mcmFnIiwiZXF1aXJlY3RfdmVydCIsImxpbmVkYXNoZWRfZnJhZyIsImxpbmVkYXNoZWRfdmVydCIsIm1lc2hiYXNpY19mcmFnIiwibWVzaGJhc2ljX3ZlcnQiLCJtZXNobGFtYmVydF9mcmFnIiwibWVzaGxhbWJlcnRfdmVydCIsIm1lc2htYXRjYXBfZnJhZyIsIm1lc2htYXRjYXBfdmVydCIsIm1lc2hwaG9uZ19mcmFnIiwibWVzaHBob25nX3ZlcnQiLCJtZXNocGh5c2ljYWxfZnJhZyIsIm1lc2hwaHlzaWNhbF92ZXJ0Iiwibm9ybWFsX2ZyYWciLCJub3JtYWxfdmVydCIsInBvaW50c19mcmFnIiwicG9pbnRzX3ZlcnQiLCJzaGFkb3dfZnJhZyIsInNoYWRvd192ZXJ0Iiwic3ByaXRlX2ZyYWciLCJzcHJpdGVfdmVydCIsImNsb25lVW5pZm9ybXMiLCJ1IiwiaXNDb2xvciIsIm1lcmdlVW5pZm9ybXMiLCJ1bmlmb3JtcyIsIm1lcmdlZCIsImhzbEEiLCJoc2xCIiwiaHNsIiwiQ29sb3JLZXl3b3JkcyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiQ29sb3IiLCJzZXRSR0IiLCJzZXRIZXgiLCJzZXRTdHlsZSIsImhleCIsInNldEhTTCIsImh1ZTJyZ2IiLCJzdHlsZSIsImhhbmRsZUFscGhhIiwic3RyaW5nIiwicGFyc2VGbG9hdCIsImV4ZWMiLCJjb2xvciIsImNvbXBvbmVudHMiLCJwYXJzZUludCIsImNoYXJBdCIsImNvcHlHYW1tYVRvTGluZWFyIiwiZ2FtbWFGYWN0b3IiLCJjb3B5TGluZWFyVG9HYW1tYSIsInNhZmVJbnZlcnNlIiwiY29udmVydEdhbW1hVG9MaW5lYXIiLCJjb252ZXJ0TGluZWFyVG9HYW1tYSIsImNvcHlTUkdCVG9MaW5lYXIiLCJTUkdCVG9MaW5lYXIiLCJjb3B5TGluZWFyVG9TUkdCIiwiTGluZWFyVG9TUkdCIiwiY29udmVydFNSR0JUb0xpbmVhciIsImNvbnZlcnRMaW5lYXJUb1NSR0IiLCJnZXRIZXgiLCJnZXRIZXhTdHJpbmciLCJnZXRIU0wiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwiZ2V0U3R5bGUiLCJvZmZzZXRIU0wiLCJhZGRDb2xvcnMiLCJjb2xvcjEiLCJjb2xvcjIiLCJsZXJwSFNMIiwiVW5pZm9ybXNMaWIiLCJkaWZmdXNlIiwib3BhY2l0eSIsIm1hcCIsInV2VHJhbnNmb3JtIiwiYWxwaGFNYXAiLCJzcGVjdWxhcm1hcCIsInNwZWN1bGFyTWFwIiwiZW52bWFwIiwiZW52TWFwIiwiZmxpcEVudk1hcCIsInJlZmxlY3Rpdml0eSIsInJlZnJhY3Rpb25SYXRpbyIsIm1heE1pcExldmVsIiwiYW9tYXAiLCJhb01hcCIsImFvTWFwSW50ZW5zaXR5IiwibGlnaHRtYXAiLCJsaWdodE1hcCIsImxpZ2h0TWFwSW50ZW5zaXR5IiwiZW1pc3NpdmVtYXAiLCJlbWlzc2l2ZU1hcCIsImJ1bXBtYXAiLCJidW1wTWFwIiwiYnVtcFNjYWxlIiwibm9ybWFsbWFwIiwibm9ybWFsTWFwIiwibm9ybWFsU2NhbGUiLCJkaXNwbGFjZW1lbnRtYXAiLCJkaXNwbGFjZW1lbnRNYXAiLCJkaXNwbGFjZW1lbnRTY2FsZSIsImRpc3BsYWNlbWVudEJpYXMiLCJyb3VnaG5lc3NtYXAiLCJyb3VnaG5lc3NNYXAiLCJtZXRhbG5lc3NtYXAiLCJtZXRhbG5lc3NNYXAiLCJncmFkaWVudG1hcCIsImdyYWRpZW50TWFwIiwiZm9nIiwiZm9nRGVuc2l0eSIsImZvZ05lYXIiLCJmb2dGYXIiLCJmb2dDb2xvciIsImxpZ2h0cyIsImFtYmllbnRMaWdodENvbG9yIiwiZGlyZWN0aW9uYWxMaWdodHMiLCJwcm9wZXJ0aWVzIiwic2hhZG93Iiwic2hhZG93QmlhcyIsInNoYWRvd1JhZGl1cyIsInNoYWRvd01hcFNpemUiLCJkaXJlY3Rpb25hbFNoYWRvd01hcCIsImRpcmVjdGlvbmFsU2hhZG93TWF0cml4Iiwic3BvdExpZ2h0cyIsImRpc3RhbmNlIiwiY29uZUNvcyIsInBlbnVtYnJhQ29zIiwiZGVjYXkiLCJzcG90U2hhZG93TWFwIiwic3BvdFNoYWRvd01hdHJpeCIsInBvaW50TGlnaHRzIiwic2hhZG93Q2FtZXJhTmVhciIsInNoYWRvd0NhbWVyYUZhciIsInBvaW50U2hhZG93TWFwIiwicG9pbnRTaGFkb3dNYXRyaXgiLCJoZW1pc3BoZXJlTGlnaHRzIiwic2t5Q29sb3IiLCJncm91bmRDb2xvciIsInJlY3RBcmVhTGlnaHRzIiwiU2hhZGVyTGliIiwiYmFzaWMiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImxhbWJlcnQiLCJlbWlzc2l2ZSIsInBob25nIiwic3BlY3VsYXIiLCJzaGluaW5lc3MiLCJzdGFuZGFyZCIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsImVudk1hcEludGVuc2l0eSIsIm1hdGNhcCIsImRhc2hlZCIsImRhc2hTaXplIiwidG90YWxTaXplIiwiZGVwdGgiLCJiYWNrZ3JvdW5kIiwidDJEIiwiY3ViZSIsInRDdWJlIiwidEZsaXAiLCJlcXVpcmVjdCIsInRFcXVpcmVjdCIsImRpc3RhbmNlUkdCQSIsInJlZmVyZW5jZVBvc2l0aW9uIiwibmVhckRpc3RhbmNlIiwiZmFyRGlzdGFuY2UiLCJXZWJHTEFuaW1hdGlvbiIsImlzQW5pbWF0aW5nIiwiYW5pbWF0aW9uTG9vcCIsIm9uQW5pbWF0aW9uRnJhbWUiLCJ0aW1lIiwiZnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdG9wIiwic2V0QW5pbWF0aW9uTG9vcCIsInNldENvbnRleHQiLCJXZWJHTEF0dHJpYnV0ZXMiLCJnbCIsImJ1ZmZlcnMiLCJXZWFrTWFwIiwiaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSIsInJlbW92ZSIsImRlbGV0ZUJ1ZmZlciIsImJ1ZmZlciIsImRlbGV0ZSIsImJ1ZmZlclR5cGUiLCJ1c2FnZSIsImR5bmFtaWMiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsIm9uVXBsb2FkQ2FsbGJhY2siLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIkludDMyQXJyYXkiLCJJbnQ4QXJyYXkiLCJVaW50OEFycmF5IiwiYnl0ZXNQZXJFbGVtZW50IiwiQllURVNfUEVSX0VMRU1FTlQiLCJ1cGRhdGVSYW5nZSIsImJ1ZmZlclN1YkRhdGEiLCJzdWJhcnJheSIsInVwZGF0ZUJ1ZmZlciIsIkZhY2UzIiwibWF0ZXJpYWxJbmRleCIsInZlcnRleE5vcm1hbHMiLCJ2ZXJ0ZXhDb2xvcnMiLCJFdWxlciIsIl9vcmRlciIsIkRlZmF1bHRPcmRlciIsIkxheWVycyIsIm1hc2siLCJwaHlzaWNhbCIsImNsZWFyQ29hdCIsImNsZWFyQ29hdFJvdWdobmVzcyIsIlJvdGF0aW9uT3JkZXJzIiwiYXNpbiIsInNldEZyb21RdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyZW9yZGVyIiwibmV3T3JkZXIiLCJ0b1ZlY3RvcjMiLCJvcHRpb25hbFJlc3VsdCIsImNoYW5uZWwiLCJlbmFibGUiLCJ0b2dnbGUiLCJkaXNhYmxlIiwidGVzdCIsImxheWVycyIsInExIiwib2JqZWN0M0RJZCIsIk9iamVjdDNEIiwicGFyZW50IiwiY2hpbGRyZW4iLCJEZWZhdWx0VXAiLCJjb25maWd1cmFibGUiLCJtb2RlbFZpZXdNYXRyaXgiLCJEZWZhdWx0TWF0cml4QXV0b1VwZGF0ZSIsIm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJ2aXNpYmxlIiwiY2FzdFNoYWRvdyIsInJlY2VpdmVTaGFkb3ciLCJmcnVzdHVtQ3VsbGVkIiwicmVuZGVyT3JkZXIiLCJ1c2VyRGF0YSIsImlzT2JqZWN0M0QiLCJvbkJlZm9yZVJlbmRlciIsIm9uQWZ0ZXJSZW5kZXIiLCJhcHBseU1hdHJpeCIsInNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZSIsInNldFJvdGF0aW9uRnJvbUV1bGVyIiwic2V0Um90YXRpb25Gcm9tTWF0cml4Iiwic2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbiIsInJvdGF0ZU9uQXhpcyIsInJvdGF0ZU9uV29ybGRBeGlzIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwidHJhbnNsYXRlT25BeGlzIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVaIiwibG9jYWxUb1dvcmxkIiwid29ybGRUb0xvY2FsIiwidXBkYXRlV29ybGRNYXRyaXgiLCJpc0NhbWVyYSIsImdldE9iamVjdEJ5SWQiLCJpZCIsImdldE9iamVjdEJ5UHJvcGVydHkiLCJnZXRPYmplY3RCeU5hbWUiLCJnZXRXb3JsZFBvc2l0aW9uIiwiZ2V0V29ybGRRdWF0ZXJuaW9uIiwiZ2V0V29ybGRTY2FsZSIsImdldFdvcmxkRGlyZWN0aW9uIiwicmF5Y2FzdCIsInRyYXZlcnNlVmlzaWJsZSIsInRyYXZlcnNlQW5jZXN0b3JzIiwiZm9yY2UiLCJ1cGRhdGVQYXJlbnRzIiwidXBkYXRlQ2hpbGRyZW4iLCJnZW9tZXRyaWVzIiwibWF0ZXJpYWxzIiwic2hhcGVzIiwic2VyaWFsaXplIiwibGlicmFyeSIsImVsZW1lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNNZXNoIiwiaXNMaW5lIiwiaXNQb2ludHMiLCJwYXJhbWV0ZXJzIiwic2hhcGUiLCJtYXRlcmlhbCIsInV1aWRzIiwiZXh0cmFjdEZyb21DYWNoZSIsImNhY2hlIiwidmFsdWVzIiwicmVjdXJzaXZlIiwicGFyc2UiLCJjaGlsZCIsIm9iaiIsImdlb21ldHJ5SWQiLCJHZW9tZXRyeSIsImNvbG9ycyIsImZhY2VzIiwiZmFjZVZlcnRleFV2cyIsIm1vcnBoVGFyZ2V0cyIsIm1vcnBoTm9ybWFscyIsInNraW5XZWlnaHRzIiwic2tpbkluZGljZXMiLCJsaW5lRGlzdGFuY2VzIiwiYm91bmRpbmdCb3giLCJlbGVtZW50c05lZWRVcGRhdGUiLCJ2ZXJ0aWNlc05lZWRVcGRhdGUiLCJ1dnNOZWVkVXBkYXRlIiwibm9ybWFsc05lZWRVcGRhdGUiLCJjb2xvcnNOZWVkVXBkYXRlIiwibGluZURpc3RhbmNlc05lZWRVcGRhdGUiLCJncm91cHNOZWVkVXBkYXRlIiwiQnVmZmVyQXR0cmlidXRlIiwiaXRlbVNpemUiLCJub3JtYWxpemVkIiwiSW50OEJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQ4QnVmZmVyQXR0cmlidXRlIiwiVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJJbnQxNkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSIsIkludDMyQnVmZmVyQXR0cmlidXRlIiwiVWludDMyQnVmZmVyQXR0cmlidXRlIiwiRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUiLCJEaXJlY3RHZW9tZXRyeSIsIm5vcm1hbHMiLCJ1dnMiLCJ1dnMyIiwiZ3JvdXBzIiwiYXJyYXlNYXgiLCJmYWNlIiwiamwiLCJjb21wdXRlQm91bmRpbmdCb3giLCJmcm9tQnVmZmVyR2VvbWV0cnkiLCJpbmRpY2VzIiwicG9zaXRpb25zIiwidXYyIiwiYWRkRmFjZSIsImdyb3VwIiwiY29tcHV0ZUZhY2VOb3JtYWxzIiwiY2IiLCJhYiIsImZsIiwidkEiLCJ2QiIsInZDIiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJhcmVhV2VpZ2h0ZWQiLCJ2bCIsImNvbXB1dGVGbGF0VmVydGV4Tm9ybWFscyIsImNvbXB1dGVNb3JwaE5vcm1hbHMiLCJfX29yaWdpbmFsRmFjZU5vcm1hbCIsIl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzIiwidG1wR2VvIiwiZmFjZU5vcm1hbHMiLCJkc3ROb3JtYWxzRmFjZSIsImRzdE5vcm1hbHNWZXJ0ZXgiLCJmYWNlTm9ybWFsIiwibWVyZ2UiLCJtYXRlcmlhbEluZGV4T2Zmc2V0IiwidmVydGV4T2Zmc2V0IiwidmVydGljZXMxIiwidmVydGljZXMyIiwiZmFjZXMxIiwiZmFjZXMyIiwidXZzMSIsImNvbG9yczEiLCJjb2xvcnMyIiwidmVydGV4Q29weSIsImZhY2VDb3B5IiwiZmFjZVZlcnRleE5vcm1hbHMiLCJmYWNlVmVydGV4Q29sb3JzIiwidXZDb3B5IiwibWVyZ2VNZXNoIiwibWVzaCIsIm1lcmdlVmVydGljZXMiLCJ2ZXJ0aWNlc01hcCIsInVuaXF1ZSIsImNoYW5nZXMiLCJwcmVjaXNpb24iLCJmYWNlSW5kaWNlc1RvUmVtb3ZlIiwiaWR4IiwiZGlmZiIsInNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleCIsIl9pZCIsInNvcnQiLCJuZXdVdnMxIiwibmV3VXZzMiIsInZlcnRleCIsIm5vcm1hbHNIYXNoIiwiY29sb3JzSGFzaCIsInV2c0hhc2giLCJoYXNGYWNlVmVydGV4VXYiLCJoYXNGYWNlTm9ybWFsIiwiaGFzRmFjZVZlcnRleE5vcm1hbCIsImhhc0ZhY2VDb2xvciIsImhhc0ZhY2VWZXJ0ZXhDb2xvciIsImZhY2VUeXBlIiwic2V0Qml0IiwiZ2V0VXZJbmRleCIsImdldE5vcm1hbEluZGV4IiwiZ2V0Q29sb3JJbmRleCIsImVuYWJsZWQiLCJoYXNoIiwiayIsImtsIiwidXZzQ29weSIsIm1vcnBoVGFyZ2V0IiwibW9ycGhOb3JtYWwiLCJzcmNWZXJ0ZXhOb3JtYWwiLCJkZXN0VmVydGV4Tm9ybWFsIiwiaXNCdWZmZXJBdHRyaWJ1dGUiLCJzZXRBcnJheSIsInNldER5bmFtaWMiLCJjb3B5QXQiLCJpbmRleDEiLCJpbmRleDIiLCJjb3B5QXJyYXkiLCJjb3B5Q29sb3JzQXJyYXkiLCJjb3B5VmVjdG9yMnNBcnJheSIsInZlY3RvcnMiLCJjb3B5VmVjdG9yM3NBcnJheSIsImNvcHlWZWN0b3I0c0FycmF5Iiwic2V0WFkiLCJzZXRYWVpXIiwib25VcGxvYWQiLCJjb21wdXRlR3JvdXBzIiwiZnJvbUdlb21ldHJ5IiwibW9ycGhUYXJnZXRzUG9zaXRpb24iLCJoYXNGYWNlVmVydGV4VXYyIiwibW9ycGhUYXJnZXRzTGVuZ3RoIiwibW9ycGhUYXJnZXRzTm9ybWFsIiwibW9ycGhOb3JtYWxzTGVuZ3RoIiwiaGFzU2tpbkluZGljZXMiLCJoYXNTa2luV2VpZ2h0cyIsInZlcnRleFV2cyIsImJ1ZmZlckdlb21ldHJ5SWQiLCJCdWZmZXJHZW9tZXRyeSIsIm1vcnBoQXR0cmlidXRlcyIsImRyYXdSYW5nZSIsIkJveEdlb21ldHJ5Iiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZGVwdGhTZWdtZW50cyIsIkJveEJ1ZmZlckdlb21ldHJ5IiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsImFkZEdyb3VwIiwic2V0SW5kZXgiLCJhZGRBdHRyaWJ1dGUiLCJQbGFuZUdlb21ldHJ5IiwiUGxhbmVCdWZmZXJHZW9tZXRyeSIsIndpZHRoX2hhbGYiLCJoZWlnaHRfaGFsZiIsInNlZ21lbnRfd2lkdGgiLCJzZWdtZW50X2hlaWdodCIsImdldEluZGV4IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xlYXJHcm91cHMiLCJzZXREcmF3UmFuZ2UiLCJuZWVkc1VwZGF0ZSIsInVwZGF0ZUZyb21PYmplY3QiLCJkaXJlY3QiLCJfX2RpcmVjdEdlb21ldHJ5IiwibGluZURpc3RhbmNlIiwiZnJvbURpcmVjdEdlb21ldHJ5IiwiaXNOYU4iLCJwQSIsInBCIiwicEMiLCJub3JtYWxpemVOb3JtYWxzIiwiYXR0cmlidXRlQXJyYXkxIiwiYXR0cmlidXRlMiIsImF0dHJpYnV0ZUFycmF5MiIsInRvTm9uSW5kZXhlZCIsImdlb21ldHJ5MiIsImFycmF5MiIsImtleXMiLCJtb3JwaEF0dHJpYnV0ZSIsInNlZ0NlbnRlciIsInNlZ0RpciIsImJhcnljb29yZCIsInZhYiIsInZhYyIsInZiYyIsInZhcCIsInZicCIsInZjcCIsIm1hdGVyaWFsSWQiLCJNYXRlcmlhbCIsImJsZW5kaW5nIiwic2lkZSIsImZsYXRTaGFkaW5nIiwidHJhbnNwYXJlbnQiLCJibGVuZFNyYyIsImJsZW5kRHN0IiwiYmxlbmRFcXVhdGlvbiIsImJsZW5kU3JjQWxwaGEiLCJibGVuZERzdEFscGhhIiwiYmxlbmRFcXVhdGlvbkFscGhhIiwiZGVwdGhGdW5jIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImNsaXBwaW5nUGxhbmVzIiwiY2xpcEludGVyc2VjdGlvbiIsImNsaXBTaGFkb3dzIiwic2hhZG93U2lkZSIsImNvbG9yV3JpdGUiLCJwb2x5Z29uT2Zmc2V0IiwicG9seWdvbk9mZnNldEZhY3RvciIsInBvbHlnb25PZmZzZXRVbml0cyIsImRpdGhlcmluZyIsImFscGhhVGVzdCIsInByZW11bHRpcGxpZWRBbHBoYSIsIlNoYWRlck1hdGVyaWFsIiwiZGVmaW5lcyIsImxpbmV3aWR0aCIsIndpcmVmcmFtZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsImNsaXBwaW5nIiwic2tpbm5pbmciLCJleHRlbnNpb25zIiwiZGVyaXZhdGl2ZXMiLCJmcmFnRGVwdGgiLCJkcmF3QnVmZmVycyIsInNoYWRlclRleHR1cmVMT0QiLCJkZWZhdWx0QXR0cmlidXRlVmFsdWVzIiwiaW5kZXgwQXR0cmlidXRlTmFtZSIsInVuaWZvcm1zTmVlZFVwZGF0ZSIsInNldFZhbHVlcyIsIlJheSIsIm9yaWdpbiIsIlRyaWFuZ2xlIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJjb21iaW5lIiwid2lyZWZyYW1lTGluZWNhcCIsIndpcmVmcmFtZUxpbmVqb2luIiwiTWVzaCIsImRyYXdNb2RlIiwidXBkYXRlTW9ycGhUYXJnZXRzIiwiV2ViR0xCYWNrZ3JvdW5kIiwicmVuZGVyZXIiLCJzdGF0ZSIsIm9iamVjdHMiLCJwbGFuZU1lc2giLCJib3hNZXNoIiwiY2xlYXJDb2xvciIsImNsZWFyQWxwaGEiLCJjdXJyZW50QmFja2dyb3VuZCIsImN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiIsInNldENsZWFyIiwiZ2V0Q2xlYXJDb2xvciIsInNldENsZWFyQ29sb3IiLCJnZXRDbGVhckFscGhhIiwic2V0Q2xlYXJBbHBoYSIsInJlbmRlciIsInJlbmRlckxpc3QiLCJzY2VuZSIsImZvcmNlQ2xlYXIiLCJhdXRvQ2xlYXIiLCJjbGVhciIsImF1dG9DbGVhckNvbG9yIiwiYXV0b0NsZWFyRGVwdGgiLCJhdXRvQ2xlYXJTdGVuY2lsIiwiaXNDdWJlVGV4dHVyZSIsInVuc2hpZnQiLCJXZWJHTEJ1ZmZlclJlbmRlcmVyIiwiaW5mbyIsImNhcGFiaWxpdGllcyIsInNldE1vZGUiLCJkcmF3QXJyYXlzIiwicmVuZGVySW5zdGFuY2VzIiwiZXh0ZW5zaW9uIiwiaXNXZWJHTDIiLCJtYXhJbnN0YW5jZWRDb3VudCIsIldlYkdMQ2FwYWJpbGl0aWVzIiwibWF4QW5pc290cm9weSIsImdldE1heFByZWNpc2lvbiIsImdldFNoYWRlclByZWNpc2lvbkZvcm1hdCIsIldlYkdMMlJlbmRlcmluZ0NvbnRleHQiLCJtYXhQcmVjaXNpb24iLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwibWF4VGV4dHVyZXMiLCJtYXhWZXJ0ZXhUZXh0dXJlcyIsIm1heFRleHR1cmVTaXplIiwibWF4Q3ViZW1hcFNpemUiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmVydGV4VW5pZm9ybXMiLCJtYXhWYXJ5aW5ncyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJ2ZXJ0ZXhUZXh0dXJlcyIsImZsb2F0RnJhZ21lbnRUZXh0dXJlcyIsImdldE1heEFuaXNvdHJvcHkiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJmbG9hdFZlcnRleFRleHR1cmVzIiwiV2ViR0xDbGlwcGluZyIsImdsb2JhbFN0YXRlIiwibnVtR2xvYmFsUGxhbmVzIiwibG9jYWxDbGlwcGluZ0VuYWJsZWQiLCJyZW5kZXJpbmdTaGFkb3dzIiwidmlld05vcm1hbE1hdHJpeCIsInVuaWZvcm0iLCJyZXNldEdsb2JhbFN0YXRlIiwibnVtUGxhbmVzIiwibnVtSW50ZXJzZWN0aW9uIiwicHJvamVjdFBsYW5lcyIsInNraXBUcmFuc2Zvcm0iLCJuUGxhbmVzIiwiZHN0QXJyYXkiLCJmbGF0U2l6ZSIsInZpZXdNYXRyaXgiLCJpNCIsImluaXQiLCJlbmFibGVMb2NhbENsaXBwaW5nIiwiYmVnaW5TaGFkb3dzIiwiZW5kU2hhZG93cyIsInNldFN0YXRlIiwiZnJvbUNhY2hlIiwibkdsb2JhbCIsImxHbG9iYWwiLCJjbGlwcGluZ1N0YXRlIiwiV2ViR0xFeHRlbnNpb25zIiwiZ2V0RXh0ZW5zaW9uIiwiV2ViR0xHZW9tZXRyaWVzIiwid2lyZWZyYW1lQXR0cmlidXRlcyIsIm9uR2VvbWV0cnlEaXNwb3NlIiwiYnVmZmVyZ2VvbWV0cnkiLCJtZW1vcnkiLCJfYnVmZmVyR2VvbWV0cnkiLCJnZW9tZXRyeUF0dHJpYnV0ZXMiLCJnZXRXaXJlZnJhbWVBdHRyaWJ1dGUiLCJnZW9tZXRyeUluZGV4IiwiV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJkcmF3RWxlbWVudHMiLCJXZWJHTEluZm8iLCJjYWxscyIsInRyaWFuZ2xlcyIsImxpbmVzIiwicHJvZ3JhbXMiLCJhdXRvUmVzZXQiLCJyZXNldCIsImluc3RhbmNlQ291bnQiLCJhYnNOdW1lcmljYWxTb3J0IiwiV2ViR0xNb3JwaHRhcmdldHMiLCJpbmZsdWVuY2VzTGlzdCIsIm1vcnBoSW5mbHVlbmNlcyIsInByb2dyYW0iLCJvYmplY3RJbmZsdWVuY2VzIiwibW9ycGhUYXJnZXRJbmZsdWVuY2VzIiwiaW5mbHVlbmNlcyIsImluZmx1ZW5jZSIsImdldFVuaWZvcm1zIiwic2V0VmFsdWUiLCJXZWJHTE9iamVjdHMiLCJ1cGRhdGVMaXN0IiwiQ3ViZVRleHR1cmUiLCJEYXRhVGV4dHVyZTNEIiwiaXNNYXRlcmlhbCIsIm9uQmVmb3JlQ29tcGlsZSIsIm5ld1ZhbHVlIiwiY3VycmVudFZhbHVlIiwiaXNSb290IiwiZW1pc3NpdmVJbnRlbnNpdHkiLCJub3JtYWxNYXBUeXBlIiwic2l6ZUF0dGVudWF0aW9uIiwiZ2FwU2l6ZSIsInNyY1BsYW5lcyIsImRzdFBsYW5lcyIsImlzU2hhZGVyTWF0ZXJpYWwiLCJyYXkiLCJhdCIsInJlY2FzdCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJkaXJlY3Rpb25EaXN0YW5jZSIsImRpc3RhbmNlU3FUb1BvaW50IiwiZGlzdGFuY2VTcVRvU2VnbWVudCIsIm9wdGlvbmFsUG9pbnRPblJheSIsIm9wdGlvbmFsUG9pbnRPblNlZ21lbnQiLCJzMCIsInNxckRpc3QiLCJleHREZXQiLCJzZWdFeHRlbnQiLCJhMDEiLCJiMCIsImludkRldCIsImludGVyc2VjdFNwaGVyZSIsInRjYSIsInJhZGl1czIiLCJ0aGMiLCJ0MCIsInQxIiwiZGlzdGFuY2VUb1BsYW5lIiwiaW50ZXJzZWN0UGxhbmUiLCJkaXN0VG9Qb2ludCIsImludGVyc2VjdEJveCIsInRtaW4iLCJ0bWF4IiwidHltaW4iLCJ0eW1heCIsInR6bWluIiwidHptYXgiLCJpbnZkaXJ4IiwiaW52ZGlyeSIsImludmRpcnoiLCJpbnRlcnNlY3RUcmlhbmdsZSIsImVkZ2UxIiwiZWRnZTIiLCJiYWNrZmFjZUN1bGxpbmciLCJEZE4iLCJEZFF4RTIiLCJEZEUxeFEiLCJRZE4iLCJnZXROb3JtYWwiLCJ0YXJnZXRMZW5ndGhTcSIsImdldEJhcnljb29yZCIsImRvdDAwIiwiZG90MDEiLCJkb3QwMiIsImRvdDExIiwiZG90MTIiLCJkZW5vbSIsImludkRlbm9tIiwiZ2V0VVYiLCJ1djEiLCJ1djMiLCJzZXRGcm9tUG9pbnRzQW5kSW5kaWNlcyIsImkwIiwiaTEiLCJpMiIsImdldEFyZWEiLCJnZXRNaWRwb2ludCIsImdldFBsYW5lIiwicmVzdWx0IiwiZDQiLCJ2YyIsImQ1IiwiZDYiLCJ2YiIsInZhIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsInNldERyYXdNb2RlIiwibW9ycGhUYXJnZXREaWN0aW9uYXJ5IiwibWwiLCJTdHJpbmciLCJpbnZlcnNlTWF0cml4IiwidGVtcEEiLCJ0ZW1wQiIsInRlbXBDIiwidXZBIiwidXZCIiwidXZDIiwiaW50ZXJzZWN0aW9uUG9pbnQiLCJpbnRlcnNlY3Rpb25Qb2ludFdvcmxkIiwiY2hlY2tJbnRlcnNlY3Rpb24iLCJyYXljYXN0ZXIiLCJjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0cyIsImdyb3VwTWF0ZXJpYWwiLCJmYWNlSW5kZXgiLCJmdkEiLCJmdkIiLCJmdkMiLCJpc011bHRpTWF0ZXJpYWwiLCJmYWNlTWF0ZXJpYWwiLCJ0bCIsInRhcmdldHMiLCJ1dnNfZiIsImlzRGF0YVRleHR1cmUzRCIsImVtcHR5VGV4dHVyZSIsImVtcHR5VGV4dHVyZTNkIiwiZW1wdHlDdWJlVGV4dHVyZSIsIlVuaWZvcm1Db250YWluZXIiLCJzZXEiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NUZXh0dXJlVW5pdCIsInNldFZhbHVlMWYiLCJ1bmlmb3JtMWYiLCJhZGRyIiwic2V0VmFsdWUxaSIsInVuaWZvcm0xaSIsInNldFZhbHVlMmZ2IiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlM2Z2IiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlNGZ2IiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlMmZtIiwidW5pZm9ybU1hdHJpeDJmdiIsInNldFZhbHVlM2ZtIiwidW5pZm9ybU1hdHJpeDNmdiIsInNldFZhbHVlNGZtIiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVDEiLCJ1bml0Iiwic2V0VGV4dHVyZTJEIiwic2V0VmFsdWVUM0QxIiwic2V0VGV4dHVyZTNEIiwic2V0VmFsdWVUNiIsInNldFRleHR1cmVDdWJlIiwic2V0VmFsdWUyaXYiLCJ1bmlmb3JtMml2Iiwic2V0VmFsdWUzaXYiLCJ1bmlmb3JtM2l2Iiwic2V0VmFsdWU0aXYiLCJ1bmlmb3JtNGl2Iiwic2V0VmFsdWUxZnYiLCJ1bmlmb3JtMWZ2Iiwic2V0VmFsdWUxaXYiLCJ1bmlmb3JtMWl2Iiwic2V0VmFsdWVWMmEiLCJ1cGRhdGVDYWNoZSIsInNldFZhbHVlVjNhIiwic2V0VmFsdWVWNGEiLCJzZXRWYWx1ZU0yYSIsInNldFZhbHVlTTNhIiwic2V0VmFsdWVNNGEiLCJzZXRWYWx1ZVQxYSIsInVuaXRzIiwic2V0VmFsdWVUNmEiLCJTaW5nbGVVbmlmb3JtIiwiYWN0aXZlSW5mbyIsImdldFNpbmd1bGFyU2V0dGVyIiwiUHVyZUFycmF5VW5pZm9ybSIsImdldFB1cmVBcnJheVNldHRlciIsIlN0cnVjdHVyZWRVbmlmb3JtIiwiUmVQYXRoUGFydCIsImFkZFVuaWZvcm0iLCJjb250YWluZXIiLCJ1bmlmb3JtT2JqZWN0IiwicGFyc2VVbmlmb3JtIiwicGF0aCIsInBhdGhMZW5ndGgiLCJsYXN0SW5kZXgiLCJtYXRjaEVuZCIsImlkSXNJbmRleCIsInN1YnNjcmlwdCIsIm5leHQiLCJXZWJHTFVuaWZvcm1zIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJXZWJHTFNoYWRlciIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJnZXRTaGFkZXJJbmZvTG9nIiwic3BsaXQiLCJqb2luIiwiYWRkTGluZU51bWJlcnMiLCJzZXRPcHRpb25hbCIsInVwbG9hZCIsInNlcVdpdGhWYWx1ZSIsInByb2dyYW1JZENvdW50IiwiZ2V0RW5jb2RpbmdDb21wb25lbnRzIiwiZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uIiwiZnVuY3Rpb25OYW1lIiwiZmlsdGVyRW1wdHlMaW5lIiwicmVwbGFjZUxpZ2h0TnVtcyIsInJlcGxhY2UiLCJudW1EaXJMaWdodHMiLCJudW1TcG90TGlnaHRzIiwibnVtUmVjdEFyZWFMaWdodHMiLCJudW1Qb2ludExpZ2h0cyIsIm51bUhlbWlMaWdodHMiLCJyZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMiLCJudW1DbGlwcGluZ1BsYW5lcyIsIm51bUNsaXBJbnRlcnNlY3Rpb24iLCJwYXJzZUluY2x1ZGVzIiwiaW5jbHVkZSIsInVucm9sbExvb3BzIiwic25pcHBldCIsInVucm9sbCIsIldlYkdMUHJvZ3JhbSIsImNvZGUiLCJzaGFkb3dNYXBUeXBlRGVmaW5lIiwic2hhZG93TWFwVHlwZSIsImVudk1hcFR5cGVEZWZpbmUiLCJlbnZNYXBNb2RlRGVmaW5lIiwiZW52TWFwQmxlbmRpbmdEZWZpbmUiLCJwcmVmaXhWZXJ0ZXgiLCJwcmVmaXhGcmFnbWVudCIsImdhbW1hRmFjdG9yRGVmaW5lIiwiY3VzdG9tRXh0ZW5zaW9ucyIsInJlbmRlcmVyRXh0ZW5zaW9ucyIsImVudk1hcEN1YmVVViIsIm9iamVjdFNwYWNlTm9ybWFsTWFwIiwiZmlsdGVyIiwiZ2VuZXJhdGVFeHRlbnNpb25zIiwiY3VzdG9tRGVmaW5lcyIsImNodW5rcyIsImdlbmVyYXRlRGVmaW5lcyIsImNyZWF0ZVByb2dyYW0iLCJpc1Jhd1NoYWRlck1hdGVyaWFsIiwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyIsIm1heEJvbmVzIiwidXNlRm9nIiwiZm9nRXhwIiwidXNlVmVydGV4VGV4dHVyZSIsImRvdWJsZVNpZGVkIiwiZmxpcFNpZGVkIiwic2hhZG93TWFwRW5hYmxlZCIsInBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzIiwidG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZ05hbWUiLCJnZXRUb25lTWFwcGluZ0Z1bmN0aW9uIiwib3V0cHV0RW5jb2RpbmciLCJtYXBFbmNvZGluZyIsIm1hdGNhcEVuY29kaW5nIiwiZW52TWFwRW5jb2RpbmciLCJlbWlzc2l2ZU1hcEVuY29kaW5nIiwiZGVwdGhQYWNraW5nIiwiaXNHTFNMM1NoYWRlck1hdGVyaWFsIiwidmVyc2lvblJlZ2V4IiwiZnJhZ21lbnRHbHNsIiwiZ2xWZXJ0ZXhTaGFkZXIiLCJnbEZyYWdtZW50U2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwibGlua1Byb2dyYW0iLCJjYWNoZWRVbmlmb3JtcyIsImNhY2hlZEF0dHJpYnV0ZXMiLCJwcm9ncmFtTG9nIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ0cmltIiwidmVydGV4TG9nIiwiZnJhZ21lbnRMb2ciLCJydW5uYWJsZSIsImhhdmVEaWFnbm9zdGljcyIsImdldEVycm9yIiwiZGlhZ25vc3RpY3MiLCJwcmVmaXgiLCJkZWxldGVTaGFkZXIiLCJnZXRBdHRyaWJ1dGVzIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyIsImRlc3Ryb3kiLCJkZWxldGVQcm9ncmFtIiwidXNlZFRpbWVzIiwiV2ViR0xQcm9ncmFtcyIsInNoYWRlcklEcyIsIk1lc2hEZXB0aE1hdGVyaWFsIiwiTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJNZXNoTm9ybWFsTWF0ZXJpYWwiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJNZXNoVG9vbk1hdGVyaWFsIiwiTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsIk1lc2hNYXRjYXBNYXRlcmlhbCIsIkxpbmVCYXNpY01hdGVyaWFsIiwiTGluZURhc2hlZE1hdGVyaWFsIiwiUG9pbnRzTWF0ZXJpYWwiLCJTaGFkb3dNYXRlcmlhbCIsIlNwcml0ZU1hdGVyaWFsIiwicGFyYW1ldGVyTmFtZXMiLCJnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwIiwiZ2FtbWFPdmVycmlkZUxpbmVhciIsImdldFBhcmFtZXRlcnMiLCJzaGFkb3dzIiwibkNsaXBQbGFuZXMiLCJuQ2xpcEludGVyc2VjdGlvbiIsInNoYWRlcklEIiwiaXNTa2lubmVkTWVzaCIsImJvbmVzIiwic2tlbGV0b24iLCJuVmVydGV4VW5pZm9ybXMiLCJuVmVydGV4TWF0cmljZXMiLCJhbGxvY2F0ZUJvbmVzIiwiY3VycmVudFJlbmRlclRhcmdldCIsImdldFJlbmRlclRhcmdldCIsImdhbW1hT3V0cHV0IiwiZ2FtbWFJbnB1dCIsImVudk1hcE1vZGUiLCJpc0ZvZ0V4cDIiLCJtYXhNb3JwaFRhcmdldHMiLCJtYXhNb3JwaE5vcm1hbHMiLCJkaXJlY3Rpb25hbCIsInNwb3QiLCJyZWN0QXJlYSIsImhlbWkiLCJzaGFkb3dNYXAiLCJnZXRQcm9ncmFtQ29kZSIsImFjcXVpcmVQcm9ncmFtIiwicGwiLCJwcm9ncmFtSW5mbyIsInJlbGVhc2VQcm9ncmFtIiwicG9wIiwiV2ViR0xQcm9wZXJ0aWVzIiwicGFpbnRlclNvcnRTdGFibGUiLCJyZXZlcnNlUGFpbnRlclNvcnRTdGFibGUiLCJXZWJHTFJlbmRlckxpc3QiLCJyZW5kZXJJdGVtcyIsInJlbmRlckl0ZW1zSW5kZXgiLCJvcGFxdWUiLCJnZXROZXh0UmVuZGVySXRlbSIsInJlbmRlckl0ZW0iLCJXZWJHTFJlbmRlckxpc3RzIiwibGlzdHMiLCJsaXN0IiwiY2FtZXJhcyIsIlVuaWZvcm1zQ2FjaGUiLCJsaWdodCIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJXZWJHTExpZ2h0cyIsInN0YXRlSUQiLCJkaXJlY3Rpb25hbExlbmd0aCIsInBvaW50TGVuZ3RoIiwic3BvdExlbmd0aCIsInJlY3RBcmVhTGVuZ3RoIiwiaGVtaUxlbmd0aCIsInNoYWRvd3NMZW5ndGgiLCJhbWJpZW50IiwidmVjdG9yMyIsIm1hdHJpeDQyIiwic2V0dXAiLCJpbnRlbnNpdHkiLCJpc0FtYmllbnRMaWdodCIsImlzRGlyZWN0aW9uYWxMaWdodCIsImJpYXMiLCJtYXBTaXplIiwiaXNTcG90TGlnaHQiLCJwZW51bWJyYSIsImlzUmVjdEFyZWFMaWdodCIsImlzUG9pbnRMaWdodCIsImlzSGVtaXNwaGVyZUxpZ2h0IiwiV2ViR0xSZW5kZXJTdGF0ZSIsImxpZ2h0c0FycmF5Iiwic2hhZG93c0FycmF5Iiwic2V0dXBMaWdodHMiLCJwdXNoTGlnaHQiLCJwdXNoU2hhZG93Iiwic2hhZG93TGlnaHQiLCJXZWJHTFJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlIiwiV2ViR0xTaGFkb3dNYXAiLCJfcmVuZGVyZXIiLCJfb2JqZWN0cyIsIl9mcnVzdHVtIiwiX3Byb2pTY3JlZW5NYXRyaXgiLCJfc2hhZG93TWFwU2l6ZSIsIl9tYXhTaGFkb3dNYXBTaXplIiwiX2xvb2tUYXJnZXQiLCJfbGlnaHRQb3NpdGlvbldvcmxkIiwiX01vcnBoaW5nRmxhZyIsIl9Ta2lubmluZ0ZsYWciLCJfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzIiwiX2RlcHRoTWF0ZXJpYWxzIiwiX2Rpc3RhbmNlTWF0ZXJpYWxzIiwiX21hdGVyaWFsQ2FjaGUiLCIwIiwiMSIsIjIiLCJjdWJlRGlyZWN0aW9ucyIsImN1YmVVcHMiLCJjdWJlMkRWaWV3UG9ydHMiLCJ1c2VNb3JwaGluZyIsInVzZVNraW5uaW5nIiwiZGVwdGhNYXRlcmlhbCIsImRpc3RhbmNlTWF0ZXJpYWwiLCJnZXREZXB0aE1hdGVyaWFsIiwibGlnaHRQb3NpdGlvbldvcmxkIiwibWF0ZXJpYWxWYXJpYW50cyIsImN1c3RvbU1hdGVyaWFsIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsImN1c3RvbURpc3RhbmNlTWF0ZXJpYWwiLCJ2YXJpYW50SW5kZXgiLCJrZXlBIiwia2V5QiIsIm1hdGVyaWFsc0ZvclZhcmlhbnQiLCJjYWNoZWRNYXRlcmlhbCIsImlzTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJyZW5kZXJPYmplY3QiLCJzaGFkb3dDYW1lcmEiLCJyZW5kZXJCdWZmZXJEaXJlY3QiLCJhdXRvVXBkYXRlIiwiZmFjZUNvdW50IiwiX3N0YXRlIiwic2V0VGVzdCIsInNldFNjaXNzb3JUZXN0IiwidnBXaWR0aCIsInZwSGVpZ2h0IiwicGFycyIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJpc1Nwb3RMaWdodFNoYWRvdyIsInNoYWRvd01hdHJpeCIsInNldFJlbmRlclRhcmdldCIsInZwRGltZW5zaW9ucyIsIldlYkdMU3RhdGUiLCJ1dGlscyIsImNvbG9yQnVmZmVyIiwibG9ja2VkIiwiY3VycmVudENvbG9yTWFzayIsImN1cnJlbnRDb2xvckNsZWFyIiwic2V0TWFzayIsImNvbG9yTWFzayIsInNldExvY2tlZCIsImxvY2siLCJjdXJyZW50RGVwdGhNYXNrIiwiY3VycmVudERlcHRoRnVuYyIsImN1cnJlbnREZXB0aENsZWFyIiwiZGVwdGhNYXNrIiwic2V0RnVuYyIsImNsZWFyRGVwdGgiLCJjdXJyZW50U3RlbmNpbE1hc2siLCJjdXJyZW50U3RlbmNpbEZ1bmMiLCJjdXJyZW50U3RlbmNpbFJlZiIsImN1cnJlbnRTdGVuY2lsRnVuY01hc2siLCJjdXJyZW50U3RlbmNpbEZhaWwiLCJjdXJyZW50U3RlbmNpbFpGYWlsIiwiY3VycmVudFN0ZW5jaWxaUGFzcyIsImN1cnJlbnRTdGVuY2lsQ2xlYXIiLCJzdGVuY2lsVGVzdCIsInN0ZW5jaWxNYXNrIiwic3RlbmNpbEZ1bmMiLCJzdGVuY2lsUmVmIiwic2V0T3AiLCJzdGVuY2lsRmFpbCIsInN0ZW5jaWxaRmFpbCIsInN0ZW5jaWxaUGFzcyIsInN0ZW5jaWxPcCIsInN0ZW5jaWwiLCJjbGVhclN0ZW5jaWwiLCJtYXhWZXJ0ZXhBdHRyaWJ1dGVzIiwibmV3QXR0cmlidXRlcyIsImVuYWJsZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlRGl2aXNvcnMiLCJlbmFibGVkQ2FwYWJpbGl0aWVzIiwiY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzIiwiY3VycmVudFByb2dyYW0iLCJjdXJyZW50QmxlbmRpbmdFbmFibGVkIiwiY3VycmVudEJsZW5kaW5nIiwiY3VycmVudEJsZW5kRXF1YXRpb24iLCJjdXJyZW50QmxlbmRTcmMiLCJjdXJyZW50QmxlbmREc3QiLCJjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhIiwiY3VycmVudEJsZW5kU3JjQWxwaGEiLCJjdXJyZW50QmxlbmREc3RBbHBoYSIsImN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSIsImN1cnJlbnRGbGlwU2lkZWQiLCJjdXJyZW50Q3VsbEZhY2UiLCJjdXJyZW50TGluZVdpZHRoIiwiY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IiLCJjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzIiwibGluZVdpZHRoQXZhaWxhYmxlIiwiZ2xWZXJzaW9uIiwiY3VycmVudFRleHR1cmVTbG90IiwiY3VycmVudEJvdW5kVGV4dHVyZXMiLCJjdXJyZW50U2Npc3NvciIsImN1cnJlbnRWaWV3cG9ydCIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInRleFBhcmFtZXRlcmkiLCJ0ZXhJbWFnZTJEIiwiZW1wdHlUZXh0dXJlcyIsImVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IiLCJtZXNoUGVyQXR0cmlidXRlIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJzZXRCbGVuZGluZyIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImNvbnZlcnQiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsInNldEZsaXBTaWRlZCIsImZyb250RmFjZSIsInNldEN1bGxGYWNlIiwiY3VsbEZhY2UiLCJzZXRQb2x5Z29uT2Zmc2V0IiwiZmFjdG9yIiwiYWN0aXZlVGV4dHVyZSIsIndlYmdsU2xvdCIsImluaXRBdHRyaWJ1dGVzIiwiZW5hYmxlQXR0cmlidXRlIiwiZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMiLCJmb3JtYXRzIiwidXNlUHJvZ3JhbSIsInNldE1hdGVyaWFsIiwiZnJvbnRGYWNlQ1ciLCJzZXRMaW5lV2lkdGgiLCJsaW5lV2lkdGgiLCJ3ZWJnbFR5cGUiLCJ3ZWJnbFRleHR1cmUiLCJib3VuZFRleHR1cmUiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsImFwcGx5IiwidGV4SW1hZ2UzRCIsIldlYkdMVGV4dHVyZXMiLCJfZ2wiLCJfdmlkZW9UZXh0dXJlcyIsImNsYW1wVG9NYXhTaXplIiwibWF4U2l6ZSIsInRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyIsImdlbmVyYXRlTWlwbWFwIiwiX19tYXhNaXBMZXZlbCIsIkxPRzJFIiwiZ2V0SW50ZXJuYWxGb3JtYXQiLCJnbEZvcm1hdCIsImdsVHlwZSIsImZpbHRlckZhbGxiYWNrIiwib25UZXh0dXJlRGlzcG9zZSIsInRleHR1cmVQcm9wZXJ0aWVzIiwiX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZSIsImRlbGV0ZVRleHR1cmUiLCJfX3dlYmdsSW5pdCIsIl9fd2ViZ2xUZXh0dXJlIiwiZGVhbGxvY2F0ZVRleHR1cmUiLCJpc1ZpZGVvVGV4dHVyZSIsIm9uUmVuZGVyVGFyZ2V0RGlzcG9zZSIsInJlbmRlclRhcmdldCIsInJlbmRlclRhcmdldFByb3BlcnRpZXMiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xEZXB0aGJ1ZmZlciIsImRlbGV0ZVJlbmRlcmJ1ZmZlciIsImRlYWxsb2NhdGVSZW5kZXJUYXJnZXQiLCJzbG90IiwidXBkYXRlVmlkZW9UZXh0dXJlIiwiX192ZXJzaW9uIiwiY29tcGxldGUiLCJ1cGxvYWRUZXh0dXJlIiwic2V0VGV4dHVyZVBhcmFtZXRlcnMiLCJ0ZXh0dXJlVHlwZSIsImlzUG93ZXJPZlR3b0ltYWdlIiwiX19jdXJyZW50QW5pc290cm9weSIsInRleFBhcmFtZXRlcmYiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsInBpeGVsU3RvcmVpIiwidGV4dHVyZU5lZWRzUG93ZXJPZlR3byIsIkhUTUxJbWFnZUVsZW1lbnQiLCJJbWFnZUJpdG1hcCIsIm1ha2VQb3dlck9mVHdvIiwiZ2xJbnRlcm5hbEZvcm1hdCIsIm1pcG1hcCIsImlzRGVwdGhUZXh0dXJlIiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsInNldHVwRnJhbWVCdWZmZXJUZXh0dXJlIiwiZnJhbWVidWZmZXIiLCJhdHRhY2htZW50IiwidGV4dHVyZVRhcmdldCIsImJpbmRGcmFtZWJ1ZmZlciIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwic2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlIiwicmVuZGVyYnVmZmVyIiwiYmluZFJlbmRlcmJ1ZmZlciIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsInNldHVwRGVwdGhSZW5kZXJidWZmZXIiLCJpc0N1YmUiLCJ3ZWJnbERlcHRoVGV4dHVyZSIsInNldHVwRGVwdGhUZXh0dXJlIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiaXNDb21wcmVzc2VkIiwiY3ViZUltYWdlIiwic2V0VGV4dHVyZUN1YmVEeW5hbWljIiwic2V0dXBSZW5kZXJUYXJnZXQiLCJpc1RhcmdldFBvd2VyT2ZUd28iLCJjcmVhdGVGcmFtZWJ1ZmZlciIsInVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCIsIldlYkdMVXRpbHMiLCJIQUxGX0ZMT0FUX09FUyIsIkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMIiwiTUlOX0VYVCIsIk1BWF9FWFQiLCJVTlNJR05FRF9JTlRfMjRfOF9XRUJHTCIsIkdyb3VwIiwiQ2FtZXJhIiwicHJvamVjdGlvbk1hdHJpeEludmVyc2UiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImZvdiIsImFzcGVjdCIsInpvb20iLCJmb2N1cyIsInZpZXciLCJmaWxtR2F1Z2UiLCJmaWxtT2Zmc2V0IiwiQXJyYXlDYW1lcmEiLCJpc01lc2hEZXB0aE1hdGVyaWFsIiwiaXNHcm91cCIsImlzUGVyc3BlY3RpdmVDYW1lcmEiLCJzZXRGb2NhbExlbmd0aCIsImZvY2FsTGVuZ3RoIiwidkV4dGVudFNsb3BlIiwiZ2V0RmlsbUhlaWdodCIsImF0YW4iLCJnZXRGb2NhbExlbmd0aCIsImdldEVmZmVjdGl2ZUZPViIsImdldEZpbG1XaWR0aCIsInNldFZpZXdPZmZzZXQiLCJmdWxsV2lkdGgiLCJmdWxsSGVpZ2h0Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjbGVhclZpZXdPZmZzZXQiLCJza2V3IiwiaXNBcnJheUNhbWVyYSIsInRocmVlX21vZHVsZV9nZW9tZXRyeSIsIm1hdHJpeFBvc2l0aW9uIiwib2Zmc2V0TWF0cml4IiwiaWRlbnRpdHlNYXRyaXgiLCJjYW1lcmFMUG9zIiwiY2FtZXJhUlBvcyIsInNldFByb2plY3Rpb25Gcm9tVW5pb24iLCJjYW1lcmFMIiwiY2FtZXJhUiIsImlwZCIsInByb2pMIiwicHJvalIiLCJ0b3BGb3YiLCJib3R0b21Gb3YiLCJsZWZ0Rm92IiwicmlnaHRGb3YiLCJ6T2Zmc2V0IiwieE9mZnNldCIsIm5lYXIyIiwiZmFyMiIsImxlZnQyIiwicmlnaHQyIiwidG9wMiIsImJvdHRvbTIiLCJXZWJWUk1hbmFnZXIiLCJkZXZpY2UiLCJmcmFtZURhdGEiLCJwb3NlVGFyZ2V0IiwiY29udHJvbGxlcnMiLCJzdGFuZGluZ01hdHJpeCIsInN0YW5kaW5nTWF0cml4SW52ZXJzZSIsImZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJmcmFtZU9mUmVmZXJlbmNlVHlwZSIsIndpbmRvdyIsIlZSRnJhbWVEYXRhIiwib25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlIiwidGVtcFF1YXRlcm5pb24iLCJ0ZW1wUG9zaXRpb24iLCJib3VuZHMiLCJjdXJyZW50U2l6ZSIsImN1cnJlbnRQaXhlbFJhdGlvIiwiY2FtZXJhVlIiLCJpc1ByZXNlbnRpbmciLCJleWVQYXJhbWV0ZXJzIiwiZ2V0RXllUGFyYW1ldGVycyIsInJlbmRlcldpZHRoIiwicmVuZGVySGVpZ2h0IiwiZ2V0UGl4ZWxSYXRpbyIsInNldERyYXdpbmdCdWZmZXJTaXplIiwiYW5pbWF0aW9uIiwidHJpZ2dlcnMiLCJmaW5kR2FtZXBhZCIsImdhbWVwYWRzIiwibmF2aWdhdG9yIiwiZ2V0R2FtZXBhZHMiLCJnYW1lcGFkIiwic3RhcnRzV2l0aCIsImdldENvbnRyb2xsZXIiLCJjb250cm9sbGVyIiwiZ2V0RGV2aWNlIiwic2V0RGV2aWNlIiwic2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciIsInNldEZyYW1lT2ZSZWZlcmVuY2VUeXBlIiwic2V0UG9zZVRhcmdldCIsImdldENhbWVyYSIsInVzZXJIZWlnaHQiLCJkZXB0aE5lYXIiLCJkZXB0aEZhciIsImdldEZyYW1lRGF0YSIsInN0YWdlUGFyYW1ldGVycyIsInNpdHRpbmdUb1N0YW5kaW5nVHJhbnNmb3JtIiwicG9zZSIsInBvc2VPYmplY3QiLCJvcmllbnRhdGlvbiIsImxlZnRWaWV3TWF0cml4IiwicmlnaHRWaWV3TWF0cml4IiwibGVmdFByb2plY3Rpb25NYXRyaXgiLCJyaWdodFByb2plY3Rpb25NYXRyaXgiLCJnZXRMYXllcnMiLCJsYXllciIsImxlZnRCb3VuZHMiLCJyaWdodEJvdW5kcyIsImhhc1Bvc2l0aW9uIiwiYnV0dG9uSWQiLCJidXR0b25zIiwicHJlc3NlZCIsInVwZGF0ZUNvbnRyb2xsZXJzIiwiZ2V0U3RhbmRpbmdNYXRyaXgiLCJzdWJtaXRGcmFtZSIsIldlYlhSTWFuYWdlciIsInNlc3Npb24iLCJmcmFtZU9mUmVmZXJlbmNlIiwiaW5wdXRTb3VyY2VzIiwib25TZXNzaW9uRXZlbnQiLCJpbnB1dFNvdXJjZSIsIm9uU2Vzc2lvbkVuZCIsInNldEZyYW1lYnVmZmVyIiwidXBkYXRlQ2FtZXJhIiwiWFJEZXZpY2UiLCJzZXRDb21wYXRpYmxlWFJEZXZpY2UiLCJzZXRTZXNzaW9uIiwiYmFzZUxheWVyIiwiWFJXZWJHTExheWVyIiwicmVxdWVzdEZyYW1lT2ZSZWZlcmVuY2UiLCJ0aGVuIiwiZ2V0SW5wdXRTb3VyY2VzIiwib25BbmltYXRpb25GcmFtZUNhbGxiYWNrIiwiZ2V0RGV2aWNlUG9zZSIsInZpZXdzIiwiZ2V0Vmlld3BvcnQiLCJnZXRWaWV3TWF0cml4IiwiaW5wdXRQb3NlIiwiZ2V0SW5wdXRQb3NlIiwidGFyZ2V0UmF5IiwidHJhbnNmb3JtTWF0cml4IiwicG9pbnRlck1hdHJpeCIsIlRIUkVFIiwiV2ViR0xSZW5kZXJlciIsIl9jb250ZXh0IiwiX2FscGhhIiwiX2RlcHRoIiwiX3N0ZW5jaWwiLCJfYW50aWFsaWFzIiwiYW50aWFsaWFzIiwiX3ByZW11bHRpcGxpZWRBbHBoYSIsIl9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJfcG93ZXJQcmVmZXJlbmNlIiwicG93ZXJQcmVmZXJlbmNlIiwiY3VycmVudFJlbmRlckxpc3QiLCJjdXJyZW50UmVuZGVyU3RhdGUiLCJkb21FbGVtZW50Iiwic29ydE9iamVjdHMiLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwidG9uZU1hcHBpbmdXaGl0ZVBvaW50IiwicHJvZ3JhbUNhY2hlIiwicmVuZGVyTGlzdHMiLCJtb3JwaHRhcmdldHMiLCJidWZmZXJSZW5kZXJlciIsImluZGV4ZWRCdWZmZXJSZW5kZXJlciIsIl90aGlzIiwiX2lzQ29udGV4dExvc3QiLCJfZnJhbWVidWZmZXIiLCJfY3VycmVudFJlbmRlclRhcmdldCIsIl9jdXJyZW50RnJhbWVidWZmZXIiLCJfY3VycmVudE1hdGVyaWFsSWQiLCJfY3VycmVudEdlb21ldHJ5UHJvZ3JhbSIsIl9jdXJyZW50Q2FtZXJhIiwiX2N1cnJlbnRBcnJheUNhbWVyYSIsIl9jdXJyZW50Vmlld3BvcnQiLCJfY3VycmVudFNjaXNzb3IiLCJfY3VycmVudFNjaXNzb3JUZXN0IiwiX3VzZWRUZXh0dXJlVW5pdHMiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX3BpeGVsUmF0aW8iLCJfdmlld3BvcnQiLCJfc2Npc3NvciIsIl9zY2lzc29yVGVzdCIsIl9jbGlwcGluZyIsIl9jbGlwcGluZ0VuYWJsZWQiLCJfbG9jYWxDbGlwcGluZ0VuYWJsZWQiLCJfdmVjdG9yMyIsImdldFRhcmdldFBpeGVsUmF0aW8iLCJjb250ZXh0QXR0cmlidXRlcyIsIm9uQ29udGV4dExvc3QiLCJvbkNvbnRleHRSZXN0b3JlIiwicmFuZ2VNaW4iLCJyYW5nZU1heCIsIm1lc3NhZ2UiLCJpbml0R0xDb250ZXh0IiwidnIiLCJwcmV2ZW50RGVmYXVsdCIsIm9uTWF0ZXJpYWxEaXNwb3NlIiwicmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSIsImRlYWxsb2NhdGVNYXRlcmlhbCIsImdldENvbnRleHRBdHRyaWJ1dGVzIiwiZm9yY2VDb250ZXh0TG9zcyIsImxvc2VDb250ZXh0IiwiZm9yY2VDb250ZXh0UmVzdG9yZSIsInJlc3RvcmVDb250ZXh0Iiwic2V0UGl4ZWxSYXRpbyIsInVwZGF0ZVN0eWxlIiwic2V0Vmlld3BvcnQiLCJnZXREcmF3aW5nQnVmZmVyU2l6ZSIsInBpeGVsUmF0aW8iLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJzZXRTY2lzc29yIiwiYm9vbGVhbiIsImJpdHMiLCJyZW5kZXJCdWZmZXJJbW1lZGlhdGUiLCJoYXNQb3NpdGlvbnMiLCJoYXNOb3JtYWxzIiwiaGFzVXZzIiwiaGFzQ29sb3JzIiwicHJvZ3JhbUF0dHJpYnV0ZXMiLCJwb3NpdGlvbkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsIm5vcm1hbEFycmF5IiwidXZBcnJheSIsImNvbG9yQXJyYXkiLCJzZXRQcm9ncmFtIiwidXBkYXRlQnVmZmVycyIsInJhbmdlRmFjdG9yIiwiaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIm1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsInByb2dyYW1BdHRyaWJ1dGUiLCJnZW9tZXRyeUF0dHJpYnV0ZSIsInN0cmlkZSIsImlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImRhdGFDb3VudCIsInJhbmdlU3RhcnQiLCJyYW5nZUNvdW50IiwiZHJhd1N0YXJ0IiwiZHJhd0VuZCIsImRyYXdDb3VudCIsImlzTGluZVNlZ21lbnRzIiwiaXNMaW5lTG9vcCIsImlzU3ByaXRlIiwiY29tcGlsZSIsImlzTGlnaHQiLCJpbml0TWF0ZXJpYWwiLCJ3YXJuZWQiLCJyZW5kZXJPYmplY3RzIiwib3ZlcnJpZGVNYXRlcmlhbCIsImNhbWVyYTIiLCJpc0ltbWVkaWF0ZVJlbmRlck9iamVjdCIsInJlbmRlck9iamVjdEltbWVkaWF0ZSIsIm1hdGVyaWFsUHJvcGVydGllcyIsImxpZ2h0c0hhc2giLCJsaWdodHNTdGF0ZUhhc2giLCJwcm9ncmFtQ2hhbmdlIiwibnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzIiwibnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzIiwicHJvZ1VuaWZvcm1zIiwidW5pZm9ybXNMaXN0IiwidXNlQ2FjaGUiLCJyZWZyZXNoUHJvZ3JhbSIsInJlZnJlc2hNYXRlcmlhbCIsInJlZnJlc2hMaWdodHMiLCJwX3VuaWZvcm1zIiwibV91bmlmb3JtcyIsImlzTWVzaFBob25nTWF0ZXJpYWwiLCJpc01lc2hTdGFuZGFyZE1hdGVyaWFsIiwidUNhbVBvcyIsImNhbWVyYVBvc2l0aW9uIiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiYm9uZVRleHR1cmUiLCJib25lTWF0cmljZXMiLCJib25lVGV4dHVyZVNpemUiLCJpc0ZvZyIsImRlbnNpdHkiLCJyZWZyZXNoVW5pZm9ybXNGb2ciLCJyZWZyZXNoVW5pZm9ybXNDb21tb24iLCJyZWZyZXNoVW5pZm9ybXNMYW1iZXJ0IiwiaXNNZXNoVG9vbk1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUGhvbmciLCJyZWZyZXNoVW5pZm9ybXNUb29uIiwiaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkIiwicmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwiLCJpc01lc2hNYXRjYXBNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc01hdGNhcCIsInJlZnJlc2hVbmlmb3Jtc0RlcHRoIiwicmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UiLCJpc01lc2hOb3JtYWxNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc05vcm1hbCIsImlzTGluZUJhc2ljTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNMaW5lIiwiaXNMaW5lRGFzaGVkTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNEYXNoIiwiaXNQb2ludHNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1BvaW50cyIsImlzU3ByaXRlTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNTcHJpdGVzIiwiaXNTaGFkb3dNYXRlcmlhbCIsImx0Y18xIiwiTFRDXzEiLCJsdGNfMiIsIkxUQ18yIiwidXZTY2FsZU1hcCIsInByb2plY3RPYmplY3QiLCJvcGFxdWVPYmplY3RzIiwidHJhbnNwYXJlbnRPYmplY3RzIiwidGV4dHVyZVVuaXQiLCJzZXRUZXh0dXJlIiwicmVhZFJlbmRlclRhcmdldFBpeGVscyIsInJlc3RvcmUiLCJ0ZXh0dXJlRm9ybWF0IiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsInJlYWRQaXhlbHMiLCJjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUiLCJsZXZlbCIsImNvcHlUZXhJbWFnZTJEIiwiY29weVRleHR1cmVUb1RleHR1cmUiLCJzcmNUZXh0dXJlIiwiZHN0VGV4dHVyZSIsInRleFN1YkltYWdlMkQiLCJGb2dFeHAyIiwiRm9nIiwiU2NlbmUiLCJJbnRlcmxlYXZlZEJ1ZmZlciIsIkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwiaW50ZXJsZWF2ZWRCdWZmZXIiLCJTcHJpdGUiLCJMT0QiLCJsZXZlbHMiLCJTa2lubmVkTWVzaCIsImJpbmRNb2RlIiwiYmluZE1hdHJpeCIsImJpbmRNYXRyaXhJbnZlcnNlIiwiU2tlbGV0b24iLCJib25lSW52ZXJzZXMiLCJjYWxjdWxhdGVJbnZlcnNlcyIsIkJvbmUiLCJsaW5lY2FwIiwibGluZWpvaW4iLCJMaW5lIiwiTGluZVNlZ21lbnRzIiwiTGluZUxvb3AiLCJQb2ludHMiLCJWaWRlb1RleHR1cmUiLCJ2aWRlbyIsIkNvbXByZXNzZWRUZXh0dXJlIiwiQ2FudmFzVGV4dHVyZSIsIkRlcHRoVGV4dHVyZSIsIldpcmVmcmFtZUdlb21ldHJ5Iiwib2wiLCJlZGdlIiwiZWRnZXMiLCJQYXJhbWV0cmljR2VvbWV0cnkiLCJmdW5jIiwic2xpY2VzIiwic3RhY2tzIiwiUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5IiwicHUiLCJwdiIsInNsaWNlQ291bnQiLCJQb2x5aGVkcm9uR2VvbWV0cnkiLCJkZXRhaWwiLCJQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJ2ZXJ0ZXhCdWZmZXIiLCJ1dkJ1ZmZlciIsInN1YmRpdmlkZUZhY2UiLCJjb2xzIiwiYWoiLCJiaiIsInJvd3MiLCJwdXNoVmVydGV4IiwiZ2V0VmVydGV4QnlJbmRleCIsImNvcnJlY3RVViIsImF6aW11dGgiLCJzdWJkaXZpZGUiLCJhcHBwbHlSYWRpdXMiLCJjZW50cm9pZCIsImF6aSIsImNvcnJlY3RVVnMiLCJjb3JyZWN0U2VhbSIsImdlbmVyYXRlVVZzIiwiVGV0cmFoZWRyb25HZW9tZXRyeSIsIlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJPY3RhaGVkcm9uR2VvbWV0cnkiLCJPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJJY29zYWhlZHJvbkdlb21ldHJ5IiwiSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSIsIkRvZGVjYWhlZHJvbkdlb21ldHJ5IiwiRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJUdWJlR2VvbWV0cnkiLCJ0dWJ1bGFyU2VnbWVudHMiLCJyYWRpYWxTZWdtZW50cyIsImNsb3NlZCIsInRhcGVyIiwiYnVmZmVyR2VvbWV0cnkiLCJUdWJlQnVmZmVyR2VvbWV0cnkiLCJ0YW5nZW50cyIsImJpbm9ybWFscyIsImZyYW1lcyIsImNvbXB1dGVGcmVuZXRGcmFtZXMiLCJQIiwiZ2VuZXJhdGVTZWdtZW50IiwiZ2V0UG9pbnRBdCIsIk4iLCJCIiwiZ2VuZXJhdGVJbmRpY2VzIiwiZ2VuZXJhdGVCdWZmZXJEYXRhIiwiVG9ydXNLbm90R2VvbWV0cnkiLCJ0dWJlIiwiaGVpZ2h0U2NhbGUiLCJUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSIsIlAxIiwiUDIiLCJUIiwiY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlIiwiY3UiLCJzdSIsInF1T3ZlclAiLCJjcyIsIlRvcnVzR2VvbWV0cnkiLCJhcmMiLCJUb3J1c0J1ZmZlckdlb21ldHJ5IiwiaXNJbnRlcmxlYXZlZEJ1ZmZlciIsImludGVyc2VjdFBvaW50Iiwid29ybGRTY2FsZSIsIm12UG9zaXRpb24iLCJhbGlnbmVkUG9zaXRpb24iLCJyb3RhdGVkUG9zaXRpb24iLCJ2aWV3V29ybGRNYXRyaXgiLCJ0cmFuc2Zvcm1WZXJ0ZXgiLCJ2ZXJ0ZXhQb3NpdGlvbiIsImFkZExldmVsIiwiZ2V0T2JqZWN0Rm9yRGlzdGFuY2UiLCJub3JtYWxpemVTa2luV2VpZ2h0cyIsInNraW5XZWlnaHQiLCJib25lIiwiaXNCb25lIiwiZ2V0Qm9uZUJ5TmFtZSIsImNvbXB1dGVMaW5lRGlzdGFuY2VzIiwicG9zaXRpb25BdHRyaWJ1dGUiLCJsaW5lUHJlY2lzaW9uIiwibG9jYWxQcmVjaXNpb24iLCJsb2NhbFByZWNpc2lvblNxIiwidlN0YXJ0IiwidkVuZCIsImludGVyU2VnbWVudCIsImludGVyUmF5IiwibmJWZXJ0aWNlcyIsInRocmVzaG9sZCIsInBhcmFtcyIsImxvY2FsVGhyZXNob2xkIiwibG9jYWxUaHJlc2hvbGRTcSIsInRlc3RQb2ludCIsInJheVBvaW50RGlzdGFuY2VTcSIsImRpc3RhbmNlVG9SYXkiLCJyZWFkeVN0YXRlIiwiSEFWRV9DVVJSRU5UX0RBVEEiLCJpc0NhbnZhc1RleHR1cmUiLCJFYXJjdXQiLCJob2xlSW5kaWNlcyIsImRpbSIsImludlNpemUiLCJoYXNIb2xlcyIsIm91dGVyTGVuIiwib3V0ZXJOb2RlIiwibGlua2VkTGlzdCIsInF1ZXVlIiwic3RlaW5lciIsImdldExlZnRtb3N0IiwiY29tcGFyZVgiLCJlbGltaW5hdGVIb2xlIiwiZmlsdGVyUG9pbnRzIiwiZWxpbWluYXRlSG9sZXMiLCJlYXJjdXRMaW5rZWQiLCJjbG9ja3dpc2UiLCJsYXN0Iiwic3VtIiwic2lnbmVkQXJlYSIsImluc2VydE5vZGUiLCJyZW1vdmVOb2RlIiwiYWdhaW4iLCJ0aHJlZV9tb2R1bGVfYXJlYSIsInByZXYiLCJlYXIiLCJwYXNzIiwiek9yZGVyIiwicHJldloiLCJuZXh0WiIsInRhaWwiLCJudW1NZXJnZXMiLCJwU2l6ZSIsInFTaXplIiwiaW5TaXplIiwic29ydExpbmtlZCIsImluZGV4Q3VydmUiLCJpc0Vhckhhc2hlZCIsImlzRWFyIiwiY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyIsInNwbGl0RWFyY3V0IiwicG9pbnRJblRyaWFuZ2xlIiwibWluVFgiLCJtaW5UWSIsIm1heFRYIiwibWF4VFkiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiaG9sZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwiZmluZEhvbGVCcmlkZ2UiLCJsZWZ0bW9zdCIsInB4IiwicHkiLCJpbnRlcnNlY3RzUG9seWdvbiIsImluc2lkZSIsIm1pZGRsZUluc2lkZSIsInEyIiwiTm9kZSIsImFuIiwiYnAiLCJTaGFwZVV0aWxzIiwiYXJlYSIsImNvbnRvdXIiLCJpc0Nsb2NrV2lzZSIsInB0cyIsInRyaWFuZ3VsYXRlU2hhcGUiLCJob2xlcyIsInJlbW92ZUR1cEVuZFB0cyIsImFkZENvbnRvdXIiLCJob2xlSW5kZXgiLCJmb3JFYWNoIiwiRXh0cnVkZUdlb21ldHJ5IiwiRXh0cnVkZUJ1ZmZlckdlb21ldHJ5IiwidmVydGljZXNBcnJheSIsImFkZFNoYXBlIiwicGxhY2Vob2xkZXIiLCJjdXJ2ZVNlZ21lbnRzIiwic3RlcHMiLCJiZXZlbEVuYWJsZWQiLCJiZXZlbFRoaWNrbmVzcyIsImJldmVsU2l6ZSIsImJldmVsU2VnbWVudHMiLCJleHRydWRlUGF0aCIsInV2Z2VuIiwiVVZHZW5lcmF0b3IiLCJXb3JsZFVWR2VuZXJhdG9yIiwiYW1vdW50IiwiZXh0cnVkZVB0cyIsInNwbGluZVR1YmUiLCJiaW5vcm1hbCIsInBvc2l0aW9uMiIsImFob2xlIiwiaGwiLCJleHRydWRlQnlQYXRoIiwiZ2V0U3BhY2VkUG9pbnRzIiwic2hhcGVQb2ludHMiLCJleHRyYWN0UG9pbnRzIiwicmV2ZXJzZSIsImNvbmNhdCIsInNjYWxlUHQyIiwicHQiLCJ2ZWMiLCJicyIsInZlcnQiLCJ2bGVuIiwiZmxlbiIsImdldEJldmVsVmVjIiwiaW5QdCIsImluUHJldiIsImluTmV4dCIsInZfdHJhbnNfeCIsInZfdHJhbnNfeSIsInNocmlua19ieSIsInZfcHJldl94Iiwidl9wcmV2X3kiLCJ2X25leHRfeCIsInZfbmV4dF95Iiwidl9wcmV2X2xlbnNxIiwiY29sbGluZWFyMCIsInZfcHJldl9sZW4iLCJ2X25leHRfbGVuIiwicHRQcmV2U2hpZnRfeCIsInB0UHJldlNoaWZ0X3kiLCJzZiIsInZfdHJhbnNfbGVuc3EiLCJkaXJlY3Rpb25fZXEiLCJjb250b3VyTW92ZW1lbnRzIiwib25lSG9sZU1vdmVtZW50cyIsImhvbGVzTW92ZW1lbnRzIiwidmVydGljZXNNb3ZlbWVudHMiLCJzaWRld2FsbHMiLCJsYXllcm9mZnNldCIsInNsIiwic2xlbjEiLCJzbGVuMiIsImY0IiwiZjMiLCJhZGRWZXJ0ZXgiLCJuZXh0SW5kZXgiLCJnZW5lcmF0ZVRvcFVWIiwiYWRkVVYiLCJnZW5lcmF0ZVNpZGVXYWxsVVYiLCJ2ZWN0b3IyIiwiYnVpbGRMaWRGYWNlcyIsImJ1aWxkU2lkZUZhY2VzIiwiaW5kZXhBIiwiaW5kZXhCIiwiaW5kZXhDIiwiYV94IiwiYV95IiwiYl94IiwiYl95IiwiY194IiwiY195IiwiaW5kZXhEIiwiYV96IiwiYl96IiwiY196IiwiZF94IiwiZF95IiwiZF96IiwiVGV4dEdlb21ldHJ5IiwidGV4dCIsIlRleHRCdWZmZXJHZW9tZXRyeSIsImZvbnQiLCJpc0ZvbnQiLCJnZW5lcmF0ZVNoYXBlcyIsIlNwaGVyZUdlb21ldHJ5IiwicGhpU3RhcnQiLCJwaGlMZW5ndGgiLCJ0aGV0YVN0YXJ0IiwidGhldGFMZW5ndGgiLCJTcGhlcmVCdWZmZXJHZW9tZXRyeSIsInRoZXRhRW5kIiwiZ3JpZCIsInZlcnRpY2VzUm93IiwiUmluZ0dlb21ldHJ5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInRoZXRhU2VnbWVudHMiLCJwaGlTZWdtZW50cyIsIlJpbmdCdWZmZXJHZW9tZXRyeSIsInNlZ21lbnQiLCJyYWRpdXNTdGVwIiwidGhldGFTZWdtZW50TGV2ZWwiLCJMYXRoZUdlb21ldHJ5Iiwic2VnbWVudHMiLCJMYXRoZUJ1ZmZlckdlb21ldHJ5IiwiYmFzZSIsImludmVyc2VTZWdtZW50cyIsIm4xIiwibjIiLCJTaGFwZUdlb21ldHJ5IiwiU2hhcGVCdWZmZXJHZW9tZXRyeSIsInNoYXBlSG9sZSIsImluZGV4T2Zmc2V0Iiwic2hhcGVWZXJ0aWNlcyIsInNoYXBlSG9sZXMiLCJ0b0pTT04kMSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInRocmVzaG9sZERvdCIsInNvdXJjZVZlcnRpY2VzIiwiZmFjZTEiLCJmYWNlMiIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJvcGVuRW5kZWQiLCJDeWxpbmRlckJ1ZmZlckdlb21ldHJ5IiwiaW5kZXhBcnJheSIsImdlbmVyYXRlQ2FwIiwiY2VudGVySW5kZXhTdGFydCIsImNlbnRlckluZGV4RW5kIiwiY29zVGhldGEiLCJzaW5UaGV0YSIsInNsb3BlIiwiaW5kZXhSb3ciLCJnZW5lcmF0ZVRvcnNvIiwiQ29uZUdlb21ldHJ5IiwiQ29uZUJ1ZmZlckdlb21ldHJ5IiwiQ2lyY2xlR2VvbWV0cnkiLCJDaXJjbGVCdWZmZXJHZW9tZXRyeSIsIkdlb21ldHJpZXMiLCJmcmVlemUiLCJSYXdTaGFkZXJNYXRlcmlhbCIsIlNUQU5EQVJEIiwiUEhZU0lDQUwiLCJUT09OIiwiTUFUQ0FQIiwiTWF0ZXJpYWxzIiwiQW5pbWF0aW9uVXRpbHMiLCJhcnJheVNsaWNlIiwiZnJvbSIsInRvIiwiaXNUeXBlZEFycmF5IiwiY29udmVydEFycmF5IiwiZm9yY2VDbG9uZSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJnZXRLZXlmcmFtZU9yZGVyIiwidGltZXMiLCJzb3J0ZWRBcnJheSIsIm5WYWx1ZXMiLCJzcmNPZmZzZXQiLCJmbGF0dGVuSlNPTiIsImpzb25LZXlzIiwidmFsdWVQcm9wZXJ0eU5hbWUiLCJJbnRlcnBvbGFudCIsInBhcmFtZXRlclBvc2l0aW9ucyIsInNhbXBsZVZhbHVlcyIsInNhbXBsZVNpemUiLCJyZXN1bHRCdWZmZXIiLCJfY2FjaGVkSW5kZXgiLCJ2YWx1ZVNpemUiLCJDdWJpY0ludGVycG9sYW50IiwiX3dlaWdodFByZXYiLCJfb2Zmc2V0UHJldiIsIl93ZWlnaHROZXh0IiwiX29mZnNldE5leHQiLCJMaW5lYXJJbnRlcnBvbGFudCIsIkRpc2NyZXRlSW50ZXJwb2xhbnQiLCJLZXlmcmFtZVRyYWNrIiwiaW50ZXJwb2xhdGlvbiIsIlRpbWVCdWZmZXJUeXBlIiwiVmFsdWVCdWZmZXJUeXBlIiwic2V0SW50ZXJwb2xhdGlvbiIsIkRlZmF1bHRJbnRlcnBvbGF0aW9uIiwiQm9vbGVhbktleWZyYW1lVHJhY2siLCJDb2xvcktleWZyYW1lVHJhY2siLCJOdW1iZXJLZXlmcmFtZVRyYWNrIiwiUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IiwiUXVhdGVybmlvbktleWZyYW1lVHJhY2siLCJTdHJpbmdLZXlmcmFtZVRyYWNrIiwiVmVjdG9yS2V5ZnJhbWVUcmFjayIsIkFuaW1hdGlvbkNsaXAiLCJkdXJhdGlvbiIsInRyYWNrcyIsInJlc2V0RHVyYXRpb24iLCJwYXJzZUtleWZyYW1lVHJhY2siLCJqc29uIiwidHJhY2tUeXBlIiwidHlwZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUiLCJldmFsdWF0ZSIsInBwIiwidmFsaWRhdGVfaW50ZXJ2YWwiLCJzZWVrIiwibGluZWFyX3NjYW4iLCJmb3J3YXJkX3NjYW4iLCJnaXZlVXBBdCIsImFmdGVyRW5kXyIsInQxZ2xvYmFsIiwiYmVmb3JlU3RhcnRfIiwibWlkIiwiaW50ZXJ2YWxDaGFuZ2VkXyIsImludGVycG9sYXRlXyIsInNldHRpbmdzIiwiRGVmYXVsdFNldHRpbmdzXyIsImdldFNldHRpbmdzXyIsImNvcHlTYW1wbGVWYWx1ZV8iLCJlbmRpbmdTdGFydCIsImVuZGluZ0VuZCIsImlQcmV2IiwiaU5leHQiLCJ0UHJldiIsInROZXh0IiwiaGFsZkR0IiwibzEiLCJvMCIsIm9QIiwib04iLCJ3UCIsIndOIiwicHBwIiwic1AiLCJzTiIsIm9mZnNldDEiLCJvZmZzZXQwIiwid2VpZ2h0MSIsIndlaWdodDAiLCJ0cmFjayIsImdldEludGVycG9sYXRpb24iLCJWYWx1ZVR5cGVOYW1lIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUiLCJnZXRWYWx1ZVNpemUiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGgiLCJmYWN0b3J5TWV0aG9kIiwiY3JlYXRlSW50ZXJwb2xhbnQiLCJzaGlmdCIsInRpbWVPZmZzZXQiLCJ0aW1lU2NhbGUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwibktleXMiLCJ2YWxpZGF0ZSIsInZhbGlkIiwicHJldlRpbWUiLCJjdXJyVGltZSIsIm9wdGltaXplIiwic21vb3RoSW50ZXJwb2xhdGlvbiIsIndyaXRlSW5kZXgiLCJrZWVwIiwib2Zmc2V0UCIsIm9mZnNldE4iLCJyZWFkT2Zmc2V0Iiwid3JpdGVPZmZzZXQiLCJqc29uVHJhY2tzIiwiZnJhbWVUaW1lIiwiZnBzIiwiY2xpcCIsImNsaXBUcmFja3MiLCJDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSIsIm1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJub0xvb3AiLCJudW1Nb3JwaFRhcmdldHMiLCJmaW5kQnlOYW1lIiwib2JqZWN0T3JDbGlwQXJyYXkiLCJjbGlwQXJyYXkiLCJhbmltYXRpb25zIiwiQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMiLCJhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyIsInBhdHRlcm4iLCJwYXJ0cyIsImFuaW1hdGlvbk1vcnBoVGFyZ2V0cyIsImNsaXBzIiwicGFyc2VBbmltYXRpb24iLCJhZGROb25lbXB0eVRyYWNrIiwidHJhY2tOYW1lIiwiYW5pbWF0aW9uS2V5cyIsInByb3BlcnR5TmFtZSIsImRlc3RUcmFja3MiLCJjbGlwTmFtZSIsImhpZXJhcmNoeVRyYWNrcyIsImhpZXJhcmNoeSIsIm1vcnBoVGFyZ2V0TmFtZXMiLCJtb3JwaFRhcmdldE5hbWUiLCJhbmltYXRpb25LZXkiLCJib25lTmFtZSIsIkNhY2hlIiwiZmlsZXMiLCJmaWxlIiwiTG9hZGluZ01hbmFnZXIiLCJvbkxvYWQiLCJvblByb2dyZXNzIiwib25FcnJvciIsImlzTG9hZGluZyIsIml0ZW1zTG9hZGVkIiwiaXRlbXNUb3RhbCIsInVybE1vZGlmaWVyIiwib25TdGFydCIsIml0ZW1TdGFydCIsIml0ZW1FbmQiLCJpdGVtRXJyb3IiLCJyZXNvbHZlVVJMIiwic2V0VVJMTW9kaWZpZXIiLCJ0cmFuc2Zvcm0iLCJEZWZhdWx0TG9hZGluZ01hbmFnZXIiLCJsb2FkaW5nIiwiRmlsZUxvYWRlciIsIm1hbmFnZXIiLCJEYXRhVGV4dHVyZUxvYWRlciIsIl9wYXJzZXIiLCJJbWFnZUxvYWRlciIsIkN1YmVUZXh0dXJlTG9hZGVyIiwiVGV4dHVyZUxvYWRlciIsIkN1cnZlIiwiYXJjTGVuZ3RoRGl2aXNpb25zIiwiRWxsaXBzZUN1cnZlIiwiYVgiLCJhWSIsInhSYWRpdXMiLCJ5UmFkaXVzIiwiYVN0YXJ0QW5nbGUiLCJhRW5kQW5nbGUiLCJhQ2xvY2t3aXNlIiwiYVJvdGF0aW9uIiwiQXJjQ3VydmUiLCJhUmFkaXVzIiwiQ3ViaWNQb2x5IiwiYzAiLCJpbml0Q2F0bXVsbFJvbSIsIngzIiwidGVuc2lvbiIsImluaXROb251bmlmb3JtQ2F0bXVsbFJvbSIsImR0MCIsImR0MSIsImR0MiIsInQyIiwiY2FsYyIsImxvYWQiLCJjYWNoZWQiLCJzZXRUaW1lb3V0IiwiZGF0YVVyaVJlZ2V4UmVzdWx0IiwibWltZVR5cGUiLCJpc0Jhc2U2NCIsImRlY29kZVVSSUNvbXBvbmVudCIsImF0b2IiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsImNoYXJDb2RlQXQiLCJCbG9iIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiaGVhZGVyIiwib3BlbiIsImNhbGxiYWNrcyIsInN0YXR1cyIsIndpdGhDcmVkZW50aWFscyIsIm92ZXJyaWRlTWltZVR5cGUiLCJyZXF1ZXN0SGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJzZXRQYXRoIiwic2V0UmVzcG9uc2VUeXBlIiwic2V0V2l0aENyZWRlbnRpYWxzIiwic2V0TWltZVR5cGUiLCJsb2FkZXIiLCJsb2FkVGV4dHVyZSIsInRleERhdGFzIiwibG9hZGVkIiwibWlwbWFwQ291bnQiLCJpc0N1YmVtYXAiLCJ0ZXhEYXRhIiwiY3Jvc3NPcmlnaW4iLCJvbkltYWdlTG9hZCIsIm9uSW1hZ2VFcnJvciIsInN1YnN0ciIsInNldENyb3NzT3JpZ2luIiwidXJscyIsImlzSlBFRyIsInNlYXJjaCIsImdldFBvaW50Iiwib3B0aW9uYWxUYXJnZXQiLCJnZXRVdG9UbWFwcGluZyIsImdldFBvaW50cyIsImRpdmlzaW9ucyIsImdldExlbmd0aCIsImxlbmd0aHMiLCJnZXRMZW5ndGhzIiwiY2FjaGVBcmNMZW5ndGhzIiwiY3VycmVudCIsInVwZGF0ZUFyY0xlbmd0aHMiLCJ0YXJnZXRBcmNMZW5ndGgiLCJhcmNMZW5ndGhzIiwiY29tcGFyaXNvbiIsImxlbmd0aEJlZm9yZSIsImdldFRhbmdlbnQiLCJwdDEiLCJnZXRUYW5nZW50QXQiLCJtYXQiLCJNQVhfVkFMVUUiLCJ0eiIsImZyb21KU09OIiwiaXNFbGxpcHNlQ3VydmUiLCJ0d29QaSIsImRlbHRhQW5nbGUiLCJzYW1lUG9pbnRzIiwiaXNBcmNDdXJ2ZSIsInB6IiwiQ2F0bXVsbFJvbUN1cnZlMyIsImN1cnZlVHlwZSIsIkNhdG11bGxSb20iLCJRdWFkcmF0aWNCZXppZXIiLCJRdWFkcmF0aWNCZXppZXJQMCIsIlF1YWRyYXRpY0JlemllclAxIiwiUXVhZHJhdGljQmV6aWVyUDIiLCJDdWJpY0JlemllciIsIkN1YmljQmV6aWVyUDAiLCJDdWJpY0JlemllclAxIiwiQ3ViaWNCZXppZXJQMiIsIkN1YmljQmV6aWVyUDMiLCJDdWJpY0JlemllckN1cnZlIiwidjMiLCJDdWJpY0JlemllckN1cnZlMyIsIkxpbmVDdXJ2ZSIsIkxpbmVDdXJ2ZTMiLCJRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsIlF1YWRyYXRpY0JlemllckN1cnZlMyIsIlNwbGluZUN1cnZlIiwiaXNDYXRtdWxsUm9tQ3VydmUzIiwiaW50UG9pbnQiLCJ3ZWlnaHQiLCJpc0N1YmljQmV6aWVyQ3VydmUiLCJpc0N1YmljQmV6aWVyQ3VydmUzIiwiaXNMaW5lQ3VydmUiLCJpc0xpbmVDdXJ2ZTMiLCJpc1F1YWRyYXRpY0JlemllckN1cnZlIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZTMiLCJpc1NwbGluZUN1cnZlIiwiQ3VydmVzIiwiQ3VydmVQYXRoIiwiY3VydmVzIiwiYXV0b0Nsb3NlIiwiUGF0aCIsImN1cnJlbnRQb2ludCIsIlNoYXBlIiwiTGlnaHQiLCJIZW1pc3BoZXJlTGlnaHQiLCJMaWdodFNoYWRvdyIsIlNwb3RMaWdodFNoYWRvdyIsIlNwb3RMaWdodCIsInBvd2VyIiwiUG9pbnRMaWdodCIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsIkRpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJEaXJlY3Rpb25hbExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiUmVjdEFyZWFMaWdodCIsIk1hdGVyaWFsTG9hZGVyIiwiY3VydmUiLCJjbG9zZVBhdGgiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJjdXJ2ZUxlbmd0aHMiLCJnZXRDdXJ2ZUxlbmd0aHMiLCJzZWdtZW50TGVuZ3RoIiwibGVucyIsImNhY2hlTGVuZ3RocyIsInN1bXMiLCJyZXNvbHV0aW9uIiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImFDUHgiLCJhQ1B5IiwiYmV6aWVyQ3VydmVUbyIsImFDUDF4IiwiYUNQMXkiLCJhQ1AyeCIsImFDUDJ5Iiwic3BsaW5lVGhydSIsImFic2FyYyIsImFic2VsbGlwc2UiLCJlbGxpcHNlIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsImdldFBvaW50c0hvbGVzIiwiaG9sZXNQdHMiLCJpc09ydGhvZ3JhcGhpY0NhbWVyYSIsInpvb21XIiwiem9vbUgiLCJzY2FsZVciLCJzY2FsZUgiLCJnZXRUZXh0dXJlIiwic2hhZGluZyIsInNldFRleHR1cmVzIiwiTG9hZGVyVXRpbHMiLCJsYXN0SW5kZXhPZiIsIkJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwidHlwZWRBcnJheSIsIlRZUEVEX0FSUkFZUyIsImRyYXdjYWxscyIsIm9mZnNldHMiLCJPYmplY3RMb2FkZXIiLCJyZXNvdXJjZVBhdGgiLCJzZXRSZXNvdXJjZVBhdGgiLCJwYXJzZVNoYXBlIiwicGFyc2VHZW9tZXRyaWVzIiwicGFyc2VJbWFnZXMiLCJwYXJzZVRleHR1cmVzIiwicGFyc2VNYXRlcmlhbHMiLCJwYXJzZU9iamVjdCIsInBhcnNlQW5pbWF0aW9ucyIsImJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwiZGV0YWlscyIsImdlb21ldHJ5U2hhcGVzIiwiTGVnYWN5SlNPTkxvYWRlciIsImxvYWRJbWFnZSIsImN1cnJlbnRVcmwiLCJwYXJzZUNvbnN0YW50IiwiVEVYVFVSRV9NQVBQSU5HIiwiVEVYVFVSRV9XUkFQUElORyIsIlRFWFRVUkVfRklMVEVSIiwiZ2V0R2VvbWV0cnkiLCJnZXRNYXRlcmlhbCIsIkJsZW5kaW5nTW9kZSIsInRleHR1cmVMb2FkZXIiLCJtYXRlcmlhbExvYWRlciIsIlVWTWFwcGluZyIsIkltYWdlQml0bWFwTG9hZGVyIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJmZXRjaCIsIlNoYXBlUGF0aCIsInN1YlBhdGhzIiwiY3VycmVudFBhdGgiLCJGb250IiwiY3JlYXRlUGF0aCIsImNoYXIiLCJnbHlwaCIsImdseXBocyIsImNweCIsImNweSIsImNweDEiLCJjcHkxIiwiY3B4MiIsImNweTIiLCJvdXRsaW5lIiwiX2NhY2hlZE91dGxpbmUiLCJoYSIsIkxvYWRlciIsInNldE9wdGlvbnMiLCJyZXMiLCJibG9iIiwiaW1hZ2VCaXRtYXAiLCJjYXRjaCIsInRvU2hhcGVzIiwiaXNDQ1ciLCJub0hvbGVzIiwidG9TaGFwZXNOb0hvbGVzIiwiaW5TdWJwYXRocyIsInRtcFBhdGgiLCJ0bXBTaGFwZSIsImlzUG9pbnRJbnNpZGVQb2x5Z29uIiwiaW5Qb2x5Z29uIiwicG9seUxlbiIsImVkZ2VMb3dQdCIsImVkZ2VIaWdoUHQiLCJlZGdlRHgiLCJlZGdlRHkiLCJwZXJwRWRnZSIsInNvbGlkIiwiaG9sZXNGaXJzdCIsInRtcFBvaW50cyIsInRtcEhvbGVzIiwiYmV0dGVyU2hhcGVIb2xlcyIsIm5ld1NoYXBlcyIsIm5ld1NoYXBlSG9sZXMiLCJtYWluSWR4IiwiYW1iaWd1b3VzIiwidG9DaGFuZ2UiLCJzSWR4Iiwic0xlbiIsInNobyIsImhJZHgiLCJobyIsImhvbGVfdW5hc3NpZ25lZCIsInMySWR4IiwiZnJvbXMiLCJ0b3MiLCJwYXRocyIsImNoYXJzIiwibGluZV9oZWlnaHQiLCJ5TWF4IiwieU1pbiIsInVuZGVybGluZVRoaWNrbmVzcyIsInJldCIsImNyZWF0ZVBhdGhzIiwic3Vic3RyaW5nIiwiSGFuZGxlcnMiLCJoYW5kbGVycyIsInJlZ2V4Iiwib25Mb2FkU3RhcnQiLCJvbkxvYWRQcm9ncmVzcyIsIm9uTG9hZENvbXBsZXRlIiwiaW5pdE1hdGVyaWFscyIsInRleHR1cmVQYXRoIiwiY3JlYXRlTWF0ZXJpYWwiLCJmdWxsUGF0aCIsIm1hcERpZmZ1c2VSZXBlYXQiLCJtYXBEaWZmdXNlT2Zmc2V0IiwibWFwRGlmZnVzZVdyYXAiLCJtYXBEaWZmdXNlQW5pc290cm9weSIsIm1hcEVtaXNzaXZlUmVwZWF0IiwibWFwRW1pc3NpdmVPZmZzZXQiLCJtYXBFbWlzc2l2ZVdyYXAiLCJtYXBFbWlzc2l2ZUFuaXNvdHJvcHkiLCJtYXBMaWdodFJlcGVhdCIsIm1hcExpZ2h0T2Zmc2V0IiwibWFwTGlnaHRXcmFwIiwibWFwTGlnaHRBbmlzb3Ryb3B5IiwibWFwQU9SZXBlYXQiLCJtYXBBT09mZnNldCIsIm1hcEFPV3JhcCIsIm1hcEFPQW5pc290cm9weSIsIm1hcEJ1bXBSZXBlYXQiLCJtYXBCdW1wT2Zmc2V0IiwibWFwQnVtcFdyYXAiLCJtYXBCdW1wQW5pc290cm9weSIsIm1hcE5vcm1hbFJlcGVhdCIsIm1hcE5vcm1hbE9mZnNldCIsIm1hcE5vcm1hbFdyYXAiLCJtYXBOb3JtYWxBbmlzb3Ryb3B5IiwibWFwU3BlY3VsYXJSZXBlYXQiLCJtYXBTcGVjdWxhck9mZnNldCIsIm1hcFNwZWN1bGFyV3JhcCIsIm1hcFNwZWN1bGFyQW5pc290cm9weSIsIm1hcE1ldGFsbmVzc1JlcGVhdCIsIm1hcE1ldGFsbmVzc09mZnNldCIsIm1hcE1ldGFsbmVzc1dyYXAiLCJtYXBNZXRhbG5lc3NBbmlzb3Ryb3B5IiwibWFwUm91Z2huZXNzUmVwZWF0IiwibWFwUm91Z2huZXNzT2Zmc2V0IiwibWFwUm91Z2huZXNzV3JhcCIsIm1hcFJvdWdobmVzc0FuaXNvdHJvcHkiLCJtYXBBbHBoYVJlcGVhdCIsIm1hcEFscGhhT2Zmc2V0IiwibWFwQWxwaGFXcmFwIiwibWFwQWxwaGFBbmlzb3Ryb3B5IiwiaW5zdGFuY2UiLCJleWVTZXAiLCJleWVSaWdodCIsImV5ZUxlZnQiLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJBdWRpb0xvYWRlciIsIkN1YmVDYW1lcmEiLCJjdWJlUmVzb2x1dGlvbiIsImNhbWVyYVBYIiwiY2FtZXJhTlgiLCJjYW1lcmFQWSIsImNhbWVyYU5ZIiwiY2FtZXJhUFoiLCJjYW1lcmFOWiIsIkNsb2NrIiwiYXV0b1N0YXJ0Iiwib2xkVGltZSIsImVsYXBzZWRUaW1lIiwicnVubmluZyIsIkF1ZGlvTGlzdGVuZXIiLCJnYWluIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInRpbWVEZWx0YSIsIkF1ZGlvIiwiZ2V0SW5wdXQiLCJhdXRvcGxheSIsImRldHVuZSIsImxvb3AiLCJwbGF5YmFja1JhdGUiLCJpc1BsYXlpbmciLCJoYXNQbGF5YmFja0NvbnRyb2wiLCJzb3VyY2VUeXBlIiwiZmlsdGVycyIsIlBvc2l0aW9uYWxBdWRpbyIsInBhbm5lciIsImNyZWF0ZVBhbm5lciIsIkF1ZGlvQW5hbHlzZXIiLCJhdWRpbyIsImZmdFNpemUiLCJhbmFseXNlciIsImNyZWF0ZUFuYWx5c2VyIiwiZnJlcXVlbmN5QmluQ291bnQiLCJnZXRPdXRwdXQiLCJQcm9wZXJ0eU1peGVyIiwiYmluZGluZyIsIm1peEZ1bmN0aW9uIiwiX3NsZXJwIiwiX3NlbGVjdCIsIl9sZXJwIiwiX21peEJ1ZmZlclJlZ2lvbiIsImN1bXVsYXRpdmVXZWlnaHQiLCJ1c2VDb3VudCIsInJlZmVyZW5jZUNvdW50IiwiYnVmZmVyQ29weSIsImRlY29kZUF1ZGlvRGF0YSIsImF1ZGlvQnVmZmVyIiwieG1pbiIsInhtYXgiLCJleWVTZXBPblByb2plY3Rpb24iLCJ5bWF4IiwicGVyZm9ybWFuY2UiLCJEYXRlIiwibm93IiwiZ2V0RWxhcHNlZFRpbWUiLCJnZXREZWx0YSIsIm5ld1RpbWUiLCJyZW1vdmVGaWx0ZXIiLCJkaXNjb25uZWN0IiwiZ2V0RmlsdGVyIiwic2V0RmlsdGVyIiwiZ2V0TWFzdGVyVm9sdW1lIiwic2V0TWFzdGVyVm9sdW1lIiwic2V0VGFyZ2V0QXRUaW1lIiwiY3VycmVudFRpbWUiLCJjbG9jayIsInBvc2l0aW9uWCIsImxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lIiwicG9zaXRpb25ZIiwicG9zaXRpb25aIiwiZm9yd2FyZFgiLCJmb3J3YXJkWSIsImZvcndhcmRaIiwidXBYIiwidXBZIiwidXBaIiwic2V0T3JpZW50YXRpb24iLCJzZXROb2RlU291cmNlIiwiYXVkaW9Ob2RlIiwic2V0TWVkaWFFbGVtZW50U291cmNlIiwibWVkaWFFbGVtZW50IiwiY3JlYXRlTWVkaWFFbGVtZW50U291cmNlIiwic2V0QnVmZmVyIiwicGxheSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsIm9uZW5kZWQiLCJvbkVuZGVkIiwic2V0VmFsdWVBdFRpbWUiLCJwYXVzZSIsImdldEZpbHRlcnMiLCJzZXRGaWx0ZXJzIiwic2V0RGV0dW5lIiwiZ2V0RGV0dW5lIiwic2V0UGxheWJhY2tSYXRlIiwiZ2V0UGxheWJhY2tSYXRlIiwiZ2V0TG9vcCIsInNldExvb3AiLCJnZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJnZXRSZWZEaXN0YW5jZSIsInJlZkRpc3RhbmNlIiwic2V0UmVmRGlzdGFuY2UiLCJnZXRSb2xsb2ZmRmFjdG9yIiwicm9sbG9mZkZhY3RvciIsInNldFJvbGxvZmZGYWN0b3IiLCJnZXREaXN0YW5jZU1vZGVsIiwiZGlzdGFuY2VNb2RlbCIsInNldERpc3RhbmNlTW9kZWwiLCJnZXRNYXhEaXN0YW5jZSIsIm1heERpc3RhbmNlIiwic2V0TWF4RGlzdGFuY2UiLCJzZXREaXJlY3Rpb25hbENvbmUiLCJjb25lSW5uZXJBbmdsZSIsImNvbmVPdXRlckFuZ2xlIiwiY29uZU91dGVyR2FpbiIsIm9yaWVudGF0aW9uWCIsIm9yaWVudGF0aW9uWSIsIm9yaWVudGF0aW9uWiIsImdldEZyZXF1ZW5jeURhdGEiLCJnZXRCeXRlRnJlcXVlbmN5RGF0YSIsImdldEF2ZXJhZ2VGcmVxdWVuY3kiLCJhY2N1bXVsYXRlIiwiYWNjdUluZGV4IiwiY3VycmVudFdlaWdodCIsIm1peCIsIm9yaWdpbmFsVmFsdWVPZmZzZXQiLCJzYXZlT3JpZ2luYWxTdGF0ZSIsImdldFZhbHVlIiwicmVzdG9yZU9yaWdpbmFsU3RhdGUiLCJ3b3JkQ2hhciIsIndvcmRDaGFyT3JEb3QiLCJkaXJlY3RvcnlSZSIsIm5vZGVSZSIsIm9iamVjdFJlIiwicHJvcGVydHlSZSIsInRyYWNrUmUiLCJzdXBwb3J0ZWRPYmplY3ROYW1lcyIsInJlc2VydmVkUmUiLCJzdGFydFAiLCJzdGFydEVuZCIsImxpbmVHZW9tZXRyeSIsImNvbmVHZW9tZXRyeSIsIkNvbXBvc2l0ZSIsInRhcmdldEdyb3VwIiwib3B0aW9uYWxQYXJzZWRQYXRoIiwicGFyc2VkUGF0aCIsIlByb3BlcnR5QmluZGluZyIsInBhcnNlVHJhY2tOYW1lIiwiX3RhcmdldEdyb3VwIiwiX2JpbmRpbmdzIiwic3Vic2NyaWJlXyIsInJvb3ROb2RlIiwiZmluZE5vZGUiLCJub2RlTmFtZSIsIkFuaW1hdGlvbkFjdGlvbiIsIm1peGVyIiwibG9jYWxSb290IiwiX21peGVyIiwiX2NsaXAiLCJfbG9jYWxSb290IiwiblRyYWNrcyIsImludGVycG9sYW50cyIsImludGVycG9sYW50U2V0dGluZ3MiLCJpbnRlcnBvbGFudCIsIl9pbnRlcnBvbGFudFNldHRpbmdzIiwiX2ludGVycG9sYW50cyIsIl9wcm9wZXJ0eUJpbmRpbmdzIiwiX2NhY2hlSW5kZXgiLCJfYnlDbGlwQ2FjaGVJbmRleCIsIl90aW1lU2NhbGVJbnRlcnBvbGFudCIsIl93ZWlnaHRJbnRlcnBvbGFudCIsIl9sb29wQ291bnQiLCJfc3RhcnRUaW1lIiwiX2VmZmVjdGl2ZVRpbWVTY2FsZSIsIl9lZmZlY3RpdmVXZWlnaHQiLCJyZXBldGl0aW9ucyIsInBhdXNlZCIsImNsYW1wV2hlbkZpbmlzaGVkIiwiemVyb1Nsb3BlQXRTdGFydCIsInplcm9TbG9wZUF0RW5kIiwiQW5pbWF0aW9uTWl4ZXIiLCJyb290IiwiX3Jvb3QiLCJfaW5pdE1lbW9yeU1hbmFnZXIiLCJfYWNjdUluZGV4IiwiVW5pZm9ybSIsIkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IiwiSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJhc2NTb3J0IiwiaW50ZXJzZWN0T2JqZWN0IiwiQm94MiIsIkxpbmUzIiwiSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwiVmVydGV4Tm9ybWFsc0hlbHBlciIsIm5Ob3JtYWxzIiwib2JqR2VvbWV0cnkiLCJTcG90TGlnaHRIZWxwZXIiLCJjb25lIiwiU2tlbGV0b25IZWxwZXIiLCJnZXRCb25lTGlzdCIsImJvbmVMaXN0IiwiUG9pbnRMaWdodEhlbHBlciIsInNwaGVyZVNpemUiLCJSZWN0QXJlYUxpZ2h0SGVscGVyIiwiSGVtaXNwaGVyZUxpZ2h0SGVscGVyIiwiR3JpZEhlbHBlciIsIlBvbGFyR3JpZEhlbHBlciIsInJhZGlhbHMiLCJjaXJjbGVzIiwiRmFjZU5vcm1hbHNIZWxwZXIiLCJEaXJlY3Rpb25hbExpZ2h0SGVscGVyIiwibGlnaHRQbGFuZSIsInRhcmdldExpbmUiLCJDYW1lcmFIZWxwZXIiLCJwb2ludE1hcCIsImNvbG9yRnJ1c3R1bSIsImNvbG9yQ29uZSIsImNvbG9yVXAiLCJjb2xvclRhcmdldCIsImNvbG9yQ3Jvc3MiLCJhZGRMaW5lIiwiYWRkUG9pbnQiLCJCb3hIZWxwZXIiLCJCb3gzSGVscGVyIiwiUGxhbmVIZWxwZXIiLCJBcnJvd0hlbHBlciIsImhlYWRMZW5ndGgiLCJoZWFkV2lkdGgiLCJzZXREaXJlY3Rpb24iLCJBeGVzSGVscGVyIiwiZmlyc3RWYWxpZEluZGV4IiwibkNhY2hlZE9iamVjdHNfIiwiYmluZGluZ3MiLCJ1bmJpbmQiLCJpc0FuaW1hdGlvbk9iamVjdEdyb3VwIiwic2FuaXRpemVOb2RlTmFtZSIsIlJlZ0V4cCIsIm1hdGNoZXMiLCJyZXN1bHRzIiwib2JqZWN0TmFtZSIsIm9iamVjdEluZGV4IiwicHJvcGVydHlJbmRleCIsImxhc3REb3QiLCJzZWFyY2hOb2RlU3VidHJlZSIsImNoaWxkTm9kZSIsInN1YlRyZWVOb2RlIiwiX2dldFZhbHVlX3VuYXZhaWxhYmxlIiwiX3NldFZhbHVlX3VuYXZhaWxhYmxlIiwiQmluZGluZ1R5cGUiLCJEaXJlY3QiLCJFbnRpcmVBcnJheSIsIkFycmF5RWxlbWVudCIsIkhhc0Zyb21Ub0FycmF5IiwiVmVyc2lvbmluZyIsIk5vbmUiLCJOZWVkc1VwZGF0ZSIsIk1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJHZXR0ZXJCeUJpbmRpbmdUeXBlIiwicmVzb2x2ZWRQcm9wZXJ0eSIsIlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nIiwidGFyZ2V0T2JqZWN0IiwiZGVzdCIsInRhcmdldEFycmF5Iiwic291cmNlQXJyYXkiLCJub2RlUHJvcGVydHkiLCJ2ZXJzaW9uaW5nIiwiYmluZGluZ1R5cGUiLCJfZ2V0VmFsdWVfdW5ib3VuZCIsIl9zZXRWYWx1ZV91bmJvdW5kIiwiX2luZGljZXNCeVVVSUQiLCJfcGF0aHMiLCJfcGFyc2VkUGF0aHMiLCJfYmluZGluZ3NJbmRpY2VzQnlQYXRoIiwic3RhdHMiLCJ0b3RhbCIsImluVXNlIiwiYmluZGluZ3NQZXJPYmplY3QiLCJuT2JqZWN0cyIsIm5DYWNoZWRPYmplY3RzIiwiaW5kaWNlc0J5VVVJRCIsInBhcnNlZFBhdGhzIiwibkJpbmRpbmdzIiwia25vd25PYmplY3QiLCJmaXJzdEFjdGl2ZUluZGV4IiwibGFzdENhY2hlZE9iamVjdCIsImJpbmRpbmdzRm9yUGF0aCIsImxhc3RDYWNoZWQiLCJsYXN0Q2FjaGVkSW5kZXgiLCJmaXJzdEFjdGl2ZU9iamVjdCIsImZpcnN0QWN0aXZlIiwidW5jYWNoZSIsImxhc3RPYmplY3QiLCJpbmRpY2VzQnlQYXRoIiwidW5zdWJzY3JpYmVfIiwibGFzdEJpbmRpbmdzSW5kZXgiLCJsYXN0QmluZGluZ3MiLCJfYWN0aXZhdGVBY3Rpb24iLCJfZGVhY3RpdmF0ZUFjdGlvbiIsInN0b3BGYWRpbmciLCJzdG9wV2FycGluZyIsImlzUnVubmluZyIsIl9pc0FjdGl2ZUFjdGlvbiIsImlzU2NoZWR1bGVkIiwic3RhcnRBdCIsInNldEVmZmVjdGl2ZVdlaWdodCIsImdldEVmZmVjdGl2ZVdlaWdodCIsImZhZGVJbiIsIl9zY2hlZHVsZUZhZGluZyIsImZhZGVPdXQiLCJjcm9zc0ZhZGVGcm9tIiwiZmFkZU91dEFjdGlvbiIsIndhcnAiLCJmYWRlSW5EdXJhdGlvbiIsImZhZGVPdXREdXJhdGlvbiIsInN0YXJ0RW5kUmF0aW8iLCJlbmRTdGFydFJhdGlvIiwiY3Jvc3NGYWRlVG8iLCJmYWRlSW5BY3Rpb24iLCJ3ZWlnaHRJbnRlcnBvbGFudCIsIl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCIsInNldEVmZmVjdGl2ZVRpbWVTY2FsZSIsImdldEVmZmVjdGl2ZVRpbWVTY2FsZSIsInNldER1cmF0aW9uIiwic3luY1dpdGgiLCJhY3Rpb24iLCJoYWx0Iiwic3RhcnRUaW1lU2NhbGUiLCJlbmRUaW1lU2NhbGUiLCJfbGVuZENvbnRyb2xJbnRlcnBvbGFudCIsInRpbWVTY2FsZUludGVycG9sYW50IiwiZ2V0TWl4ZXIiLCJnZXRDbGlwIiwiZ2V0Um9vdCIsIl91cGRhdGUiLCJkZWx0YVRpbWUiLCJ0aW1lRGlyZWN0aW9uIiwidGltZVJ1bm5pbmciLCJfdXBkYXRlVGltZVNjYWxlIiwiY2xpcFRpbWUiLCJfdXBkYXRlVGltZSIsIl91cGRhdGVXZWlnaHQiLCJwcm9wZXJ0eU1peGVycyIsImludGVycG9sYW50VmFsdWUiLCJsb29wQ291bnQiLCJwaW5nUG9uZyIsIl9zZXRFbmRpbmdzIiwiaGFuZGxlX3N0b3AiLCJsb29wRGVsdGEiLCJwZW5kaW5nIiwiYXRTdGFydCIsImF0RW5kIiwid2VpZ2h0Tm93Iiwid2VpZ2h0VGhlbiIsIl9iaW5kQWN0aW9uIiwicHJvdG90eXBlQWN0aW9uIiwicm9vdFV1aWQiLCJiaW5kaW5nc0J5Um9vdCIsIl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUiLCJiaW5kaW5nc0J5TmFtZSIsIl9hZGRJbmFjdGl2ZUJpbmRpbmciLCJjbGlwVXVpZCIsImFjdGlvbnNGb3JDbGlwIiwiX2FjdGlvbnNCeUNsaXAiLCJrbm93bkFjdGlvbnMiLCJfYWRkSW5hY3RpdmVBY3Rpb24iLCJfbGVuZEJpbmRpbmciLCJfbGVuZEFjdGlvbiIsIl90YWtlQmFja0JpbmRpbmciLCJfdGFrZUJhY2tBY3Rpb24iLCJfYWN0aW9ucyIsIl9uQWN0aXZlQWN0aW9ucyIsIl9uQWN0aXZlQmluZGluZ3MiLCJfY29udHJvbEludGVycG9sYW50cyIsIl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cyIsImFjdGlvbnMiLCJjb250cm9sSW50ZXJwb2xhbnRzIiwiYWN0aW9uc0J5Q2xpcCIsImFjdGlvbkJ5Um9vdCIsIl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiIsImxhc3RJbmFjdGl2ZUFjdGlvbiIsImNhY2hlSW5kZXgiLCJrbm93bkFjdGlvbnNGb3JDbGlwIiwibGFzdEtub3duQWN0aW9uIiwiYnlDbGlwQ2FjaGVJbmRleCIsIl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uIiwiX3JlbW92ZUluYWN0aXZlQmluZGluZyIsInByZXZJbmRleCIsImxhc3RBY3RpdmVJbmRleCIsImZpcnN0SW5hY3RpdmVBY3Rpb24iLCJmaXJzdEluYWN0aXZlSW5kZXgiLCJsYXN0QWN0aXZlQWN0aW9uIiwiYmluZGluZ0J5TmFtZSIsInByb3BCaW5kaW5nIiwibGFzdEluYWN0aXZlQmluZGluZyIsInJlbW92ZV9lbXB0eV9tYXAiLCJfIiwiZmlyc3RJbmFjdGl2ZUJpbmRpbmciLCJsYXN0QWN0aXZlQmluZGluZyIsIl9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyIiwiX19jYWNoZUluZGV4IiwibGFzdEFjdGl2ZUludGVycG9sYW50IiwiY2xpcEFjdGlvbiIsIm9wdGlvbmFsUm9vdCIsImNsaXBPYmplY3QiLCJleGlzdGluZ0FjdGlvbiIsIm5ld0FjdGlvbiIsInN0b3BBbGxBY3Rpb24iLCJuQWN0aW9ucyIsInVuY2FjaGVDbGlwIiwiYWN0aW9uc1RvUmVtb3ZlIiwidW5jYWNoZVJvb3QiLCJ1bmNhY2hlQWN0aW9uIiwiUG9pbnRDbG91ZCIsInNldEZyb21DYW1lcmEiLCJjb29yZHMiLCJpbnRlcnNlY3RPYmplY3RzIiwib3RoZXIiLCJtYWtlU2FmZSIsInNldEZyb21DYXJ0ZXNpYW5Db29yZHMiLCJkaXN0YW5jZVNxIiwiY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciIsImNsYW1wVG9MaW5lIiwic3RhcnRFbmQyIiwib2JqUG9zIiwib2JqTm9ybSIsImNvbmVMZW5ndGgiLCJjb25lV2lkdGgiLCJib25lTWF0cml4IiwibWF0cml4V29ybGRJbnYiLCJzZXRQb2ludCIsInNldENvbG9yIiwiU3BsaW5lIiwiY29uc3RydWN0IiwiY3JlYXRlUG9pbnRzR2VvbWV0cnkiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5IiwiZnJvbVBvaW50cyIsImluaXRGcm9tQXJyYXkiLCJnZXRDb250cm9sUG9pbnRzQXJyYXkiLCJyZXBhcmFtZXRyaXplQnlBcmNMZW5ndGgiLCJzZXRDb2xvcnMiLCJleHRyYWN0VXJsQmFzZSIsInNldFRleHR1cmVQYXRoIiwiaXNJbnRlcnNlY3Rpb25Cb3giLCJpc0ludGVyc2VjdGlvblNwaGVyZSIsInJhbmRvbTE2IiwibmVhcmVzdFBvd2VyT2ZUd28iLCJuZXh0UG93ZXJPZlR3byIsImZsYXR0ZW5Ub0FycmF5T2Zmc2V0IiwibXVsdGlwbHlWZWN0b3IzIiwibXVsdGlwbHlWZWN0b3IzQXJyYXkiLCJhcHBseVRvQnVmZmVyIiwiYXBwbHlUb1ZlY3RvcjNBcnJheSIsImV4dHJhY3RQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwibXVsdGlwbHlUb0FycmF5IiwibXVsdGlwbHlWZWN0b3I0Iiwicm90YXRlQXhpcyIsImNyb3NzVmVjdG9yIiwicm90YXRlQnlBeGlzIiwibWFrZUZydXN0dW0iLCJpc0ludGVyc2VjdGlvbkxpbmUiLCJpc0ludGVyc2VjdGlvblBsYW5lIiwiYmFyeWNvb3JkRnJvbVBvaW50IiwibWlkcG9pbnQiLCJleHRyYWN0QWxsUG9pbnRzIiwiZXh0cnVkZSIsIm1ha2VHZW9tZXRyeSIsImZyb21BdHRyaWJ1dGUiLCJkaXN0YW5jZVRvTWFuaGF0dGFuIiwibGVuZ3RoTWFuaGF0dGFuIiwic2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgiLCJzZXRFdWxlckZyb21RdWF0ZXJuaW9uIiwiZ2V0UG9zaXRpb25Gcm9tTWF0cml4IiwiZ2V0U2NhbGVGcm9tTWF0cml4IiwiZ2V0Q29sdW1uRnJvbU1hdHJpeCIsImFwcGx5UHJvamVjdGlvbiIsImNvbXB1dGVUYW5nZW50cyIsImdldENoaWxkQnlOYW1lIiwicmVuZGVyRGVwdGgiLCJnZXRXb3JsZFJvdGF0aW9uIiwiZXVsZXJPcmRlciIsInVzZVF1YXRlcm5pb24iLCJpbml0Qm9uZXMiLCJzZXRMZW5zIiwib25seVNoYWRvdyIsInNoYWRvd0NhbWVyYUZvdiIsInNoYWRvd0NhbWVyYUxlZnQiLCJzaGFkb3dDYW1lcmFSaWdodCIsInNoYWRvd0NhbWVyYVRvcCIsInNoYWRvd0NhbWVyYUJvdHRvbSIsInNoYWRvd0NhbWVyYVZpc2libGUiLCJzaGFkb3dEYXJrbmVzcyIsInNoYWRvd01hcFdpZHRoIiwic2hhZG93TWFwSGVpZ2h0IiwiY29weUluZGljZXNBcnJheSIsImFkZEluZGV4IiwiYWRkRHJhd0NhbGwiLCJjbGVhckRyYXdDYWxscyIsImNvbXB1dGVPZmZzZXRzIiwiZ2V0QXJyYXlzIiwiYWRkU2hhcGVMaXN0Iiwid3JhcEFyb3VuZCIsIm92ZXJkcmF3Iiwid3JhcFJHQiIsIm1ldGFsIiwiY2xlYXJUYXJnZXQiLCJhbmltYXRlIiwiZ2V0Q3VycmVudFJlbmRlclRhcmdldCIsImdldFByZWNpc2lvbiIsInJlc2V0R0xTdGF0ZSIsInN1cHBvcnRzRmxvYXRUZXh0dXJlcyIsInN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMiLCJzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMiLCJzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQyIsInN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQyIsInN1cHBvcnRzQmxlbmRNaW5NYXgiLCJzdXBwb3J0c0luc3RhbmNlZEFycmF5cyIsImVuYWJsZVNjaXNzb3JUZXN0IiwiYWRkUHJlUGx1Z2luIiwiYWRkUG9zdFBsdWdpbiIsInVwZGF0ZVNoYWRvd01hcCIsInNldEZhY2VDdWxsaW5nIiwic2hhZG93TWFwQ3VsbEZhY2UiLCJyZW5kZXJSZXZlcnNlU2lkZWQiLCJyZW5kZXJTaW5nbGVTaWRlZCIsInN0YW5kaW5nIiwiZ2V0RGF0YSIsInVwZGF0ZUN1YmVNYXAiLCJsb2FkVGV4dHVyZUN1YmUiLCJsb2FkQ29tcHJlc3NlZFRleHR1cmUiLCJsb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlIiwiSHVydFR5cGVzIiwiU2VxdWVuY2VUeXBlcyIsIlJlc291cmNlcyIsIltvYmplY3QgT2JqZWN0XSIsIl90ZXh0dXJlcyIsIl9pbnN0YW5jZSIsImNoYW5nZVNlcXVlbmNlIiwic2VxdWVuY2UiLCJhbmltIiwic2NhbGVUb1dpbmRvdyIsIm1hcmdpbiIsImlubmVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwidHJhbnNmb3JtT3JpZ2luIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImRpc3BsYXkiLCJib2R5IiwiYmFja2dyb3VuZENvbG9yIiwidWEiLCJ1c2VyQWdlbnQiLCJFbnRpdHkiLCJwbGF5ZXJBbmltIiwid2FsayIsInRpY2tzIiwibmV4dEZyYW1lIiwiYXR0YWNrIiwiZ2FtZXN0YXRlX0dhbWVTdGF0ZSIsImVudGl0aWVzIiwicGxheWVyIiwic3RhcnRpbmdTZXF1ZW5jZSIsImFuaW1CbG9iIiwicG9zIiwic3ByaXRlTWFwIiwic2V0U3ByaXRlIiwiY29udHJvbCIsImp1bXAiLCJhdHRhY2tUaW1lciIsImF0dGFja2VkIiwidmVsIiwiZG93biIsInNwZWVkIiwiaHVydEJveCIsImVudE1lc2giLCJodXJ0VHlwZSIsIm9mZlNldFgiLCJvZmZTZXRZIiwibWFudWFsSGVpZ2h0IiwibWFudWFsV2lkdGgiLCJpbml0aWFsaXplSHVydEJveCIsImVudEh1cnRCb3giLCJodXJ0Qm94TWVzaCIsInNldEh1cnRCb3hHcmFwaGljIiwiZW50cyIsImVudCIsInRpbWVyIiwiaGl0Qm94IiwiY29sbGlkZXNXaXRoIiwib25IaXQiLCJ2ZWxvY2l0eVN5c3RlbSIsImhpdHRpbmdFbnQiLCJodXJ0aW5nRW50Iiwib25IdXJ0IiwiY29sbGlzaW9uU3lzdGVtIiwibmV3U3ByaXRlTWFwIiwiYW5pbWF0aW9uU3lzdGVtIiwidGltZXJTeXN0ZW0iLCJwb3NpdGlvblN5c3RlbSIsImNhY2hlZFRleHR1cmVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0ZXgiLCJsb2FkVGV4dHVyZXMiLCJjYW52YXNDb250YWluZXIiLCJyZW5kZXJlclNpemUiLCJhcHBlbmQiLCJzdGF0ZVN0YWNrIiwiZ2FtZVN0YXRlIiwidG90YWxUaW1lIiwic2V0QXR0cmlidXRlIiwib25rZXlkb3duIiwia2V5Q29kZSIsIm9ua2V5dXAiLCJzZXRFdmVudExpc3RlbmVycyIsInNldEludGVydmFsIiwicmVuZGVyTG9vcCIsInRpbWVTdGFtcCIsIm1haW4iLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixF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QUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFHQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FFQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BRUFDLEdBQUEsS0FLQUMsR0FBQSxLQUdBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLElBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBRUFDLEdBQUEsS0FDQUMs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QSxHQWdEQSxNQTlDQSxRQUFBK1IsR0FFQS9ULEtBQUFpTixHQUFBa1EsRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFBQUMsRUFDQXJkLEtBQUFrTixHQUFBOFAsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFDQXJkLEtBQUFtTixHQUFBNlAsRUFBQUMsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFDQWxkLEtBQUFvTixHQUFBNFAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFRyxRQUFBdEosR0FFSC9ULEtBQUFpTixHQUFBa1EsRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFBQUMsRUFDQXJkLEtBQUFrTixHQUFBOFAsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFDQXJkLEtBQUFtTixHQUFBNlAsRUFBQUMsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFDQWxkLEtBQUFvTixHQUFBNFAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFRyxRQUFBdEosR0FFSC9ULEtBQUFpTixHQUFBa1EsRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFBQUMsRUFDQXJkLEtBQUFrTixHQUFBOFAsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFDQXJkLEtBQUFtTixHQUFBNlAsRUFBQUMsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFDQWxkLEtBQUFvTixHQUFBNFAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFRyxRQUFBdEosR0FFSC9ULEtBQUFpTixHQUFBa1EsRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFBQUMsRUFDQXJkLEtBQUFrTixHQUFBOFAsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFBQUksRUFDQXJkLEtBQUFtTixHQUFBNlAsRUFBQUMsRUFBQUksRUFBQUYsRUFBQUMsRUFBQUYsRUFDQWxkLEtBQUFvTixHQUFBNFAsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFRyxRQUFBdEosR0FFSC9ULEtBQUFpTixH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VUFBQSxTQUFBQyxVQUFBLFFBQUFDLFdBQUEsUUFBQUMsVUFBQSxTQUFBQyxNQUFBLFNBQ0FDLGVBQUEsUUFBQUMsU0FBQSxTQUFBQyxRQUFBLFNBQUFDLEtBQUEsTUFBQUMsU0FBQSxJQUFBQyxTQUFBLE1BQ0FDLGNBQUEsU0FBQUMsU0FBQSxTQUFBQyxVQUFBLE1BQUFDLFNBQUEsU0FBQUMsVUFBQSxTQUFBQyxZQUFBLFFBQ0FDLGVBQUEsUUFBQUMsV0FBQSxTQUFBQyxXQUFBLFNBQUFDLFFBQUEsUUFBQUMsV0FBQSxTQUFBQyxhQUFBLFFBQ0FDLGNBQUEsUUFBQUMsY0FBQSxRQUFBQyxjQUFBLFFBQUFDLGNBQUEsTUFBQUMsV0FBQSxRQUNBQyxTQUFBLFNBQUFDLFlBQUEsTUFBQUMsUUFBQSxRQUFBQyxRQUFBLFFBQUFDLFdBQUEsUUFBQUMsVUFBQSxTQUNBQyxZQUFBLFNBQUFDLFlBQUEsUUFBQUMsUUFBQSxTQUFBQyxVQUFBLFNBQUFDLFdBQUEsU0FBQUMsS0FBQSxTQUNBQyxVQUFBLFNBQUFDLEtBQUEsUUFBQUMsTUFBQSxNQUFBQyxZQUFBLFNBQUFDLEtBQUEsUUFBQUMsU0FBQSxTQUFBQyxRQUFBLFNBQ0FDLFVBQUEsU0FBQUMsT0FBQSxRQUFBQyxNQUFBLFNBQUFDLE1BQUEsU0FBQUMsU0FBQSxTQUFBQyxjQUFBLFNBQUFDLFVBQUEsUUFDQUMsYUFBQSxTQUFBQyxVQUFBLFNBQUFDLFdBQUEsU0FBQUMsVUFBQSxTQUFBQyxxQkFBQSxTQUFBQyxVQUFBLFNBQ0FDLFdBQUEsUUFBQUMsVUFBQSxTQUFBQyxVQUFBLFNBQUFDLFlBQUEsU0FBQUMsY0FBQSxRQUFBQyxhQUFBLFFBQ0FDLGVBQUEsUUFBQUMsZUFBQSxRQUFBQyxlQUFBLFNBQUFDLFlBQUEsU0FBQUMsS0FBQSxNQUFBQyxVQUFBLFFBQ0FDLE1BQUEsU0FBQUMsUUFBQSxTQUFBQyxPQUFBLFFBQUFDLGlCQUFBLFFBQUFDLFdBQUEsSUFBQUMsYUFBQSxTQUNBQyxhQUFBLFFBQUFDLGVBQUEsUUFBQUMsZ0JBQUEsUUFBQUMsa0JBQUEs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QVFrd0MsU0FDVjlrSSxJQUFoQjhrSSxFQUFJbkIsVUFDSm1CLEVBQUluQixRQUFRVCxRQUFTLE1BTXJDM3NELE9BQU9vd0QsUUFBVSxTQUFTMTJILEdBQ0osS0FBZEEsRUFBRXkySCxTQUVGejFDLEdBQUtvMUMsR0FBWWpELFNBQVN4dUMsUUFBUWt3QyxTQUNWOWtJLElBQWhCOGtJLEVBQUluQixVQUNKbUIsRUFBSW5CLFFBQVFub0gsTUFBTyxLQUliLEtBQWR2TCxFQUFFeTJILFNBRUZ6MUMsR0FBS28xQyxHQUFZakQsU0FBU3h1QyxRQUFRa3dDLFNBQ1Y5a0ksSUFBaEI4a0ksRUFBSW5CLFVBQ0ptQixFQUFJbkIsUUFBUWxvSCxPQUFRLEtBS2QsS0FBZHhMLEVBQUV5MkgsU0FFRnoxQyxHQUFLbzFDLEdBQVlqRCxTQUFTeHVDLFFBQVFrd0MsU0FDVjlrSSxJQUFoQjhrSSxFQUFJbkIsVUFDSm1CLEVBQUluQixRQUFRVCxRQUFTLE9ETHJDMEQsQ0FBa0JwakYsRUFBU2k1QixXQUFZNHBELEdBR3ZDUSxZQUFZLFdBQ1IsS0FBSVIsRUFBV2psSSxPQUFTLEdBS3BCLEtBQU0sc0JBSE42dkYsR0FBS28xQyxHQUFZM29ILFVBU3RCLElBR0gsU0FBU29wSCxFQUFXQyxHQUNoQm44RixzQkFBc0JrOEYsR0FDdEJuakIsRUFBY29qQixFQUFZUixFQUMxQkEsRUFBWVEsRUFDWnpnQyxFQUFNLEdBQUtxZCxFQUFjLEtBRXpCLEtBQUkwaUIsRUFBV2psSSxPQUFTLEdBS3BCLEtBQU0sc0JBSE42dkYsR0FBS28xQyxHQUFZL2hGLE9BQU9kLEVBQVVsaUMsRUFBUWtqQyxHQVFsRHNpRixDQUFXLEdBekVYRSxDQUFrQnppSCxTQUFTMGlILGVBQWUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLy8gUG9seWZpbGxzXG5cbmlmICggTnVtYmVyLkVQU0lMT04gPT09IHVuZGVmaW5lZCApIHtcblxuXHROdW1iZXIuRVBTSUxPTiA9IE1hdGgucG93KCAyLCAtIDUyICk7XG5cbn1cblxuaWYgKCBOdW1iZXIuaXNJbnRlZ2VyID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gTWlzc2luZyBpbiBJRVxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvaXNJbnRlZ2VyXG5cblx0TnVtYmVyLmlzSW50ZWdlciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSggdmFsdWUgKSAmJiBNYXRoLmZsb29yKCB2YWx1ZSApID09PSB2YWx1ZTtcblxuXHR9O1xuXG59XG5cbi8vXG5cbmlmICggTWF0aC5zaWduID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaWduXG5cblx0TWF0aC5zaWduID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdFx0cmV0dXJuICggeCA8IDAgKSA/IC0gMSA6ICggeCA+IDAgKSA/IDEgOiArIHg7XG5cblx0fTtcblxufVxuXG5pZiAoICduYW1lJyBpbiBGdW5jdGlvbi5wcm90b3R5cGUgPT09IGZhbHNlICkge1xuXG5cdC8vIE1pc3NpbmcgaW4gSUVcblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vbmFtZVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggRnVuY3Rpb24ucHJvdG90eXBlLCAnbmFtZScsIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy50b1N0cmluZygpLm1hdGNoKCAvXlxccypmdW5jdGlvblxccyooW15cXChcXHNdKikvIClbIDEgXTtcblxuXHRcdH1cblxuXHR9ICk7XG5cbn1cblxuaWYgKCBPYmplY3QuYXNzaWduID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gTWlzc2luZyBpbiBJRVxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG5cblx0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRPYmplY3QuYXNzaWduID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG91dHB1dCA9IE9iamVjdCggdGFyZ2V0ICk7XG5cblx0XHRcdGZvciAoIHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggKysgKSB7XG5cblx0XHRcdFx0dmFyIHNvdXJjZSA9IGFyZ3VtZW50c1sgaW5kZXggXTtcblxuXHRcdFx0XHRpZiAoIHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBuZXh0S2V5IGluIHNvdXJjZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIHNvdXJjZSwgbmV4dEtleSApICkge1xuXG5cdFx0XHRcdFx0XHRcdG91dHB1dFsgbmV4dEtleSBdID0gc291cmNlWyBuZXh0S2V5IF07XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdH07XG5cblx0fSApKCk7XG5cbn1cblxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL2V2ZW50ZGlzcGF0Y2hlci5qcy9cbiAqL1xuXG5mdW5jdGlvbiBFdmVudERpc3BhdGNoZXIoKSB7fVxuXG5PYmplY3QuYXNzaWduKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlLCB7XG5cblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcblxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxpc3RlbmVyc1sgdHlwZSBdID0gW107XG5cblx0XHR9XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0gMSApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0ucHVzaCggbGlzdGVuZXIgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGhhc0V2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblxuXHRcdHJldHVybiBsaXN0ZW5lcnNbIHR5cGUgXSAhPT0gdW5kZWZpbmVkICYmIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgIT09IC0gMTtcblxuXHR9LFxuXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblx0XHR2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBpbmRleCA9IGxpc3RlbmVyQXJyYXkuaW5kZXhPZiggbGlzdGVuZXIgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRcdGxpc3RlbmVyQXJyYXkuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cdFx0dmFyIGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbIGV2ZW50LnR5cGUgXTtcblxuXHRcdGlmICggbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRldmVudC50YXJnZXQgPSB0aGlzO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXlbIGkgXS5jYWxsKCB0aGlzLCBldmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbnZhciBSRVZJU0lPTiA9ICc5OSc7XG52YXIgTU9VU0UgPSB7IExFRlQ6IDAsIE1JRERMRTogMSwgUklHSFQ6IDIgfTtcbnZhciBDdWxsRmFjZU5vbmUgPSAwO1xudmFyIEN1bGxGYWNlQmFjayA9IDE7XG52YXIgQ3VsbEZhY2VGcm9udCA9IDI7XG52YXIgQ3VsbEZhY2VGcm9udEJhY2sgPSAzO1xudmFyIEZyb250RmFjZURpcmVjdGlvbkNXID0gMDtcbnZhciBGcm9udEZhY2VEaXJlY3Rpb25DQ1cgPSAxO1xudmFyIEJhc2ljU2hhZG93TWFwID0gMDtcbnZhciBQQ0ZTaGFkb3dNYXAgPSAxO1xudmFyIFBDRlNvZnRTaGFkb3dNYXAgPSAyO1xudmFyIEZyb250U2lkZSA9IDA7XG52YXIgQmFja1NpZGUgPSAxO1xudmFyIERvdWJsZVNpZGUgPSAyO1xudmFyIEZsYXRTaGFkaW5nID0gMTtcbnZhciBTbW9vdGhTaGFkaW5nID0gMjtcbnZhciBOb0NvbG9ycyA9IDA7XG52YXIgRmFjZUNvbG9ycyA9IDE7XG52YXIgVmVydGV4Q29sb3JzID0gMjtcbnZhciBOb0JsZW5kaW5nID0gMDtcbnZhciBOb3JtYWxCbGVuZGluZyA9IDE7XG52YXIgQWRkaXRpdmVCbGVuZGluZyA9IDI7XG52YXIgU3VidHJhY3RpdmVCbGVuZGluZyA9IDM7XG52YXIgTXVsdGlwbHlCbGVuZGluZyA9IDQ7XG52YXIgQ3VzdG9tQmxlbmRpbmcgPSA1O1xudmFyIEFkZEVxdWF0aW9uID0gMTAwO1xudmFyIFN1YnRyYWN0RXF1YXRpb24gPSAxMDE7XG52YXIgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSAxMDI7XG52YXIgTWluRXF1YXRpb24gPSAxMDM7XG52YXIgTWF4RXF1YXRpb24gPSAxMDQ7XG52YXIgWmVyb0ZhY3RvciA9IDIwMDtcbnZhciBPbmVGYWN0b3IgPSAyMDE7XG52YXIgU3JjQ29sb3JGYWN0b3IgPSAyMDI7XG52YXIgT25lTWludXNTcmNDb2xvckZhY3RvciA9IDIwMztcbnZhciBTcmNBbHBoYUZhY3RvciA9IDIwNDtcbnZhciBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1O1xudmFyIERzdEFscGhhRmFjdG9yID0gMjA2O1xudmFyIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgPSAyMDc7XG52YXIgRHN0Q29sb3JGYWN0b3IgPSAyMDg7XG52YXIgT25lTWludXNEc3RDb2xvckZhY3RvciA9IDIwOTtcbnZhciBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gMjEwO1xudmFyIE5ldmVyRGVwdGggPSAwO1xudmFyIEFsd2F5c0RlcHRoID0gMTtcbnZhciBMZXNzRGVwdGggPSAyO1xudmFyIExlc3NFcXVhbERlcHRoID0gMztcbnZhciBFcXVhbERlcHRoID0gNDtcbnZhciBHcmVhdGVyRXF1YWxEZXB0aCA9IDU7XG52YXIgR3JlYXRlckRlcHRoID0gNjtcbnZhciBOb3RFcXVhbERlcHRoID0gNztcbnZhciBNdWx0aXBseU9wZXJhdGlvbiA9IDA7XG52YXIgTWl4T3BlcmF0aW9uID0gMTtcbnZhciBBZGRPcGVyYXRpb24gPSAyO1xudmFyIE5vVG9uZU1hcHBpbmcgPSAwO1xudmFyIExpbmVhclRvbmVNYXBwaW5nID0gMTtcbnZhciBSZWluaGFyZFRvbmVNYXBwaW5nID0gMjtcbnZhciBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmcgPSAzO1xudmFyIENpbmVvblRvbmVNYXBwaW5nID0gNDtcbnZhciBBQ0VTRmlsbWljVG9uZU1hcHBpbmcgPSA1O1xuXG52YXIgVVZNYXBwaW5nID0gMzAwO1xudmFyIEN1YmVSZWZsZWN0aW9uTWFwcGluZyA9IDMwMTtcbnZhciBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDI7XG52YXIgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDM7XG52YXIgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDQ7XG52YXIgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDU7XG52YXIgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDY7XG52YXIgQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDc7XG52YXIgUmVwZWF0V3JhcHBpbmcgPSAxMDAwO1xudmFyIENsYW1wVG9FZGdlV3JhcHBpbmcgPSAxMDAxO1xudmFyIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgPSAxMDAyO1xudmFyIE5lYXJlc3RGaWx0ZXIgPSAxMDAzO1xudmFyIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcbnZhciBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbnZhciBMaW5lYXJGaWx0ZXIgPSAxMDA2O1xudmFyIExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xudmFyIExpbmVhck1pcE1hcExpbmVhckZpbHRlciA9IDEwMDg7XG52YXIgVW5zaWduZWRCeXRlVHlwZSA9IDEwMDk7XG52YXIgQnl0ZVR5cGUgPSAxMDEwO1xudmFyIFNob3J0VHlwZSA9IDEwMTE7XG52YXIgVW5zaWduZWRTaG9ydFR5cGUgPSAxMDEyO1xudmFyIEludFR5cGUgPSAxMDEzO1xudmFyIFVuc2lnbmVkSW50VHlwZSA9IDEwMTQ7XG52YXIgRmxvYXRUeXBlID0gMTAxNTtcbnZhciBIYWxmRmxvYXRUeXBlID0gMTAxNjtcbnZhciBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgPSAxMDE3O1xudmFyIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IDEwMTg7XG52YXIgVW5zaWduZWRTaG9ydDU2NVR5cGUgPSAxMDE5O1xudmFyIFVuc2lnbmVkSW50MjQ4VHlwZSA9IDEwMjA7XG52YXIgQWxwaGFGb3JtYXQgPSAxMDIxO1xudmFyIFJHQkZvcm1hdCA9IDEwMjI7XG52YXIgUkdCQUZvcm1hdCA9IDEwMjM7XG52YXIgTHVtaW5hbmNlRm9ybWF0ID0gMTAyNDtcbnZhciBMdW1pbmFuY2VBbHBoYUZvcm1hdCA9IDEwMjU7XG52YXIgUkdCRUZvcm1hdCA9IFJHQkFGb3JtYXQ7XG52YXIgRGVwdGhGb3JtYXQgPSAxMDI2O1xudmFyIERlcHRoU3RlbmNpbEZvcm1hdCA9IDEwMjc7XG52YXIgUmVkRm9ybWF0ID0gMTAyODtcbnZhciBSR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc2O1xudmFyIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc3O1xudmFyIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCA9IDMzNzc4O1xudmFyIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCA9IDMzNzc5O1xudmFyIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDA7XG52YXIgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MTtcbnZhciBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MjtcbnZhciBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MztcbnZhciBSR0JfRVRDMV9Gb3JtYXQgPSAzNjE5NjtcbnZhciBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4O1xudmFyIFJHQkFfQVNUQ181eDRfRm9ybWF0ID0gMzc4MDk7XG52YXIgUkdCQV9BU1RDXzV4NV9Gb3JtYXQgPSAzNzgxMDtcbnZhciBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExO1xudmFyIFJHQkFfQVNUQ182eDZfRm9ybWF0ID0gMzc4MTI7XG52YXIgUkdCQV9BU1RDXzh4NV9Gb3JtYXQgPSAzNzgxMztcbnZhciBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0O1xudmFyIFJHQkFfQVNUQ184eDhfRm9ybWF0ID0gMzc4MTU7XG52YXIgUkdCQV9BU1RDXzEweDVfRm9ybWF0ID0gMzc4MTY7XG52YXIgUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gMzc4MTc7XG52YXIgUkdCQV9BU1RDXzEweDhfRm9ybWF0ID0gMzc4MTg7XG52YXIgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IDM3ODE5O1xudmFyIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSAzNzgyMDtcbnZhciBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ID0gMzc4MjE7XG52YXIgTG9vcE9uY2UgPSAyMjAwO1xudmFyIExvb3BSZXBlYXQgPSAyMjAxO1xudmFyIExvb3BQaW5nUG9uZyA9IDIyMDI7XG52YXIgSW50ZXJwb2xhdGVEaXNjcmV0ZSA9IDIzMDA7XG52YXIgSW50ZXJwb2xhdGVMaW5lYXIgPSAyMzAxO1xudmFyIEludGVycG9sYXRlU21vb3RoID0gMjMwMjtcbnZhciBaZXJvQ3VydmF0dXJlRW5kaW5nID0gMjQwMDtcbnZhciBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxO1xudmFyIFdyYXBBcm91bmRFbmRpbmcgPSAyNDAyO1xudmFyIFRyaWFuZ2xlc0RyYXdNb2RlID0gMDtcbnZhciBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xudmFyIFRyaWFuZ2xlRmFuRHJhd01vZGUgPSAyO1xudmFyIExpbmVhckVuY29kaW5nID0gMzAwMDtcbnZhciBzUkdCRW5jb2RpbmcgPSAzMDAxO1xudmFyIEdhbW1hRW5jb2RpbmcgPSAzMDA3O1xudmFyIFJHQkVFbmNvZGluZyA9IDMwMDI7XG52YXIgTG9nTHV2RW5jb2RpbmcgPSAzMDAzO1xudmFyIFJHQk03RW5jb2RpbmcgPSAzMDA0O1xudmFyIFJHQk0xNkVuY29kaW5nID0gMzAwNTtcbnZhciBSR0JERW5jb2RpbmcgPSAzMDA2O1xudmFyIEJhc2ljRGVwdGhQYWNraW5nID0gMzIwMDtcbnZhciBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTtcbnZhciBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwO1xudmFyIE9iamVjdFNwYWNlTm9ybWFsTWFwID0gMTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgX01hdGggPSB7XG5cblx0REVHMlJBRDogTWF0aC5QSSAvIDE4MCxcblx0UkFEMkRFRzogMTgwIC8gTWF0aC5QSSxcblxuXHRnZW5lcmF0ZVVVSUQ6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XG5cblx0XHR2YXIgbHV0ID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAyNTY7IGkgKysgKSB7XG5cblx0XHRcdGx1dFsgaSBdID0gKCBpIDwgMTYgPyAnMCcgOiAnJyApICsgKCBpICkudG9TdHJpbmcoIDE2ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuXG5cdFx0XHR2YXIgZDAgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDIgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDMgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgdXVpZCA9IGx1dFsgZDAgJiAweGZmIF0gKyBsdXRbIGQwID4+IDggJiAweGZmIF0gKyBsdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgbHV0WyBkMCA+PiAyNCAmIDB4ZmYgXSArICctJyArXG5cdFx0XHRcdGx1dFsgZDEgJiAweGZmIF0gKyBsdXRbIGQxID4+IDggJiAweGZmIF0gKyAnLScgKyBsdXRbIGQxID4+IDE2ICYgMHgwZiB8IDB4NDAgXSArIGx1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0XHRsdXRbIGQyICYgMHgzZiB8IDB4ODAgXSArIGx1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIGx1dFsgZDIgPj4gMTYgJiAweGZmIF0gKyBsdXRbIGQyID4+IDI0ICYgMHhmZiBdICtcblx0XHRcdFx0bHV0WyBkMyAmIDB4ZmYgXSArIGx1dFsgZDMgPj4gOCAmIDB4ZmYgXSArIGx1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBsdXRbIGQzID4+IDI0ICYgMHhmZiBdO1xuXG5cdFx0XHQvLyAudG9VcHBlckNhc2UoKSBoZXJlIGZsYXR0ZW5zIGNvbmNhdGVuYXRlZCBzdHJpbmdzIHRvIHNhdmUgaGVhcCBtZW1vcnkgc3BhY2UuXG5cdFx0XHRyZXR1cm4gdXVpZC50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0fTtcblxuXHR9ICkoKSxcblxuXHRjbGFtcDogZnVuY3Rpb24gKCB2YWx1ZSwgbWluLCBtYXggKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgdmFsdWUgKSApO1xuXG5cdH0sXG5cblx0Ly8gY29tcHV0ZSBldWNsaWRpYW4gbW9kdWxvIG9mIG0gJSBuXG5cdC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vZHVsb19vcGVyYXRpb25cblxuXHRldWNsaWRlYW5Nb2R1bG86IGZ1bmN0aW9uICggbiwgbSApIHtcblxuXHRcdHJldHVybiAoICggbiAlIG0gKSArIG0gKSAlIG07XG5cblx0fSxcblxuXHQvLyBMaW5lYXIgbWFwcGluZyBmcm9tIHJhbmdlIDxhMSwgYTI+IHRvIHJhbmdlIDxiMSwgYjI+XG5cblx0bWFwTGluZWFyOiBmdW5jdGlvbiAoIHgsIGExLCBhMiwgYjEsIGIyICkge1xuXG5cdFx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XG5cblx0fSxcblxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lYXJfaW50ZXJwb2xhdGlvblxuXG5cdGxlcnA6IGZ1bmN0aW9uICggeCwgeSwgdCApIHtcblxuXHRcdHJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7XG5cblx0fSxcblxuXHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Ntb290aHN0ZXBcblxuXHRzbW9vdGhzdGVwOiBmdW5jdGlvbiAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdFx0aWYgKCB4IDw9IG1pbiApIHJldHVybiAwO1xuXHRcdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHRcdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0XHRyZXR1cm4geCAqIHggKiAoIDMgLSAyICogeCApO1xuXG5cdH0sXG5cblx0c21vb3RoZXJzdGVwOiBmdW5jdGlvbiAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdFx0aWYgKCB4IDw9IG1pbiApIHJldHVybiAwO1xuXHRcdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHRcdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0XHRyZXR1cm4geCAqIHggKiB4ICogKCB4ICogKCB4ICogNiAtIDE1ICkgKyAxMCApO1xuXG5cdH0sXG5cblx0Ly8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuXG5cdHJhbmRJbnQ6IGZ1bmN0aW9uICggbG93LCBoaWdoICkge1xuXG5cdFx0cmV0dXJuIGxvdyArIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKyAxICkgKTtcblxuXHR9LFxuXG5cdC8vIFJhbmRvbSBmbG9hdCBmcm9tIDxsb3csIGhpZ2g+IGludGVydmFsXG5cblx0cmFuZEZsb2F0OiBmdW5jdGlvbiAoIGxvdywgaGlnaCApIHtcblxuXHRcdHJldHVybiBsb3cgKyBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICk7XG5cblx0fSxcblxuXHQvLyBSYW5kb20gZmxvYXQgZnJvbSA8LXJhbmdlLzIsIHJhbmdlLzI+IGludGVydmFsXG5cblx0cmFuZEZsb2F0U3ByZWFkOiBmdW5jdGlvbiAoIHJhbmdlICkge1xuXG5cdFx0cmV0dXJuIHJhbmdlICogKCAwLjUgLSBNYXRoLnJhbmRvbSgpICk7XG5cblx0fSxcblxuXHRkZWdUb1JhZDogZnVuY3Rpb24gKCBkZWdyZWVzICkge1xuXG5cdFx0cmV0dXJuIGRlZ3JlZXMgKiBfTWF0aC5ERUcyUkFEO1xuXG5cdH0sXG5cblx0cmFkVG9EZWc6IGZ1bmN0aW9uICggcmFkaWFucyApIHtcblxuXHRcdHJldHVybiByYWRpYW5zICogX01hdGguUkFEMkRFRztcblxuXHR9LFxuXG5cdGlzUG93ZXJPZlR3bzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG5cdH0sXG5cblx0Y2VpbFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cblx0fSxcblxuXHRmbG9vclBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yMiggeCwgeSApIHtcblxuXHR0aGlzLnggPSB4IHx8IDA7XG5cdHRoaXMueSA9IHkgfHwgMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVmVjdG9yMi5wcm90b3R5cGUsIHtcblxuXHRcIndpZHRoXCI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy54O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy54ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRcImhlaWdodFwiOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMueTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMueSA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IyLnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yMjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnkgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXTtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWluID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgbWF4ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHRcdG1pbi5zZXQoIG1pblZhbCwgbWluVmFsICk7XG5cdFx0XHRtYXguc2V0KCBtYXhWYWwsIG1heFZhbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jbGFtcCggbWluLCBtYXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9LFxuXG5cdGZsb29yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VpbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kVG9aZXJvOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAoIHRoaXMueCA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy54ICkgOiBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSAoIHRoaXMueSA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy55ICkgOiBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bmVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZG90OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xuXG5cdH0sXG5cblx0Y3Jvc3M6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7XG5cblx0fSxcblxuXHRsZW5ndGhTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueTtcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICk7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fSxcblxuXHRhbmdsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gY29tcHV0ZXMgdGhlIGFuZ2xlIGluIHJhZGlhbnMgd2l0aCByZXNwZWN0IHRvIHRoZSBwb3NpdGl2ZSB4LWF4aXNcblxuXHRcdHZhciBhbmdsZSA9IE1hdGguYXRhbjIoIHRoaXMueSwgdGhpcy54ICk7XG5cblx0XHRpZiAoIGFuZ2xlIDwgMCApIGFuZ2xlICs9IDIgKiBNYXRoLlBJO1xuXG5cdFx0cmV0dXJuIGFuZ2xlO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVRvU3F1YXJlZCggdiApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvU3F1YXJlZDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dmFyIGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueTtcblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApO1xuXG5cdH0sXG5cblx0c2V0TGVuZ3RoOiBmdW5jdGlvbiAoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9LFxuXG5cdGxlcnA6IGZ1bmN0aW9uICggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxlcnBWZWN0b3JzOiBmdW5jdGlvbiAoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2MiwgdjEgKS5tdWx0aXBseVNjYWxhciggYWxwaGEgKS5hZGQoIHYxICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgKTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLnggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy55ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdGF0ZUFyb3VuZDogZnVuY3Rpb24gKCBjZW50ZXIsIGFuZ2xlICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggYW5nbGUgKSwgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuXG5cdFx0dmFyIHggPSB0aGlzLnggLSBjZW50ZXIueDtcblx0XHR2YXIgeSA9IHRoaXMueSAtIGNlbnRlci55O1xuXG5cdFx0dGhpcy54ID0geCAqIGMgLSB5ICogcyArIGNlbnRlci54O1xuXHRcdHRoaXMueSA9IHggKiBzICsgeSAqIGMgKyBjZW50ZXIueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIHN1cGVyZWdnYmVydCAvIGh0dHA6Ly93d3cucGF1bGJydW50LmNvLnVrL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3Igam9yZGlfcm9zIC8gaHR0cDovL3BsYXR0c29mdC5jb21cbiAqIEBhdXRob3IgRDFwbG8xZCAvIGh0dHA6Ly9naXRodWIuY29tL0QxcGxvMWRcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciB0aW1rbmlwIC8gaHR0cDovL3d3dy5mbG9vcnBsYW5uZXIuY29tL1xuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gTWF0cml4NCgpIHtcblxuXHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0MSwgMCwgMCwgMCxcblx0XHQwLCAxLCAwLCAwLFxuXHRcdDAsIDAsIDEsIDAsXG5cdFx0MCwgMCwgMCwgMVxuXG5cdF07XG5cblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMCApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiB0aGUgY29uc3RydWN0b3Igbm8gbG9uZ2VyIHJlYWRzIGFyZ3VtZW50cy4gdXNlIC5zZXQoKSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTWF0cml4NC5wcm90b3R5cGUsIHtcblxuXHRpc01hdHJpeDQ6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgNCBdID0gbjEyOyB0ZVsgOCBdID0gbjEzOyB0ZVsgMTIgXSA9IG4xNDtcblx0XHR0ZVsgMSBdID0gbjIxOyB0ZVsgNSBdID0gbjIyOyB0ZVsgOSBdID0gbjIzOyB0ZVsgMTMgXSA9IG4yNDtcblx0XHR0ZVsgMiBdID0gbjMxOyB0ZVsgNiBdID0gbjMyOyB0ZVsgMTAgXSA9IG4zMzsgdGVbIDE0IF0gPSBuMzQ7XG5cdFx0dGVbIDMgXSA9IG40MTsgdGVbIDcgXSA9IG40MjsgdGVbIDExIF0gPSBuNDM7IHRlWyAxNSBdID0gbjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpZGVudGl0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07IHRlWyAzIF0gPSBtZVsgMyBdO1xuXHRcdHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTsgdGVbIDYgXSA9IG1lWyA2IF07IHRlWyA3IF0gPSBtZVsgNyBdO1xuXHRcdHRlWyA4IF0gPSBtZVsgOCBdOyB0ZVsgOSBdID0gbWVbIDkgXTsgdGVbIDEwIF0gPSBtZVsgMTAgXTsgdGVbIDExIF0gPSBtZVsgMTEgXTtcblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdOyB0ZVsgMTMgXSA9IG1lWyAxMyBdOyB0ZVsgMTQgXSA9IG1lWyAxNCBdOyB0ZVsgMTUgXSA9IG1lWyAxNSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07XG5cdFx0dGVbIDEzIF0gPSBtZVsgMTMgXTtcblx0XHR0ZVsgMTQgXSA9IG1lWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHRyYWN0QmFzaXM6IGZ1bmN0aW9uICggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDAgKTtcblx0XHR5QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAxICk7XG5cdFx0ekF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlQmFzaXM6IGZ1bmN0aW9uICggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHRoaXMuc2V0KFxuXHRcdFx0eEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMCxcblx0XHRcdHhBeGlzLnksIHlBeGlzLnksIHpBeGlzLnksIDAsXG5cdFx0XHR4QXhpcy56LCB5QXhpcy56LCB6QXhpcy56LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGV4dHJhY3RSb3RhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBleHRyYWN0Um90YXRpb24oIG0gKSB7XG5cblx0XHRcdC8vIHRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgcmVmbGVjdGlvbiBtYXRyaWNlc1xuXG5cdFx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblxuXHRcdFx0dmFyIHNjYWxlWCA9IDEgLyB2MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAwICkubGVuZ3RoKCk7XG5cdFx0XHR2YXIgc2NhbGVZID0gMSAvIHYxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDEgKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzY2FsZVogPSAxIC8gdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0XHR0ZVsgMCBdID0gbWVbIDAgXSAqIHNjYWxlWDtcblx0XHRcdHRlWyAxIF0gPSBtZVsgMSBdICogc2NhbGVYO1xuXHRcdFx0dGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7XG5cdFx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdFx0dGVbIDQgXSA9IG1lWyA0IF0gKiBzY2FsZVk7XG5cdFx0XHR0ZVsgNSBdID0gbWVbIDUgXSAqIHNjYWxlWTtcblx0XHRcdHRlWyA2IF0gPSBtZVsgNiBdICogc2NhbGVZO1xuXHRcdFx0dGVbIDcgXSA9IDA7XG5cblx0XHRcdHRlWyA4IF0gPSBtZVsgOCBdICogc2NhbGVaO1xuXHRcdFx0dGVbIDkgXSA9IG1lWyA5IF0gKiBzY2FsZVo7XG5cdFx0XHR0ZVsgMTAgXSA9IG1lWyAxMCBdICogc2NhbGVaO1xuXHRcdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0XHR0ZVsgMTIgXSA9IDA7XG5cdFx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bWFrZVJvdGF0aW9uRnJvbUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0aWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLm1ha2VSb3RhdGlvbkZyb21FdWxlcigpIG5vdyBleHBlY3RzIGEgRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nICk7XG5cblx0XHR9XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHggPSBldWxlci54LCB5ID0gZXVsZXIueSwgeiA9IGV1bGVyLno7XG5cdFx0dmFyIGEgPSBNYXRoLmNvcyggeCApLCBiID0gTWF0aC5zaW4oIHggKTtcblx0XHR2YXIgYyA9IE1hdGguY29zKCB5ICksIGQgPSBNYXRoLnNpbiggeSApO1xuXHRcdHZhciBlID0gTWF0aC5jb3MoIHogKSwgZiA9IE1hdGguc2luKCB6ICk7XG5cblx0XHRpZiAoIGV1bGVyLm9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0dmFyIGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGQ7XG5cblx0XHRcdHRlWyAxIF0gPSBhZiArIGJlICogZDtcblx0XHRcdHRlWyA1IF0gPSBhZSAtIGJmICogZDtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBjO1xuXG5cdFx0XHR0ZVsgMiBdID0gYmYgLSBhZSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYmUgKyBhZiAqIGQ7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWFonICkge1xuXG5cdFx0XHR2YXIgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlICsgZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IGRlICogYiAtIGNmO1xuXHRcdFx0dGVbIDggXSA9IGEgKiBkO1xuXG5cdFx0XHR0ZVsgMSBdID0gYSAqIGY7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gLSBiO1xuXG5cdFx0XHR0ZVsgMiBdID0gY2YgKiBiIC0gZGU7XG5cdFx0XHR0ZVsgNiBdID0gZGYgKyBjZSAqIGI7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR2YXIgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlIC0gZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IC0gYSAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZGUgKyBjZiAqIGI7XG5cblx0XHRcdHRlWyAxIF0gPSBjZiArIGRlICogYjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBkZiAtIGNlICogYjtcblxuXHRcdFx0dGVbIDIgXSA9IC0gYSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pZWCcgKSB7XG5cblx0XHRcdHZhciBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gYmUgKiBkIC0gYWY7XG5cdFx0XHR0ZVsgOCBdID0gYWUgKiBkICsgYmY7XG5cblx0XHRcdHRlWyAxIF0gPSBjICogZjtcblx0XHRcdHRlWyA1IF0gPSBiZiAqIGQgKyBhZTtcblx0XHRcdHRlWyA5IF0gPSBhZiAqIGQgLSBiZTtcblxuXHRcdFx0dGVbIDIgXSA9IC0gZDtcblx0XHRcdHRlWyA2IF0gPSBiICogYztcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdHZhciBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gYmQgLSBhYyAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gYmMgKiBmICsgYWQ7XG5cblx0XHRcdHRlWyAxIF0gPSBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYiAqIGU7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGQgKiBlO1xuXHRcdFx0dGVbIDYgXSA9IGFkICogZiArIGJjO1xuXHRcdFx0dGVbIDEwIF0gPSBhYyAtIGJkICogZjtcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWFpZJyApIHtcblxuXHRcdFx0dmFyIGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGY7XG5cdFx0XHR0ZVsgOCBdID0gZCAqIGU7XG5cblx0XHRcdHRlWyAxIF0gPSBhYyAqIGYgKyBiZDtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBhZCAqIGYgLSBiYztcblxuXHRcdFx0dGVbIDIgXSA9IGJjICogZiAtIGFkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBlO1xuXHRcdFx0dGVbIDEwIF0gPSBiZCAqIGYgKyBhYztcblxuXHRcdH1cblxuXHRcdC8vIGJvdHRvbSByb3dcblx0XHR0ZVsgMyBdID0gMDtcblx0XHR0ZVsgNyBdID0gMDtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHQvLyBsYXN0IGNvbHVtblxuXHRcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDE0IF0gPSAwO1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB6ZXJvID0gbmV3IFZlY3RvcjMoIDAsIDAsIDAgKTtcblx0XHR2YXIgb25lID0gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY29tcG9zZSggemVybywgcSwgb25lICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRsb29rQXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgeSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHogPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvb2tBdCggZXllLCB0YXJnZXQsIHVwICkge1xuXG5cdFx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0XHR6LnN1YlZlY3RvcnMoIGV5ZSwgdGFyZ2V0ICk7XG5cblx0XHRcdGlmICggei5sZW5ndGhTcSgpID09PSAwICkge1xuXG5cdFx0XHRcdC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxuXG5cdFx0XHRcdHoueiA9IDE7XG5cblx0XHRcdH1cblxuXHRcdFx0ei5ub3JtYWxpemUoKTtcblx0XHRcdHguY3Jvc3NWZWN0b3JzKCB1cCwgeiApO1xuXG5cdFx0XHRpZiAoIHgubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyB1cCBhbmQgeiBhcmUgcGFyYWxsZWxcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCB1cC56ICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHR6LnggKz0gMC4wMDAxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR6LnogKz0gMC4wMDAxO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR6Lm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHR4LmNyb3NzVmVjdG9ycyggdXAsIHogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR4Lm5vcm1hbGl6ZSgpO1xuXHRcdFx0eS5jcm9zc1ZlY3RvcnMoIHosIHggKTtcblxuXHRcdFx0dGVbIDAgXSA9IHgueDsgdGVbIDQgXSA9IHkueDsgdGVbIDggXSA9IHoueDtcblx0XHRcdHRlWyAxIF0gPSB4Lnk7IHRlWyA1IF0gPSB5Lnk7IHRlWyA5IF0gPSB6Lnk7XG5cdFx0XHR0ZVsgMiBdID0geC56OyB0ZVsgNiBdID0geS56OyB0ZVsgMTAgXSA9IHouejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCBtLCBuICkge1xuXG5cdFx0aWYgKCBuICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIG4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTtcblxuXHR9LFxuXG5cdHByZW11bHRpcGx5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCB0aGlzICk7XG5cblx0fSxcblxuXHRtdWx0aXBseU1hdHJpY2VzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR2YXIgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdHZhciBiZSA9IGIuZWxlbWVudHM7XG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgNCBdLCBhMTMgPSBhZVsgOCBdLCBhMTQgPSBhZVsgMTIgXTtcblx0XHR2YXIgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDUgXSwgYTIzID0gYWVbIDkgXSwgYTI0ID0gYWVbIDEzIF07XG5cdFx0dmFyIGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA2IF0sIGEzMyA9IGFlWyAxMCBdLCBhMzQgPSBhZVsgMTQgXTtcblx0XHR2YXIgYTQxID0gYWVbIDMgXSwgYTQyID0gYWVbIDcgXSwgYTQzID0gYWVbIDExIF0sIGE0NCA9IGFlWyAxNSBdO1xuXG5cdFx0dmFyIGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyA0IF0sIGIxMyA9IGJlWyA4IF0sIGIxNCA9IGJlWyAxMiBdO1xuXHRcdHZhciBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNSBdLCBiMjMgPSBiZVsgOSBdLCBiMjQgPSBiZVsgMTMgXTtcblx0XHR2YXIgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDYgXSwgYjMzID0gYmVbIDEwIF0sIGIzNCA9IGJlWyAxNCBdO1xuXHRcdHZhciBiNDEgPSBiZVsgMyBdLCBiNDIgPSBiZVsgNyBdLCBiNDMgPSBiZVsgMTEgXSwgYjQ0ID0gYmVbIDE1IF07XG5cblx0XHR0ZVsgMCBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxICsgYTE0ICogYjQxO1xuXHRcdHRlWyA0IF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7XG5cdFx0dGVbIDggXSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMyArIGExNCAqIGI0Mztcblx0XHR0ZVsgMTIgXSA9IGExMSAqIGIxNCArIGExMiAqIGIyNCArIGExMyAqIGIzNCArIGExNCAqIGI0NDtcblxuXHRcdHRlWyAxIF0gPSBhMjEgKiBiMTEgKyBhMjIgKiBiMjEgKyBhMjMgKiBiMzEgKyBhMjQgKiBiNDE7XG5cdFx0dGVbIDUgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0Mjtcblx0XHR0ZVsgOSBdID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzICogYjMzICsgYTI0ICogYjQzO1xuXHRcdHRlWyAxMyBdID0gYTIxICogYjE0ICsgYTIyICogYjI0ICsgYTIzICogYjM0ICsgYTI0ICogYjQ0O1xuXG5cdFx0dGVbIDIgXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMSArIGEzNCAqIGI0MTtcblx0XHR0ZVsgNiBdID0gYTMxICogYjEyICsgYTMyICogYjIyICsgYTMzICogYjMyICsgYTM0ICogYjQyO1xuXHRcdHRlWyAxMCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzICsgYTM0ICogYjQzO1xuXHRcdHRlWyAxNCBdID0gYTMxICogYjE0ICsgYTMyICogYjI0ICsgYTMzICogYjM0ICsgYTM0ICogYjQ0O1xuXG5cdFx0dGVbIDMgXSA9IGE0MSAqIGIxMSArIGE0MiAqIGIyMSArIGE0MyAqIGIzMSArIGE0NCAqIGI0MTtcblx0XHR0ZVsgNyBdID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyO1xuXHRcdHRlWyAxMSBdID0gYTQxICogYjEzICsgYTQyICogYjIzICsgYTQzICogYjMzICsgYTQ0ICogYjQzO1xuXHRcdHRlWyAxNSBdID0gYTQxICogYjE0ICsgYTQyICogYjI0ICsgYTQzICogYjM0ICsgYTQ0ICogYjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgOCBdICo9IHM7IHRlWyAxMiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA5IF0gKj0gczsgdGVbIDEzIF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gcztcblx0XHR0ZVsgMyBdICo9IHM7IHRlWyA3IF0gKj0gczsgdGVbIDExIF0gKj0gczsgdGVbIDE1IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlUb0J1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0djEueCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHRcdHYxLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaSApO1xuXHRcdFx0XHR2MS56ID0gYXR0cmlidXRlLmdldFooIGkgKTtcblxuXHRcdFx0XHR2MS5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuc2V0WFlaKCBpLCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGRldGVybWluYW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIG4xMSA9IHRlWyAwIF0sIG4xMiA9IHRlWyA0IF0sIG4xMyA9IHRlWyA4IF0sIG4xNCA9IHRlWyAxMiBdO1xuXHRcdHZhciBuMjEgPSB0ZVsgMSBdLCBuMjIgPSB0ZVsgNSBdLCBuMjMgPSB0ZVsgOSBdLCBuMjQgPSB0ZVsgMTMgXTtcblx0XHR2YXIgbjMxID0gdGVbIDIgXSwgbjMyID0gdGVbIDYgXSwgbjMzID0gdGVbIDEwIF0sIG4zNCA9IHRlWyAxNCBdO1xuXHRcdHZhciBuNDEgPSB0ZVsgMyBdLCBuNDIgPSB0ZVsgNyBdLCBuNDMgPSB0ZVsgMTEgXSwgbjQ0ID0gdGVbIDE1IF07XG5cblx0XHQvL1RPRE86IG1ha2UgdGhpcyBtb3JlIGVmZmljaWVudFxuXHRcdC8vKCBiYXNlZCBvbiBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL21hdHJpeC9mdW5jdGlvbnMvaW52ZXJzZS9mb3VyRC9pbmRleC5odG0gKVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdG40MSAqIChcblx0XHRcdFx0KyBuMTQgKiBuMjMgKiBuMzJcblx0XHRcdFx0IC0gbjEzICogbjI0ICogbjMyXG5cdFx0XHRcdCAtIG4xNCAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xMiAqIG4yMyAqIG4zNFxuXHRcdFx0KSArXG5cdFx0XHRuNDIgKiAoXG5cdFx0XHRcdCsgbjExICogbjIzICogbjM0XG5cdFx0XHRcdCAtIG4xMSAqIG4yNCAqIG4zM1xuXHRcdFx0XHQgKyBuMTQgKiBuMjEgKiBuMzNcblx0XHRcdFx0IC0gbjEzICogbjIxICogbjM0XG5cdFx0XHRcdCArIG4xMyAqIG4yNCAqIG4zMVxuXHRcdFx0XHQgLSBuMTQgKiBuMjMgKiBuMzFcblx0XHRcdCkgK1xuXHRcdFx0bjQzICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTEgKiBuMjIgKiBuMzRcblx0XHRcdFx0IC0gbjE0ICogbjIxICogbjMyXG5cdFx0XHRcdCArIG4xMiAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTQgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjEyICogbjI0ICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40NCAqIChcblx0XHRcdFx0LSBuMTMgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjExICogbjIzICogbjMyXG5cdFx0XHRcdCArIG4xMSAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTMgKiBuMjEgKiBuMzJcblx0XHRcdFx0IC0gbjEyICogbjIxICogbjMzXG5cdFx0XHRcdCArIG4xMiAqIG4yMyAqIG4zMVxuXHRcdFx0KVxuXG5cdFx0KTtcblxuXHR9LFxuXG5cdHRyYW5zcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgdG1wO1xuXG5cdFx0dG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDIgXTsgdGVbIDIgXSA9IHRlWyA4IF07IHRlWyA4IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDYgXTsgdGVbIDYgXSA9IHRlWyA5IF07IHRlWyA5IF0gPSB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMyBdOyB0ZVsgMyBdID0gdGVbIDEyIF07IHRlWyAxMiBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA3IF07IHRlWyA3IF0gPSB0ZVsgMTMgXTsgdGVbIDEzIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDExIF07IHRlWyAxMSBdID0gdGVbIDE0IF07IHRlWyAxNCBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRQb3NpdGlvbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAxMiBdID0gdi54O1xuXHRcdHRlWyAxMyBdID0gdi55O1xuXHRcdHRlWyAxNCBdID0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRJbnZlcnNlOiBmdW5jdGlvbiAoIG0sIHRocm93T25EZWdlbmVyYXRlICkge1xuXG5cdFx0Ly8gYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cyxcblx0XHRcdG1lID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bjExID0gbWVbIDAgXSwgbjIxID0gbWVbIDEgXSwgbjMxID0gbWVbIDIgXSwgbjQxID0gbWVbIDMgXSxcblx0XHRcdG4xMiA9IG1lWyA0IF0sIG4yMiA9IG1lWyA1IF0sIG4zMiA9IG1lWyA2IF0sIG40MiA9IG1lWyA3IF0sXG5cdFx0XHRuMTMgPSBtZVsgOCBdLCBuMjMgPSBtZVsgOSBdLCBuMzMgPSBtZVsgMTAgXSwgbjQzID0gbWVbIDExIF0sXG5cdFx0XHRuMTQgPSBtZVsgMTIgXSwgbjI0ID0gbWVbIDEzIF0sIG4zNCA9IG1lWyAxNCBdLCBuNDQgPSBtZVsgMTUgXSxcblxuXHRcdFx0dDExID0gbjIzICogbjM0ICogbjQyIC0gbjI0ICogbjMzICogbjQyICsgbjI0ICogbjMyICogbjQzIC0gbjIyICogbjM0ICogbjQzIC0gbjIzICogbjMyICogbjQ0ICsgbjIyICogbjMzICogbjQ0LFxuXHRcdFx0dDEyID0gbjE0ICogbjMzICogbjQyIC0gbjEzICogbjM0ICogbjQyIC0gbjE0ICogbjMyICogbjQzICsgbjEyICogbjM0ICogbjQzICsgbjEzICogbjMyICogbjQ0IC0gbjEyICogbjMzICogbjQ0LFxuXHRcdFx0dDEzID0gbjEzICogbjI0ICogbjQyIC0gbjE0ICogbjIzICogbjQyICsgbjE0ICogbjIyICogbjQzIC0gbjEyICogbjI0ICogbjQzIC0gbjEzICogbjIyICogbjQ0ICsgbjEyICogbjIzICogbjQ0LFxuXHRcdFx0dDE0ID0gbjE0ICogbjIzICogbjMyIC0gbjEzICogbjI0ICogbjMyIC0gbjE0ICogbjIyICogbjMzICsgbjEyICogbjI0ICogbjMzICsgbjEzICogbjIyICogbjM0IC0gbjEyICogbjIzICogbjM0O1xuXG5cdFx0dmFyIGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMyArIG40MSAqIHQxNDtcblxuXHRcdGlmICggZGV0ID09PSAwICkge1xuXG5cdFx0XHR2YXIgbXNnID0gXCJUSFJFRS5NYXRyaXg0OiAuZ2V0SW52ZXJzZSgpIGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIjtcblxuXHRcdFx0aWYgKCB0aHJvd09uRGVnZW5lcmF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggbXNnICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuaWRlbnRpdHkoKTtcblxuXHRcdH1cblxuXHRcdHZhciBkZXRJbnYgPSAxIC8gZGV0O1xuXG5cdFx0dGVbIDAgXSA9IHQxMSAqIGRldEludjtcblx0XHR0ZVsgMSBdID0gKCBuMjQgKiBuMzMgKiBuNDEgLSBuMjMgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzEgKiBuNDMgKyBuMjEgKiBuMzQgKiBuNDMgKyBuMjMgKiBuMzEgKiBuNDQgLSBuMjEgKiBuMzMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMiBdID0gKCBuMjIgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzIgKiBuNDEgKyBuMjQgKiBuMzEgKiBuNDIgLSBuMjEgKiBuMzQgKiBuNDIgLSBuMjIgKiBuMzEgKiBuNDQgKyBuMjEgKiBuMzIgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMyBdID0gKCBuMjMgKiBuMzIgKiBuNDEgLSBuMjIgKiBuMzMgKiBuNDEgLSBuMjMgKiBuMzEgKiBuNDIgKyBuMjEgKiBuMzMgKiBuNDIgKyBuMjIgKiBuMzEgKiBuNDMgLSBuMjEgKiBuMzIgKiBuNDMgKSAqIGRldEludjtcblxuXHRcdHRlWyA0IF0gPSB0MTIgKiBkZXRJbnY7XG5cdFx0dGVbIDUgXSA9ICggbjEzICogbjM0ICogbjQxIC0gbjE0ICogbjMzICogbjQxICsgbjE0ICogbjMxICogbjQzIC0gbjExICogbjM0ICogbjQzIC0gbjEzICogbjMxICogbjQ0ICsgbjExICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDYgXSA9ICggbjE0ICogbjMyICogbjQxIC0gbjEyICogbjM0ICogbjQxIC0gbjE0ICogbjMxICogbjQyICsgbjExICogbjM0ICogbjQyICsgbjEyICogbjMxICogbjQ0IC0gbjExICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDcgXSA9ICggbjEyICogbjMzICogbjQxIC0gbjEzICogbjMyICogbjQxICsgbjEzICogbjMxICogbjQyIC0gbjExICogbjMzICogbjQyIC0gbjEyICogbjMxICogbjQzICsgbjExICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgOCBdID0gdDEzICogZGV0SW52O1xuXHRcdHRlWyA5IF0gPSAoIG4xNCAqIG4yMyAqIG40MSAtIG4xMyAqIG4yNCAqIG40MSAtIG4xNCAqIG4yMSAqIG40MyArIG4xMSAqIG4yNCAqIG40MyArIG4xMyAqIG4yMSAqIG40NCAtIG4xMSAqIG4yMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAxMCBdID0gKCBuMTIgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjIgKiBuNDEgKyBuMTQgKiBuMjEgKiBuNDIgLSBuMTEgKiBuMjQgKiBuNDIgLSBuMTIgKiBuMjEgKiBuNDQgKyBuMTEgKiBuMjIgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTEgXSA9ICggbjEzICogbjIyICogbjQxIC0gbjEyICogbjIzICogbjQxIC0gbjEzICogbjIxICogbjQyICsgbjExICogbjIzICogbjQyICsgbjEyICogbjIxICogbjQzIC0gbjExICogbjIyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMTIgXSA9IHQxNCAqIGRldEludjtcblx0XHR0ZVsgMTMgXSA9ICggbjEzICogbjI0ICogbjMxIC0gbjE0ICogbjIzICogbjMxICsgbjE0ICogbjIxICogbjMzIC0gbjExICogbjI0ICogbjMzIC0gbjEzICogbjIxICogbjM0ICsgbjExICogbjIzICogbjM0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDE0IF0gPSAoIG4xNCAqIG4yMiAqIG4zMSAtIG4xMiAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMSAqIG4zMiArIG4xMSAqIG4yNCAqIG4zMiArIG4xMiAqIG4yMSAqIG4zNCAtIG4xMSAqIG4yMiAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNSBdID0gKCBuMTIgKiBuMjMgKiBuMzEgLSBuMTMgKiBuMjIgKiBuMzEgKyBuMTMgKiBuMjEgKiBuMzIgLSBuMTEgKiBuMjMgKiBuMzIgLSBuMTIgKiBuMjEgKiBuMzMgKyBuMTEgKiBuMjIgKiBuMzMgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2NhbGU6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIHggPSB2LngsIHkgPSB2LnksIHogPSB2Lno7XG5cblx0XHR0ZVsgMCBdICo9IHg7IHRlWyA0IF0gKj0geTsgdGVbIDggXSAqPSB6O1xuXHRcdHRlWyAxIF0gKj0geDsgdGVbIDUgXSAqPSB5OyB0ZVsgOSBdICo9IHo7XG5cdFx0dGVbIDIgXSAqPSB4OyB0ZVsgNiBdICo9IHk7IHRlWyAxMCBdICo9IHo7XG5cdFx0dGVbIDMgXSAqPSB4OyB0ZVsgNyBdICo9IHk7IHRlWyAxMSBdICo9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE1heFNjYWxlT25BeGlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHNjYWxlWFNxID0gdGVbIDAgXSAqIHRlWyAwIF0gKyB0ZVsgMSBdICogdGVbIDEgXSArIHRlWyAyIF0gKiB0ZVsgMiBdO1xuXHRcdHZhciBzY2FsZVlTcSA9IHRlWyA0IF0gKiB0ZVsgNCBdICsgdGVbIDUgXSAqIHRlWyA1IF0gKyB0ZVsgNiBdICogdGVbIDYgXTtcblx0XHR2YXIgc2NhbGVaU3EgPSB0ZVsgOCBdICogdGVbIDggXSArIHRlWyA5IF0gKiB0ZVsgOSBdICsgdGVbIDEwIF0gKiB0ZVsgMTAgXTtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIE1hdGgubWF4KCBzY2FsZVhTcSwgc2NhbGVZU3EsIHNjYWxlWlNxICkgKTtcblxuXHR9LFxuXG5cdG1ha2VUcmFuc2xhdGlvbjogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIHgsXG5cdFx0XHQwLCAxLCAwLCB5LFxuXHRcdFx0MCwgMCwgMSwgeixcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvblg6IGZ1bmN0aW9uICggdGhldGEgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIGMsIC0gcywgMCxcblx0XHRcdDAsIHMsIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25ZOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdCBjLCAwLCBzLCAwLFxuXHRcdFx0IDAsIDEsIDAsIDAsXG5cdFx0XHQtIHMsIDAsIGMsIDAsXG5cdFx0XHQgMCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVJvdGF0aW9uWjogZnVuY3Rpb24gKCB0aGV0YSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRjLCAtIHMsIDAsIDAsXG5cdFx0XHRzLCBjLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvbkF4aXM6IGZ1bmN0aW9uICggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBCYXNlZCBvbiBodHRwOi8vd3d3LmdhbWVkZXYubmV0L3JlZmVyZW5jZS9hcnRpY2xlcy9hcnRpY2xlMTE5OS5hc3BcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIGFuZ2xlICk7XG5cdFx0dmFyIHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblx0XHR2YXIgdCA9IDEgLSBjO1xuXHRcdHZhciB4ID0gYXhpcy54LCB5ID0gYXhpcy55LCB6ID0gYXhpcy56O1xuXHRcdHZhciB0eCA9IHQgKiB4LCB0eSA9IHQgKiB5O1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdHR4ICogeCArIGMsIHR4ICogeSAtIHMgKiB6LCB0eCAqIHogKyBzICogeSwgMCxcblx0XHRcdHR4ICogeSArIHMgKiB6LCB0eSAqIHkgKyBjLCB0eSAqIHogLSBzICogeCwgMCxcblx0XHRcdHR4ICogeiAtIHMgKiB5LCB0eSAqIHogKyBzICogeCwgdCAqIHogKiB6ICsgYywgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHQgcmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlU2NhbGU6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR4LCAwLCAwLCAwLFxuXHRcdFx0MCwgeSwgMCwgMCxcblx0XHRcdDAsIDAsIHosIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlU2hlYXI6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCB5LCB6LCAwLFxuXHRcdFx0eCwgMSwgeiwgMCxcblx0XHRcdHgsIHksIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb21wb3NlOiBmdW5jdGlvbiAoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgeCA9IHF1YXRlcm5pb24uX3gsIHkgPSBxdWF0ZXJuaW9uLl95LCB6ID0gcXVhdGVybmlvbi5feiwgdyA9IHF1YXRlcm5pb24uX3c7XG5cdFx0dmFyIHgyID0geCArIHgsXHR5MiA9IHkgKyB5LCB6MiA9IHogKyB6O1xuXHRcdHZhciB4eCA9IHggKiB4MiwgeHkgPSB4ICogeTIsIHh6ID0geCAqIHoyO1xuXHRcdHZhciB5eSA9IHkgKiB5MiwgeXogPSB5ICogejIsIHp6ID0geiAqIHoyO1xuXHRcdHZhciB3eCA9IHcgKiB4Miwgd3kgPSB3ICogeTIsIHd6ID0gdyAqIHoyO1xuXG5cdFx0dmFyIHN4ID0gc2NhbGUueCwgc3kgPSBzY2FsZS55LCBzeiA9IHNjYWxlLno7XG5cblx0ICAgICAgICB0ZVsgMCBdID0gKCAxIC0gKCB5eSArIHp6ICkgKSAqIHN4O1xuXHQgICAgICAgIHRlWyAxIF0gPSAoIHh5ICsgd3ogKSAqIHN4O1xuXHQgICAgICAgIHRlWyAyIF0gPSAoIHh6IC0gd3kgKSAqIHN4O1xuXHQgICAgICAgIHRlWyAzIF0gPSAwO1xuXG5cdCAgICAgICAgdGVbIDQgXSA9ICggeHkgLSB3eiApICogc3k7XG5cdCAgICAgICAgdGVbIDUgXSA9ICggMSAtICggeHggKyB6eiApICkgKiBzeTtcblx0ICAgICAgICB0ZVsgNiBdID0gKCB5eiArIHd4ICkgKiBzeTtcblx0ICAgICAgICB0ZVsgNyBdID0gMDtcblxuXHQgICAgICAgIHRlWyA4IF0gPSAoIHh6ICsgd3kgKSAqIHN6O1xuXHQgICAgICAgIHRlWyA5IF0gPSAoIHl6IC0gd3ggKSAqIHN6O1xuXHQgICAgICAgIHRlWyAxMCBdID0gKCAxIC0gKCB4eCArIHl5ICkgKSAqIHN6O1xuXHQgICAgICAgIHRlWyAxMSBdID0gMDtcblxuXHQgICAgICAgIHRlWyAxMiBdID0gcG9zaXRpb24ueDtcblx0ICAgICAgICB0ZVsgMTMgXSA9IHBvc2l0aW9uLnk7XG5cdCAgICAgICAgdGVbIDE0IF0gPSBwb3NpdGlvbi56O1xuXHQgICAgICAgIHRlWyAxNSBdID0gMTtcblxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGVjb21wb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBkZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApIHtcblxuXHRcdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdFx0dmFyIHN4ID0gdmVjdG9yLnNldCggdGVbIDAgXSwgdGVbIDEgXSwgdGVbIDIgXSApLmxlbmd0aCgpO1xuXHRcdFx0dmFyIHN5ID0gdmVjdG9yLnNldCggdGVbIDQgXSwgdGVbIDUgXSwgdGVbIDYgXSApLmxlbmd0aCgpO1xuXHRcdFx0dmFyIHN6ID0gdmVjdG9yLnNldCggdGVbIDggXSwgdGVbIDkgXSwgdGVbIDEwIF0gKS5sZW5ndGgoKTtcblxuXHRcdFx0Ly8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcblx0XHRcdHZhciBkZXQgPSB0aGlzLmRldGVybWluYW50KCk7XG5cdFx0XHRpZiAoIGRldCA8IDAgKSBzeCA9IC0gc3g7XG5cblx0XHRcdHBvc2l0aW9uLnggPSB0ZVsgMTIgXTtcblx0XHRcdHBvc2l0aW9uLnkgPSB0ZVsgMTMgXTtcblx0XHRcdHBvc2l0aW9uLnogPSB0ZVsgMTQgXTtcblxuXHRcdFx0Ly8gc2NhbGUgdGhlIHJvdGF0aW9uIHBhcnRcblx0XHRcdG1hdHJpeC5jb3B5KCB0aGlzICk7XG5cblx0XHRcdHZhciBpbnZTWCA9IDEgLyBzeDtcblx0XHRcdHZhciBpbnZTWSA9IDEgLyBzeTtcblx0XHRcdHZhciBpbnZTWiA9IDEgLyBzejtcblxuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyAwIF0gKj0gaW52U1g7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDEgXSAqPSBpbnZTWDtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMiBdICo9IGludlNYO1xuXG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDQgXSAqPSBpbnZTWTtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgNSBdICo9IGludlNZO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyA2IF0gKj0gaW52U1k7XG5cblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgOCBdICo9IGludlNaO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyA5IF0gKj0gaW52U1o7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDEwIF0gKj0gaW52U1o7XG5cblx0XHRcdHF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0c2NhbGUueCA9IHN4O1xuXHRcdFx0c2NhbGUueSA9IHN5O1xuXHRcdFx0c2NhbGUueiA9IHN6O1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdG1ha2VQZXJzcGVjdGl2ZTogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHtcblxuXHRcdGlmICggZmFyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlUGVyc3BlY3RpdmUoKSBoYXMgYmVlbiByZWRlZmluZWQgYW5kIGhhcyBhIG5ldyBzaWduYXR1cmUuIFBsZWFzZSBjaGVjayB0aGUgZG9jcy4nICk7XG5cblx0XHR9XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB4ID0gMiAqIG5lYXIgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdHZhciB5ID0gMiAqIG5lYXIgLyAoIHRvcCAtIGJvdHRvbSApO1xuXG5cdFx0dmFyIGEgPSAoIHJpZ2h0ICsgbGVmdCApIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgYiA9ICggdG9wICsgYm90dG9tICkgLyAoIHRvcCAtIGJvdHRvbSApO1xuXHRcdHZhciBjID0gLSAoIGZhciArIG5lYXIgKSAvICggZmFyIC0gbmVhciApO1xuXHRcdHZhciBkID0gLSAyICogZmFyICogbmVhciAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0dGVbIDAgXSA9IHg7XHR0ZVsgNCBdID0gMDtcdHRlWyA4IF0gPSBhO1x0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxIF0gPSAwO1x0dGVbIDUgXSA9IHk7XHR0ZVsgOSBdID0gYjtcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMiBdID0gMDtcdHRlWyA2IF0gPSAwO1x0dGVbIDEwIF0gPSBjO1x0dGVbIDE0IF0gPSBkO1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IC0gMTtcdHRlWyAxNSBdID0gMDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZU9ydGhvZ3JhcGhpYzogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIHcgPSAxLjAgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdHZhciBoID0gMS4wIC8gKCB0b3AgLSBib3R0b20gKTtcblx0XHR2YXIgcCA9IDEuMCAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0dmFyIHggPSAoIHJpZ2h0ICsgbGVmdCApICogdztcblx0XHR2YXIgeSA9ICggdG9wICsgYm90dG9tICkgKiBoO1xuXHRcdHZhciB6ID0gKCBmYXIgKyBuZWFyICkgKiBwO1xuXG5cdFx0dGVbIDAgXSA9IDIgKiB3O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gMDtcdHRlWyAxMiBdID0gLSB4O1xuXHRcdHRlWyAxIF0gPSAwO1x0dGVbIDUgXSA9IDIgKiBoO1x0dGVbIDkgXSA9IDA7XHR0ZVsgMTMgXSA9IC0geTtcblx0XHR0ZVsgMiBdID0gMDtcdHRlWyA2IF0gPSAwO1x0dGVbIDEwIF0gPSAtIDIgKiBwO1x0dGVbIDE0IF0gPSAtIHo7XG5cdFx0dGVbIDMgXSA9IDA7XHR0ZVsgNyBdID0gMDtcdHRlWyAxMSBdID0gMDtcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIG1lID0gbWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgMTY7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRlWyAwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRlWyAyIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRlWyAzIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgNCBdID0gdGVbIDQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNSBdID0gdGVbIDUgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNiBdID0gdGVbIDYgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNyBdID0gdGVbIDcgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA5IF0gPSB0ZVsgOSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMCBdID0gdGVbIDEwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDExIF0gPSB0ZVsgMTEgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAxMiBdID0gdGVbIDEyIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEzIF0gPSB0ZVsgMTMgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTQgXSA9IHRlWyAxNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxNSBdID0gdGVbIDE1IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBRdWF0ZXJuaW9uKCB4LCB5LCB6LCB3ICkge1xuXG5cdHRoaXMuX3ggPSB4IHx8IDA7XG5cdHRoaXMuX3kgPSB5IHx8IDA7XG5cdHRoaXMuX3ogPSB6IHx8IDA7XG5cdHRoaXMuX3cgPSAoIHcgIT09IHVuZGVmaW5lZCApID8gdyA6IDE7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUXVhdGVybmlvbiwge1xuXG5cdHNsZXJwOiBmdW5jdGlvbiAoIHFhLCBxYiwgcW0sIHQgKSB7XG5cblx0XHRyZXR1cm4gcW0uY29weSggcWEgKS5zbGVycCggcWIsIHQgKTtcblxuXHR9LFxuXG5cdHNsZXJwRmxhdDogZnVuY3Rpb24gKCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSwgdCApIHtcblxuXHRcdC8vIGZ1enotZnJlZSwgYXJyYXktYmFzZWQgUXVhdGVybmlvbiBTTEVSUCBvcGVyYXRpb25cblxuXHRcdHZhciB4MCA9IHNyYzBbIHNyY09mZnNldDAgKyAwIF0sXG5cdFx0XHR5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF0sXG5cdFx0XHR6MCA9IHNyYzBbIHNyY09mZnNldDAgKyAyIF0sXG5cdFx0XHR3MCA9IHNyYzBbIHNyY09mZnNldDAgKyAzIF0sXG5cblx0XHRcdHgxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDAgXSxcblx0XHRcdHkxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDEgXSxcblx0XHRcdHoxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDIgXSxcblx0XHRcdHcxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDMgXTtcblxuXHRcdGlmICggdzAgIT09IHcxIHx8IHgwICE9PSB4MSB8fCB5MCAhPT0geTEgfHwgejAgIT09IHoxICkge1xuXG5cdFx0XHR2YXIgcyA9IDEgLSB0LFxuXG5cdFx0XHRcdGNvcyA9IHgwICogeDEgKyB5MCAqIHkxICsgejAgKiB6MSArIHcwICogdzEsXG5cblx0XHRcdFx0ZGlyID0gKCBjb3MgPj0gMCA/IDEgOiAtIDEgKSxcblx0XHRcdFx0c3FyU2luID0gMSAtIGNvcyAqIGNvcztcblxuXHRcdFx0Ly8gU2tpcCB0aGUgU2xlcnAgZm9yIHRpbnkgc3RlcHMgdG8gYXZvaWQgbnVtZXJpYyBwcm9ibGVtczpcblx0XHRcdGlmICggc3FyU2luID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0dmFyIHNpbiA9IE1hdGguc3FydCggc3FyU2luICksXG5cdFx0XHRcdFx0bGVuID0gTWF0aC5hdGFuMiggc2luLCBjb3MgKiBkaXIgKTtcblxuXHRcdFx0XHRzID0gTWF0aC5zaW4oIHMgKiBsZW4gKSAvIHNpbjtcblx0XHRcdFx0dCA9IE1hdGguc2luKCB0ICogbGVuICkgLyBzaW47XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHREaXIgPSB0ICogZGlyO1xuXG5cdFx0XHR4MCA9IHgwICogcyArIHgxICogdERpcjtcblx0XHRcdHkwID0geTAgKiBzICsgeTEgKiB0RGlyO1xuXHRcdFx0ejAgPSB6MCAqIHMgKyB6MSAqIHREaXI7XG5cdFx0XHR3MCA9IHcwICogcyArIHcxICogdERpcjtcblxuXHRcdFx0Ly8gTm9ybWFsaXplIGluIGNhc2Ugd2UganVzdCBkaWQgYSBsZXJwOlxuXHRcdFx0aWYgKCBzID09PSAxIC0gdCApIHtcblxuXHRcdFx0XHR2YXIgZiA9IDEgLyBNYXRoLnNxcnQoIHgwICogeDAgKyB5MCAqIHkwICsgejAgKiB6MCArIHcwICogdzAgKTtcblxuXHRcdFx0XHR4MCAqPSBmO1xuXHRcdFx0XHR5MCAqPSBmO1xuXHRcdFx0XHR6MCAqPSBmO1xuXHRcdFx0XHR3MCAqPSBmO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRkc3RbIGRzdE9mZnNldCBdID0geDA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzA7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBRdWF0ZXJuaW9uLnByb3RvdHlwZSwge1xuXG5cdHg6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feDtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSB2YWx1ZTtcblx0XHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0eToge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl95O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feSA9IHZhbHVlO1xuXHRcdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR6OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3o7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl96ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHc6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fdztcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSB2YWx1ZTtcblx0XHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBRdWF0ZXJuaW9uLnByb3RvdHlwZSwge1xuXG5cdGlzUXVhdGVybmlvbjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX3cgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggcXVhdGVybmlvbiApIHtcblxuXHRcdHRoaXMuX3ggPSBxdWF0ZXJuaW9uLng7XG5cdFx0dGhpcy5feSA9IHF1YXRlcm5pb24ueTtcblx0XHR0aGlzLl96ID0gcXVhdGVybmlvbi56O1xuXHRcdHRoaXMuX3cgPSBxdWF0ZXJuaW9uLnc7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyLCB1cGRhdGUgKSB7XG5cblx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdH1cblxuXHRcdHZhciB4ID0gZXVsZXIuX3gsIHkgPSBldWxlci5feSwgeiA9IGV1bGVyLl96LCBvcmRlciA9IGV1bGVyLm9yZGVyO1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5tYXRod29ya3MuY29tL21hdGxhYmNlbnRyYWwvZmlsZWV4Y2hhbmdlL1xuXHRcdC8vIFx0MjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMvXG5cdFx0Ly9cdGNvbnRlbnQvU3BpbkNhbGMubVxuXG5cdFx0dmFyIGNvcyA9IE1hdGguY29zO1xuXHRcdHZhciBzaW4gPSBNYXRoLnNpbjtcblxuXHRcdHZhciBjMSA9IGNvcyggeCAvIDIgKTtcblx0XHR2YXIgYzIgPSBjb3MoIHkgLyAyICk7XG5cdFx0dmFyIGMzID0gY29zKCB6IC8gMiApO1xuXG5cdFx0dmFyIHMxID0gc2luKCB4IC8gMiApO1xuXHRcdHZhciBzMiA9IHNpbiggeSAvIDIgKTtcblx0XHR2YXIgczMgPSBzaW4oIHogLyAyICk7XG5cblx0XHRpZiAoIG9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVhaJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWlhZJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWllYJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVpYJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWFpZJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlICE9PSBmYWxzZSApIHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHZhciBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcblx0XHR0aGlzLl96ID0gYXhpcy56ICogcztcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR2YXIgdGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdLFxuXG5cdFx0XHR0cmFjZSA9IG0xMSArIG0yMiArIG0zMyxcblx0XHRcdHM7XG5cblx0XHRpZiAoIHRyYWNlID4gMCApIHtcblxuXHRcdFx0cyA9IDAuNSAvIE1hdGguc3FydCggdHJhY2UgKyAxLjAgKTtcblxuXHRcdFx0dGhpcy5fdyA9IDAuMjUgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTMyIC0gbTIzICkgKiBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTEzIC0gbTMxICkgKiBzO1xuXHRcdFx0dGhpcy5feiA9ICggbTIxIC0gbTEyICkgKiBzO1xuXG5cdFx0fSBlbHNlIGlmICggbTExID4gbTIyICYmIG0xMSA+IG0zMyApIHtcblxuXHRcdFx0cyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTExIC0gbTIyIC0gbTMzICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0zMiAtIG0yMyApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAwLjI1ICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMiArIG0yMSApIC8gcztcblx0XHRcdHRoaXMuX3ogPSAoIG0xMyArIG0zMSApIC8gcztcblxuXHRcdH0gZWxzZSBpZiAoIG0yMiA+IG0zMyApIHtcblxuXHRcdFx0cyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTIyIC0gbTExIC0gbTMzICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0xMyAtIG0zMSApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0xMiArIG0yMSApIC8gcztcblx0XHRcdHRoaXMuX3kgPSAwLjI1ICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMyArIG0zMiApIC8gcztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0zMyAtIG0xMSAtIG0yMiApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMjEgLSBtMTIgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gMC4yNSAqIHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVVuaXRWZWN0b3JzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWRcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHI7XG5cblx0XHR2YXIgRVBTID0gMC4wMDAwMDE7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbVVuaXRWZWN0b3JzKCB2RnJvbSwgdlRvICkge1xuXG5cdFx0XHRpZiAoIHYxID09PSB1bmRlZmluZWQgKSB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTtcblxuXHRcdFx0aWYgKCByIDwgRVBTICkge1xuXG5cdFx0XHRcdHIgPSAwO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIHZGcm9tLnggKSA+IE1hdGguYWJzKCB2RnJvbS56ICkgKSB7XG5cblx0XHRcdFx0XHR2MS5zZXQoIC0gdkZyb20ueSwgdkZyb20ueCwgMCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR2MS5zZXQoIDAsIC0gdkZyb20ueiwgdkZyb20ueSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2MS5jcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl94ID0gdjEueDtcblx0XHRcdHRoaXMuX3kgPSB2MS55O1xuXHRcdFx0dGhpcy5feiA9IHYxLno7XG5cdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhbmdsZVRvOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHRyZXR1cm4gMiAqIE1hdGguYWNvcyggTWF0aC5hYnMoIF9NYXRoLmNsYW1wKCB0aGlzLmRvdCggcSApLCAtIDEsIDEgKSApICk7XG5cblx0fSxcblxuXHRyb3RhdGVUb3dhcmRzOiBmdW5jdGlvbiAoIHEsIHN0ZXAgKSB7XG5cblx0XHR2YXIgYW5nbGUgPSB0aGlzLmFuZ2xlVG8oIHEgKTtcblxuXHRcdGlmICggYW5nbGUgPT09IDAgKSByZXR1cm4gdGhpcztcblxuXHRcdHZhciB0ID0gTWF0aC5taW4oIDEsIHN0ZXAgLyBhbmdsZSApO1xuXG5cdFx0dGhpcy5zbGVycCggcSwgdCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpbnZlcnNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBxdWF0ZXJuaW9uIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0cmV0dXJuIHRoaXMuY29uanVnYXRlKCk7XG5cblx0fSxcblxuXHRjb25qdWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuX3ggKj0gLSAxO1xuXHRcdHRoaXMuX3kgKj0gLSAxO1xuXHRcdHRoaXMuX3ogKj0gLSAxO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB2Ll94ICsgdGhpcy5feSAqIHYuX3kgKyB0aGlzLl96ICogdi5feiArIHRoaXMuX3cgKiB2Ll93O1xuXG5cdH0sXG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdztcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3cgKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGwgPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0aWYgKCBsID09PSAwICkge1xuXG5cdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdHRoaXMuX3kgPSAwO1xuXHRcdFx0dGhpcy5feiA9IDA7XG5cdFx0XHR0aGlzLl93ID0gMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGwgPSAxIC8gbDtcblxuXHRcdFx0dGhpcy5feCA9IHRoaXMuX3ggKiBsO1xuXHRcdFx0dGhpcy5feSA9IHRoaXMuX3kgKiBsO1xuXHRcdFx0dGhpcy5feiA9IHRoaXMuX3ogKiBsO1xuXHRcdFx0dGhpcy5fdyA9IHRoaXMuX3cgKiBsO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHEsIHAgKSB7XG5cblx0XHRpZiAoIHAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApO1xuXG5cdH0sXG5cblx0cHJlbXVsdGlwbHk6IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHEsIHRoaXMgKTtcblxuXHR9LFxuXG5cdG11bHRpcGx5UXVhdGVybmlvbnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdC8vIGZyb20gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9jb2RlL2luZGV4Lmh0bVxuXG5cdFx0dmFyIHFheCA9IGEuX3gsIHFheSA9IGEuX3ksIHFheiA9IGEuX3osIHFhdyA9IGEuX3c7XG5cdFx0dmFyIHFieCA9IGIuX3gsIHFieSA9IGIuX3ksIHFieiA9IGIuX3osIHFidyA9IGIuX3c7XG5cblx0XHR0aGlzLl94ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xuXHRcdHRoaXMuX3kgPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XG5cdFx0dGhpcy5feiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDtcblx0XHR0aGlzLl93ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNsZXJwOiBmdW5jdGlvbiAoIHFiLCB0ICkge1xuXG5cdFx0aWYgKCB0ID09PSAwICkgcmV0dXJuIHRoaXM7XG5cdFx0aWYgKCB0ID09PSAxICkgcmV0dXJuIHRoaXMuY29weSggcWIgKTtcblxuXHRcdHZhciB4ID0gdGhpcy5feCwgeSA9IHRoaXMuX3ksIHogPSB0aGlzLl96LCB3ID0gdGhpcy5fdztcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cblx0XHR2YXIgY29zSGFsZlRoZXRhID0gdyAqIHFiLl93ICsgeCAqIHFiLl94ICsgeSAqIHFiLl95ICsgeiAqIHFiLl96O1xuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPCAwICkge1xuXG5cdFx0XHR0aGlzLl93ID0gLSBxYi5fdztcblx0XHRcdHRoaXMuX3ggPSAtIHFiLl94O1xuXHRcdFx0dGhpcy5feSA9IC0gcWIuX3k7XG5cdFx0XHR0aGlzLl96ID0gLSBxYi5fejtcblxuXHRcdFx0Y29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA+PSAxLjAgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSB3O1xuXHRcdFx0dGhpcy5feCA9IHg7XG5cdFx0XHR0aGlzLl95ID0geTtcblx0XHRcdHRoaXMuX3ogPSB6O1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHZhciBzcXJTaW5IYWxmVGhldGEgPSAxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGE7XG5cblx0XHRpZiAoIHNxclNpbkhhbGZUaGV0YSA8PSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0dmFyIHMgPSAxIC0gdDtcblx0XHRcdHRoaXMuX3cgPSBzICogdyArIHQgKiB0aGlzLl93O1xuXHRcdFx0dGhpcy5feCA9IHMgKiB4ICsgdCAqIHRoaXMuX3g7XG5cdFx0XHR0aGlzLl95ID0gcyAqIHkgKyB0ICogdGhpcy5feTtcblx0XHRcdHRoaXMuX3ogPSBzICogeiArIHQgKiB0aGlzLl96O1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcblxuXHRcdH1cblxuXHRcdHZhciBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApO1xuXHRcdHZhciBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKCBzaW5IYWxmVGhldGEsIGNvc0hhbGZUaGV0YSApO1xuXHRcdHZhciByYXRpb0EgPSBNYXRoLnNpbiggKCAxIC0gdCApICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGEsXG5cdFx0XHRyYXRpb0IgPSBNYXRoLnNpbiggdCAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhO1xuXG5cdFx0dGhpcy5fdyA9ICggdyAqIHJhdGlvQSArIHRoaXMuX3cgKiByYXRpb0IgKTtcblx0XHR0aGlzLl94ID0gKCB4ICogcmF0aW9BICsgdGhpcy5feCAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3kgPSAoIHkgKiByYXRpb0EgKyB0aGlzLl95ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feiA9ICggeiAqIHJhdGlvQSArIHRoaXMuX3ogKiByYXRpb0IgKTtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggcXVhdGVybmlvbiApIHtcblxuXHRcdHJldHVybiAoIHF1YXRlcm5pb24uX3ggPT09IHRoaXMuX3ggKSAmJiAoIHF1YXRlcm5pb24uX3kgPT09IHRoaXMuX3kgKSAmJiAoIHF1YXRlcm5pb24uX3ogPT09IHRoaXMuX3ogKSAmJiAoIHF1YXRlcm5pb24uX3cgPT09IHRoaXMuX3cgKTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLl94ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMuX3kgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMuX3ogPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXHRcdHRoaXMuX3cgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLl94O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLl95O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLl96O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLl93O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0b25DaGFuZ2U6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0b25DaGFuZ2VDYWxsYmFjazogZnVuY3Rpb24gKCkge31cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGtpbGUgLyBodHRwOi8va2lsZS5zdHJhdmFnYW56YS5vcmcvXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBWZWN0b3IzKCB4LCB5LCB6ICkge1xuXG5cdHRoaXMueCA9IHggfHwgMDtcblx0dGhpcy55ID0geSB8fCAwO1xuXHR0aGlzLnogPSB6IHx8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yMy5wcm90b3R5cGUsIHtcblxuXHRpc1ZlY3RvcjM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cdFx0dGhpcy56ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cdFx0dGhpcy56ICs9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblx0XHR0aGlzLnogKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggLT0gcztcblx0XHR0aGlzLnkgLT0gcztcblx0XHR0aGlzLnogLT0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAqPSB2Lng7XG5cdFx0dGhpcy55ICo9IHYueTtcblx0XHR0aGlzLnogKj0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKiBiLng7XG5cdFx0dGhpcy55ID0gYS55ICogYi55O1xuXHRcdHRoaXMueiA9IGEueiAqIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlFdWxlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGFwcGx5RXVsZXIoIGV1bGVyICkge1xuXG5cdFx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IC5hcHBseUV1bGVyKCkgbm93IGV4cGVjdHMgYW4gRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggZXVsZXIgKSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YXBwbHlBeGlzQW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhcHBseU1hdHJpeDM6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHZhciB3ID0gMSAvICggZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKTtcblxuXHRcdHRoaXMueCA9ICggZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSApICogdztcblx0XHR0aGlzLnkgPSAoIGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKSAqIHc7XG5cdFx0dGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlRdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgcXggPSBxLngsIHF5ID0gcS55LCBxeiA9IHEueiwgcXcgPSBxLnc7XG5cblx0XHQvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxuXG5cdFx0dmFyIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuXHRcdHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcblx0XHR2YXIgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG5cdFx0dmFyIGl3ID0gLSBxeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cblx0XHQvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cblx0XHR0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5O1xuXHRcdHRoaXMueSA9IGl5ICogcXcgKyBpdyAqIC0gcXkgKyBpeiAqIC0gcXggLSBpeCAqIC0gcXo7XG5cdFx0dGhpcy56ID0gaXogKiBxdyArIGl3ICogLSBxeiArIGl4ICogLSBxeSAtIGl5ICogLSBxeDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cHJvamVjdDogZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fSxcblxuXHR1bnByb2plY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVucHJvamVjdCggY2FtZXJhICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIG1hdHJpeC5nZXRJbnZlcnNlKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zZm9ybURpcmVjdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gaW5wdXQ6IFRIUkVFLk1hdHJpeDQgYWZmaW5lIG1hdHJpeFxuXHRcdC8vIHZlY3RvciBpbnRlcnByZXRlZCBhcyBhIGRpcmVjdGlvblxuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHRkaXZpZGU6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCAvPSB2Lng7XG5cdFx0dGhpcy55IC89IHYueTtcblx0XHR0aGlzLnogLz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9LFxuXG5cdG1pbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1heDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcFNjYWxhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1pbiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG1heCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0XHRtaW4uc2V0KCBtaW5WYWwsIG1pblZhbCwgbWluVmFsICk7XG5cdFx0XHRtYXguc2V0KCBtYXhWYWwsIG1heFZhbCwgbWF4VmFsICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmNsYW1wKCBtaW4sIG1heCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2xhbXBMZW5ndGg6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHR2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApO1xuXG5cdH0sXG5cblx0Zmxvb3I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjZWlsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5jZWlsKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgucm91bmQoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gKCB0aGlzLnogPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueiApIDogTWF0aC5mbG9vciggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYuejtcblxuXHR9LFxuXG5cdC8vIFRPRE8gbGVuZ3RoU3F1YXJlZD9cblxuXHRsZW5ndGhTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMuejtcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICk7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fSxcblxuXHRzZXRMZW5ndGg6IGZ1bmN0aW9uICggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdjIsIHYxICkubXVsdGlwbHlTY2FsYXIoIGFscGhhICkuYWRkKCB2MSApO1xuXG5cdH0sXG5cblx0Y3Jvc3M6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuY3Jvc3MoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5jcm9zc1ZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB0aGlzLCB2ICk7XG5cblx0fSxcblxuXHRjcm9zc1ZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHZhciBheCA9IGEueCwgYXkgPSBhLnksIGF6ID0gYS56O1xuXHRcdHZhciBieCA9IGIueCwgYnkgPSBiLnksIGJ6ID0gYi56O1xuXG5cdFx0dGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnk7XG5cdFx0dGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7XG5cdFx0dGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHByb2plY3RPblZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHR2YXIgc2NhbGFyID0gdmVjdG9yLmRvdCggdGhpcyApIC8gdmVjdG9yLmxlbmd0aFNxKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5jb3B5KCB2ZWN0b3IgKS5tdWx0aXBseVNjYWxhciggc2NhbGFyICk7XG5cblx0fSxcblxuXHRwcm9qZWN0T25QbGFuZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwcm9qZWN0T25QbGFuZSggcGxhbmVOb3JtYWwgKSB7XG5cblx0XHRcdHYxLmNvcHkoIHRoaXMgKS5wcm9qZWN0T25WZWN0b3IoIHBsYW5lTm9ybWFsICk7XG5cblx0XHRcdHJldHVybiB0aGlzLnN1YiggdjEgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJlZmxlY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHJlZmxlY3QgaW5jaWRlbnQgdmVjdG9yIG9mZiBwbGFuZSBvcnRob2dvbmFsIHRvIG5vcm1hbFxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmVmbGVjdCggbm9ybWFsICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zdWIoIHYxLmNvcHkoIG5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAyICogdGhpcy5kb3QoIG5vcm1hbCApICkgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFuZ2xlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyAoIE1hdGguc3FydCggdGhpcy5sZW5ndGhTcSgpICogdi5sZW5ndGhTcSgpICkgKTtcblxuXHRcdC8vIGNsYW1wLCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zXG5cblx0XHRyZXR1cm4gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggdGhldGEsIC0gMSwgMSApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9TcXVhcmVkOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgZHggPSB0aGlzLnggLSB2LngsIGR5ID0gdGhpcy55IC0gdi55LCBkeiA9IHRoaXMueiAtIHYuejtcblxuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHo7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApICsgTWF0aC5hYnMoIHRoaXMueiAtIHYueiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbVNwaGVyaWNhbDogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVNwaGVyaWNhbENvb3Jkcyggcy5yYWRpdXMsIHMucGhpLCBzLnRoZXRhICk7XG5cblx0fSxcblxuXHRzZXRGcm9tU3BoZXJpY2FsQ29vcmRzOiBmdW5jdGlvbiAoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHRcdHZhciBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7XG5cblx0XHR0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNvcyggcGhpICkgKiByYWRpdXM7XG5cdFx0dGhpcy56ID0gc2luUGhpUmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21DeWxpbmRyaWNhbDogZnVuY3Rpb24gKCBjICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCBjLnJhZGl1cywgYy50aGV0YSwgYy55ICk7XG5cblx0fSxcblxuXHRzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHM6IGZ1bmN0aW9uICggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMueCA9IHJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhQb3NpdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMTIgXTtcblx0XHR0aGlzLnkgPSBlWyAxMyBdO1xuXHRcdHRoaXMueiA9IGVbIDE0IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhTY2FsZTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHN4ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAwICkubGVuZ3RoKCk7XG5cdFx0dmFyIHN5ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0dmFyIHN6ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7XG5cblx0XHR0aGlzLnggPSBzeDtcblx0XHR0aGlzLnkgPSBzeTtcblx0XHR0aGlzLnogPSBzejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU1hdHJpeENvbHVtbjogZnVuY3Rpb24gKCBtLCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiA0ICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy56ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fSxcblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBNYXRyaXgzKCkge1xuXG5cdHRoaXMuZWxlbWVudHMgPSBbXG5cblx0XHQxLCAwLCAwLFxuXHRcdDAsIDEsIDAsXG5cdFx0MCwgMCwgMVxuXG5cdF07XG5cblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMCApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXgzOiB0aGUgY29uc3RydWN0b3Igbm8gbG9uZ2VyIHJlYWRzIGFyZ3VtZW50cy4gdXNlIC5zZXQoKSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTWF0cml4My5wcm90b3R5cGUsIHtcblxuXHRpc01hdHJpeDM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG4xMSwgbjEyLCBuMTMsIG4yMSwgbjIyLCBuMjMsIG4zMSwgbjMyLCBuMzMgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG4xMTsgdGVbIDEgXSA9IG4yMTsgdGVbIDIgXSA9IG4zMTtcblx0XHR0ZVsgMyBdID0gbjEyOyB0ZVsgNCBdID0gbjIyOyB0ZVsgNSBdID0gbjMyO1xuXHRcdHRlWyA2IF0gPSBuMTM7IHRlWyA3IF0gPSBuMjM7IHRlWyA4IF0gPSBuMzM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGlkZW50aXR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCxcblx0XHRcdDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdO1xuXHRcdHRlWyAzIF0gPSBtZVsgMyBdOyB0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07XG5cdFx0dGVbIDYgXSA9IG1lWyA2IF07IHRlWyA3IF0gPSBtZVsgNyBdOyB0ZVsgOCBdID0gbWVbIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0bWVbIDAgXSwgbWVbIDQgXSwgbWVbIDggXSxcblx0XHRcdG1lWyAxIF0sIG1lWyA1IF0sIG1lWyA5IF0sXG5cdFx0XHRtZVsgMiBdLCBtZVsgNiBdLCBtZVsgMTAgXVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlUb0J1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0djEueCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHRcdHYxLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaSApO1xuXHRcdFx0XHR2MS56ID0gYXR0cmlidXRlLmdldFooIGkgKTtcblxuXHRcdFx0XHR2MS5hcHBseU1hdHJpeDMoIHRoaXMgKTtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuc2V0WFlaKCBpLCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fSxcblxuXHRwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlNYXRyaWNlczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dmFyIGFlID0gYS5lbGVtZW50cztcblx0XHR2YXIgYmUgPSBiLmVsZW1lbnRzO1xuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYTExID0gYWVbIDAgXSwgYTEyID0gYWVbIDMgXSwgYTEzID0gYWVbIDYgXTtcblx0XHR2YXIgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDQgXSwgYTIzID0gYWVbIDcgXTtcblx0XHR2YXIgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDUgXSwgYTMzID0gYWVbIDggXTtcblxuXHRcdHZhciBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgMyBdLCBiMTMgPSBiZVsgNiBdO1xuXHRcdHZhciBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNCBdLCBiMjMgPSBiZVsgNyBdO1xuXHRcdHZhciBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNSBdLCBiMzMgPSBiZVsgOCBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMTtcblx0XHR0ZVsgMyBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuXHRcdHRlWyA2IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzM7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xuXHRcdHRlWyA0IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzI7XG5cdFx0dGVbIDcgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMztcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7XG5cdFx0dGVbIDUgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMjtcblx0XHR0ZVsgOCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDMgXSAqPSBzOyB0ZVsgNiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNCBdICo9IHM7IHRlWyA3IF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDggXSAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkZXRlcm1pbmFudDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhID0gdGVbIDAgXSwgYiA9IHRlWyAxIF0sIGMgPSB0ZVsgMiBdLFxuXHRcdFx0ZCA9IHRlWyAzIF0sIGUgPSB0ZVsgNCBdLCBmID0gdGVbIDUgXSxcblx0XHRcdGcgPSB0ZVsgNiBdLCBoID0gdGVbIDcgXSwgaSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYSAqIGUgKiBpIC0gYSAqIGYgKiBoIC0gYiAqIGQgKiBpICsgYiAqIGYgKiBnICsgYyAqIGQgKiBoIC0gYyAqIGUgKiBnO1xuXG5cdH0sXG5cblx0Z2V0SW52ZXJzZTogZnVuY3Rpb24gKCBtYXRyaXgsIHRocm93T25EZWdlbmVyYXRlICkge1xuXG5cdFx0aWYgKCBtYXRyaXggJiYgbWF0cml4LmlzTWF0cml4NCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIG5vIGxvbmdlciB0YWtlcyBhIE1hdHJpeDQgYXJndW1lbnQuXCIgKTtcblxuXHRcdH1cblxuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cyxcblx0XHRcdHRlID0gdGhpcy5lbGVtZW50cyxcblxuXHRcdFx0bjExID0gbWVbIDAgXSwgbjIxID0gbWVbIDEgXSwgbjMxID0gbWVbIDIgXSxcblx0XHRcdG4xMiA9IG1lWyAzIF0sIG4yMiA9IG1lWyA0IF0sIG4zMiA9IG1lWyA1IF0sXG5cdFx0XHRuMTMgPSBtZVsgNiBdLCBuMjMgPSBtZVsgNyBdLCBuMzMgPSBtZVsgOCBdLFxuXG5cdFx0XHR0MTEgPSBuMzMgKiBuMjIgLSBuMzIgKiBuMjMsXG5cdFx0XHR0MTIgPSBuMzIgKiBuMTMgLSBuMzMgKiBuMTIsXG5cdFx0XHR0MTMgPSBuMjMgKiBuMTIgLSBuMjIgKiBuMTMsXG5cblx0XHRcdGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMztcblxuXHRcdGlmICggZGV0ID09PSAwICkge1xuXG5cdFx0XHR2YXIgbXNnID0gXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIjtcblxuXHRcdFx0aWYgKCB0aHJvd09uRGVnZW5lcmF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggbXNnICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuaWRlbnRpdHkoKTtcblxuXHRcdH1cblxuXHRcdHZhciBkZXRJbnYgPSAxIC8gZGV0O1xuXG5cdFx0dGVbIDAgXSA9IHQxMSAqIGRldEludjtcblx0XHR0ZVsgMSBdID0gKCBuMzEgKiBuMjMgLSBuMzMgKiBuMjEgKSAqIGRldEludjtcblx0XHR0ZVsgMiBdID0gKCBuMzIgKiBuMjEgLSBuMzEgKiBuMjIgKSAqIGRldEludjtcblxuXHRcdHRlWyAzIF0gPSB0MTIgKiBkZXRJbnY7XG5cdFx0dGVbIDQgXSA9ICggbjMzICogbjExIC0gbjMxICogbjEzICkgKiBkZXRJbnY7XG5cdFx0dGVbIDUgXSA9ICggbjMxICogbjEyIC0gbjMyICogbjExICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNiBdID0gdDEzICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4yMSAqIG4xMyAtIG4yMyAqIG4xMSApICogZGV0SW52O1xuXHRcdHRlWyA4IF0gPSAoIG4yMiAqIG4xMSAtIG4yMSAqIG4xMiApICogZGV0SW52O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmFuc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0bXAsIG0gPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dG1wID0gbVsgMSBdOyBtWyAxIF0gPSBtWyAzIF07IG1bIDMgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyAyIF07IG1bIDIgXSA9IG1bIDYgXTsgbVsgNiBdID0gdG1wO1xuXHRcdHRtcCA9IG1bIDUgXTsgbVsgNSBdID0gbVsgNyBdOyBtWyA3IF0gPSB0bXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE5vcm1hbE1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXg0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeDQoIG1hdHJpeDQgKS5nZXRJbnZlcnNlKCB0aGlzICkudHJhbnNwb3NlKCk7XG5cblx0fSxcblxuXHR0cmFuc3Bvc2VJbnRvQXJyYXk6IGZ1bmN0aW9uICggciApIHtcblxuXHRcdHZhciBtID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHJbIDAgXSA9IG1bIDAgXTtcblx0XHRyWyAxIF0gPSBtWyAzIF07XG5cdFx0clsgMiBdID0gbVsgNiBdO1xuXHRcdHJbIDMgXSA9IG1bIDEgXTtcblx0XHRyWyA0IF0gPSBtWyA0IF07XG5cdFx0clsgNSBdID0gbVsgNyBdO1xuXHRcdHJbIDYgXSA9IG1bIDIgXTtcblx0XHRyWyA3IF0gPSBtWyA1IF07XG5cdFx0clsgOCBdID0gbVsgOCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRVdlRyYW5zZm9ybTogZnVuY3Rpb24gKCB0eCwgdHksIHN4LCBzeSwgcm90YXRpb24sIGN4LCBjeSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7XG5cdFx0dmFyIHMgPSBNYXRoLnNpbiggcm90YXRpb24gKTtcblxuXHRcdHRoaXMuc2V0KFxuXHRcdFx0c3ggKiBjLCBzeCAqIHMsIC0gc3ggKiAoIGMgKiBjeCArIHMgKiBjeSApICsgY3ggKyB0eCxcblx0XHRcdC0gc3kgKiBzLCBzeSAqIGMsIC0gc3kgKiAoIC0gcyAqIGN4ICsgYyAqIGN5ICkgKyBjeSArIHR5LFxuXHRcdFx0MCwgMCwgMVxuXHRcdCk7XG5cblx0fSxcblxuXHRzY2FsZTogZnVuY3Rpb24gKCBzeCwgc3kgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSAqPSBzeDsgdGVbIDMgXSAqPSBzeDsgdGVbIDYgXSAqPSBzeDtcblx0XHR0ZVsgMSBdICo9IHN5OyB0ZVsgNCBdICo9IHN5OyB0ZVsgNyBdICo9IHN5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGU6IGZ1bmN0aW9uICggdGhldGEgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIGExMSA9IHRlWyAwIF0sIGExMiA9IHRlWyAzIF0sIGExMyA9IHRlWyA2IF07XG5cdFx0dmFyIGEyMSA9IHRlWyAxIF0sIGEyMiA9IHRlWyA0IF0sIGEyMyA9IHRlWyA3IF07XG5cblx0XHR0ZVsgMCBdID0gYyAqIGExMSArIHMgKiBhMjE7XG5cdFx0dGVbIDMgXSA9IGMgKiBhMTIgKyBzICogYTIyO1xuXHRcdHRlWyA2IF0gPSBjICogYTEzICsgcyAqIGEyMztcblxuXHRcdHRlWyAxIF0gPSAtIHMgKiBhMTEgKyBjICogYTIxO1xuXHRcdHRlWyA0IF0gPSAtIHMgKiBhMTIgKyBjICogYTIyO1xuXHRcdHRlWyA3IF0gPSAtIHMgKiBhMTMgKyBjICogYTIzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggdHgsIHR5ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKz0gdHggKiB0ZVsgMiBdOyB0ZVsgMyBdICs9IHR4ICogdGVbIDUgXTsgdGVbIDYgXSArPSB0eCAqIHRlWyA4IF07XG5cdFx0dGVbIDEgXSArPSB0eSAqIHRlWyAyIF07IHRlWyA0IF0gKz0gdHkgKiB0ZVsgNSBdOyB0ZVsgNyBdICs9IHR5ICogdGVbIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIG1lID0gbWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0aWYgKCB0ZVsgaSBdICE9PSBtZVsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0ZVsgMiBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRlWyAzIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDQgXSA9IHRlWyA0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgNiBdID0gdGVbIDYgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNyBdID0gdGVbIDcgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgOCBdID0gdGVbIDggXTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cbiAqL1xuXG52YXIgX2NhbnZhcztcblxudmFyIEltYWdlVXRpbHMgPSB7XG5cblx0Z2V0RGF0YVVSTDogZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdHZhciBjYW52YXM7XG5cblx0XHRpZiAoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCA9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH0gZWxzZSBpZiAoIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB7XG5cblx0XHRcdGNhbnZhcyA9IGltYWdlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdjYW52YXMnICk7XG5cblx0XHRcdF9jYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdF9jYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuXG5cdFx0XHR2YXIgY29udGV4dCA9IF9jYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXG5cdFx0XHRpZiAoIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VEYXRhICkge1xuXG5cdFx0XHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKCBpbWFnZSwgMCwgMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhbnZhcyA9IF9jYW52YXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNhbnZhcy53aWR0aCA+IDIwNDggfHwgY2FudmFzLmhlaWdodCA+IDIwNDggKSB7XG5cblx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvanBlZycsIDAuNiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoICdpbWFnZS9wbmcnICk7XG5cblx0XHR9XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrL1xuICovXG5cbnZhciB0ZXh0dXJlSWQgPSAwO1xuXG5mdW5jdGlvbiBUZXh0dXJlKCBpbWFnZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IHRleHR1cmVJZCArKyB9ICk7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cblx0dGhpcy5pbWFnZSA9IGltYWdlICE9PSB1bmRlZmluZWQgPyBpbWFnZSA6IFRleHR1cmUuREVGQVVMVF9JTUFHRTtcblx0dGhpcy5taXBtYXBzID0gW107XG5cblx0dGhpcy5tYXBwaW5nID0gbWFwcGluZyAhPT0gdW5kZWZpbmVkID8gbWFwcGluZyA6IFRleHR1cmUuREVGQVVMVF9NQVBQSU5HO1xuXG5cdHRoaXMud3JhcFMgPSB3cmFwUyAhPT0gdW5kZWZpbmVkID8gd3JhcFMgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXHR0aGlzLndyYXBUID0gd3JhcFQgIT09IHVuZGVmaW5lZCA/IHdyYXBUIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyO1xuXG5cdHRoaXMuYW5pc290cm9weSA9IGFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCA/IGFuaXNvdHJvcHkgOiAxO1xuXG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBSR0JBRm9ybWF0O1xuXHR0aGlzLnR5cGUgPSB0eXBlICE9PSB1bmRlZmluZWQgPyB0eXBlIDogVW5zaWduZWRCeXRlVHlwZTtcblxuXHR0aGlzLm9mZnNldCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XG5cdHRoaXMucmVwZWF0ID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xuXHR0aGlzLnJvdGF0aW9uID0gMDtcblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xuXHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSB0cnVlO1xuXHR0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcblx0dGhpcy5mbGlwWSA9IHRydWU7XG5cdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gNDtcdC8vIHZhbGlkIHZhbHVlczogMSwgMiwgNCwgOCAoc2VlIGh0dHA6Ly93d3cua2hyb25vcy5vcmcvb3BlbmdsZXMvc2RrL2RvY3MvbWFuL3hodG1sL2dsUGl4ZWxTdG9yZWkueG1sKVxuXG5cdC8vIFZhbHVlcyBvZiBlbmNvZGluZyAhPT0gVEhSRUUuTGluZWFyRW5jb2Rpbmcgb25seSBzdXBwb3J0ZWQgb24gbWFwLCBlbnZNYXAgYW5kIGVtaXNzaXZlTWFwLlxuXHQvL1xuXHQvLyBBbHNvIGNoYW5naW5nIHRoZSBlbmNvZGluZyBhZnRlciBhbHJlYWR5IHVzZWQgYnkgYSBNYXRlcmlhbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IG1ha2UgdGhlIE1hdGVyaWFsXG5cdC8vIHVwZGF0ZS4gIFlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBNYXRlcmlhbC5uZWVkc1VwZGF0ZSB0byB0cmlnZ2VyIGl0IHRvIHJlY29tcGlsZS5cblx0dGhpcy5lbmNvZGluZyA9IGVuY29kaW5nICE9PSB1bmRlZmluZWQgPyBlbmNvZGluZyA6IExpbmVhckVuY29kaW5nO1xuXG5cdHRoaXMudmVyc2lvbiA9IDA7XG5cdHRoaXMub25VcGRhdGUgPSBudWxsO1xuXG59XG5cblRleHR1cmUuREVGQVVMVF9JTUFHRSA9IHVuZGVmaW5lZDtcblRleHR1cmUuREVGQVVMVF9NQVBQSU5HID0gVVZNYXBwaW5nO1xuXG5UZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBUZXh0dXJlLFxuXG5cdGlzVGV4dHVyZTogdHJ1ZSxcblxuXHR1cGRhdGVNYXRyaXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubWF0cml4LnNldFV2VHJhbnNmb3JtKCB0aGlzLm9mZnNldC54LCB0aGlzLm9mZnNldC55LCB0aGlzLnJlcGVhdC54LCB0aGlzLnJlcGVhdC55LCB0aGlzLnJvdGF0aW9uLCB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55ICk7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMuaW1hZ2UgPSBzb3VyY2UuaW1hZ2U7XG5cdFx0dGhpcy5taXBtYXBzID0gc291cmNlLm1pcG1hcHMuc2xpY2UoIDAgKTtcblxuXHRcdHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nO1xuXG5cdFx0dGhpcy53cmFwUyA9IHNvdXJjZS53cmFwUztcblx0XHR0aGlzLndyYXBUID0gc291cmNlLndyYXBUO1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBzb3VyY2UubWFnRmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gc291cmNlLm1pbkZpbHRlcjtcblxuXHRcdHRoaXMuYW5pc290cm9weSA9IHNvdXJjZS5hbmlzb3Ryb3B5O1xuXG5cdFx0dGhpcy5mb3JtYXQgPSBzb3VyY2UuZm9ybWF0O1xuXHRcdHRoaXMudHlwZSA9IHNvdXJjZS50eXBlO1xuXG5cdFx0dGhpcy5vZmZzZXQuY29weSggc291cmNlLm9mZnNldCApO1xuXHRcdHRoaXMucmVwZWF0LmNvcHkoIHNvdXJjZS5yZXBlYXQgKTtcblx0XHR0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7XG5cdFx0dGhpcy5yb3RhdGlvbiA9IHNvdXJjZS5yb3RhdGlvbjtcblxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gc291cmNlLmdlbmVyYXRlTWlwbWFwcztcblx0XHR0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbHlBbHBoYTtcblx0XHR0aGlzLmZsaXBZID0gc291cmNlLmZsaXBZO1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gc291cmNlLnVucGFja0FsaWdubWVudDtcblx0XHR0aGlzLmVuY29kaW5nID0gc291cmNlLmVuY29kaW5nO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgJiYgbWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG91dHB1dCA9IHtcblxuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnVGV4dHVyZScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ1RleHR1cmUudG9KU09OJ1xuXHRcdFx0fSxcblxuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxuXHRcdFx0bmFtZTogdGhpcy5uYW1lLFxuXG5cdFx0XHRtYXBwaW5nOiB0aGlzLm1hcHBpbmcsXG5cblx0XHRcdHJlcGVhdDogWyB0aGlzLnJlcGVhdC54LCB0aGlzLnJlcGVhdC55IF0sXG5cdFx0XHRvZmZzZXQ6IFsgdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSBdLFxuXHRcdFx0Y2VudGVyOiBbIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgXSxcblx0XHRcdHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLFxuXG5cdFx0XHR3cmFwOiBbIHRoaXMud3JhcFMsIHRoaXMud3JhcFQgXSxcblxuXHRcdFx0Zm9ybWF0OiB0aGlzLmZvcm1hdCxcblx0XHRcdG1pbkZpbHRlcjogdGhpcy5taW5GaWx0ZXIsXG5cdFx0XHRtYWdGaWx0ZXI6IHRoaXMubWFnRmlsdGVyLFxuXHRcdFx0YW5pc290cm9weTogdGhpcy5hbmlzb3Ryb3B5LFxuXG5cdFx0XHRmbGlwWTogdGhpcy5mbGlwWVxuXG5cdFx0fTtcblxuXHRcdGlmICggdGhpcy5pbWFnZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBUT0RPOiBNb3ZlIHRvIFRIUkVFLkltYWdlXG5cblx0XHRcdHZhciBpbWFnZSA9IHRoaXMuaW1hZ2U7XG5cblx0XHRcdGlmICggaW1hZ2UudXVpZCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGltYWdlLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTsgLy8gVUdIXG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhIGlzUm9vdE9iamVjdCAmJiBtZXRhLmltYWdlc1sgaW1hZ2UudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIHVybDtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGltYWdlICkgKSB7XG5cblx0XHRcdFx0XHQvLyBwcm9jZXNzIGFycmF5IG9mIGltYWdlcyBlLmcuIEN1YmVUZXh0dXJlXG5cblx0XHRcdFx0XHR1cmwgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGltYWdlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHVybC5wdXNoKCBJbWFnZVV0aWxzLmdldERhdGFVUkwoIGltYWdlWyBpIF0gKSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBwcm9jZXNzIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0dXJsID0gSW1hZ2VVdGlscy5nZXREYXRhVVJMKCBpbWFnZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtZXRhLmltYWdlc1sgaW1hZ2UudXVpZCBdID0ge1xuXHRcdFx0XHRcdHV1aWQ6IGltYWdlLnV1aWQsXG5cdFx0XHRcdFx0dXJsOiB1cmxcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXRwdXQuaW1hZ2UgPSBpbWFnZS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0bWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fSxcblxuXHR0cmFuc2Zvcm1VdjogZnVuY3Rpb24gKCB1diApIHtcblxuXHRcdGlmICggdGhpcy5tYXBwaW5nICE9PSBVVk1hcHBpbmcgKSByZXR1cm4gdXY7XG5cblx0XHR1di5hcHBseU1hdHJpeDMoIHRoaXMubWF0cml4ICk7XG5cblx0XHRpZiAoIHV2LnggPCAwIHx8IHV2LnggPiAxICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBTICkge1xuXG5cdFx0XHRcdGNhc2UgUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCA8IDAgPyAwIDogMTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di54ICkgJSAyICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdHV2LnggPSBNYXRoLmNlaWwoIHV2LnggKSAtIHV2Lng7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB1di55IDwgMCB8fCB1di55ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwVCApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueSApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di55ID0gTWF0aC5jZWlsKCB1di55ICkgLSB1di55O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5mbGlwWSApIHtcblxuXHRcdFx0dXYueSA9IDEgLSB1di55O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHV2O1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIFRleHR1cmUucHJvdG90eXBlLCBcIm5lZWRzVXBkYXRlXCIsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBWZWN0b3I0KCB4LCB5LCB6LCB3ICkge1xuXG5cdHRoaXMueCA9IHggfHwgMDtcblx0dGhpcy55ID0geSB8fCAwO1xuXHR0aGlzLnogPSB6IHx8IDA7XG5cdHRoaXMudyA9ICggdyAhPT0gdW5kZWZpbmVkICkgPyB3IDogMTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBWZWN0b3I0LnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yNDogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXHRcdHRoaXMudyA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXHRcdHRoaXMueiA9IHNjYWxhcjtcblx0XHR0aGlzLncgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggeiApIHtcblxuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFc6IGZ1bmN0aW9uICggdyApIHtcblxuXHRcdHRoaXMudyA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAzOiB0aGlzLncgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0Y2FzZSAyOiByZXR1cm4gdGhpcy56O1xuXHRcdFx0Y2FzZSAzOiByZXR1cm4gdGhpcy53O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cdFx0dGhpcy53ID0gKCB2LncgIT09IHVuZGVmaW5lZCApID8gdi53IDogMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmFkZFZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblx0XHR0aGlzLnogKz0gdi56O1xuXHRcdHRoaXMudyArPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cdFx0dGhpcy56ICs9IHM7XG5cdFx0dGhpcy53ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICsgYi56O1xuXHRcdHRoaXMudyA9IGEudyArIGIudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblx0XHR0aGlzLnogKz0gdi56ICogcztcblx0XHR0aGlzLncgKz0gdi53ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXHRcdHRoaXMudyAtPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cdFx0dGhpcy56IC09IHM7XG5cdFx0dGhpcy53IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xuXHRcdHRoaXMudyA9IGEudyAtIGIudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXHRcdHRoaXMueiAqPSBzY2FsYXI7XG5cdFx0dGhpcy53ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMueiwgdyA9IHRoaXMudztcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICogdztcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICogdztcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSAqIHc7XG5cdFx0dGhpcy53ID0gZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKiB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9LFxuXG5cdHNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvcXVhdGVybmlvblRvQW5nbGUvaW5kZXguaHRtXG5cblx0XHQvLyBxIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy53ID0gMiAqIE1hdGguYWNvcyggcS53ICk7XG5cblx0XHR2YXIgcyA9IE1hdGguc3FydCggMSAtIHEudyAqIHEudyApO1xuXG5cdFx0aWYgKCBzIDwgMC4wMDAxICkge1xuXG5cdFx0XHR0aGlzLnggPSAxO1xuXHRcdFx0dGhpcy55ID0gMDtcblx0XHRcdHRoaXMueiA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnggPSBxLnggLyBzO1xuXHRcdFx0dGhpcy55ID0gcS55IC8gcztcblx0XHRcdHRoaXMueiA9IHEueiAvIHM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvQW5nbGUvaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dmFyIGFuZ2xlLCB4LCB5LCB6LFx0XHQvLyB2YXJpYWJsZXMgZm9yIHJlc3VsdFxuXHRcdFx0ZXBzaWxvbiA9IDAuMDEsXHRcdC8vIG1hcmdpbiB0byBhbGxvdyBmb3Igcm91bmRpbmcgZXJyb3JzXG5cdFx0XHRlcHNpbG9uMiA9IDAuMSxcdFx0Ly8gbWFyZ2luIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gMCBhbmQgMTgwIGRlZ3JlZXNcblxuXHRcdFx0dGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xuXG5cdFx0aWYgKCAoIE1hdGguYWJzKCBtMTIgLSBtMjEgKSA8IGVwc2lsb24gKSAmJlxuXHRcdCAgICAgKCBNYXRoLmFicyggbTEzIC0gbTMxICkgPCBlcHNpbG9uICkgJiZcblx0XHQgICAgICggTWF0aC5hYnMoIG0yMyAtIG0zMiApIDwgZXBzaWxvbiApICkge1xuXG5cdFx0XHQvLyBzaW5ndWxhcml0eSBmb3VuZFxuXHRcdFx0Ly8gZmlyc3QgY2hlY2sgZm9yIGlkZW50aXR5IG1hdHJpeCB3aGljaCBtdXN0IGhhdmUgKzEgZm9yIGFsbCB0ZXJtc1xuXHRcdFx0Ly8gaW4gbGVhZGluZyBkaWFnb25hbCBhbmQgemVybyBpbiBvdGhlciB0ZXJtc1xuXG5cdFx0XHRpZiAoICggTWF0aC5hYnMoIG0xMiArIG0yMSApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMTMgKyBtMzEgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTIzICsgbTMyICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0xMSArIG0yMiArIG0zMyAtIDMgKSA8IGVwc2lsb24yICkgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBzaW5ndWxhcml0eSBpcyBpZGVudGl0eSBtYXRyaXggc28gYW5nbGUgPSAwXG5cblx0XHRcdFx0dGhpcy5zZXQoIDEsIDAsIDAsIDAgKTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpczsgLy8gemVybyBhbmdsZSwgYXJiaXRyYXJ5IGF4aXNcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UgdGhpcyBzaW5ndWxhcml0eSBpcyBhbmdsZSA9IDE4MFxuXG5cdFx0XHRhbmdsZSA9IE1hdGguUEk7XG5cblx0XHRcdHZhciB4eCA9ICggbTExICsgMSApIC8gMjtcblx0XHRcdHZhciB5eSA9ICggbTIyICsgMSApIC8gMjtcblx0XHRcdHZhciB6eiA9ICggbTMzICsgMSApIC8gMjtcblx0XHRcdHZhciB4eSA9ICggbTEyICsgbTIxICkgLyA0O1xuXHRcdFx0dmFyIHh6ID0gKCBtMTMgKyBtMzEgKSAvIDQ7XG5cdFx0XHR2YXIgeXogPSAoIG0yMyArIG0zMiApIC8gNDtcblxuXHRcdFx0aWYgKCAoIHh4ID4geXkgKSAmJiAoIHh4ID4genogKSApIHtcblxuXHRcdFx0XHQvLyBtMTEgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxuXG5cdFx0XHRcdGlmICggeHggPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDA7XG5cdFx0XHRcdFx0eSA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eCA9IE1hdGguc3FydCggeHggKTtcblx0XHRcdFx0XHR5ID0geHkgLyB4O1xuXHRcdFx0XHRcdHogPSB4eiAvIHg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB5eSA+IHp6ICkge1xuXG5cdFx0XHRcdC8vIG0yMiBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXG5cblx0XHRcdFx0aWYgKCB5eSA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eSA9IDA7XG5cdFx0XHRcdFx0eiA9IDAuNzA3MTA2NzgxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR5ID0gTWF0aC5zcXJ0KCB5eSApO1xuXHRcdFx0XHRcdHggPSB4eSAvIHk7XG5cdFx0XHRcdFx0eiA9IHl6IC8geTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gbTMzIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0gc28gYmFzZSByZXN1bHQgb24gdGhpc1xuXG5cdFx0XHRcdGlmICggenogPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR6ID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eiA9IE1hdGguc3FydCggenogKTtcblx0XHRcdFx0XHR4ID0geHogLyB6O1xuXHRcdFx0XHRcdHkgPSB5eiAvIHo7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0KCB4LCB5LCB6LCBhbmdsZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpczsgLy8gcmV0dXJuIDE4MCBkZWcgcm90YXRpb25cblxuXHRcdH1cblxuXHRcdC8vIGFzIHdlIGhhdmUgcmVhY2hlZCBoZXJlIHRoZXJlIGFyZSBubyBzaW5ndWxhcml0aWVzIHNvIHdlIGNhbiBoYW5kbGUgbm9ybWFsbHlcblxuXHRcdHZhciBzID0gTWF0aC5zcXJ0KCAoIG0zMiAtIG0yMyApICogKCBtMzIgLSBtMjMgKSArXG5cdFx0ICAgICAgICAgICAgICAgICAgICggbTEzIC0gbTMxICkgKiAoIG0xMyAtIG0zMSApICtcblx0XHQgICAgICAgICAgICAgICAgICAgKCBtMjEgLSBtMTIgKSAqICggbTIxIC0gbTEyICkgKTsgLy8gdXNlZCB0byBub3JtYWxpemVcblxuXHRcdGlmICggTWF0aC5hYnMoIHMgKSA8IDAuMDAxICkgcyA9IDE7XG5cblx0XHQvLyBwcmV2ZW50IGRpdmlkZSBieSB6ZXJvLCBzaG91bGQgbm90IGhhcHBlbiBpZiBtYXRyaXggaXMgb3J0aG9nb25hbCBhbmQgc2hvdWxkIGJlXG5cdFx0Ly8gY2F1Z2h0IGJ5IHNpbmd1bGFyaXR5IHRlc3QgYWJvdmUsIGJ1dCBJJ3ZlIGxlZnQgaXQgaW4ganVzdCBpbiBjYXNlXG5cblx0XHR0aGlzLnggPSAoIG0zMiAtIG0yMyApIC8gcztcblx0XHR0aGlzLnkgPSAoIG0xMyAtIG0zMSApIC8gcztcblx0XHR0aGlzLnogPSAoIG0yMSAtIG0xMiApIC8gcztcblx0XHR0aGlzLncgPSBNYXRoLmFjb3MoICggbTExICsgbTIyICsgbTMzIC0gMSApIC8gMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtaW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApO1xuXHRcdHRoaXMudyA9IE1hdGgubWluKCB0aGlzLncsIHYudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYXg6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCB0aGlzLncsIHYudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluLnosIE1hdGgubWluKCBtYXgueiwgdGhpcy56ICkgKTtcblx0XHR0aGlzLncgPSBNYXRoLm1heCggbWluLncsIE1hdGgubWluKCBtYXgudywgdGhpcy53ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXBTY2FsYXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBtaW4sIG1heDtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHRcdGlmICggbWluID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bWluID0gbmV3IFZlY3RvcjQoKTtcblx0XHRcdFx0bWF4ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtaW4uc2V0KCBtaW5WYWwsIG1pblZhbCwgbWluVmFsLCBtaW5WYWwgKTtcblx0XHRcdG1heC5zZXQoIG1heFZhbCwgbWF4VmFsLCBtYXhWYWwsIG1heFZhbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jbGFtcCggbWluLCBtYXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9LFxuXG5cdGZsb29yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLmZsb29yKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VpbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5jZWlsKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgucm91bmQoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGgucm91bmQoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gKCB0aGlzLnogPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueiApIDogTWF0aC5mbG9vciggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gKCB0aGlzLncgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMudyApIDogTWF0aC5mbG9vciggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cdFx0dGhpcy53ID0gLSB0aGlzLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYueiArIHRoaXMudyAqIHYudztcblxuXHR9LFxuXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuXG5cdH0sXG5cblx0bGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncgKTtcblxuXHR9LFxuXG5cdG1hbmhhdHRhbkxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKSArIE1hdGguYWJzKCB0aGlzLncgKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7XG5cdFx0dGhpcy53ICs9ICggdi53IC0gdGhpcy53ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycFZlY3RvcnM6IGZ1bmN0aW9uICggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYyLCB2MSApLm11bHRpcGx5U2NhbGFyKCBhbHBoYSApLmFkZCggdjEgKTtcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSAmJiAoIHYueiA9PT0gdGhpcy56ICkgJiYgKCB2LncgPT09IHRoaXMudyApICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy56ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLncgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy53O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cdFx0dGhpcy53ID0gYXR0cmlidXRlLmdldFcoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBNYXJpdXMgS2ludGVsIC8gaHR0cHM6Ly9naXRodWIuY29tL2tpbnRlbFxuICovXG5cbi8qXG4gSW4gb3B0aW9ucywgd2UgY2FuIHNwZWNpZnk6XG4gKiBUZXh0dXJlIHBhcmFtZXRlcnMgZm9yIGFuIGF1dG8tZ2VuZXJhdGVkIHRhcmdldCB0ZXh0dXJlXG4gKiBkZXB0aEJ1ZmZlci9zdGVuY2lsQnVmZmVyOiBCb29sZWFucyB0byBpbmRpY2F0ZSBpZiB3ZSBzaG91bGQgZ2VuZXJhdGUgdGhlc2UgYnVmZmVyc1xuKi9cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdHRoaXMud2lkdGggPSB3aWR0aDtcblx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0dGhpcy5zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblx0dGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlO1xuXG5cdHRoaXMudmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdHRoaXMudGV4dHVyZSA9IG5ldyBUZXh0dXJlKCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuZW5jb2RpbmcgKTtcblxuXHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzIDogZmFsc2U7XG5cdHRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSBvcHRpb25zLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cblx0dGhpcy5kZXB0aEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhCdWZmZXIgOiB0cnVlO1xuXHR0aGlzLnN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLnN0ZW5jaWxCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciA6IHRydWU7XG5cdHRoaXMuZGVwdGhUZXh0dXJlID0gb3B0aW9ucy5kZXB0aFRleHR1cmUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhUZXh0dXJlIDogbnVsbDtcblxufVxuXG5XZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogV2ViR0xSZW5kZXJUYXJnZXQsXG5cblx0aXNXZWJHTFJlbmRlclRhcmdldDogdHJ1ZSxcblxuXHRzZXRTaXplOiBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRpZiAoIHRoaXMud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBoZWlnaHQgKSB7XG5cblx0XHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cblx0XHR0aGlzLnZpZXdwb3J0LmNvcHkoIHNvdXJjZS52aWV3cG9ydCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gc291cmNlLnRleHR1cmUuY2xvbmUoKTtcblxuXHRcdHRoaXMuZGVwdGhCdWZmZXIgPSBzb3VyY2UuZGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7XG5cdFx0dGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJUYXJnZXRDdWJlKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdFdlYkdMUmVuZGVyVGFyZ2V0LmNhbGwoIHRoaXMsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxuXHR0aGlzLmFjdGl2ZUN1YmVGYWNlID0gMDsgLy8gUFggMCwgTlggMSwgUFkgMiwgTlkgMywgUFogNCwgTlogNVxuXHR0aGlzLmFjdGl2ZU1pcE1hcExldmVsID0gMDtcblxufVxuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlICk7XG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2ViR0xSZW5kZXJUYXJnZXRDdWJlO1xuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IGRhdGE6IGRhdGEsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHR0aGlzLnVucGFja0FsaWdubWVudCA9IDE7XG5cbn1cblxuRGF0YVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkRhdGFUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERhdGFUZXh0dXJlO1xuXG5EYXRhVGV4dHVyZS5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gQm94MyggbWluLCBtYXggKSB7XG5cblx0dGhpcy5taW4gPSAoIG1pbiAhPT0gdW5kZWZpbmVkICkgPyBtaW4gOiBuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApO1xuXHR0aGlzLm1heCA9ICggbWF4ICE9PSB1bmRlZmluZWQgKSA/IG1heCA6IG5ldyBWZWN0b3IzKCAtIEluZmluaXR5LCAtIEluZmluaXR5LCAtIEluZmluaXR5ICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQm94My5wcm90b3R5cGUsIHtcblxuXHRpc0JveDM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdHZhciB4ID0gYXJyYXlbIGkgXTtcblx0XHRcdHZhciB5ID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHR2YXIgeiA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRpZiAoIHkgPCBtaW5ZICkgbWluWSA9IHk7XG5cdFx0XHRpZiAoIHogPCBtaW5aICkgbWluWiA9IHo7XG5cblx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcblx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblx0XHRcdGlmICggeiA+IG1heFogKSBtYXhaID0gejtcblxuXHRcdH1cblxuXHRcdHRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApO1xuXHRcdHRoaXMubWF4LnNldCggbWF4WCwgbWF4WSwgbWF4WiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgeCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHR2YXIgeSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7XG5cdFx0XHR2YXIgeiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdGlmICggeiA8IG1pblogKSBtaW5aID0gejtcblxuXHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0aWYgKCB5ID4gbWF4WSApIG1heFkgPSB5O1xuXHRcdFx0aWYgKCB6ID4gbWF4WiApIG1heFogPSB6O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4uc2V0KCBtaW5YLCBtaW5ZLCBtaW5aICk7XG5cdFx0dGhpcy5tYXguc2V0KCBtYXhYLCBtYXhZLCBtYXhaICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdFx0dmFyIGhhbGZTaXplID0gdjEuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRcdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdHJldHVybiB0aGlzLmV4cGFuZEJ5T2JqZWN0KCBvYmplY3QgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5taW4ueCA9IHRoaXMubWluLnkgPSB0aGlzLm1pbi56ID0gKyBJbmZpbml0eTtcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IHRoaXMubWF4LnogPSAtIEluZmluaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXgueCA8IHRoaXMubWluLnggKSB8fCAoIHRoaXMubWF4LnkgPCB0aGlzLm1pbi55ICkgfHwgKCB0aGlzLm1heC56IDwgdGhpcy5taW4ueiApO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAsIDAgKSA6IHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLm1pbiwgdGhpcy5tYXggKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0fSxcblxuXHRnZXRTaXplOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fSxcblxuXHRleHBhbmRCeVBvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlPYmplY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIENvbXB1dGVzIHRoZSB3b3JsZC1heGlzLWFsaWduZWQgYm91bmRpbmcgYm94IG9mIGFuIG9iamVjdCAoaW5jbHVkaW5nIGl0cyBjaGlsZHJlbiksXG5cdFx0Ly8gYWNjb3VudGluZyBmb3IgYm90aCB0aGUgb2JqZWN0J3MsIGFuZCBjaGlsZHJlbidzLCB3b3JsZCB0cmFuc2Zvcm1zXG5cblx0XHR2YXIgc2NvcGUsIGksIGw7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gdHJhdmVyc2UoIG5vZGUgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IG5vZGUuZ2VvbWV0cnk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0djEuY29weSggdmVydGljZXNbIGkgXSApO1xuXHRcdFx0XHRcdFx0djEuYXBwbHlNYXRyaXg0KCBub2RlLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHYxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaSApLmFwcGx5TWF0cml4NCggbm9kZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBleHBhbmRCeU9iamVjdCggb2JqZWN0ICkge1xuXG5cdFx0XHRzY29wZSA9IHRoaXM7XG5cblx0XHRcdG9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHRvYmplY3QudHJhdmVyc2UoIHRyYXZlcnNlICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgfHxcblx0XHRcdHBvaW50LnogPCB0aGlzLm1pbi56IHx8IHBvaW50LnogPiB0aGlzLm1heC56ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueSAmJlxuXHRcdFx0dGhpcy5taW4ueiA8PSBib3gubWluLnogJiYgYm94Lm1heC56IDw9IHRoaXMubWF4Lno7XG5cblx0fSxcblxuXHRnZXRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRQYXJhbWV0ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KFxuXHRcdFx0KCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLFxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLFxuXHRcdFx0KCBwb2ludC56IC0gdGhpcy5taW4ueiApIC8gKCB0aGlzLm1heC56IC0gdGhpcy5taW4ueiApXG5cdFx0KTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Ly8gdXNpbmcgNiBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnMuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55IHx8XG5cdFx0XHRib3gubWF4LnogPCB0aGlzLm1pbi56IHx8IGJveC5taW4ueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBjbG9zZXN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdFx0Ly8gRmluZCB0aGUgcG9pbnQgb24gdGhlIEFBQkIgY2xvc2VzdCB0byB0aGUgc3BoZXJlIGNlbnRlci5cblx0XHRcdHRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgY2xvc2VzdFBvaW50ICk7XG5cblx0XHRcdC8vIElmIHRoYXQgcG9pbnQgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHRoZSBBQUJCIGFuZCBzcGhlcmUgaW50ZXJzZWN0LlxuXHRcdFx0cmV0dXJuIGNsb3Nlc3RQb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Ly8gV2UgY29tcHV0ZSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkb3QgcHJvZHVjdCB2YWx1ZXMuIElmIHRob3NlIHZhbHVlc1xuXHRcdC8vIGFyZSBvbiB0aGUgc2FtZSBzaWRlIChiYWNrIG9yIGZyb250KSBvZiB0aGUgcGxhbmUsIHRoZW4gdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuXG5cdFx0dmFyIG1pbiwgbWF4O1xuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueCA+IDAgKSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnkgPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5tYXgueTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueiA+IDAgKSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gKCBtaW4gPD0gLSBwbGFuZS5jb25zdGFudCAmJiBtYXggPj0gLSBwbGFuZS5jb25zdGFudCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1RyaWFuZ2xlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyaWFuZ2xlIGNlbnRlcmVkIHZlcnRpY2VzXG5cdFx0dmFyIHYwID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcblx0XHR2YXIgZjAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBmMSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGYyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB0ZXN0QXhpcyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZXh0ZW50cyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdHJpYW5nbGVOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gc2F0Rm9yQXhlcyggYXhlcyApIHtcblxuXHRcdFx0dmFyIGksIGo7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBqID0gYXhlcy5sZW5ndGggLSAzOyBpIDw9IGo7IGkgKz0gMyApIHtcblxuXHRcdFx0XHR0ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTtcblx0XHRcdFx0Ly8gcHJvamVjdCB0aGUgYWFiYiBvbnRvIHRoZSBzZXBlcmF0aW5nIGF4aXNcblx0XHRcdFx0dmFyIHIgPSBleHRlbnRzLnggKiBNYXRoLmFicyggdGVzdEF4aXMueCApICsgZXh0ZW50cy55ICogTWF0aC5hYnMoIHRlc3RBeGlzLnkgKSArIGV4dGVudHMueiAqIE1hdGguYWJzKCB0ZXN0QXhpcy56ICk7XG5cdFx0XHRcdC8vIHByb2plY3QgYWxsIDMgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xuXHRcdFx0XHR2YXIgcDAgPSB2MC5kb3QoIHRlc3RBeGlzICk7XG5cdFx0XHRcdHZhciBwMSA9IHYxLmRvdCggdGVzdEF4aXMgKTtcblx0XHRcdFx0dmFyIHAyID0gdjIuZG90KCB0ZXN0QXhpcyApO1xuXHRcdFx0XHQvLyBhY3R1YWwgdGVzdCwgYmFzaWNhbGx5IHNlZSBpZiBlaXRoZXIgb2YgdGhlIG1vc3QgZXh0cmVtZSBvZiB0aGUgdHJpYW5nbGUgcG9pbnRzIGludGVyc2VjdHMgclxuXHRcdFx0XHRpZiAoIE1hdGgubWF4KCAtIE1hdGgubWF4KCBwMCwgcDEsIHAyICksIE1hdGgubWluKCBwMCwgcDEsIHAyICkgKSA+IHIgKSB7XG5cblx0XHRcdFx0XHQvLyBwb2ludHMgb2YgdGhlIHByb2plY3RlZCB0cmlhbmdsZSBhcmUgb3V0c2lkZSB0aGUgcHJvamVjdGVkIGhhbGYtbGVuZ3RoIG9mIHRoZSBhYWJiXG5cdFx0XHRcdFx0Ly8gdGhlIGF4aXMgaXMgc2VwZXJhdGluZyBhbmQgd2UgY2FuIGV4aXRcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNUcmlhbmdsZSggdHJpYW5nbGUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvbXB1dGUgYm94IGNlbnRlciBhbmQgZXh0ZW50c1xuXHRcdFx0dGhpcy5nZXRDZW50ZXIoIGNlbnRlciApO1xuXHRcdFx0ZXh0ZW50cy5zdWJWZWN0b3JzKCB0aGlzLm1heCwgY2VudGVyICk7XG5cblx0XHRcdC8vIHRyYW5zbGF0ZSB0cmlhbmdsZSB0byBhYWJiIG9yaWdpblxuXHRcdFx0djAuc3ViVmVjdG9ycyggdHJpYW5nbGUuYSwgY2VudGVyICk7XG5cdFx0XHR2MS5zdWJWZWN0b3JzKCB0cmlhbmdsZS5iLCBjZW50ZXIgKTtcblx0XHRcdHYyLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmMsIGNlbnRlciApO1xuXG5cdFx0XHQvLyBjb21wdXRlIGVkZ2UgdmVjdG9ycyBmb3IgdHJpYW5nbGVcblx0XHRcdGYwLnN1YlZlY3RvcnMoIHYxLCB2MCApO1xuXHRcdFx0ZjEuc3ViVmVjdG9ycyggdjIsIHYxICk7XG5cdFx0XHRmMi5zdWJWZWN0b3JzKCB2MCwgdjIgKTtcblxuXHRcdFx0Ly8gdGVzdCBhZ2FpbnN0IGF4ZXMgdGhhdCBhcmUgZ2l2ZW4gYnkgY3Jvc3MgcHJvZHVjdCBjb21iaW5hdGlvbnMgb2YgdGhlIGVkZ2VzIG9mIHRoZSB0cmlhbmdsZSBhbmQgdGhlIGVkZ2VzIG9mIHRoZSBhYWJiXG5cdFx0XHQvLyBtYWtlIGFuIGF4aXMgdGVzdGluZyBvZiBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSBhYWJiIGFnYWluc3QgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgdHJpYW5nbGUgPSA5IGF4aXMgb2Ygc2VwYXJhdGlvblxuXHRcdFx0Ly8gYXhpc19paiA9IHVfaSB4IGZfaiAodTAsIHUxLCB1MiA9IGZhY2Ugbm9ybWFscyBvZiBhYWJiID0geCx5LHogYXhlcyB2ZWN0b3JzIHNpbmNlIGFhYmIgaXMgYXhpcyBhbGlnbmVkKVxuXHRcdFx0dmFyIGF4ZXMgPSBbXG5cdFx0XHRcdDAsIC0gZjAueiwgZjAueSwgMCwgLSBmMS56LCBmMS55LCAwLCAtIGYyLnosIGYyLnksXG5cdFx0XHRcdGYwLnosIDAsIC0gZjAueCwgZjEueiwgMCwgLSBmMS54LCBmMi56LCAwLCAtIGYyLngsXG5cdFx0XHRcdC0gZjAueSwgZjAueCwgMCwgLSBmMS55LCBmMS54LCAwLCAtIGYyLnksIGYyLngsIDBcblx0XHRcdF07XG5cdFx0XHRpZiAoICEgc2F0Rm9yQXhlcyggYXhlcyApICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0ZXN0IDMgZmFjZSBub3JtYWxzIGZyb20gdGhlIGFhYmJcblx0XHRcdGF4ZXMgPSBbIDEsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDEgXTtcblx0XHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZpbmFsbHkgdGVzdGluZyB0aGUgZmFjZSBub3JtYWwgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0XHQvLyB1c2UgYWxyZWFkeSBleGlzdGluZyB0cmlhbmdsZSBlZGdlIHZlY3RvcnMgaGVyZVxuXHRcdFx0dHJpYW5nbGVOb3JtYWwuY3Jvc3NWZWN0b3JzKCBmMCwgZjEgKTtcblx0XHRcdGF4ZXMgPSBbIHRyaWFuZ2xlTm9ybWFsLngsIHRyaWFuZ2xlTm9ybWFsLnksIHRyaWFuZ2xlTm9ybWFsLnogXTtcblx0XHRcdHJldHVybiBzYXRGb3JBeGVzKCBheGVzICk7XG5cblx0XHR9O1xuXG5cdH0gKSgpLFxuXG5cdGNsYW1wUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jbGFtcFBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRcdHZhciBjbGFtcGVkUG9pbnQgPSB2MS5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblx0XHRcdHJldHVybiBjbGFtcGVkUG9pbnQuc3ViKCBwb2ludCApLmxlbmd0aCgpO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0Qm91bmRpbmdTcGhlcmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0Qm91bmRpbmdTcGhlcmUoIHRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuZ2V0Qm91bmRpbmdTcGhlcmUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nZXRDZW50ZXIoIHRhcmdldC5jZW50ZXIgKTtcblxuXHRcdFx0dGFyZ2V0LnJhZGl1cyA9IHRoaXMuZ2V0U2l6ZSggdjEgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHRcdFx0cmV0dXJuIHRhcmdldDtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5tYXgoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcblxuXHRcdC8vIGVuc3VyZSB0aGF0IGlmIHRoZXJlIGlzIG5vIG92ZXJsYXAsIHRoZSByZXN1bHQgaXMgZnVsbHkgZW1wdHksIG5vdCBzbGlnaHRseSBlbXB0eSB3aXRoIG5vbi1pbmYvK2luZiB2YWx1ZXMgdGhhdCB3aWxsIGNhdXNlIHN1YnNlcXVlbmNlIGludGVyc2VjdHMgdG8gZXJyb25lb3VzbHkgcmV0dXJuIHZhbGlkIHZhbHVlcy5cblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkgdGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dW5pb246IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWF4KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBvaW50cyA9IFtcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpLFxuXHRcdFx0bmV3IFZlY3RvcjMoKSxcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpLFxuXHRcdFx0bmV3IFZlY3RvcjMoKSxcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpXG5cdFx0XTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdFx0Ly8gdHJhbnNmb3JtIG9mIGVtcHR5IGJveCBpcyBhbiBlbXB0eSBib3guXG5cdFx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkgcmV0dXJuIHRoaXM7XG5cblx0XHRcdC8vIE5PVEU6IEkgYW0gdXNpbmcgYSBiaW5hcnkgcGF0dGVybiB0byBzcGVjaWZ5IGFsbCAyXjMgY29tYmluYXRpb25zIGJlbG93XG5cdFx0XHRwb2ludHNbIDAgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWluLnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMDBcblx0XHRcdHBvaW50c1sgMSBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMVxuXHRcdFx0cG9pbnRzWyAyIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDEwXG5cdFx0XHRwb2ludHNbIDMgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMTFcblx0XHRcdHBvaW50c1sgNCBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDEwMFxuXHRcdFx0cG9pbnRzWyA1IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAxXG5cdFx0XHRwb2ludHNbIDYgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWF4LnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMTBcblx0XHRcdHBvaW50c1sgNyBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMVxuXG5cdFx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGQoIG9mZnNldCApO1xuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBTcGhlcmUoIGNlbnRlciwgcmFkaXVzICkge1xuXG5cdHRoaXMuY2VudGVyID0gKCBjZW50ZXIgIT09IHVuZGVmaW5lZCApID8gY2VudGVyIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5yYWRpdXMgPSAoIHJhZGl1cyAhPT0gdW5kZWZpbmVkICkgPyByYWRpdXMgOiAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNwaGVyZS5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBjZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJveCA9IG5ldyBCb3gzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbVBvaW50cyggcG9pbnRzLCBvcHRpb25hbENlbnRlciApIHtcblxuXHRcdFx0dmFyIGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG5cdFx0XHRpZiAoIG9wdGlvbmFsQ2VudGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2VudGVyLmNvcHkoIG9wdGlvbmFsQ2VudGVyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ym94LnNldEZyb21Qb2ludHMoIHBvaW50cyApLmdldENlbnRlciggY2VudGVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1heFJhZGl1c1NxID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludHNbIGkgXSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuY29weSggc3BoZXJlLmNlbnRlciApO1xuXHRcdHRoaXMucmFkaXVzID0gc3BoZXJlLnJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiAoIHRoaXMucmFkaXVzIDw9IDAgKTtcblxuXHR9LFxuXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUbyggdGhpcy5jZW50ZXIgKSAtIHRoaXMucmFkaXVzICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHZhciByYWRpdXNTdW0gPSB0aGlzLnJhZGl1cyArIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHJhZGl1c1N1bSAqIHJhZGl1c1N1bSApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNTcGhlcmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNQbGFuZTogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLmNlbnRlciApICkgPD0gdGhpcy5yYWRpdXM7XG5cblx0fSxcblxuXHRjbGFtcFBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgZGVsdGFMZW5ndGhTcSA9IHRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BoZXJlOiAuY2xhbXBQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmNvcHkoIHBvaW50ICk7XG5cblx0XHRpZiAoIGRlbHRhTGVuZ3RoU3EgPiAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApIHtcblxuXHRcdFx0dGFyZ2V0LnN1YiggdGhpcy5jZW50ZXIgKS5ub3JtYWxpemUoKTtcblx0XHRcdHRhcmdldC5tdWx0aXBseVNjYWxhciggdGhpcy5yYWRpdXMgKS5hZGQoIHRoaXMuY2VudGVyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0Z2V0Qm91bmRpbmdCb3g6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BoZXJlOiAuZ2V0Qm91bmRpbmdCb3goKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IEJveDMoKTtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5zZXQoIHRoaXMuY2VudGVyLCB0aGlzLmNlbnRlciApO1xuXHRcdHRhcmdldC5leHBhbmRCeVNjYWxhciggdGhpcy5yYWRpdXMgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLnJhZGl1cyA9IHRoaXMucmFkaXVzICogbWF0cml4LmdldE1heFNjYWxlT25BeGlzKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZXF1YWxzKCB0aGlzLmNlbnRlciApICYmICggc3BoZXJlLnJhZGl1cyA9PT0gdGhpcy5yYWRpdXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gUGxhbmUoIG5vcm1hbCwgY29uc3RhbnQgKSB7XG5cblx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdHRoaXMubm9ybWFsID0gKCBub3JtYWwgIT09IHVuZGVmaW5lZCApID8gbm9ybWFsIDogbmV3IFZlY3RvcjMoIDEsIDAsIDAgKTtcblx0dGhpcy5jb25zdGFudCA9ICggY29uc3RhbnQgIT09IHVuZGVmaW5lZCApID8gY29uc3RhbnQgOiAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFBsYW5lLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBub3JtYWwsIGNvbnN0YW50ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IGNvbnN0YW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnRzOiBmdW5jdGlvbiAoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5zZXQoIHgsIHksIHogKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQ6IGZ1bmN0aW9uICggbm9ybWFsLCBwb2ludCApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSAtIHBvaW50LmRvdCggdGhpcy5ub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNvcGxhbmFyUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCBhLCBiLCBjICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsID0gdjEuc3ViVmVjdG9ycyggYywgYiApLmNyb3NzKCB2Mi5zdWJWZWN0b3JzKCBhLCBiICkgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Ly8gUTogc2hvdWxkIGFuIGVycm9yIGJlIHRocm93biBpZiBub3JtYWwgaXMgemVybyAoZS5nLiBkZWdlbmVyYXRlIHBsYW5lKT9cblxuXHRcdFx0dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggbm9ybWFsLCBhICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBwbGFuZS5ub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gTm90ZTogd2lsbCBsZWFkIHRvIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIHBsYW5lIGlzIGludmFsaWQuXG5cblx0XHR2YXIgaW52ZXJzZU5vcm1hbExlbmd0aCA9IDEuMCAvIHRoaXMubm9ybWFsLmxlbmd0aCgpO1xuXHRcdHRoaXMubm9ybWFsLm11bHRpcGx5U2NhbGFyKCBpbnZlcnNlTm9ybWFsTGVuZ3RoICk7XG5cdFx0dGhpcy5jb25zdGFudCAqPSBpbnZlcnNlTm9ybWFsTGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29uc3RhbnQgKj0gLSAxO1xuXHRcdHRoaXMubm9ybWFsLm5lZ2F0ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWwuZG90KCBwb2ludCApICsgdGhpcy5jb25zdGFudDtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9TcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBzcGhlcmUuY2VudGVyICkgLSBzcGhlcmUucmFkaXVzO1xuXG5cdH0sXG5cblx0cHJvamVjdFBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLnByb2plY3RQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAtIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBwb2ludCApICkuYWRkKCBwb2ludCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RMaW5lKCBsaW5lLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5pbnRlcnNlY3RMaW5lKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGlyZWN0aW9uID0gbGluZS5kZWx0YSggdjEgKTtcblxuXHRcdFx0dmFyIGRlbm9taW5hdG9yID0gdGhpcy5ub3JtYWwuZG90KCBkaXJlY3Rpb24gKTtcblxuXHRcdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luXG5cdFx0XHRcdGlmICggdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVbnN1cmUgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBtZXRob2QgdG8gaGFuZGxlIHRoaXMgY2FzZS5cblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdCA9IC0gKCBsaW5lLnN0YXJ0LmRvdCggdGhpcy5ub3JtYWwgKSArIHRoaXMuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0XHRpZiAoIHQgPCAwIHx8IHQgPiAxICkge1xuXG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBkaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggbGluZS5zdGFydCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0c0xpbmU6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdC8vIE5vdGU6IHRoaXMgdGVzdHMgaWYgYSBsaW5lIGludGVyc2VjdHMgdGhlIHBsYW5lLCBub3Qgd2hldGhlciBpdCAob3IgaXRzIGVuZC1wb2ludHMpIGFyZSBjb3BsYW5hciB3aXRoIGl0LlxuXG5cdFx0dmFyIHN0YXJ0U2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICk7XG5cdFx0dmFyIGVuZFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiAoIHN0YXJ0U2lnbiA8IDAgJiYgZW5kU2lnbiA+IDAgKSB8fCAoIGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDAgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcGxhbmFyUG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5jb3BsYW5hclBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMubm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIC0gdGhpcy5jb25zdGFudCApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXgzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlNYXRyaXg0KCBtYXRyaXgsIG9wdGlvbmFsTm9ybWFsTWF0cml4ICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsTWF0cml4ID0gb3B0aW9uYWxOb3JtYWxNYXRyaXggfHwgbTEuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0dmFyIHJlZmVyZW5jZVBvaW50ID0gdGhpcy5jb3BsYW5hclBvaW50KCB2MSApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRcdHZhciBub3JtYWwgPSB0aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHR0aGlzLmNvbnN0YW50ID0gLSByZWZlcmVuY2VQb2ludC5kb3QoIG5vcm1hbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50IC09IG9mZnNldC5kb3QoIHRoaXMubm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBwbGFuZS5ub3JtYWwuZXF1YWxzKCB0aGlzLm5vcm1hbCApICYmICggcGxhbmUuY29uc3RhbnQgPT09IHRoaXMuY29uc3RhbnQgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBGcnVzdHVtKCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1ICkge1xuXG5cdHRoaXMucGxhbmVzID0gW1xuXG5cdFx0KCBwMCAhPT0gdW5kZWZpbmVkICkgPyBwMCA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDEgIT09IHVuZGVmaW5lZCApID8gcDEgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHAyICE9PSB1bmRlZmluZWQgKSA/IHAyIDogbmV3IFBsYW5lKCksXG5cdFx0KCBwMyAhPT0gdW5kZWZpbmVkICkgPyBwMyA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDQgIT09IHVuZGVmaW5lZCApID8gcDQgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHA1ICE9PSB1bmRlZmluZWQgKSA/IHA1IDogbmV3IFBsYW5lKClcblxuXHRdO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZydXN0dW0ucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgKSB7XG5cblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRwbGFuZXNbIDAgXS5jb3B5KCBwMCApO1xuXHRcdHBsYW5lc1sgMSBdLmNvcHkoIHAxICk7XG5cdFx0cGxhbmVzWyAyIF0uY29weSggcDIgKTtcblx0XHRwbGFuZXNbIDMgXS5jb3B5KCBwMyApO1xuXHRcdHBsYW5lc1sgNCBdLmNvcHkoIHA0ICk7XG5cdFx0cGxhbmVzWyA1IF0uY29weSggcDUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggZnJ1c3R1bSApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdHBsYW5lc1sgaSBdLmNvcHkoIGZydXN0dW0ucGxhbmVzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cdFx0dmFyIG1lMCA9IG1lWyAwIF0sIG1lMSA9IG1lWyAxIF0sIG1lMiA9IG1lWyAyIF0sIG1lMyA9IG1lWyAzIF07XG5cdFx0dmFyIG1lNCA9IG1lWyA0IF0sIG1lNSA9IG1lWyA1IF0sIG1lNiA9IG1lWyA2IF0sIG1lNyA9IG1lWyA3IF07XG5cdFx0dmFyIG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdO1xuXHRcdHZhciBtZTEyID0gbWVbIDEyIF0sIG1lMTMgPSBtZVsgMTMgXSwgbWUxNCA9IG1lWyAxNCBdLCBtZTE1ID0gbWVbIDE1IF07XG5cblx0XHRwbGFuZXNbIDAgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTAsIG1lNyAtIG1lNCwgbWUxMSAtIG1lOCwgbWUxNSAtIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDEgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTAsIG1lNyArIG1lNCwgbWUxMSArIG1lOCwgbWUxNSArIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDIgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSwgbWUxNSArIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDMgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTEsIG1lNyAtIG1lNSwgbWUxMSAtIG1lOSwgbWUxNSAtIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDQgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTIsIG1lNyAtIG1lNiwgbWUxMSAtIG1lMTAsIG1lMTUgLSBtZTE0ICkubm9ybWFsaXplKCk7XG5cdFx0cGxhbmVzWyA1IF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzT2JqZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNPYmplY3QoIG9iamVjdCApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsIClcblx0XHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApXG5cdFx0XHRcdC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcHJpdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c1Nwcml0ZSggc3ByaXRlICkge1xuXG5cdFx0XHRzcGhlcmUuY2VudGVyLnNldCggMCwgMCwgMCApO1xuXHRcdFx0c3BoZXJlLnJhZGl1cyA9IDAuNzA3MTA2NzgxMTg2NTQ3Njtcblx0XHRcdHNwaGVyZS5hcHBseU1hdHJpeDQoIHNwcml0ZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXHRcdHZhciBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xuXHRcdHZhciBuZWdSYWRpdXMgPSAtIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIGNlbnRlciApO1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbmVnUmFkaXVzICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHBsYW5lID0gcGxhbmVzWyBpIF07XG5cblx0XHRcdFx0Ly8gY29ybmVyIGF0IG1heCBkaXN0YW5jZVxuXG5cdFx0XHRcdHAueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5tYXgueCA6IGJveC5taW4ueDtcblx0XHRcdFx0cC55ID0gcGxhbmUubm9ybWFsLnkgPiAwID8gYm94Lm1heC55IDogYm94Lm1pbi55O1xuXHRcdFx0XHRwLnogPSBwbGFuZS5ub3JtYWwueiA+IDAgPyBib3gubWF4LnogOiBib3gubWluLno7XG5cblx0XHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHAgKSA8IDAgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGlmICggcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxufSApO1xuXG52YXIgYWxwaGFtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGFtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGF0ZXN0X2ZyYWdtZW50ID0gXCIjaWZkZWYgQUxQSEFURVNUXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IEFMUEhBVEVTVCApIGRpc2NhcmQ7XFxuI2VuZGlmXCI7XG5cbnZhciBhb21hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdGZsb2F0IGFtYmllbnRPY2NsdXNpb24gPSAoIHRleHR1cmUyRCggYW9NYXAsIHZVdjIgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciAqPSBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGRvdE5WLCBhbWJpZW50T2NjbHVzaW9uLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgYW9tYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBiZWdpbl92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWQgPSB2ZWMzKCBwb3NpdGlvbiApO1wiO1xuXG52YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1wiO1xuXG52YXIgYnNkZnMgPSBcImZsb2F0IHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGNvbnN0IGluIGZsb2F0IGxpZ2h0RGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGN1dG9mZkRpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBkZWNheUV4cG9uZW50ICkge1xcbiNpZiBkZWZpbmVkICggUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUUyApXFxuXFx0ZmxvYXQgZGlzdGFuY2VGYWxsb2ZmID0gMS4wIC8gbWF4KCBwb3coIGxpZ2h0RGlzdGFuY2UsIGRlY2F5RXhwb25lbnQgKSwgMC4wMSApO1xcblxcdGlmKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCApIHtcXG5cXHRcXHRkaXN0YW5jZUZhbGxvZmYgKj0gcG93Miggc2F0dXJhdGUoIDEuMCAtIHBvdzQoIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApICkgKTtcXG5cXHR9XFxuXFx0cmV0dXJuIGRpc3RhbmNlRmFsbG9mZjtcXG4jZWxzZVxcblxcdGlmKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCAmJiBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcblxcdFxcdHJldHVybiBwb3coIHNhdHVyYXRlKCAtbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICsgMS4wICksIGRlY2F5RXhwb25lbnQgKTtcXG5cXHR9XFxuXFx0cmV0dXJuIDEuMDtcXG4jZW5kaWZcXG59XFxudmVjMyBCUkRGX0RpZmZ1c2VfTGFtYmVydCggY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IgKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBkaWZmdXNlQ29sb3I7XFxufVxcbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IGRvdExIICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC01LjU1NDczICogZG90TEggLSA2Ljk4MzE2ICkgKiBkb3RMSCApO1xcblxcdHJldHVybiAoIDEuMCAtIHNwZWN1bGFyQ29sb3IgKSAqIGZyZXNuZWwgKyBzcGVjdWxhckNvbG9yO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROTCArIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdGZsb2F0IGd2ID0gZG90TlYgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRyZXR1cm4gMS4wIC8gKCBnbCAqIGd2ICk7XFxufVxcbmZsb2F0IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ3YgPSBkb3ROTCAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TlYgKSApO1xcblxcdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XFxufVxcbmZsb2F0IERfR0dYKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0dHWCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxudmVjMiBMVENfVXYoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NJWkUgID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyAgPSAwLjUgLyBMVVRfU0laRTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIE4sIFYgKSApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCByb3VnaG5lc3MsIHNxcnQoIDEuMCAtIGRvdE5WICkgKTtcXG5cXHR1diA9IHV2ICogTFVUX1NDQUxFICsgTFVUX0JJQVM7XFxuXFx0cmV0dXJuIHV2O1xcbn1cXG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcXG5cXHRmbG9hdCBsID0gbGVuZ3RoKCBmICk7XFxuXFx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xcbn1cXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcXG5cXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcXG5cXHRmbG9hdCB5ID0gYWJzKCB4ICk7XFxuXFx0ZmxvYXQgYSA9IDAuODU0Mzk4NSArICggMC40OTY1MTU1ICsgMC4wMTQ1MjA2ICogeSApICogeTtcXG5cXHRmbG9hdCBiID0gMy40MTc1OTQwICsgKCA0LjE2MTY3MjQgKyB5ICkgKiB5O1xcblxcdGZsb2F0IHYgPSBhIC8gYjtcXG5cXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XFxuXFx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xcbn1cXG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcXG5cXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgdjIgPSByZWN0Q29vcmRzWyAzIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcXG5cXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdHZlYzMgVDEsIFQyO1xcblxcdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XFxuXFx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xcblxcdG1hdDMgbWF0ID0gbUludiAqIHRyYW5zcG9zZU1hdDMoIG1hdDMoIFQxLCBUMiwgTiApICk7XFxuXFx0dmVjMyBjb29yZHNbIDQgXTtcXG5cXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMSBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAxIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMCBdID0gbm9ybWFsaXplKCBjb29yZHNbIDAgXSApO1xcblxcdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xcblxcdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xcblxcdGNvb3Jkc1sgMyBdID0gbm9ybWFsaXplKCBjb29yZHNbIDMgXSApO1xcblxcdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAxIF0sIGNvb3Jkc1sgMiBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcXG5cXHRmbG9hdCByZXN1bHQgPSBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIHZlY3RvckZvcm1GYWN0b3IgKTtcXG5cXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHRjb25zdCB2ZWM0IGMwID0gdmVjNCggLSAxLCAtIDAuMDI3NSwgLSAwLjU3MiwgMC4wMjIgKTtcXG5cXHRjb25zdCB2ZWM0IGMxID0gdmVjNCggMSwgMC4wNDI1LCAxLjA0LCAtIDAuMDQgKTtcXG5cXHR2ZWM0IHIgPSByb3VnaG5lc3MgKiBjMCArIGMxO1xcblxcdGZsb2F0IGEwMDQgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xcblxcdHZlYzIgQUIgPSB2ZWMyKCAtMS4wNCwgMS4wNCApICogYTAwNCArIHIuenc7XFxuXFx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBBQi54ICsgQUIueTtcXG59XFxuZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCApIHtcXG5cXHRyZXR1cm4gMC4yNTtcXG59XFxuZmxvYXQgRF9CbGlublBob25nKCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xcbn1cXG52ZWMzIEJSREZfU3BlY3VsYXJfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcyApIHtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICsgZ2VvbWV0cnkudmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBkb3RMSCA9IHNhdHVyYXRlKCBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIGRvdExIICk7XFxuXFx0ZmxvYXQgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKTtcXG5cXHRmbG9hdCBEID0gRF9CbGlublBob25nKCBzaGluaW5lc3MsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufVxcbmZsb2F0IEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggY29uc3QgaW4gZmxvYXQgZ2d4Um91Z2huZXNzICkge1xcblxcdHJldHVybiAoIDIuMCAvIHBvdzIoIGdneFJvdWdobmVzcyArIDAuMDAwMSApIC0gMi4wICk7XFxufVxcbmZsb2F0IEJsaW5uRXhwb25lbnRUb0dHWFJvdWdobmVzcyggY29uc3QgaW4gZmxvYXQgYmxpbm5FeHBvbmVudCApIHtcXG5cXHRyZXR1cm4gc3FydCggMi4wIC8gKCBibGlubkV4cG9uZW50ICsgMi4wICkgKTtcXG59XCI7XG5cbnZhciBidW1wbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XFxuXFx0dmVjMiBkSGR4eV9md2QoKSB7XFxuXFx0XFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2VXYgKTtcXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiApLng7XFxuXFx0XFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFx0fVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHkgKSB7XFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gdmVjMyggZEZkeCggc3VyZl9wb3MueCApLCBkRmR4KCBzdXJmX3Bvcy55ICksIGRGZHgoIHN1cmZfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgdlNpZ21hWSA9IHZlYzMoIGRGZHkoIHN1cmZfcG9zLnggKSwgZEZkeSggc3VyZl9wb3MueSApLCBkRmR5KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcXG5cXHRcXHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XFxuXFx0XFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKTtcXG5cXHRcXHRmRGV0ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHR2ZWMzIHZHcmFkID0gc2lnbiggZkRldCApICogKCBkSGR4eS54ICogUjEgKyBkSGR4eS55ICogUjIgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCBhYnMoIGZEZXQgKSAqIHN1cmZfbm9ybSAtIHZHcmFkICk7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcXG5cXHR2ZWM0IHBsYW5lO1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBVTklPTl9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdGlmICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSBkaXNjYXJkO1xcblxcdH1cXG5cXHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xcblxcdFxcdGJvb2wgY2xpcHBlZCA9IHRydWU7XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0Y2xpcHBlZCA9ICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xcblxcdFxcdH1cXG5cXHRcXHRpZiAoIGNsaXBwZWQgKSBkaXNjYXJkO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdCNpZiAhIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgISBkZWZpbmVkKCBQSE9ORyApICYmICEgZGVmaW5lZCggTUFUQ0FQIClcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHR1bmlmb3JtIHZlYzQgY2xpcHBpbmdQbGFuZXNbIE5VTV9DTElQUElOR19QTEFORVMgXTtcXG4jZW5kaWZcIjtcblxudmFyIGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwICYmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAhIGRlZmluZWQoIFBIT05HICkgJiYgISBkZWZpbmVkKCBNQVRDQVAgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwICYmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAhIGRlZmluZWQoIFBIT05HICkgJiYgISBkZWZpbmVkKCBNQVRDQVAgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0NPTE9SXFxuXFx0dkNvbG9yLnh5eiA9IGNvbG9yLnh5ejtcXG4jZW5kaWZcIjtcblxudmFyIGNvbW1vbiA9IFwiI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU5XFxuI2RlZmluZSBQSTIgNi4yODMxODUzMDcxOFxcbiNkZWZpbmUgUElfSEFMRiAxLjU3MDc5NjMyNjc5NDlcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFxcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuI2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNkZWZpbmUgd2hpdGVDb21wbGltZW50KGEpICggMS4wIC0gc2F0dXJhdGUoIGEgKSApXFxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxcbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxcbmZsb2F0IHBvdzQoIGNvbnN0IGluIGZsb2F0IHggKSB7IGZsb2F0IHgyID0geCp4OyByZXR1cm4geDIqeDI7IH1cXG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkgeyByZXR1cm4gZG90KCBjb2xvciwgdmVjMyggMC4zMzMzICkgKTsgfVxcbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XFxuXFx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xcblxcdGhpZ2hwIGZsb2F0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSxiICkgKSwgc24gPSBtb2QoIGR0LCBQSSApO1xcblxcdHJldHVybiBmcmFjdChzaW4oc24pICogYyk7XFxufVxcbnN0cnVjdCBJbmNpZGVudExpZ2h0IHtcXG5cXHR2ZWMzIGNvbG9yO1xcblxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdGJvb2wgdmlzaWJsZTtcXG59O1xcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XFxuXFx0dmVjMyBkaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgZGlyZWN0U3BlY3VsYXI7XFxuXFx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBpbmRpcmVjdFNwZWN1bGFyO1xcbn07XFxuc3RydWN0IEdlb21ldHJpY0NvbnRleHQge1xcblxcdHZlYzMgcG9zaXRpb247XFxuXFx0dmVjMyBub3JtYWw7XFxuXFx0dmVjMyB2aWV3RGlyO1xcbn07XFxudmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcXG59XFxudmVjMyBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XFxufVxcbnZlYzMgcHJvamVjdE9uUGxhbmUoaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0ZmxvYXQgZGlzdGFuY2UgPSBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludCAtIHBvaW50T25QbGFuZSApO1xcblxcdHJldHVybiAtIGRpc3RhbmNlICogcGxhbmVOb3JtYWwgKyBwb2ludDtcXG59XFxuZmxvYXQgc2lkZU9mUGxhbmUoIGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBzaWduKCBkb3QoIHBvaW50IC0gcG9pbnRPblBsYW5lLCBwbGFuZU5vcm1hbCApICk7XFxufVxcbnZlYzMgbGluZVBsYW5lSW50ZXJzZWN0KCBpbiB2ZWMzIHBvaW50T25MaW5lLCBpbiB2ZWMzIGxpbmVEaXJlY3Rpb24sIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBsaW5lRGlyZWN0aW9uICogKCBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludE9uUGxhbmUgLSBwb2ludE9uTGluZSApIC8gZG90KCBwbGFuZU5vcm1hbCwgbGluZURpcmVjdGlvbiApICkgKyBwb2ludE9uTGluZTtcXG59XFxubWF0MyB0cmFuc3Bvc2VNYXQzKCBjb25zdCBpbiBtYXQzIG0gKSB7XFxuXFx0bWF0MyB0bXA7XFxuXFx0dG1wWyAwIF0gPSB2ZWMzKCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XFxuXFx0dG1wWyAxIF0gPSB2ZWMzKCBtWyAwIF0ueSwgbVsgMSBdLnksIG1bIDIgXS55ICk7XFxuXFx0dG1wWyAyIF0gPSB2ZWMzKCBtWyAwIF0ueiwgbVsgMSBdLnosIG1bIDIgXS56ICk7XFxuXFx0cmV0dXJuIHRtcDtcXG59XFxuZmxvYXQgbGluZWFyVG9SZWxhdGl2ZUx1bWluYW5jZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHtcXG5cXHR2ZWMzIHdlaWdodHMgPSB2ZWMzKCAwLjIxMjYsIDAuNzE1MiwgMC4wNzIyICk7XFxuXFx0cmV0dXJuIGRvdCggd2VpZ2h0cywgY29sb3IucmdiICk7XFxufVwiO1xuXG52YXIgY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50ID0gXCIjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxcbiNkZWZpbmUgY3ViZVVWX3RleHR1cmVTaXplICgxMDI0LjApXFxuaW50IGdldEZhY2VGcm9tRGlyZWN0aW9uKHZlYzMgZGlyZWN0aW9uKSB7XFxuXFx0dmVjMyBhYnNEaXJlY3Rpb24gPSBhYnMoZGlyZWN0aW9uKTtcXG5cXHRpbnQgZmFjZSA9IC0xO1xcblxcdGlmKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi56ICkge1xcblxcdFxcdGlmKGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnkgKVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueCA+IDAuMCA/IDAgOiAzO1xcblxcdFxcdGVsc2VcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxIDogNDtcXG5cXHR9XFxuXFx0ZWxzZSB7XFxuXFx0XFx0aWYoYWJzRGlyZWN0aW9uLnogPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi56ID4gMC4wID8gMiA6IDU7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEgOiA0O1xcblxcdH1cXG5cXHRyZXR1cm4gZmFjZTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczEgIChsb2cyKGN1YmVVVl90ZXh0dXJlU2l6ZSowLjI1KSAtIDEuMClcXG4jZGVmaW5lIGN1YmVVVl9yYW5nZUNsYW1wIChleHAyKCg2LjAgLSAxLjApICogMi4wKSlcXG52ZWMyIE1pcExldmVsSW5mbyggdmVjMyB2ZWMsIGZsb2F0IHJvdWdobmVzc0xldmVsLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgc2NhbGUgPSBleHAyKGN1YmVVVl9tYXhMb2RzMSAtIHJvdWdobmVzc0xldmVsKTtcXG5cXHRmbG9hdCBkeFJvdWdobmVzcyA9IGRGZHgocm91Z2huZXNzKTtcXG5cXHRmbG9hdCBkeVJvdWdobmVzcyA9IGRGZHkocm91Z2huZXNzKTtcXG5cXHR2ZWMzIGR4ID0gZEZkeCggdmVjICogc2NhbGUgKiBkeFJvdWdobmVzcyApO1xcblxcdHZlYzMgZHkgPSBkRmR5KCB2ZWMgKiBzY2FsZSAqIGR5Um91Z2huZXNzICk7XFxuXFx0ZmxvYXQgZCA9IG1heCggZG90KCBkeCwgZHggKSwgZG90KCBkeSwgZHkgKSApO1xcblxcdGQgPSBjbGFtcChkLCAxLjAsIGN1YmVVVl9yYW5nZUNsYW1wKTtcXG5cXHRmbG9hdCBtaXBMZXZlbCA9IDAuNSAqIGxvZzIoZCk7XFxuXFx0cmV0dXJuIHZlYzIoZmxvb3IobWlwTGV2ZWwpLCBmcmFjdChtaXBMZXZlbCkpO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMiAobG9nMihjdWJlVVZfdGV4dHVyZVNpemUqMC4yNSkgLSAyLjApXFxuI2RlZmluZSBjdWJlVVZfcmNwVGV4dHVyZVNpemUgKDEuMCAvIGN1YmVVVl90ZXh0dXJlU2l6ZSlcXG52ZWMyIGdldEN1YmVVVih2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgcm91Z2huZXNzTGV2ZWwsIGZsb2F0IG1pcExldmVsKSB7XFxuXFx0bWlwTGV2ZWwgPSByb3VnaG5lc3NMZXZlbCA+IGN1YmVVVl9tYXhMb2RzMiAtIDMuMCA/IDAuMCA6IG1pcExldmVsO1xcblxcdGZsb2F0IGEgPSAxNi4wICogY3ViZVVWX3JjcFRleHR1cmVTaXplO1xcblxcdHZlYzIgZXhwMl9wYWNrZWQgPSBleHAyKCB2ZWMyKCByb3VnaG5lc3NMZXZlbCwgbWlwTGV2ZWwgKSApO1xcblxcdHZlYzIgcmNwX2V4cDJfcGFja2VkID0gdmVjMiggMS4wICkgLyBleHAyX3BhY2tlZDtcXG5cXHRmbG9hdCBwb3dTY2FsZSA9IGV4cDJfcGFja2VkLnggKiBleHAyX3BhY2tlZC55O1xcblxcdGZsb2F0IHNjYWxlID0gcmNwX2V4cDJfcGFja2VkLnggKiByY3BfZXhwMl9wYWNrZWQueSAqIDAuMjU7XFxuXFx0ZmxvYXQgbWlwT2Zmc2V0ID0gMC43NSooMS4wIC0gcmNwX2V4cDJfcGFja2VkLnkpICogcmNwX2V4cDJfcGFja2VkLng7XFxuXFx0Ym9vbCBiUmVzID0gbWlwTGV2ZWwgPT0gMC4wO1xcblxcdHNjYWxlID0gIGJSZXMgJiYgKHNjYWxlIDwgYSkgPyBhIDogc2NhbGU7XFxuXFx0dmVjMyByO1xcblxcdHZlYzIgb2Zmc2V0O1xcblxcdGludCBmYWNlID0gZ2V0RmFjZUZyb21EaXJlY3Rpb24oZGlyZWN0aW9uKTtcXG5cXHRmbG9hdCByY3BQb3dTY2FsZSA9IDEuMCAvIHBvd1NjYWxlO1xcblxcdGlmKCBmYWNlID09IDApIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueCwgLWRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigwLjArbWlwT2Zmc2V0LDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAxKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnksIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAyKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigyLjAqc2NhbGUrbWlwT2Zmc2V0LCAwLjc1ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyBhIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gMykge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMC4wK21pcE9mZnNldCwwLjUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IDAuMCA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDQpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueSwgZGlyZWN0aW9uLngsIC1kaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2Uge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi56LCAtZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDIuMCpzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdHIgPSBub3JtYWxpemUocik7XFxuXFx0ZmxvYXQgdGV4ZWxPZmZzZXQgPSAwLjUgKiBjdWJlVVZfcmNwVGV4dHVyZVNpemU7XFxuXFx0dmVjMiBzID0gKCByLnl6IC8gYWJzKCByLnggKSArIHZlYzIoIDEuMCApICkgKiAwLjU7XFxuXFx0dmVjMiBiYXNlID0gb2Zmc2V0ICsgdmVjMiggdGV4ZWxPZmZzZXQgKTtcXG5cXHRyZXR1cm4gYmFzZSArIHMgKiAoIHNjYWxlIC0gMi4wICogdGV4ZWxPZmZzZXQgKTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczMgKGxvZzIoY3ViZVVWX3RleHR1cmVTaXplKjAuMjUpIC0gMy4wKVxcbnZlYzQgdGV4dHVyZUN1YmVVViggc2FtcGxlcjJEIGVudk1hcCwgdmVjMyByZWZsZWN0ZWREaXJlY3Rpb24sIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCByb3VnaG5lc3NWYWwgPSByb3VnaG5lc3MqIGN1YmVVVl9tYXhMb2RzMztcXG5cXHRmbG9hdCByMSA9IGZsb29yKHJvdWdobmVzc1ZhbCk7XFxuXFx0ZmxvYXQgcjIgPSByMSArIDEuMDtcXG5cXHRmbG9hdCB0ID0gZnJhY3Qocm91Z2huZXNzVmFsKTtcXG5cXHR2ZWMyIG1pcEluZm8gPSBNaXBMZXZlbEluZm8ocmVmbGVjdGVkRGlyZWN0aW9uLCByMSwgcm91Z2huZXNzKTtcXG5cXHRmbG9hdCBzID0gbWlwSW5mby55O1xcblxcdGZsb2F0IGxldmVsMCA9IG1pcEluZm8ueDtcXG5cXHRmbG9hdCBsZXZlbDEgPSBsZXZlbDAgKyAxLjA7XFxuXFx0bGV2ZWwxID0gbGV2ZWwxID4gNS4wID8gNS4wIDogbGV2ZWwxO1xcblxcdGxldmVsMCArPSBtaW4oIGZsb29yKCBzICsgMC41ICksIDUuMCApO1xcblxcdHZlYzIgdXZfMTAgPSBnZXRDdWJlVVYocmVmbGVjdGVkRGlyZWN0aW9uLCByMSwgbGV2ZWwwKTtcXG5cXHR2ZWM0IGNvbG9yMTAgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2XzEwKSk7XFxuXFx0dmVjMiB1dl8yMCA9IGdldEN1YmVVVihyZWZsZWN0ZWREaXJlY3Rpb24sIHIyLCBsZXZlbDApO1xcblxcdHZlYzQgY29sb3IyMCA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXZfMjApKTtcXG5cXHR2ZWM0IHJlc3VsdCA9IG1peChjb2xvcjEwLCBjb2xvcjIwLCB0KTtcXG5cXHRyZXR1cm4gdmVjNChyZXN1bHQucmdiLCAxLjApO1xcbn1cXG4jZW5kaWZcIjtcblxudmFyIGRlZmF1bHRub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIHRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsTWF0cml4ICogb2JqZWN0Tm9ybWFsO1xcbiNpZmRlZiBGTElQX1NJREVEXFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSAtIHRyYW5zZm9ybWVkTm9ybWFsO1xcbiNlbmRpZlwiO1xuXG52YXIgZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpc3BsYWNlbWVudE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudFNjYWxlO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50QmlhcztcXG4jZW5kaWZcIjtcblxudmFyIGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dHJhbnNmb3JtZWQgKz0gbm9ybWFsaXplKCBvYmplY3ROb3JtYWwgKSAqICggdGV4dHVyZTJEKCBkaXNwbGFjZW1lbnRNYXAsIHV2ICkueCAqIGRpc3BsYWNlbWVudFNjYWxlICsgZGlzcGxhY2VtZW50QmlhcyApO1xcbiNlbmRpZlwiO1xuXG52YXIgZW1pc3NpdmVtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR2ZWM0IGVtaXNzaXZlQ29sb3IgPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCB2VXYgKTtcXG5cXHRlbWlzc2l2ZUNvbG9yLnJnYiA9IGVtaXNzaXZlTWFwVGV4ZWxUb0xpbmVhciggZW1pc3NpdmVDb2xvciApLnJnYjtcXG5cXHR0b3RhbEVtaXNzaXZlUmFkaWFuY2UgKj0gZW1pc3NpdmVDb2xvci5yZ2I7XFxuI2VuZGlmXCI7XG5cbnZhciBlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBlbmNvZGluZ3NfZnJhZ21lbnQgPSBcImdsX0ZyYWdDb2xvciA9IGxpbmVhclRvT3V0cHV0VGV4ZWwoIGdsX0ZyYWdDb2xvciApO1wiO1xuXG52YXIgZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQgPSBcIlxcbnZlYzQgTGluZWFyVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZhbHVlO1xcbn1cXG52ZWM0IEdhbW1hVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IGdhbW1hRmFjdG9yICkge1xcblxcdHJldHVybiB2ZWM0KCBwb3coIHZhbHVlLnJnYiwgdmVjMyggZ2FtbWFGYWN0b3IgKSApLCB2YWx1ZS5hICk7XFxufVxcbnZlYzQgTGluZWFyVG9HYW1tYSggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAxLjAgLyBnYW1tYUZhY3RvciApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBzUkdCVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIG1peCggcG93KCB2YWx1ZS5yZ2IgKiAwLjk0Nzg2NzI5ODYgKyB2ZWMzKCAwLjA1MjEzMjcwMTQgKSwgdmVjMyggMi40ICkgKSwgdmFsdWUucmdiICogMC4wNzczOTkzODA4LCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgdmFsdWUuYSApO1xcbn1cXG52ZWM0IExpbmVhclRvc1JHQiggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiwgdmVjMyggMC40MTY2NiApICkgKiAxLjA1NSAtIHZlYzMoIDAuMDU1ICksIHZhbHVlLnJnYiAqIDEyLjkyLCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzMoIDAuMDAzMTMwOCApICkgKSApLCB2YWx1ZS5hICk7XFxufVxcbnZlYzQgUkdCRVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgKiBleHAyKCB2YWx1ZS5hICogMjU1LjAgLSAxMjguMCApLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQkUoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0ZmxvYXQgbWF4Q29tcG9uZW50ID0gbWF4KCBtYXgoIHZhbHVlLnIsIHZhbHVlLmcgKSwgdmFsdWUuYiApO1xcblxcdGZsb2F0IGZFeHAgPSBjbGFtcCggY2VpbCggbG9nMiggbWF4Q29tcG9uZW50ICkgKSwgLTEyOC4wLCAxMjcuMCApO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyBleHAyKCBmRXhwICksICggZkV4cCArIDEyOC4wICkgLyAyNTUuMCApO1xcbn1cXG52ZWM0IFJHQk1Ub0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgbWF4UmFuZ2UgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqIHZhbHVlLmEgKiBtYXhSYW5nZSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JNKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLnIsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XFxuXFx0ZmxvYXQgTSA9IGNsYW1wKCBtYXhSR0IgLyBtYXhSYW5nZSwgMC4wLCAxLjAgKTtcXG5cXHRNID0gY2VpbCggTSAqIDI1NS4wICkgLyAyNTUuMDtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiIC8gKCBNICogbWF4UmFuZ2UgKSwgTSApO1xcbn1cXG52ZWM0IFJHQkRUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgbWF4UmFuZ2UgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggKCBtYXhSYW5nZSAvIDI1NS4wICkgLyB2YWx1ZS5hICksIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCRCggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgbWF4UmFuZ2UgKSB7XFxuXFx0ZmxvYXQgbWF4UkdCID0gbWF4KCB2YWx1ZS5yLCBtYXgoIHZhbHVlLmcsIHZhbHVlLmIgKSApO1xcblxcdGZsb2F0IEQgPSBtYXgoIG1heFJhbmdlIC8gbWF4UkdCLCAxLjAgKTtcXG5cXHREID0gbWluKCBmbG9vciggRCApIC8gMjU1LjAsIDEuMCApO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgKiAoIEQgKiAoIDI1NS4wIC8gbWF4UmFuZ2UgKSApLCBEICk7XFxufVxcbmNvbnN0IG1hdDMgY0xvZ0x1dk0gPSBtYXQzKCAwLjIyMDksIDAuMzM5MCwgMC40MTg0LCAwLjExMzgsIDAuNjc4MCwgMC43MzE5LCAwLjAxMDIsIDAuMTEzMCwgMC4yOTY5ICk7XFxudmVjNCBMaW5lYXJUb0xvZ0x1diggaW4gdmVjNCB2YWx1ZSApICB7XFxuXFx0dmVjMyBYcF9ZX1hZWnAgPSB2YWx1ZS5yZ2IgKiBjTG9nTHV2TTtcXG5cXHRYcF9ZX1hZWnAgPSBtYXgoIFhwX1lfWFlacCwgdmVjMyggMWUtNiwgMWUtNiwgMWUtNiApICk7XFxuXFx0dmVjNCB2UmVzdWx0O1xcblxcdHZSZXN1bHQueHkgPSBYcF9ZX1hZWnAueHkgLyBYcF9ZX1hZWnAuejtcXG5cXHRmbG9hdCBMZSA9IDIuMCAqIGxvZzIoWHBfWV9YWVpwLnkpICsgMTI3LjA7XFxuXFx0dlJlc3VsdC53ID0gZnJhY3QoIExlICk7XFxuXFx0dlJlc3VsdC56ID0gKCBMZSAtICggZmxvb3IoIHZSZXN1bHQudyAqIDI1NS4wICkgKSAvIDI1NS4wICkgLyAyNTUuMDtcXG5cXHRyZXR1cm4gdlJlc3VsdDtcXG59XFxuY29uc3QgbWF0MyBjTG9nTHV2SW52ZXJzZU0gPSBtYXQzKCA2LjAwMTQsIC0yLjcwMDgsIC0xLjc5OTYsIC0xLjMzMjAsIDMuMTAyOSwgLTUuNzcyMSwgMC4zMDA4LCAtMS4wODgyLCA1LjYyNjggKTtcXG52ZWM0IExvZ0x1dlRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdGZsb2F0IExlID0gdmFsdWUueiAqIDI1NS4wICsgdmFsdWUudztcXG5cXHR2ZWMzIFhwX1lfWFlacDtcXG5cXHRYcF9ZX1hZWnAueSA9IGV4cDIoICggTGUgLSAxMjcuMCApIC8gMi4wICk7XFxuXFx0WHBfWV9YWVpwLnogPSBYcF9ZX1hZWnAueSAvIHZhbHVlLnk7XFxuXFx0WHBfWV9YWVpwLnggPSB2YWx1ZS54ICogWHBfWV9YWVpwLno7XFxuXFx0dmVjMyB2UkdCID0gWHBfWV9YWVpwLnJnYiAqIGNMb2dMdXZJbnZlcnNlTTtcXG5cXHRyZXR1cm4gdmVjNCggbWF4KCB2UkdCLCAwLjAgKSwgMS4wICk7XFxufVwiO1xuXG52YXIgZW52bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0cmVmbGVjdFZlYyA9IG5vcm1hbGl6ZSggcmVmbGVjdFZlYyApO1xcblxcdFxcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggcmVmbGVjdFZlYy55LCAtIDEuMCwgMS4wICkgKSAqIFJFQ0lQUk9DQUxfUEkgKyAwLjU7XFxuXFx0XFx0c2FtcGxlVVYueCA9IGF0YW4oIHJlZmxlY3RWZWMueiwgcmVmbGVjdFZlYy54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCByZWZsZWN0VmVjICk7XFxuXFx0XFx0dmVjMyByZWZsZWN0VmlldyA9IG5vcm1hbGl6ZSggKCB2aWV3TWF0cml4ICogdmVjNCggcmVmbGVjdFZlYywgMC4wICkgKS54eXogKyB2ZWMzKCAwLjAsIDAuMCwgMS4wICkgKTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41ICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdmVjNCggMC4wICk7XFxuXFx0I2VuZGlmXFxuXFx0ZW52Q29sb3IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZDb2xvciApO1xcblxcdCNpZmRlZiBFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBvdXRnb2luZ0xpZ2h0ICogZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX01JWCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCArPSBlbnZDb2xvci54eXogKiBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgfHwgZGVmaW5lZCggUEhZU0lDQUwgKVxcblxcdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xcblxcdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAoIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HICkgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXHR1bmlmb3JtIGludCBtYXhNaXBMZXZlbDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSB8fCBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgY2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHdvcmxkUG9zaXRpb24ueHl6IC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggdHJhbnNmb3JtZWROb3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZSZWZsZWN0ID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZnJhY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdGZvZ0RlcHRoID0gLW12UG9zaXRpb24uejtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcbiNlbmRpZlwiO1xuXG52YXIgZm9nX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHdoaXRlQ29tcGxpbWVudCggZXhwMiggLSBmb2dEZW5zaXR5ICogZm9nRGVuc2l0eSAqIGZvZ0RlcHRoICogZm9nRGVwdGggKiBMT0cyICkgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZm9nRGVwdGggKTtcXG5cXHQjZW5kaWZcXG5cXHRnbF9GcmFnQ29sb3IucmdiID0gbWl4KCBnbF9GcmFnQ29sb3IucmdiLCBmb2dDb2xvciwgZm9nRmFjdG9yICk7XFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHR1bmlmb3JtIHZlYzMgZm9nQ29sb3I7XFxuXFx0dmFyeWluZyBmbG9hdCBmb2dEZXB0aDtcXG5cXHQjaWZkZWYgRk9HX0VYUDJcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0RlbnNpdHk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ05lYXI7XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dGYXI7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVE9PTlxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGdyYWRpZW50TWFwO1xcblxcdHZlYzMgZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCB2ZWMzIG5vcm1hbCwgdmVjMyBsaWdodERpcmVjdGlvbiApIHtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBsaWdodERpcmVjdGlvbiApO1xcblxcdFxcdHZlYzIgY29vcmQgPSB2ZWMyKCBkb3ROTCAqIDAuNSArIDAuNSwgMC4wICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9HUkFESUVOVE1BUFxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkQoIGdyYWRpZW50TWFwLCBjb29yZCApLnJnYjtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiAoIGNvb3JkLnggPCAwLjcgKSA/IHZlYzMoIDAuNyApIDogdmVjMyggMS4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gUEkgKiB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbGlnaHRNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBsaWdodE1hcEludGVuc2l0eTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19sYW1iZXJ0X3ZlcnRleCA9IFwidmVjMyBkaWZmdXNlID0gdmVjMyggMS4wICk7XFxuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcXG5nZW9tZXRyeS5wb3NpdGlvbiA9IG12UG9zaXRpb24ueHl6O1xcbmdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5nZW9tZXRyeS52aWV3RGlyID0gbm9ybWFsaXplKCAtbXZQb3NpdGlvbi54eXogKTtcXG5HZW9tZXRyaWNDb250ZXh0IGJhY2tHZW9tZXRyeTtcXG5iYWNrR2VvbWV0cnkucG9zaXRpb24gPSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5iYWNrR2VvbWV0cnkubm9ybWFsID0gLWdlb21ldHJ5Lm5vcm1hbDtcXG5iYWNrR2VvbWV0cnkudmlld0RpciA9IGdlb21ldHJ5LnZpZXdEaXI7XFxudkxpZ2h0RnJvbnQgPSB2ZWMzKCAwLjAgKTtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dkxpZ2h0QmFjayA9IHZlYzMoIDAuMCApO1xcbiNlbmRpZlxcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XFxuZmxvYXQgZG90Tkw7XFxudmVjMyBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0U3BvdERpcmVjdExpZ2h0SXJyYWRpYW5jZSggc3BvdExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBQSSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggZGlyZWN0aW9uYWxMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGdlb21ldHJ5ICk7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBiYWNrR2VvbWV0cnkgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfcGFyc19iZWdpbiA9IFwidW5pZm9ybSB2ZWMzIGFtYmllbnRMaWdodENvbG9yO1xcbnZlYzMgZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBhbWJpZW50TGlnaHRDb2xvciApIHtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRpcnJhZGlhbmNlICo9IFBJO1xcblxcdCNlbmRpZlxcblxcdHJldHVybiBpcnJhZGlhbmNlO1xcbn1cXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IERpcmVjdGlvbmFsTGlnaHQge1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodHNbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0dm9pZCBnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBvdXQgSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCApIHtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IGRpcmVjdGlvbmFsTGlnaHQuY29sb3I7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuZGlyZWN0aW9uID0gZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb247XFxuXFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IHRydWU7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdHN0cnVjdCBQb2ludExpZ2h0IHtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2U7XFxuXFx0XFx0ZmxvYXQgZGVjYXk7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0ZmxvYXQgc2hhZG93Q2FtZXJhTmVhcjtcXG5cXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFBvaW50TGlnaHQgcG9pbnRMaWdodHNbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFBvaW50RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBQb2ludExpZ2h0IHBvaW50TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IHBvaW50TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBwb2ludExpZ2h0LmNvbG9yO1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGxpZ2h0RGlzdGFuY2UsIHBvaW50TGlnaHQuZGlzdGFuY2UsIHBvaW50TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gKCBkaXJlY3RMaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdHN0cnVjdCBTcG90TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHRcXHRmbG9hdCBjb25lQ29zO1xcblxcdFxcdGZsb2F0IHBlbnVtYnJhQ29zO1xcblxcdFxcdGludCBzaGFkb3c7XFxuXFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdH07XFxuXFx0dW5pZm9ybSBTcG90TGlnaHQgc3BvdExpZ2h0c1sgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0dm9pZCBnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBTcG90TGlnaHQgc3BvdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBvdXQgSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCAgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0ZGlyZWN0TGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGFuZ2xlQ29zID0gZG90KCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIHNwb3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRpZiAoIGFuZ2xlQ29zID4gc3BvdExpZ2h0LmNvbmVDb3MgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc3BvdEVmZmVjdCA9IHNtb290aHN0ZXAoIHNwb3RMaWdodC5jb25lQ29zLCBzcG90TGlnaHQucGVudW1icmFDb3MsIGFuZ2xlQ29zICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBzcG90TGlnaHQuY29sb3I7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gc3BvdEVmZmVjdCAqIHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGxpZ2h0RGlzdGFuY2UsIHNwb3RMaWdodC5kaXN0YW5jZSwgc3BvdExpZ2h0LmRlY2F5ICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IHRydWU7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHZlYzMoIDAuMCApO1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSBmYWxzZTtcXG5cXHRcXHR9XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgUmVjdEFyZWFMaWdodCB7XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgaGFsZldpZHRoO1xcblxcdFxcdHZlYzMgaGFsZkhlaWdodDtcXG5cXHR9O1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18xO1xcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18yO1xcblxcdHVuaWZvcm0gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0c1sgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgXTtcXG4jZW5kaWZcXG4jaWYgTlVNX0hFTUlfTElHSFRTID4gMFxcblxcdHN0cnVjdCBIZW1pc3BoZXJlTGlnaHQge1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgc2t5Q29sb3I7XFxuXFx0XFx0dmVjMyBncm91bmRDb2xvcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gSGVtaXNwaGVyZUxpZ2h0IGhlbWlzcGhlcmVMaWdodHNbIE5VTV9IRU1JX0xJR0hUUyBdO1xcblxcdHZlYzMgZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gSGVtaXNwaGVyZUxpZ2h0IGhlbWlMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSApIHtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoZW1pTGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3ROTCArIDAuNTtcXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBtaXgoIGhlbWlMaWdodC5ncm91bmRDb2xvciwgaGVtaUxpZ2h0LnNreUNvbG9yLCBoZW1pRGlmZnVzZVdlaWdodCApO1xcblxcdFxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIGlycmFkaWFuY2U7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUEhZU0lDQUwgKVxcblxcdHZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gaW50IG1heE1JUExldmVsICkge1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBnZW9tZXRyeS5ub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBxdWVyeVZlYywgMS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdmVjNCggMC4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIFBJICogZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdH1cXG5cXHRmbG9hdCBnZXRTcGVjdWxhck1JUExldmVsKCBjb25zdCBpbiBmbG9hdCBibGlublNoaW5pbmVzc0V4cG9uZW50LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0ZmxvYXQgbWF4TUlQTGV2ZWxTY2FsYXIgPSBmbG9hdCggbWF4TUlQTGV2ZWwgKTtcXG5cXHRcXHRmbG9hdCBkZXNpcmVkTUlQTGV2ZWwgPSBtYXhNSVBMZXZlbFNjYWxhciArIDAuNzkyNDggLSAwLjUgKiBsb2cyKCBwb3cyKCBibGlublNoaW5pbmVzc0V4cG9uZW50ICkgKyAxLjAgKTtcXG5cXHRcXHRyZXR1cm4gY2xhbXAoIGRlc2lyZWRNSVBMZXZlbCwgMC4wLCBtYXhNSVBMZXZlbFNjYWxhciApO1xcblxcdH1cXG5cXHR2ZWMzIGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBmbG9hdCBibGlublNoaW5pbmVzc0V4cG9uZW50LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCAtZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCAtZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZWZsZWN0VmVjID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggcmVmbGVjdFZlYywgdmlld01hdHJpeCApO1xcblxcdFxcdGZsb2F0IHNwZWN1bGFyTUlQTGV2ZWwgPSBnZXRTcGVjdWxhck1JUExldmVsKCBibGlublNoaW5pbmVzc0V4cG9uZW50LCBtYXhNSVBMZXZlbCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0XFx0dmVjMyBxdWVyeVJlZmxlY3RWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICk7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZUxvZEVYVCggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5UmVmbGVjdFZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIEJsaW5uRXhwb25lbnRUb0dHWFJvdWdobmVzcyhibGlublNoaW5pbmVzc0V4cG9uZW50ICkpO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJETG9kRVhUKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwwLjAsMS4wICkgKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRExvZEVYVCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJldHVybiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3Bob25nX2ZyYWdtZW50ID0gXCJCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5tYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gc3BlY3VsYXI7XFxubWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgPSBzaGluaW5lc3M7XFxubWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aCA9IHNwZWN1bGFyU3RyZW5ndGg7XCI7XG5cbnZhciBsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCA9IFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbnN0cnVjdCBCbGlublBob25nTWF0ZXJpYWwge1xcblxcdHZlYzNcXHRkaWZmdXNlQ29sb3I7XFxuXFx0dmVjM1xcdHNwZWN1bGFyQ29sb3I7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclNoaW5pbmVzcztcXG5cXHRmbG9hdFxcdHNwZWN1bGFyU3RyZW5ndGg7XFxufTtcXG52b2lkIFJFX0RpcmVjdF9CbGlublBob25nKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdCNpZmRlZiBUT09OXFxuXFx0XFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNlbmRpZlxcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmcoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmdcXG4jZGVmaW5lIE1hdGVyaWFsX0xpZ2h0UHJvYmVMT0QoIG1hdGVyaWFsIClcXHQoMClcIjtcblxudmFyIGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCA9IFwiUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcXG5tYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyA9IGNsYW1wKCByb3VnaG5lc3NGYWN0b3IsIDAuMDQsIDEuMCApO1xcbiNpZmRlZiBTVEFOREFSRFxcblxcdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuI2Vsc2VcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UICogcG93MiggcmVmbGVjdGl2aXR5ICkgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuXFx0bWF0ZXJpYWwuY2xlYXJDb2F0ID0gc2F0dXJhdGUoIGNsZWFyQ29hdCApO1xcdG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyA9IGNsYW1wKCBjbGVhckNvYXRSb3VnaG5lc3MsIDAuMDQsIDEuMCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcInN0cnVjdCBQaHlzaWNhbE1hdGVyaWFsIHtcXG5cXHR2ZWMzXFx0ZGlmZnVzZUNvbG9yO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJSb3VnaG5lc3M7XFxuXFx0dmVjM1xcdHNwZWN1bGFyQ29sb3I7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdDtcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRSb3VnaG5lc3M7XFxuXFx0I2VuZGlmXFxufTtcXG4jZGVmaW5lIE1BWElNVU1fU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgMC4xNlxcbiNkZWZpbmUgREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCAwLjA0XFxuZmxvYXQgY2xlYXJDb2F0REhSQXBwcm94KCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5MICkge1xcblxcdHJldHVybiBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICsgKCAxLjAgLSBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICkgKiAoIHBvdyggMS4wIC0gZG90TkwsIDUuMCApICogcG93KCAxLjAgLSByb3VnaG5lc3MsIDIuMCApICk7XFxufVxcbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcXG5cXHR2b2lkIFJFX0RpcmVjdF9SZWN0QXJlYV9QaHlzaWNhbCggY29uc3QgaW4gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRcXHR2ZWMzIG5vcm1hbCA9IGdlb21ldHJ5Lm5vcm1hbDtcXG5cXHRcXHR2ZWMzIHZpZXdEaXIgPSBnZW9tZXRyeS52aWV3RGlyO1xcblxcdFxcdHZlYzMgcG9zaXRpb24gPSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGxpZ2h0UG9zID0gcmVjdEFyZWFMaWdodC5wb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGhhbGZXaWR0aCA9IHJlY3RBcmVhTGlnaHQuaGFsZldpZHRoO1xcblxcdFxcdHZlYzMgaGFsZkhlaWdodCA9IHJlY3RBcmVhTGlnaHQuaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMzIGxpZ2h0Q29sb3IgPSByZWN0QXJlYUxpZ2h0LmNvbG9yO1xcblxcdFxcdGZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzO1xcblxcdFxcdHZlYzMgcmVjdENvb3Jkc1sgNCBdO1xcblxcdFxcdHJlY3RDb29yZHNbIDAgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXHRcXHRyZWN0Q29vcmRzWyAxIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMiBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDMgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xcblxcdFxcdHZlYzQgdDEgPSB0ZXh0dXJlMkQoIGx0Y18xLCB1diApO1xcblxcdFxcdHZlYzQgdDIgPSB0ZXh0dXJlMkQoIGx0Y18yLCB1diApO1xcblxcdFxcdG1hdDMgbUludiA9IG1hdDMoXFxuXFx0XFx0XFx0dmVjMyggdDEueCwgMCwgdDEueSApLFxcblxcdFxcdFxcdHZlYzMoICAgIDAsIDEsICAgIDAgKSxcXG5cXHRcXHRcXHR2ZWMzKCB0MS56LCAwLCB0MS53IClcXG5cXHRcXHQpO1xcblxcdFxcdHZlYzMgZnJlc25lbCA9ICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHQyLnggKyAoIHZlYzMoIDEuMCApIC0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciApICogdDIueSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGxpZ2h0Q29sb3IgKiBmcmVzbmVsICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtSW52LCByZWN0Q29vcmRzICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBsaWdodENvbG9yICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtYXQzKCAxLjAgKSwgcmVjdENvb3JkcyApO1xcblxcdH1cXG4jZW5kaWZcXG52b2lkIFJFX0RpcmVjdF9QaHlzaWNhbCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRpcnJhZGlhbmNlICo9IFBJO1xcblxcdCNlbmRpZlxcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSBtYXRlcmlhbC5jbGVhckNvYXQgKiBjbGVhckNvYXRESFJBcHByb3goIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcywgZG90TkwgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdERIUiA9IDAuMDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSAoIDEuMCAtIGNsZWFyQ29hdERIUiApICogaXJyYWRpYW5jZSAqIEJSREZfU3BlY3VsYXJfR0dYKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSAoIDEuMCAtIGNsZWFyQ29hdERIUiApICogaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIG1hdGVyaWFsLmNsZWFyQ29hdCAqIEJSREZfU3BlY3VsYXJfR0dYKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgcmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgY2xlYXJDb2F0UmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0ZmxvYXQgZG90TkwgPSBkb3ROVjtcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSBtYXRlcmlhbC5jbGVhckNvYXQgKiBjbGVhckNvYXRESFJBcHByb3goIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcywgZG90TkwgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdERIUiA9IDAuMDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9ICggMS4wIC0gY2xlYXJDb2F0REhSICkgKiByYWRpYW5jZSAqIEJSREZfU3BlY3VsYXJfR0dYX0Vudmlyb25tZW50KCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKTtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBjbGVhckNvYXRSYWRpYW5jZSAqIG1hdGVyaWFsLmNsZWFyQ29hdCAqIEJSREZfU3BlY3VsYXJfR0dYX0Vudmlyb25tZW50KCBnZW9tZXRyeSwgdmVjMyggREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApLCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0RpcmVjdF9SZWN0QXJlYVxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsXFxuI2RlZmluZSBSRV9JbmRpcmVjdFNwZWN1bGFyXFx0XFx0UkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbFxcbiNkZWZpbmUgTWF0ZXJpYWxfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSAgIEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKVxcbiNkZWZpbmUgTWF0ZXJpYWxfQ2xlYXJDb2F0X0JsaW5uU2hpbmluZXNzRXhwb25lbnQoIG1hdGVyaWFsICkgICBHR1hSb3VnaG5lc3NUb0JsaW5uRXhwb25lbnQoIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyApXFxuZmxvYXQgY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgYW1iaWVudE9jY2x1c2lvbiwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdHJldHVybiBzYXR1cmF0ZSggcG93KCBkb3ROViArIGFtYmllbnRPY2NsdXNpb24sIGV4cDIoIC0gMTYuMCAqIHJvdWdobmVzcyAtIDEuMCApICkgLSAxLjAgKyBhbWJpZW50T2NjbHVzaW9uICk7XFxufVwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X2JlZ2luID0gXCJcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gLSB2Vmlld1Bvc2l0aW9uO1xcbmdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbDtcXG5nZW9tZXRyeS52aWV3RGlyID0gbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG4jaWYgKCBOVU1fUE9JTlRfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0UG9pbnRMaWdodCBwb2ludExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldFBvaW50RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBwb2ludExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzIoIHBvaW50TGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlICkgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93QmlhcywgcG9pbnRMaWdodC5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9TUE9UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0U3BvdERpcmVjdExpZ2h0SXJyYWRpYW5jZSggc3BvdExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzIoIHNwb3RMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUgKSApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodC5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHQuc2hhZG93Qmlhcywgc3BvdExpZ2h0LnNoYWRvd1JhZGl1cywgdlNwb3RTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgKCBOVU1fRElSX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodElycmFkaWFuY2UoIGRpcmVjdGlvbmFsTGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggZGlyZWN0aW9uYWxMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUgKSApID8gZ2V0U2hhZG93KCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgaSBdLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd01hcFNpemUsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdF9SZWN0QXJlYSApXFxuXFx0UmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUkVDVF9BUkVBX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRyZWN0QXJlYUxpZ2h0ID0gcmVjdEFyZWFMaWdodHNbIGkgXTtcXG5cXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWEoIHJlY3RBcmVhTGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggYW1iaWVudExpZ2h0Q29sb3IgKTtcXG5cXHQjaWYgKCBOVU1fSEVNSV9MSUdIVFMgPiAwIClcXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdFxcdGlycmFkaWFuY2UgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBnZW9tZXRyeSApO1xcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0dmVjMyByYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgY2xlYXJDb2F0UmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9tYXBzID0gXCIjaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjMyBsaWdodE1hcElycmFkaWFuY2UgPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0XFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0XFx0bGlnaHRNYXBJcnJhZGlhbmNlICo9IFBJO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdGlycmFkaWFuY2UgKz0gbGlnaHRNYXBJcnJhZGlhbmNlO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRpcnJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJbmRpcmVjdElycmFkaWFuY2UoIGdlb21ldHJ5LCBtYXhNaXBMZXZlbCApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0cmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGdlb21ldHJ5LCBNYXRlcmlhbF9CbGlublNoaW5pbmVzc0V4cG9uZW50KCBtYXRlcmlhbCApLCBtYXhNaXBMZXZlbCApO1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRjbGVhckNvYXRSYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZSggZ2VvbWV0cnksIE1hdGVyaWFsX0NsZWFyQ29hdF9CbGlublNoaW5pbmVzc0V4cG9uZW50KCBtYXRlcmlhbCApLCBtYXhNaXBMZXZlbCApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X2VuZCA9IFwiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0UkVfSW5kaXJlY3REaWZmdXNlKCBpcnJhZGlhbmNlLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdFJFX0luZGlyZWN0U3BlY3VsYXIoIHJhZGlhbmNlLCBjbGVhckNvYXRSYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKSAmJiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUZfRVhUIClcXG5cXHRnbF9GcmFnRGVwdGhFWFQgPSBsb2cyKCB2RnJhZ0RlcHRoICkgKiBsb2dEZXB0aEJ1ZkZDICogMC41O1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApICYmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRl9FWFQgKVxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuI2VuZGlmXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2RnJhZ0RlcHRoID0gMS4wICsgZ2xfUG9zaXRpb24udztcXG5cXHQjZWxzZVxcblxcdFxcdGdsX1Bvc2l0aW9uLnogPSBsb2cyKCBtYXgoIEVQU0lMT04sIGdsX1Bvc2l0aW9uLncgKyAxLjAgKSApICogbG9nRGVwdGhCdWZGQyAtIDEuMDtcXG5cXHRcXHRnbF9Qb3NpdGlvbi56ICo9IGdsX1Bvc2l0aW9uLnc7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dmVjNCB0ZXhlbENvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVdiApO1xcblxcdHRleGVsQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhlbENvbG9yICk7XFxuXFx0ZGlmZnVzZUNvbG9yICo9IHRleGVsQ29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtYXBfcGFydGljbGVfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dmVjMiB1diA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSwgMSApICkueHk7XFxuXFx0dmVjNCBtYXBUZXhlbCA9IHRleHR1cmUyRCggbWFwLCB1diApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSBtYXBUZXhlbFRvTGluZWFyKCBtYXBUZXhlbCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcIjtcblxudmFyIG1ldGFsbmVzc21hcF9mcmFnbWVudCA9IFwiZmxvYXQgbWV0YWxuZXNzRmFjdG9yID0gbWV0YWxuZXNzO1xcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dmVjNCB0ZXhlbE1ldGFsbmVzcyA9IHRleHR1cmUyRCggbWV0YWxuZXNzTWFwLCB2VXYgKTtcXG5cXHRtZXRhbG5lc3NGYWN0b3IgKj0gdGV4ZWxNZXRhbG5lc3MuYjtcXG4jZW5kaWZcIjtcblxudmFyIG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1ldGFsbmVzc01hcDtcXG4jZW5kaWZcIjtcblxudmFyIG1vcnBobm9ybWFsX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDAgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMSAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwyIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDMgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDggXTtcXG5cXHQjZWxzZVxcblxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaHRhcmdldF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDAgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDEgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDIgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDMgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDQgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDUgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA1IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDYgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA2IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDcgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA3IF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxfZnJhZ21lbnRfYmVnaW4gPSBcIiNpZmRlZiBGTEFUX1NIQURFRFxcblxcdHZlYzMgZmR4ID0gdmVjMyggZEZkeCggdlZpZXdQb3NpdGlvbi54ICksIGRGZHgoIHZWaWV3UG9zaXRpb24ueSApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnogKSApO1xcblxcdHZlYzMgZmR5ID0gdmVjMyggZEZkeSggdlZpZXdQb3NpdGlvbi54ICksIGRGZHkoIHZWaWV3UG9zaXRpb24ueSApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnogKSApO1xcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCBjcm9zcyggZmR4LCBmZHkgKSApO1xcbiNlbHNlXFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIHZOb3JtYWwgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0bm9ybWFsID0gbm9ybWFsICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0I2lmZGVmIE9CSkVDVFNQQUNFX05PUk1BTE1BUFxcblxcdFxcdG5vcm1hbCA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0XFx0I2lmZGVmIEZMSVBfU0lERURcXG5cXHRcXHRcXHRub3JtYWwgPSAtIG5vcm1hbDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0bm9ybWFsID0gbm9ybWFsICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLXZWaWV3UG9zaXRpb24sIG5vcm1hbCApO1xcblxcdCNlbmRpZlxcbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBkSGR4eV9md2QoKSApO1xcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBub3JtYWxTY2FsZTtcXG5cXHQjaWZkZWYgT0JKRUNUU1BBQ0VfTk9STUFMTUFQXFxuXFx0XFx0dW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgcGVydHVyYk5vcm1hbDJBcmIoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0gKSB7XFxuXFx0XFx0XFx0dmVjMyBxMCA9IHZlYzMoIGRGZHgoIGV5ZV9wb3MueCApLCBkRmR4KCBleWVfcG9zLnkgKSwgZEZkeCggZXllX3Bvcy56ICkgKTtcXG5cXHRcXHRcXHR2ZWMzIHExID0gdmVjMyggZEZkeSggZXllX3Bvcy54ICksIGRGZHkoIGV5ZV9wb3MueSApLCBkRmR5KCBleWVfcG9zLnogKSApO1xcblxcdFxcdFxcdHZlYzIgc3QwID0gZEZkeCggdlV2LnN0ICk7XFxuXFx0XFx0XFx0dmVjMiBzdDEgPSBkRmR5KCB2VXYuc3QgKTtcXG5cXHRcXHRcXHRmbG9hdCBzY2FsZSA9IHNpZ24oIHN0MS50ICogc3QwLnMgLSBzdDAudCAqIHN0MS5zICk7XFxuXFx0XFx0XFx0dmVjMyBTID0gbm9ybWFsaXplKCAoIHEwICogc3QxLnQgLSBxMSAqIHN0MC50ICkgKiBzY2FsZSApO1xcblxcdFxcdFxcdHZlYzMgVCA9IG5vcm1hbGl6ZSggKCAtIHEwICogc3QxLnMgKyBxMSAqIHN0MC5zICkgKiBzY2FsZSApO1xcblxcdFxcdFxcdHZlYzMgTiA9IG5vcm1hbGl6ZSggc3VyZl9ub3JtICk7XFxuXFx0XFx0XFx0bWF0MyB0c24gPSBtYXQzKCBTLCBULCBOICk7XFxuXFx0XFx0XFx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRcXHRcXHRtYXBOLnh5ICo9IG5vcm1hbFNjYWxlO1xcblxcdFxcdFxcdG1hcE4ueHkgKj0gKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdFxcdFxcdHJldHVybiBub3JtYWxpemUoIHRzbiAqIG1hcE4gKTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBwYWNraW5nID0gXCJ2ZWMzIHBhY2tOb3JtYWxUb1JHQiggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggbm9ybWFsICkgKiAwLjUgKyAwLjU7XFxufVxcbnZlYzMgdW5wYWNrUkdCVG9Ob3JtYWwoIGNvbnN0IGluIHZlYzMgcmdiICkge1xcblxcdHJldHVybiAyLjAgKiByZ2IueHl6IC0gMS4wO1xcbn1cXG5jb25zdCBmbG9hdCBQYWNrVXBzY2FsZSA9IDI1Ni4gLyAyNTUuO2NvbnN0IGZsb2F0IFVucGFja0Rvd25zY2FsZSA9IDI1NS4gLyAyNTYuO1xcbmNvbnN0IHZlYzMgUGFja0ZhY3RvcnMgPSB2ZWMzKCAyNTYuICogMjU2LiAqIDI1Ni4sIDI1Ni4gKiAyNTYuLCAgMjU2LiApO1xcbmNvbnN0IHZlYzQgVW5wYWNrRmFjdG9ycyA9IFVucGFja0Rvd25zY2FsZSAvIHZlYzQoIFBhY2tGYWN0b3JzLCAxLiApO1xcbmNvbnN0IGZsb2F0IFNoaWZ0UmlnaHQ4ID0gMS4gLyAyNTYuO1xcbnZlYzQgcGFja0RlcHRoVG9SR0JBKCBjb25zdCBpbiBmbG9hdCB2ICkge1xcblxcdHZlYzQgciA9IHZlYzQoIGZyYWN0KCB2ICogUGFja0ZhY3RvcnMgKSwgdiApO1xcblxcdHIueXp3IC09IHIueHl6ICogU2hpZnRSaWdodDg7XFx0cmV0dXJuIHIgKiBQYWNrVXBzY2FsZTtcXG59XFxuZmxvYXQgdW5wYWNrUkdCQVRvRGVwdGgoIGNvbnN0IGluIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzICk7XFxufVxcbmZsb2F0IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCB2aWV3WiArIG5lYXIgKSAvICggbmVhciAtIGZhciApO1xcbn1cXG5mbG9hdCBvcnRob2dyYXBoaWNEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGxpbmVhckNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuIGxpbmVhckNsaXBaICogKCBuZWFyIC0gZmFyICkgLSBuZWFyO1xcbn1cXG5mbG9hdCB2aWV3WlRvUGVyc3BlY3RpdmVEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCggbmVhciArIHZpZXdaICkgKiBmYXIgKSAvICgoIGZhciAtIG5lYXIgKSAqIHZpZXdaICk7XFxufVxcbmZsb2F0IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBpbnZDbGlwWiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIG5lYXIgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiBpbnZDbGlwWiAtIGZhciApO1xcbn1cIjtcblxudmFyIHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQgPSBcIiNpZmRlZiBQUkVNVUxUSVBMSUVEX0FMUEhBXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiAqPSBnbF9GcmFnQ29sb3IuYTtcXG4jZW5kaWZcIjtcblxudmFyIHByb2plY3RfdmVydGV4ID0gXCJ2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIjtcblxudmFyIGRpdGhlcmluZ19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIERJVEhFUklORyApXFxuICBnbF9GcmFnQ29sb3IucmdiID0gZGl0aGVyaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXCI7XG5cbnZhciBkaXRoZXJpbmdfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIERJVEhFUklORyApXFxuXFx0dmVjMyBkaXRoZXJpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0XFx0ZmxvYXQgZ3JpZF9wb3NpdGlvbiA9IHJhbmQoIGdsX0ZyYWdDb29yZC54eSApO1xcblxcdFxcdHZlYzMgZGl0aGVyX3NoaWZ0X1JHQiA9IHZlYzMoIDAuMjUgLyAyNTUuMCwgLTAuMjUgLyAyNTUuMCwgMC4yNSAvIDI1NS4wICk7XFxuXFx0XFx0ZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcXG5cXHRcXHRyZXR1cm4gY29sb3IgKyBkaXRoZXJfc2hpZnRfUkdCO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9mcmFnbWVudCA9IFwiZmxvYXQgcm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzO1xcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dmVjNCB0ZXhlbFJvdWdobmVzcyA9IHRleHR1cmUyRCggcm91Z2huZXNzTWFwLCB2VXYgKTtcXG5cXHRyb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHJvdWdobmVzc01hcDtcXG4jZW5kaWZcIjtcblxudmFyIHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzcG90U2hhZG93TWFwWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlNwb3RTaGFkb3dDb29yZFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgcG9pbnRTaGFkb3dNYXBbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHRmbG9hdCB0ZXh0dXJlMkRDb21wYXJlKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdHJldHVybiBzdGVwKCBjb21wYXJlLCB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBkZXB0aHMsIHV2ICkgKSApO1xcblxcdH1cXG5cXHRmbG9hdCB0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHNpemUsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKSB7XFxuXFx0XFx0Y29uc3QgdmVjMiBvZmZzZXQgPSB2ZWMyKCAwLjAsIDEuMCApO1xcblxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaXplO1xcblxcdFxcdHZlYzIgY2VudHJvaWRVViA9IGZsb29yKCB1diAqIHNpemUgKyAwLjUgKSAvIHNpemU7XFxuXFx0XFx0ZmxvYXQgbGIgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueHgsIGNvbXBhcmUgKTtcXG5cXHRcXHRmbG9hdCBsdCA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC54eSwgY29tcGFyZSApO1xcblxcdFxcdGZsb2F0IHJiID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnl4LCBjb21wYXJlICk7XFxuXFx0XFx0ZmxvYXQgcnQgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueXksIGNvbXBhcmUgKTtcXG5cXHRcXHR2ZWMyIGYgPSBmcmFjdCggdXYgKiBzaXplICsgMC41ICk7XFxuXFx0XFx0ZmxvYXQgYSA9IG1peCggbGIsIGx0LCBmLnkgKTtcXG5cXHRcXHRmbG9hdCBiID0gbWl4KCByYiwgcnQsIGYueSApO1xcblxcdFxcdGZsb2F0IGMgPSBtaXgoIGEsIGIsIGYueCApO1xcblxcdFxcdHJldHVybiBjO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkICkge1xcblxcdFxcdGZsb2F0IHNoYWRvdyA9IDEuMDtcXG5cXHRcXHRzaGFkb3dDb29yZC54eXogLz0gc2hhZG93Q29vcmQudztcXG5cXHRcXHRzaGFkb3dDb29yZC56ICs9IHNoYWRvd0JpYXM7XFxuXFx0XFx0YnZlYzQgaW5GcnVzdHVtVmVjID0gYnZlYzQgKCBzaGFkb3dDb29yZC54ID49IDAuMCwgc2hhZG93Q29vcmQueCA8PSAxLjAsIHNoYWRvd0Nvb3JkLnkgPj0gMC4wLCBzaGFkb3dDb29yZC55IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgaW5GcnVzdHVtID0gYWxsKCBpbkZydXN0dW1WZWMgKTtcXG5cXHRcXHRidmVjMiBmcnVzdHVtVGVzdFZlYyA9IGJ2ZWMyKCBpbkZydXN0dW0sIHNoYWRvd0Nvb3JkLnogPD0gMS4wICk7XFxuXFx0XFx0Ym9vbCBmcnVzdHVtVGVzdCA9IGFsbCggZnJ1c3R1bVRlc3RWZWMgKTtcXG5cXHRcXHRpZiAoIGZydXN0dW1UZXN0ICkge1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4MCA9IC0gdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MSA9ICsgdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0c2hhZG93ID0gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkxICksIHNoYWRvd0Nvb3JkLnogKVxcblxcdFxcdFxcdCkgKiAoIDEuMCAvIDkuMCApO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApLCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHNoYWRvdztcXG5cXHR9XFxuXFx0dmVjMiBjdWJlVG9VViggdmVjMyB2LCBmbG9hdCB0ZXhlbFNpemVZICkge1xcblxcdFxcdHZlYzMgYWJzViA9IGFicyggdiApO1xcblxcdFxcdGZsb2F0IHNjYWxlVG9DdWJlID0gMS4wIC8gbWF4KCBhYnNWLngsIG1heCggYWJzVi55LCBhYnNWLnogKSApO1xcblxcdFxcdGFic1YgKj0gc2NhbGVUb0N1YmU7XFxuXFx0XFx0diAqPSBzY2FsZVRvQ3ViZSAqICggMS4wIC0gMi4wICogdGV4ZWxTaXplWSApO1xcblxcdFxcdHZlYzIgcGxhbmFyID0gdi54eTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RBVGV4ZWwgPSAxLjUgKiB0ZXhlbFNpemVZO1xcblxcdFxcdGZsb2F0IGFsbW9zdE9uZSA9IDEuMCAtIGFsbW9zdEFUZXhlbDtcXG5cXHRcXHRpZiAoIGFic1YueiA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0aWYgKCB2LnogPiAwLjAgKVxcblxcdFxcdFxcdFxcdHBsYW5hci54ID0gNC4wIC0gdi54O1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueCA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblggPSBzaWduKCB2LnggKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueiAqIHNpZ25YICsgMi4wICogc2lnblg7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi55ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWSA9IHNpZ24oIHYueSApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi54ICsgMi4wICogc2lnblkgKyAyLjA7XFxuXFx0XFx0XFx0cGxhbmFyLnkgPSB2LnogKiBzaWduWSAtIDIuMDtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHZlYzIoIDAuMTI1LCAwLjI1ICkgKiBwbGFuYXIgKyB2ZWMyKCAwLjM3NSwgMC43NSApO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRQb2ludFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQsIGZsb2F0IHNoYWRvd0NhbWVyYU5lYXIsIGZsb2F0IHNoYWRvd0NhbWVyYUZhciApIHtcXG5cXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gKCBzaGFkb3dNYXBTaXplICogdmVjMiggNC4wLCAyLjAgKSApO1xcblxcdFxcdHZlYzMgbGlnaHRUb1Bvc2l0aW9uID0gc2hhZG93Q29vcmQueHl6O1xcblxcdFxcdGZsb2F0IGRwID0gKCBsZW5ndGgoIGxpZ2h0VG9Qb3NpdGlvbiApIC0gc2hhZG93Q2FtZXJhTmVhciApIC8gKCBzaGFkb3dDYW1lcmFGYXIgLSBzaGFkb3dDYW1lcmFOZWFyICk7XFx0XFx0ZHAgKz0gc2hhZG93QmlhcztcXG5cXHRcXHR2ZWMzIGJkM0QgPSBub3JtYWxpemUoIGxpZ2h0VG9Qb3NpdGlvbiApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApXFxuXFx0XFx0XFx0dmVjMiBvZmZzZXQgPSB2ZWMyKCAtIDEsIDEgKSAqIHNoYWRvd1JhZGl1cyAqIHRleGVsU2l6ZS55O1xcblxcdFxcdFxcdHJldHVybiAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh4LCB0ZXhlbFNpemUueSApLCBkcCApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgc3BvdFNoYWRvd01hdHJpeFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc2hhZG93bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gPSBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZTcG90U2hhZG93Q29vcmRbIGkgXSA9IHNwb3RTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0gPSBwb2ludFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQgPSBcImZsb2F0IGdldFNoYWRvd01hc2soKSB7XFxuXFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93ICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIHNwb3RMaWdodC5zaGFkb3cgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRQb2ludExpZ2h0IHBvaW50TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIHBvaW50TGlnaHQuc2hhZG93ICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0LnNoYWRvd0JpYXMsIHBvaW50TGlnaHQuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNlbmRpZlxcblxcdHJldHVybiBzaGFkb3c7XFxufVwiO1xuXG52YXIgc2tpbmJhc2VfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBib25lTWF0WCA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC54ICk7XFxuXFx0bWF0NCBib25lTWF0WSA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC55ICk7XFxuXFx0bWF0NCBib25lTWF0WiA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC56ICk7XFxuXFx0bWF0NCBib25lTWF0VyA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC53ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXHQjaWZkZWYgQk9ORV9URVhUVVJFXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgYm9uZVRleHR1cmU7XFxuXFx0XFx0dW5pZm9ybSBpbnQgYm9uZVRleHR1cmVTaXplO1xcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRcXHRmbG9hdCBqID0gaSAqIDQuMDtcXG5cXHRcXHRcXHRmbG9hdCB4ID0gbW9kKCBqLCBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCB5ID0gZmxvb3IoIGogLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeSA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHR5ID0gZHkgKiAoIHkgKyAwLjUgKTtcXG5cXHRcXHRcXHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MiA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjMgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIG1hdDQgYm9uZU1hdHJpY2VzWyBNQVhfQk9ORVMgXTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gYm9uZU1hdHJpY2VzWyBpbnQoaSkgXTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHR2ZWM0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcblxcdHZlYzQgc2tpbm5lZCA9IHZlYzQoIDAuMCApO1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFkgKiBza2luVmVydGV4ICogc2tpbldlaWdodC55O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogc2tpbldlaWdodC56O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xcblxcdHRyYW5zZm9ybWVkID0gKCBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5uZWQgKS54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubm9ybWFsX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgc2tpbk1hdHJpeCA9IG1hdDQoIDAuMCApO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnkgKiBib25lTWF0WTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueiAqIGJvbmVNYXRaO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XFxuXFx0c2tpbk1hdHJpeCAgPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xcblxcdG9iamVjdE5vcm1hbCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3ROb3JtYWwsIDAuMCApICkueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgc3BlY3VsYXJtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XFxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHZlYzQgdGV4ZWxTcGVjdWxhciA9IHRleHR1cmUyRCggc3BlY3VsYXJNYXAsIHZVdiApO1xcblxcdHNwZWN1bGFyU3RyZW5ndGggPSB0ZXhlbFNwZWN1bGFyLnI7XFxuI2Vsc2VcXG5cXHRzcGVjdWxhclN0cmVuZ3RoID0gMS4wO1xcbiNlbmRpZlwiO1xuXG52YXIgc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgdG9uZW1hcHBpbmdfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBUT05FX01BUFBJTkcgKVxcbiAgZ2xfRnJhZ0NvbG9yLnJnYiA9IHRvbmVNYXBwaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZuZGVmIHNhdHVyYXRlXFxuXFx0I2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNlbmRpZlxcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nV2hpdGVQb2ludDtcXG52ZWMzIExpbmVhclRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdHJldHVybiB0b25lTWFwcGluZ0V4cG9zdXJlICogY29sb3I7XFxufVxcbnZlYzMgUmVpbmhhcmRUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggY29sb3IgLyAoIHZlYzMoIDEuMCApICsgY29sb3IgKSApO1xcbn1cXG4jZGVmaW5lIFVuY2hhcnRlZDJIZWxwZXIoIHggKSBtYXgoICggKCB4ICogKCAwLjE1ICogeCArIDAuMTAgKiAwLjUwICkgKyAwLjIwICogMC4wMiApIC8gKCB4ICogKCAwLjE1ICogeCArIDAuNTAgKSArIDAuMjAgKiAwLjMwICkgKSAtIDAuMDIgLyAwLjMwLCB2ZWMzKCAwLjAgKSApXFxudmVjMyBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIFVuY2hhcnRlZDJIZWxwZXIoIGNvbG9yICkgLyBVbmNoYXJ0ZWQySGVscGVyKCB2ZWMzKCB0b25lTWFwcGluZ1doaXRlUG9pbnQgKSApICk7XFxufVxcbnZlYzMgT3B0aW1pemVkQ2luZW9uVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRjb2xvciA9IG1heCggdmVjMyggMC4wICksIGNvbG9yIC0gMC4wMDQgKTtcXG5cXHRyZXR1cm4gcG93KCAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDAuNSApICkgLyAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDEuNyApICsgMC4wNiApLCB2ZWMzKCAyLjIgKSApO1xcbn1cXG52ZWMzIEFDRVNGaWxtaWNUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggKCBjb2xvciAqICggMi41MSAqIGNvbG9yICsgMC4wMyApICkgLyAoIGNvbG9yICogKCAyLjQzICogY29sb3IgKyAwLjU5ICkgKyAwLjE0ICkgKTtcXG59XCI7XG5cbnZhciB1dl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfcGFyc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQICkgfHwgZGVmaW5lZCggVVNFX0VNSVNTSVZFTUFQICkgfHwgZGVmaW5lZCggVVNFX1JPVUdITkVTU01BUCApIHx8IGRlZmluZWQoIFVTRV9NRVRBTE5FU1NNQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHRhdHRyaWJ1dGUgdmVjMiB1djI7XFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuI2VuZGlmXCI7XG5cbnZhciB1djJfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2VXYyID0gdXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgd29ybGRwb3NfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKVxcblxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbiNlbmRpZlwiO1xuXG52YXIgYmFja2dyb3VuZF9mcmFnID0gXCJ1bmlmb3JtIHNhbXBsZXIyRCB0MkQ7XFxudmFyeWluZyB2ZWMyIHZVdjtcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRCggdDJELCB2VXYgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIGJhY2tncm91bmRfdmVydCA9IFwidmFyeWluZyB2ZWMyIHZVdjtcXG51bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxudm9pZCBtYWluKCkge1xcblxcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuXFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbi54eSwgMS4wLCAxLjAgKTtcXG59XCI7XG5cbnZhciBjdWJlX2ZyYWcgPSBcInVuaWZvcm0gc2FtcGxlckN1YmUgdEN1YmU7XFxudW5pZm9ybSBmbG9hdCB0RmxpcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdGdsX0ZyYWdDb2xvci5hICo9IG9wYWNpdHk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgY3ViZV92ZXJ0ID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XFxufVwiO1xuXG52YXIgZGVwdGhfZnJhZyA9IFwiI2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0ZGlmZnVzZUNvbG9yLmEgPSBvcGFjaXR5O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB2ZWMzKCAxLjAgLSBnbF9GcmFnQ29vcmQueiApLCBvcGFjaXR5ICk7XFxuXFx0I2VsaWYgREVQVEhfUEFDS0lORyA9PSAzMjAxXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBnbF9GcmFnQ29vcmQueiApO1xcblxcdCNlbmRpZlxcbn1cIjtcblxudmFyIGRlcHRoX3ZlcnQgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG59XCI7XG5cbnZhciBkaXN0YW5jZVJHQkFfZnJhZyA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnVuaWZvcm0gdmVjMyByZWZlcmVuY2VQb3NpdGlvbjtcXG51bmlmb3JtIGZsb2F0IG5lYXJEaXN0YW5jZTtcXG51bmlmb3JtIGZsb2F0IGZhckRpc3RhbmNlO1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluICgpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRmbG9hdCBkaXN0ID0gbGVuZ3RoKCB2V29ybGRQb3NpdGlvbiAtIHJlZmVyZW5jZVBvc2l0aW9uICk7XFxuXFx0ZGlzdCA9ICggZGlzdCAtIG5lYXJEaXN0YW5jZSApIC8gKCBmYXJEaXN0YW5jZSAtIG5lYXJEaXN0YW5jZSApO1xcblxcdGRpc3QgPSBzYXR1cmF0ZSggZGlzdCApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHBhY2tEZXB0aFRvUkdCQSggZGlzdCApO1xcbn1cIjtcblxudmFyIGRpc3RhbmNlUkdCQV92ZXJ0ID0gXCIjZGVmaW5lIERJU1RBTkNFXFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHRcXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxufVwiO1xuXG52YXIgZXF1aXJlY3RfZnJhZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZERpcmVjdGlvbiApO1xcblxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCBkaXJlY3Rpb24ueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdHNhbXBsZVVWLnggPSBhdGFuKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIGVxdWlyZWN0X3ZlcnQgPSBcInZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG59XCI7XG5cbnZhciBsaW5lZGFzaGVkX2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIGZsb2F0IGRhc2hTaXplO1xcbnVuaWZvcm0gZmxvYXQgdG90YWxTaXplO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0aWYgKCBtb2QoIHZMaW5lRGlzdGFuY2UsIHRvdGFsU2l6ZSApID4gZGFzaFNpemUgKSB7XFxuXFx0XFx0ZGlzY2FyZDtcXG5cXHR9XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgbGluZWRhc2hlZF92ZXJ0ID0gXCJ1bmlmb3JtIGZsb2F0IHNjYWxlO1xcbmF0dHJpYnV0ZSBmbG9hdCBsaW5lRGlzdGFuY2U7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgbWVzaGJhc2ljX2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB2ZWMzKCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hiYXNpY192ZXJ0ID0gXCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIG1lc2hsYW1iZXJ0X2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSA9IGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGFtYmllbnRMaWdodENvbG9yICk7XFxuXFx0I2luY2x1ZGUgPGxpZ2h0bWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBCUkRGX0RpZmZ1c2VfTGFtYmVydCggZGlmZnVzZUNvbG9yLnJnYiApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlID0gKCBnbF9Gcm9udEZhY2luZyApID8gdkxpZ2h0RnJvbnQgOiB2TGlnaHRCYWNrO1xcblxcdCNlbHNlXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9IHZMaWdodEZyb250O1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKSAqIGdldFNoYWRvd01hc2soKTtcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hsYW1iZXJ0X3ZlcnQgPSBcIiNkZWZpbmUgTEFNQkVSVFxcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgbWVzaG1hdGNhcF9mcmFnID0gXCIjZGVmaW5lIE1BVENBUFxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXRjYXA7XFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0dmVjMyB2aWV3RGlyID0gbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyB4ID0gbm9ybWFsaXplKCB2ZWMzKCB2aWV3RGlyLnosIDAuMCwgLSB2aWV3RGlyLnggKSApO1xcblxcdHZlYzMgeSA9IGNyb3NzKCB2aWV3RGlyLCB4ICk7XFxuXFx0dmVjMiB1diA9IHZlYzIoIGRvdCggeCwgbm9ybWFsICksIGRvdCggeSwgbm9ybWFsICkgKSAqIDAuNDk1ICsgMC41O1xcblxcdCNpZmRlZiBVU0VfTUFUQ0FQXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHRleHR1cmUyRCggbWF0Y2FwLCB1diApO1xcblxcdFxcdG1hdGNhcENvbG9yID0gbWF0Y2FwVGV4ZWxUb0xpbmVhciggbWF0Y2FwQ29sb3IgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgbWF0Y2FwQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiICogbWF0Y2FwQ29sb3IucmdiO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XG5cbnZhciBtZXNobWF0Y2FwX3ZlcnQgPSBcIiNkZWZpbmUgTUFUQ0FQXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdFxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxufVwiO1xuXG52YXIgbWVzaHBob25nX2ZyYWcgPSBcIiNkZWZpbmUgUEhPTkdcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSB2ZWMzIHNwZWN1bGFyO1xcbnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Z3JhZGllbnRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19waG9uZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hwaG9uZ192ZXJ0ID0gXCIjZGVmaW5lIFBIT05HXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbnZhciBtZXNocGh5c2ljYWxfZnJhZyA9IFwiI2RlZmluZSBQSFlTSUNBTFxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IHJvdWdobmVzcztcXG51bmlmb3JtIGZsb2F0IG1ldGFsbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmbmRlZiBTVEFOREFSRFxcblxcdHVuaWZvcm0gZmxvYXQgY2xlYXJDb2F0O1xcblxcdHVuaWZvcm0gZmxvYXQgY2xlYXJDb2F0Um91Z2huZXNzO1xcbiNlbmRpZlxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hwaHlzaWNhbF92ZXJ0ID0gXCIjZGVmaW5lIFBIWVNJQ0FMXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgbm9ybWFsX2ZyYWcgPSBcIiNkZWZpbmUgTk9STUFMXFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgKCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgJiYgISBkZWZpbmVkKCBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAgKSApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgb3BhY2l0eSApO1xcbn1cIjtcblxudmFyIG5vcm1hbF92ZXJ0ID0gXCIjZGVmaW5lIE5PUk1BTFxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgKCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgJiYgISBkZWZpbmVkKCBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAgKSApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCAoIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIE9CSkVDVFNQQUNFX05PUk1BTE1BUCApIClcXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG4jZW5kaWZcXG59XCI7XG5cbnZhciBwb2ludHNfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfcGFydGljbGVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIHBvaW50c192ZXJ0ID0gXCJ1bmlmb3JtIGZsb2F0IHNpemU7XFxudW5pZm9ybSBmbG9hdCBzY2FsZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdGdsX1BvaW50U2l6ZSA9IHNpemU7XFxuXFx0I2lmZGVmIFVTRV9TSVpFQVRURU5VQVRJT05cXG5cXHRcXHRib29sIGlzUGVyc3BlY3RpdmUgPSAoIHByb2plY3Rpb25NYXRyaXhbIDIgXVsgMyBdID09IC0gMS4wICk7XFxuXFx0XFx0aWYgKCBpc1BlcnNwZWN0aXZlICkgZ2xfUG9pbnRTaXplICo9ICggc2NhbGUgLyAtIG12UG9zaXRpb24ueiApO1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbnZhciBzaGFkb3dfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGNvbG9yO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFza19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgb3BhY2l0eSAqICggMS4wIC0gZ2V0U2hhZG93TWFzaygpICkgKTtcXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIHNoYWRvd192ZXJ0ID0gXCIjaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgc3ByaXRlX2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIHNwcml0ZV92ZXJ0ID0gXCJ1bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbnVuaWZvcm0gdmVjMiBjZW50ZXI7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG5cXHR2ZWMyIHNjYWxlO1xcblxcdHNjYWxlLnggPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAwIF0ueCwgbW9kZWxNYXRyaXhbIDAgXS55LCBtb2RlbE1hdHJpeFsgMCBdLnogKSApO1xcblxcdHNjYWxlLnkgPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAxIF0ueCwgbW9kZWxNYXRyaXhbIDEgXS55LCBtb2RlbE1hdHJpeFsgMSBdLnogKSApO1xcblxcdCNpZm5kZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9ICggcHJvamVjdGlvbk1hdHJpeFsgMiBdWyAzIF0gPT0gLSAxLjAgKTtcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBzY2FsZSAqPSAtIG12UG9zaXRpb24uejtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMyIGFsaWduZWRQb3NpdGlvbiA9ICggcG9zaXRpb24ueHkgLSAoIGNlbnRlciAtIHZlYzIoIDAuNSApICkgKSAqIHNjYWxlO1xcblxcdHZlYzIgcm90YXRlZFBvc2l0aW9uO1xcblxcdHJvdGF0ZWRQb3NpdGlvbi54ID0gY29zKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggLSBzaW4oIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHRyb3RhdGVkUG9zaXRpb24ueSA9IHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54ICsgY29zKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XFxuXFx0bXZQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIFNoYWRlckNodW5rID0ge1xuXHRhbHBoYW1hcF9mcmFnbWVudDogYWxwaGFtYXBfZnJhZ21lbnQsXG5cdGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ6IGFscGhhbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGFscGhhdGVzdF9mcmFnbWVudDogYWxwaGF0ZXN0X2ZyYWdtZW50LFxuXHRhb21hcF9mcmFnbWVudDogYW9tYXBfZnJhZ21lbnQsXG5cdGFvbWFwX3BhcnNfZnJhZ21lbnQ6IGFvbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGJlZ2luX3ZlcnRleDogYmVnaW5fdmVydGV4LFxuXHRiZWdpbm5vcm1hbF92ZXJ0ZXg6IGJlZ2lubm9ybWFsX3ZlcnRleCxcblx0YnNkZnM6IGJzZGZzLFxuXHRidW1wbWFwX3BhcnNfZnJhZ21lbnQ6IGJ1bXBtYXBfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQsXG5cdGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4OiBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgsXG5cdGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgsXG5cdGNvbG9yX2ZyYWdtZW50OiBjb2xvcl9mcmFnbWVudCxcblx0Y29sb3JfcGFyc19mcmFnbWVudDogY29sb3JfcGFyc19mcmFnbWVudCxcblx0Y29sb3JfcGFyc192ZXJ0ZXg6IGNvbG9yX3BhcnNfdmVydGV4LFxuXHRjb2xvcl92ZXJ0ZXg6IGNvbG9yX3ZlcnRleCxcblx0Y29tbW9uOiBjb21tb24sXG5cdGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDogY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50LFxuXHRkZWZhdWx0bm9ybWFsX3ZlcnRleDogZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleDogZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4LFxuXHRkaXNwbGFjZW1lbnRtYXBfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfdmVydGV4LFxuXHRlbWlzc2l2ZW1hcF9mcmFnbWVudDogZW1pc3NpdmVtYXBfZnJhZ21lbnQsXG5cdGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGVuY29kaW5nc19mcmFnbWVudDogZW5jb2RpbmdzX2ZyYWdtZW50LFxuXHRlbmNvZGluZ3NfcGFyc19mcmFnbWVudDogZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9mcmFnbWVudDogZW52bWFwX2ZyYWdtZW50LFxuXHRlbnZtYXBfcGFyc19mcmFnbWVudDogZW52bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX3ZlcnRleDogZW52bWFwX3BhcnNfdmVydGV4LFxuXHRlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF92ZXJ0ZXg6IGVudm1hcF92ZXJ0ZXgsXG5cdGZvZ192ZXJ0ZXg6IGZvZ192ZXJ0ZXgsXG5cdGZvZ19wYXJzX3ZlcnRleDogZm9nX3BhcnNfdmVydGV4LFxuXHRmb2dfZnJhZ21lbnQ6IGZvZ19mcmFnbWVudCxcblx0Zm9nX3BhcnNfZnJhZ21lbnQ6IGZvZ19wYXJzX2ZyYWdtZW50LFxuXHRncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50OiBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRsaWdodG1hcF9mcmFnbWVudDogbGlnaHRtYXBfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19sYW1iZXJ0X3ZlcnRleDogbGlnaHRzX2xhbWJlcnRfdmVydGV4LFxuXHRsaWdodHNfcGFyc19iZWdpbjogbGlnaHRzX3BhcnNfYmVnaW4sXG5cdGxpZ2h0c19waG9uZ19mcmFnbWVudDogbGlnaHRzX3Bob25nX2ZyYWdtZW50LFxuXHRsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudDogbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50LFxuXHRsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19mcmFnbWVudF9iZWdpbjogbGlnaHRzX2ZyYWdtZW50X2JlZ2luLFxuXHRsaWdodHNfZnJhZ21lbnRfbWFwczogbGlnaHRzX2ZyYWdtZW50X21hcHMsXG5cdGxpZ2h0c19mcmFnbWVudF9lbmQ6IGxpZ2h0c19mcmFnbWVudF9lbmQsXG5cdGxvZ2RlcHRoYnVmX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudDogbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFxuXHRsb2dkZXB0aGJ1Zl92ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3ZlcnRleCxcblx0bWFwX2ZyYWdtZW50OiBtYXBfZnJhZ21lbnQsXG5cdG1hcF9wYXJzX2ZyYWdtZW50OiBtYXBfcGFyc19mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfZnJhZ21lbnQsXG5cdG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfZnJhZ21lbnQsXG5cdG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCxcblx0bW9ycGhub3JtYWxfdmVydGV4OiBtb3JwaG5vcm1hbF92ZXJ0ZXgsXG5cdG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4OiBtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxcblx0bW9ycGh0YXJnZXRfdmVydGV4OiBtb3JwaHRhcmdldF92ZXJ0ZXgsXG5cdG5vcm1hbF9mcmFnbWVudF9iZWdpbjogbm9ybWFsX2ZyYWdtZW50X2JlZ2luLFxuXHRub3JtYWxfZnJhZ21lbnRfbWFwczogbm9ybWFsX2ZyYWdtZW50X21hcHMsXG5cdG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50OiBub3JtYWxtYXBfcGFyc19mcmFnbWVudCxcblx0cGFja2luZzogcGFja2luZyxcblx0cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudDogcHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCxcblx0cHJvamVjdF92ZXJ0ZXg6IHByb2plY3RfdmVydGV4LFxuXHRkaXRoZXJpbmdfZnJhZ21lbnQ6IGRpdGhlcmluZ19mcmFnbWVudCxcblx0ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ6IGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfZnJhZ21lbnQ6IHJvdWdobmVzc21hcF9mcmFnbWVudCxcblx0cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ6IHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50LFxuXHRzaGFkb3dtYXBfcGFyc19mcmFnbWVudDogc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX3ZlcnRleDogc2hhZG93bWFwX3BhcnNfdmVydGV4LFxuXHRzaGFkb3dtYXBfdmVydGV4OiBzaGFkb3dtYXBfdmVydGV4LFxuXHRzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ6IHNoYWRvd21hc2tfcGFyc19mcmFnbWVudCxcblx0c2tpbmJhc2VfdmVydGV4OiBza2luYmFzZV92ZXJ0ZXgsXG5cdHNraW5uaW5nX3BhcnNfdmVydGV4OiBza2lubmluZ19wYXJzX3ZlcnRleCxcblx0c2tpbm5pbmdfdmVydGV4OiBza2lubmluZ192ZXJ0ZXgsXG5cdHNraW5ub3JtYWxfdmVydGV4OiBza2lubm9ybWFsX3ZlcnRleCxcblx0c3BlY3VsYXJtYXBfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX2ZyYWdtZW50LFxuXHRzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50OiBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50LFxuXHR0b25lbWFwcGluZ19mcmFnbWVudDogdG9uZW1hcHBpbmdfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQ6IHRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHV2X3BhcnNfZnJhZ21lbnQ6IHV2X3BhcnNfZnJhZ21lbnQsXG5cdHV2X3BhcnNfdmVydGV4OiB1dl9wYXJzX3ZlcnRleCxcblx0dXZfdmVydGV4OiB1dl92ZXJ0ZXgsXG5cdHV2Ml9wYXJzX2ZyYWdtZW50OiB1djJfcGFyc19mcmFnbWVudCxcblx0dXYyX3BhcnNfdmVydGV4OiB1djJfcGFyc192ZXJ0ZXgsXG5cdHV2Ml92ZXJ0ZXg6IHV2Ml92ZXJ0ZXgsXG5cdHdvcmxkcG9zX3ZlcnRleDogd29ybGRwb3NfdmVydGV4LFxuXG5cdGJhY2tncm91bmRfZnJhZzogYmFja2dyb3VuZF9mcmFnLFxuXHRiYWNrZ3JvdW5kX3ZlcnQ6IGJhY2tncm91bmRfdmVydCxcblx0Y3ViZV9mcmFnOiBjdWJlX2ZyYWcsXG5cdGN1YmVfdmVydDogY3ViZV92ZXJ0LFxuXHRkZXB0aF9mcmFnOiBkZXB0aF9mcmFnLFxuXHRkZXB0aF92ZXJ0OiBkZXB0aF92ZXJ0LFxuXHRkaXN0YW5jZVJHQkFfZnJhZzogZGlzdGFuY2VSR0JBX2ZyYWcsXG5cdGRpc3RhbmNlUkdCQV92ZXJ0OiBkaXN0YW5jZVJHQkFfdmVydCxcblx0ZXF1aXJlY3RfZnJhZzogZXF1aXJlY3RfZnJhZyxcblx0ZXF1aXJlY3RfdmVydDogZXF1aXJlY3RfdmVydCxcblx0bGluZWRhc2hlZF9mcmFnOiBsaW5lZGFzaGVkX2ZyYWcsXG5cdGxpbmVkYXNoZWRfdmVydDogbGluZWRhc2hlZF92ZXJ0LFxuXHRtZXNoYmFzaWNfZnJhZzogbWVzaGJhc2ljX2ZyYWcsXG5cdG1lc2hiYXNpY192ZXJ0OiBtZXNoYmFzaWNfdmVydCxcblx0bWVzaGxhbWJlcnRfZnJhZzogbWVzaGxhbWJlcnRfZnJhZyxcblx0bWVzaGxhbWJlcnRfdmVydDogbWVzaGxhbWJlcnRfdmVydCxcblx0bWVzaG1hdGNhcF9mcmFnOiBtZXNobWF0Y2FwX2ZyYWcsXG5cdG1lc2htYXRjYXBfdmVydDogbWVzaG1hdGNhcF92ZXJ0LFxuXHRtZXNocGhvbmdfZnJhZzogbWVzaHBob25nX2ZyYWcsXG5cdG1lc2hwaG9uZ192ZXJ0OiBtZXNocGhvbmdfdmVydCxcblx0bWVzaHBoeXNpY2FsX2ZyYWc6IG1lc2hwaHlzaWNhbF9mcmFnLFxuXHRtZXNocGh5c2ljYWxfdmVydDogbWVzaHBoeXNpY2FsX3ZlcnQsXG5cdG5vcm1hbF9mcmFnOiBub3JtYWxfZnJhZyxcblx0bm9ybWFsX3ZlcnQ6IG5vcm1hbF92ZXJ0LFxuXHRwb2ludHNfZnJhZzogcG9pbnRzX2ZyYWcsXG5cdHBvaW50c192ZXJ0OiBwb2ludHNfdmVydCxcblx0c2hhZG93X2ZyYWc6IHNoYWRvd19mcmFnLFxuXHRzaGFkb3dfdmVydDogc2hhZG93X3ZlcnQsXG5cdHNwcml0ZV9mcmFnOiBzcHJpdGVfZnJhZyxcblx0c3ByaXRlX3ZlcnQ6IHNwcml0ZV92ZXJ0XG59O1xuXG4vKipcbiAqIFVuaWZvcm0gVXRpbGl0aWVzXG4gKi9cblxuZnVuY3Rpb24gY2xvbmVVbmlmb3Jtcyggc3JjICkge1xuXG5cdHZhciBkc3QgPSB7fTtcblxuXHRmb3IgKCB2YXIgdSBpbiBzcmMgKSB7XG5cblx0XHRkc3RbIHUgXSA9IHt9O1xuXG5cdFx0Zm9yICggdmFyIHAgaW4gc3JjWyB1IF0gKSB7XG5cblx0XHRcdHZhciBwcm9wZXJ0eSA9IHNyY1sgdSBdWyBwIF07XG5cblx0XHRcdGlmICggcHJvcGVydHkgJiYgKCBwcm9wZXJ0eS5pc0NvbG9yIHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzTWF0cml4MyB8fCBwcm9wZXJ0eS5pc01hdHJpeDQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNWZWN0b3IyIHx8IHByb3BlcnR5LmlzVmVjdG9yMyB8fCBwcm9wZXJ0eS5pc1ZlY3RvcjQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNUZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LmNsb25lKCk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHByb3BlcnR5ICkgKSB7XG5cblx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LnNsaWNlKCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBkc3Q7XG5cbn1cblxuZnVuY3Rpb24gbWVyZ2VVbmlmb3JtcyggdW5pZm9ybXMgKSB7XG5cblx0dmFyIG1lcmdlZCA9IHt9O1xuXG5cdGZvciAoIHZhciB1ID0gMDsgdSA8IHVuaWZvcm1zLmxlbmd0aDsgdSArKyApIHtcblxuXHRcdHZhciB0bXAgPSBjbG9uZVVuaWZvcm1zKCB1bmlmb3Jtc1sgdSBdICk7XG5cblx0XHRmb3IgKCB2YXIgcCBpbiB0bXAgKSB7XG5cblx0XHRcdG1lcmdlZFsgcCBdID0gdG1wWyBwIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBtZXJnZWQ7XG5cbn1cblxuLy8gTGVnYWN5XG5cbnZhciBVbmlmb3Jtc1V0aWxzID0geyBjbG9uZTogY2xvbmVVbmlmb3JtcywgbWVyZ2U6IG1lcmdlVW5pZm9ybXMgfTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBDb2xvcktleXdvcmRzID0geyAnYWxpY2VibHVlJzogMHhGMEY4RkYsICdhbnRpcXVld2hpdGUnOiAweEZBRUJENywgJ2FxdWEnOiAweDAwRkZGRiwgJ2FxdWFtYXJpbmUnOiAweDdGRkZENCwgJ2F6dXJlJzogMHhGMEZGRkYsXG5cdCdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMixcblx0J2Jyb3duJzogMHhBNTJBMkEsICdidXJseXdvb2QnOiAweERFQjg4NywgJ2NhZGV0Ymx1ZSc6IDB4NUY5RUEwLCAnY2hhcnRyZXVzZSc6IDB4N0ZGRjAwLCAnY2hvY29sYXRlJzogMHhEMjY5MUUsICdjb3JhbCc6IDB4RkY3RjUwLFxuXHQnY29ybmZsb3dlcmJsdWUnOiAweDY0OTVFRCwgJ2Nvcm5zaWxrJzogMHhGRkY4REMsICdjcmltc29uJzogMHhEQzE0M0MsICdjeWFuJzogMHgwMEZGRkYsICdkYXJrYmx1ZSc6IDB4MDAwMDhCLCAnZGFya2N5YW4nOiAweDAwOEI4Qixcblx0J2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsXG5cdCdkYXJrb2xpdmVncmVlbic6IDB4NTU2QjJGLCAnZGFya29yYW5nZSc6IDB4RkY4QzAwLCAnZGFya29yY2hpZCc6IDB4OTkzMkNDLCAnZGFya3JlZCc6IDB4OEIwMDAwLCAnZGFya3NhbG1vbic6IDB4RTk5NjdBLCAnZGFya3NlYWdyZWVuJzogMHg4RkJDOEYsXG5cdCdkYXJrc2xhdGVibHVlJzogMHg0ODNEOEIsICdkYXJrc2xhdGVncmF5JzogMHgyRjRGNEYsICdkYXJrc2xhdGVncmV5JzogMHgyRjRGNEYsICdkYXJrdHVycXVvaXNlJzogMHgwMENFRDEsICdkYXJrdmlvbGV0JzogMHg5NDAwRDMsXG5cdCdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLFxuXHQnZmxvcmFsd2hpdGUnOiAweEZGRkFGMCwgJ2ZvcmVzdGdyZWVuJzogMHgyMjhCMjIsICdmdWNoc2lhJzogMHhGRjAwRkYsICdnYWluc2Jvcm8nOiAweERDRENEQywgJ2dob3N0d2hpdGUnOiAweEY4RjhGRiwgJ2dvbGQnOiAweEZGRDcwMCxcblx0J2dvbGRlbnJvZCc6IDB4REFBNTIwLCAnZ3JheSc6IDB4ODA4MDgwLCAnZ3JlZW4nOiAweDAwODAwMCwgJ2dyZWVueWVsbG93JzogMHhBREZGMkYsICdncmV5JzogMHg4MDgwODAsICdob25leWRldyc6IDB4RjBGRkYwLCAnaG90cGluayc6IDB4RkY2OUI0LFxuXHQnaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLFxuXHQnbGVtb25jaGlmZm9uJzogMHhGRkZBQ0QsICdsaWdodGJsdWUnOiAweEFERDhFNiwgJ2xpZ2h0Y29yYWwnOiAweEYwODA4MCwgJ2xpZ2h0Y3lhbic6IDB4RTBGRkZGLCAnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnOiAweEZBRkFEMiwgJ2xpZ2h0Z3JheSc6IDB4RDNEM0QzLFxuXHQnbGlnaHRncmVlbic6IDB4OTBFRTkwLCAnbGlnaHRncmV5JzogMHhEM0QzRDMsICdsaWdodHBpbmsnOiAweEZGQjZDMSwgJ2xpZ2h0c2FsbW9uJzogMHhGRkEwN0EsICdsaWdodHNlYWdyZWVuJzogMHgyMEIyQUEsICdsaWdodHNreWJsdWUnOiAweDg3Q0VGQSxcblx0J2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMixcblx0J2xpbmVuJzogMHhGQUYwRTYsICdtYWdlbnRhJzogMHhGRjAwRkYsICdtYXJvb24nOiAweDgwMDAwMCwgJ21lZGl1bWFxdWFtYXJpbmUnOiAweDY2Q0RBQSwgJ21lZGl1bWJsdWUnOiAweDAwMDBDRCwgJ21lZGl1bW9yY2hpZCc6IDB4QkE1NUQzLFxuXHQnbWVkaXVtcHVycGxlJzogMHg5MzcwREIsICdtZWRpdW1zZWFncmVlbic6IDB4M0NCMzcxLCAnbWVkaXVtc2xhdGVibHVlJzogMHg3QjY4RUUsICdtZWRpdW1zcHJpbmdncmVlbic6IDB4MDBGQTlBLCAnbWVkaXVtdHVycXVvaXNlJzogMHg0OEQxQ0MsXG5cdCdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELFxuXHQnbmF2eSc6IDB4MDAwMDgwLCAnb2xkbGFjZSc6IDB4RkRGNUU2LCAnb2xpdmUnOiAweDgwODAwMCwgJ29saXZlZHJhYic6IDB4NkI4RTIzLCAnb3JhbmdlJzogMHhGRkE1MDAsICdvcmFuZ2VyZWQnOiAweEZGNDUwMCwgJ29yY2hpZCc6IDB4REE3MEQ2LFxuXHQncGFsZWdvbGRlbnJvZCc6IDB4RUVFOEFBLCAncGFsZWdyZWVuJzogMHg5OEZCOTgsICdwYWxldHVycXVvaXNlJzogMHhBRkVFRUUsICdwYWxldmlvbGV0cmVkJzogMHhEQjcwOTMsICdwYXBheWF3aGlwJzogMHhGRkVGRDUsICdwZWFjaHB1ZmYnOiAweEZGREFCOSxcblx0J3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4Rixcblx0J3JveWFsYmx1ZSc6IDB4NDE2OUUxLCAnc2FkZGxlYnJvd24nOiAweDhCNDUxMywgJ3NhbG1vbic6IDB4RkE4MDcyLCAnc2FuZHlicm93bic6IDB4RjRBNDYwLCAnc2VhZ3JlZW4nOiAweDJFOEI1NywgJ3NlYXNoZWxsJzogMHhGRkY1RUUsXG5cdCdzaWVubmEnOiAweEEwNTIyRCwgJ3NpbHZlcic6IDB4QzBDMEMwLCAnc2t5Ymx1ZSc6IDB4ODdDRUVCLCAnc2xhdGVibHVlJzogMHg2QTVBQ0QsICdzbGF0ZWdyYXknOiAweDcwODA5MCwgJ3NsYXRlZ3JleSc6IDB4NzA4MDkwLCAnc25vdyc6IDB4RkZGQUZBLFxuXHQnc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLFxuXHQndmlvbGV0JzogMHhFRTgyRUUsICd3aGVhdCc6IDB4RjVERUIzLCAnd2hpdGUnOiAweEZGRkZGRiwgJ3doaXRlc21va2UnOiAweEY1RjVGNSwgJ3llbGxvdyc6IDB4RkZGRjAwLCAneWVsbG93Z3JlZW4nOiAweDlBQ0QzMiB9O1xuXG5mdW5jdGlvbiBDb2xvciggciwgZywgYiApIHtcblxuXHRpZiAoIGcgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHQvLyByIGlzIFRIUkVFLkNvbG9yLCBoZXggb3Igc3RyaW5nXG5cdFx0cmV0dXJuIHRoaXMuc2V0KCByICk7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzLnNldFJHQiggciwgZywgYiApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbG9yLnByb3RvdHlwZSwge1xuXG5cdGlzQ29sb3I6IHRydWUsXG5cblx0cjogMSwgZzogMSwgYjogMSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdHRoaXMuY29weSggdmFsdWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdHRoaXMuc2V0SGV4KCB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0dGhpcy5zZXRTdHlsZSggdmFsdWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMuciA9IHNjYWxhcjtcblx0XHR0aGlzLmcgPSBzY2FsYXI7XG5cdFx0dGhpcy5iID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIZXg6IGZ1bmN0aW9uICggaGV4ICkge1xuXG5cdFx0aGV4ID0gTWF0aC5mbG9vciggaGV4ICk7XG5cblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xuXHRcdHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmIgPSAoIGhleCAmIDI1NSApIC8gMjU1O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSR0I6IGZ1bmN0aW9uICggciwgZywgYiApIHtcblxuXHRcdHRoaXMuciA9IHI7XG5cdFx0dGhpcy5nID0gZztcblx0XHR0aGlzLmIgPSBiO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIU0w6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIHQgKSB7XG5cblx0XHRcdGlmICggdCA8IDAgKSB0ICs9IDE7XG5cdFx0XHRpZiAoIHQgPiAxICkgdCAtPSAxO1xuXHRcdFx0aWYgKCB0IDwgMSAvIDYgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiB0O1xuXHRcdFx0aWYgKCB0IDwgMSAvIDIgKSByZXR1cm4gcTtcblx0XHRcdGlmICggdCA8IDIgLyAzICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogKCAyIC8gMyAtIHQgKTtcblx0XHRcdHJldHVybiBwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldEhTTCggaCwgcywgbCApIHtcblxuXHRcdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblx0XHRcdGggPSBfTWF0aC5ldWNsaWRlYW5Nb2R1bG8oIGgsIDEgKTtcblx0XHRcdHMgPSBfTWF0aC5jbGFtcCggcywgMCwgMSApO1xuXHRcdFx0bCA9IF9NYXRoLmNsYW1wKCBsLCAwLCAxICk7XG5cblx0XHRcdGlmICggcyA9PT0gMCApIHtcblxuXHRcdFx0XHR0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciBwID0gbCA8PSAwLjUgPyBsICogKCAxICsgcyApIDogbCArIHMgLSAoIGwgKiBzICk7XG5cdFx0XHRcdHZhciBxID0gKCAyICogbCApIC0gcDtcblxuXHRcdFx0XHR0aGlzLnIgPSBodWUycmdiKCBxLCBwLCBoICsgMSAvIDMgKTtcblx0XHRcdFx0dGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApO1xuXHRcdFx0XHR0aGlzLmIgPSBodWUycmdiKCBxLCBwLCBoIC0gMSAvIDMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldFN0eWxlOiBmdW5jdGlvbiAoIHN0eWxlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0dmFyIG07XG5cblx0XHRpZiAoIG0gPSAvXigoPzpyZ2J8aHNsKWE/KVxcKFxccyooW15cXCldKilcXCkvLmV4ZWMoIHN0eWxlICkgKSB7XG5cblx0XHRcdC8vIHJnYiAvIGhzbFxuXG5cdFx0XHR2YXIgY29sb3I7XG5cdFx0XHR2YXIgbmFtZSA9IG1bIDEgXTtcblx0XHRcdHZhciBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDI1NSwwLDApIHJnYmEoMjU1LDAsMCwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMjU1O1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDI1NTtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAyNTU7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDEwMCUsMCUsMCUpIHJnYmEoMTAwJSwwJSwwJSwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDEwMDtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAxMDA7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnaHNsJzpcblx0XHRcdFx0Y2FzZSAnaHNsYSc6XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL14oWzAtOV0qXFwuP1swLTldKylcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBoc2woMTIwLDUwJSw1MCUpIGhzbGEoMTIwLDUwJSw1MCUsMC41KVxuXHRcdFx0XHRcdFx0dmFyIGggPSBwYXJzZUZsb2F0KCBjb2xvclsgMSBdICkgLyAzNjA7XG5cdFx0XHRcdFx0XHR2YXIgcyA9IHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dmFyIGwgPSBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSAvIDEwMDtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA1IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0SFNMKCBoLCBzLCBsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbSA9IC9eXFwjKFtBLUZhLWYwLTldKykkLy5leGVjKCBzdHlsZSApICkge1xuXG5cdFx0XHQvLyBoZXggY29sb3JcblxuXHRcdFx0dmFyIGhleCA9IG1bIDEgXTtcblx0XHRcdHZhciBzaXplID0gaGV4Lmxlbmd0aDtcblxuXHRcdFx0aWYgKCBzaXplID09PSAzICkge1xuXG5cdFx0XHRcdC8vICNmZjBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDAgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDIgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0fSBlbHNlIGlmICggc2l6ZSA9PT0gNiApIHtcblxuXHRcdFx0XHQvLyAjZmYwMDAwXG5cdFx0XHRcdHRoaXMuciA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAwICkgKyBoZXguY2hhckF0KCAxICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuZyA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAyICkgKyBoZXguY2hhckF0KCAzICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuYiA9IHBhcnNlSW50KCBoZXguY2hhckF0KCA0ICkgKyBoZXguY2hhckF0KCA1ICksIDE2ICkgLyAyNTU7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gY29sb3Iga2V5d29yZHNcblx0XHRcdHZhciBoZXggPSBDb2xvcktleXdvcmRzWyBzdHlsZSBdO1xuXG5cdFx0XHRpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIHJlZFxuXHRcdFx0XHR0aGlzLnNldEhleCggaGV4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gdW5rbm93biBjb2xvclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciAnICsgc3R5bGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnIsIHRoaXMuZywgdGhpcy5iICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlHYW1tYVRvTGluZWFyOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dGhpcy5yID0gTWF0aC5wb3coIGNvbG9yLnIsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5nID0gTWF0aC5wb3coIGNvbG9yLmcsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5iID0gTWF0aC5wb3coIGNvbG9yLmIsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dmFyIHNhZmVJbnZlcnNlID0gKCBnYW1tYUZhY3RvciA+IDAgKSA/ICggMS4wIC8gZ2FtbWFGYWN0b3IgKSA6IDEuMDtcblxuXHRcdHRoaXMuciA9IE1hdGgucG93KCBjb2xvci5yLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuZyA9IE1hdGgucG93KCBjb2xvci5nLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuYiA9IE1hdGgucG93KCBjb2xvci5iLCBzYWZlSW52ZXJzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb252ZXJ0R2FtbWFUb0xpbmVhcjogZnVuY3Rpb24gKCBnYW1tYUZhY3RvciApIHtcblxuXHRcdHRoaXMuY29weUdhbW1hVG9MaW5lYXIoIHRoaXMsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGdhbW1hRmFjdG9yICkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9HYW1tYSggdGhpcywgZ2FtbWFGYWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0ZnVuY3Rpb24gU1JHQlRvTGluZWFyKCBjICkge1xuXG5cdFx0XHRyZXR1cm4gKCBjIDwgMC4wNDA0NSApID8gYyAqIDAuMDc3Mzk5MzgwOCA6IE1hdGgucG93KCBjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb3B5U1JHQlRvTGluZWFyKCBjb2xvciApIHtcblxuXHRcdFx0dGhpcy5yID0gU1JHQlRvTGluZWFyKCBjb2xvci5yICk7XG5cdFx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHRcdHRoaXMuYiA9IFNSR0JUb0xpbmVhciggY29sb3IuYiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNvcHlMaW5lYXJUb1NSR0I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZ1bmN0aW9uIExpbmVhclRvU1JHQiggYyApIHtcblxuXHRcdFx0cmV0dXJuICggYyA8IDAuMDAzMTMwOCApID8gYyAqIDEyLjkyIDogMS4wNTUgKiAoIE1hdGgucG93KCBjLCAwLjQxNjY2ICkgKSAtIDAuMDU1O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvcHlMaW5lYXJUb1NSR0IoIGNvbG9yICkge1xuXG5cdFx0XHR0aGlzLnIgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLnIgKTtcblx0XHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdFx0dGhpcy5iID0gTGluZWFyVG9TUkdCKCBjb2xvci5iICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udmVydFNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb3B5U1JHQlRvTGluZWFyKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRMaW5lYXJUb1NSR0I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29weUxpbmVhclRvU1JHQiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRIZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiAoIHRoaXMuciAqIDI1NSApIDw8IDE2IF4gKCB0aGlzLmcgKiAyNTUgKSA8PCA4IF4gKCB0aGlzLmIgKiAyNTUgKSA8PCAwO1xuXG5cdH0sXG5cblx0Z2V0SGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gKCAnMDAwMDAwJyArIHRoaXMuZ2V0SGV4KCkudG9TdHJpbmcoIDE2ICkgKS5zbGljZSggLSA2ICk7XG5cblx0fSxcblxuXHRnZXRIU0w6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiAuZ2V0SFNMKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmI7XG5cblx0XHR2YXIgbWF4ID0gTWF0aC5tYXgoIHIsIGcsIGIgKTtcblx0XHR2YXIgbWluID0gTWF0aC5taW4oIHIsIGcsIGIgKTtcblxuXHRcdHZhciBodWUsIHNhdHVyYXRpb247XG5cdFx0dmFyIGxpZ2h0bmVzcyA9ICggbWluICsgbWF4ICkgLyAyLjA7XG5cblx0XHRpZiAoIG1pbiA9PT0gbWF4ICkge1xuXG5cdFx0XHRodWUgPSAwO1xuXHRcdFx0c2F0dXJhdGlvbiA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgZGVsdGEgPSBtYXggLSBtaW47XG5cblx0XHRcdHNhdHVyYXRpb24gPSBsaWdodG5lc3MgPD0gMC41ID8gZGVsdGEgLyAoIG1heCArIG1pbiApIDogZGVsdGEgLyAoIDIgLSBtYXggLSBtaW4gKTtcblxuXHRcdFx0c3dpdGNoICggbWF4ICkge1xuXG5cdFx0XHRcdGNhc2UgcjogaHVlID0gKCBnIC0gYiApIC8gZGVsdGEgKyAoIGcgPCBiID8gNiA6IDAgKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgZzogaHVlID0gKCBiIC0gciApIC8gZGVsdGEgKyAyOyBicmVhaztcblx0XHRcdFx0Y2FzZSBiOiBodWUgPSAoIHIgLSBnICkgLyBkZWx0YSArIDQ7IGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGh1ZSAvPSA2O1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmggPSBodWU7XG5cdFx0dGFyZ2V0LnMgPSBzYXR1cmF0aW9uO1xuXHRcdHRhcmdldC5sID0gbGlnaHRuZXNzO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9LFxuXG5cdGdldFN0eWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gJ3JnYignICsgKCAoIHRoaXMuciAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuZyAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuYiAqIDI1NSApIHwgMCApICsgJyknO1xuXG5cdH0sXG5cblx0b2Zmc2V0SFNMOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaHNsID0ge307XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gKCBoLCBzLCBsICkge1xuXG5cdFx0XHR0aGlzLmdldEhTTCggaHNsICk7XG5cblx0XHRcdGhzbC5oICs9IGg7IGhzbC5zICs9IHM7IGhzbC5sICs9IGw7XG5cblx0XHRcdHRoaXMuc2V0SFNMKCBoc2wuaCwgaHNsLnMsIGhzbC5sICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YWRkOiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yICs9IGNvbG9yLnI7XG5cdFx0dGhpcy5nICs9IGNvbG9yLmc7XG5cdFx0dGhpcy5iICs9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZENvbG9yczogZnVuY3Rpb24gKCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yMS5yICsgY29sb3IyLnI7XG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyBjb2xvcjIuZztcblx0XHR0aGlzLmIgPSBjb2xvcjEuYiArIGNvbG9yMi5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMuciArPSBzO1xuXHRcdHRoaXMuZyArPSBzO1xuXHRcdHRoaXMuYiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWI6IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBNYXRoLm1heCggMCwgdGhpcy5yIC0gY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IE1hdGgubWF4KCAwLCB0aGlzLmcgLSBjb2xvci5nICk7XG5cdFx0dGhpcy5iID0gTWF0aC5tYXgoIDAsIHRoaXMuYiAtIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgKj0gY29sb3Iucjtcblx0XHR0aGlzLmcgKj0gY29sb3IuZztcblx0XHR0aGlzLmIgKj0gY29sb3IuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMuciAqPSBzO1xuXHRcdHRoaXMuZyAqPSBzO1xuXHRcdHRoaXMuYiAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuciArPSAoIGNvbG9yLnIgLSB0aGlzLnIgKSAqIGFscGhhO1xuXHRcdHRoaXMuZyArPSAoIGNvbG9yLmcgLSB0aGlzLmcgKSAqIGFscGhhO1xuXHRcdHRoaXMuYiArPSAoIGNvbG9yLmIgLSB0aGlzLmIgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwSFNMOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaHNsQSA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXHRcdHZhciBoc2xCID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbGVycEhTTCggY29sb3IsIGFscGhhICkge1xuXG5cdFx0XHR0aGlzLmdldEhTTCggaHNsQSApO1xuXHRcdFx0Y29sb3IuZ2V0SFNMKCBoc2xCICk7XG5cblx0XHRcdHZhciBoID0gX01hdGgubGVycCggaHNsQS5oLCBoc2xCLmgsIGFscGhhICk7XG5cdFx0XHR2YXIgcyA9IF9NYXRoLmxlcnAoIGhzbEEucywgaHNsQi5zLCBhbHBoYSApO1xuXHRcdFx0dmFyIGwgPSBfTWF0aC5sZXJwKCBoc2xBLmwsIGhzbEIubCwgYWxwaGEgKTtcblxuXHRcdFx0dGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggYyApIHtcblxuXHRcdHJldHVybiAoIGMuciA9PT0gdGhpcy5yICkgJiYgKCBjLmcgPT09IHRoaXMuZyApICYmICggYy5iID09PSB0aGlzLmIgKTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLnIgPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5nID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLmIgPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5yO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLmc7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuYjtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0SGV4KCk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogVW5pZm9ybXMgbGlicmFyeSBmb3Igc2hhcmVkIHdlYmdsIHNoYWRlcnNcbiAqL1xuXG52YXIgVW5pZm9ybXNMaWIgPSB7XG5cblx0Y29tbW9uOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZWVlZWVlICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXG5cdH0sXG5cblx0c3BlY3VsYXJtYXA6IHtcblxuXHRcdHNwZWN1bGFyTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cblx0fSxcblxuXHRlbnZtYXA6IHtcblxuXHRcdGVudk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGZsaXBFbnZNYXA6IHsgdmFsdWU6IC0gMSB9LFxuXHRcdHJlZmxlY3Rpdml0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0cmVmcmFjdGlvblJhdGlvOiB7IHZhbHVlOiAwLjk4IH0sXG5cdFx0bWF4TWlwTGV2ZWw6IHsgdmFsdWU6IDAgfVxuXG5cdH0sXG5cblx0YW9tYXA6IHtcblxuXHRcdGFvTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0ZW1pc3NpdmVtYXA6IHtcblxuXHRcdGVtaXNzaXZlTWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDEsIDEgKSB9XG5cblx0fSxcblxuXHRkaXNwbGFjZW1lbnRtYXA6IHtcblxuXHRcdGRpc3BsYWNlbWVudE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRyb3VnaG5lc3NtYXA6IHtcblxuXHRcdHJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRtZXRhbG5lc3NtYXA6IHtcblxuXHRcdG1ldGFsbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfVxuXG5cdH0sXG5cblx0bGlnaHRzOiB7XG5cblx0XHRhbWJpZW50TGlnaHRDb2xvcjogeyB2YWx1ZTogW10gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGNvbG9yOiB7fSxcblxuXHRcdFx0c2hhZG93OiB7fSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRzcG90TGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fSxcblx0XHRcdGNvbmVDb3M6IHt9LFxuXHRcdFx0cGVudW1icmFDb3M6IHt9LFxuXHRcdFx0ZGVjYXk6IHt9LFxuXG5cdFx0XHRzaGFkb3c6IHt9LFxuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge31cblx0XHR9IH0sXG5cblx0XHRzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRwb2ludExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRlY2F5OiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fSxcblxuXHRcdFx0c2hhZG93OiB7fSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9LFxuXHRcdFx0c2hhZG93Q2FtZXJhTmVhcjoge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFGYXI6IHt9XG5cdFx0fSB9LFxuXG5cdFx0cG9pbnRTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0cG9pbnRTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRoZW1pc3BoZXJlTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdHNreUNvbG9yOiB7fSxcblx0XHRcdGdyb3VuZENvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IEJSREYgZGF0YSBuZWVkcyB0byBiZSBtb3ZlZCBmcm9tIGV4YW1wbGUgdG8gbWFpbiBzcmNcblx0XHRyZWN0QXJlYUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdHdpZHRoOiB7fSxcblx0XHRcdGhlaWdodDoge31cblx0XHR9IH1cblxuXHR9LFxuXG5cdHBvaW50czoge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGVlZWVlZSApIH0sXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2l6ZTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2NhbGU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGVlZWVlZSApIH0sXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0Y2VudGVyOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSB9LFxuXHRcdHJvdGF0aW9uOiB7IHZhbHVlOiAwLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqL1xuXG52YXIgU2hhZGVyTGliID0ge1xuXG5cdGJhc2ljOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX2ZyYWdcblxuXHR9LFxuXG5cdGxhbWJlcnQ6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF9mcmFnXG5cblx0fSxcblxuXHRwaG9uZzoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmdyYWRpZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHNwZWN1bGFyOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MTExMTExICkgfSxcblx0XHRcdFx0c2hpbmluZXNzOiB7IHZhbHVlOiAzMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBob25nX2ZyYWdcblxuXHR9LFxuXG5cdHN0YW5kYXJkOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLnJvdWdobmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLm1ldGFsbmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0XHRyb3VnaG5lc3M6IHsgdmFsdWU6IDAuNSB9LFxuXHRcdFx0XHRtZXRhbG5lc3M6IHsgdmFsdWU6IDAuNSB9LFxuXHRcdFx0XHRlbnZNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSAvLyB0ZW1wb3Jhcnlcblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG5cdH0sXG5cblx0bWF0Y2FwOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0bWF0Y2FwOiB7IHZhbHVlOiBudWxsIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF9mcmFnXG5cblx0fSxcblxuXHRwb2ludHM6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5wb2ludHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfZnJhZ1xuXG5cdH0sXG5cblx0ZGFzaGVkOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRzY2FsZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRkYXNoU2l6ZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHR0b3RhbFNpemU6IHsgdmFsdWU6IDIgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX2ZyYWdcblxuXHR9LFxuXG5cdGRlcHRoOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF9mcmFnXG5cblx0fSxcblxuXHRub3JtYWw6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubm9ybWFsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm5vcm1hbF9mcmFnXG5cblx0fSxcblxuXHRzcHJpdGU6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcHJpdGUsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfZnJhZ1xuXG5cdH0sXG5cblx0YmFja2dyb3VuZDoge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0MkQ6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5iYWNrZ3JvdW5kX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfZnJhZ1xuXG5cdH0sXG5cdC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly9cdEN1YmUgbWFwIHNoYWRlclxuXHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdGN1YmU6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR0Q3ViZTogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dEZsaXA6IHsgdmFsdWU6IC0gMSB9LFxuXHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmN1YmVfZnJhZ1xuXG5cdH0sXG5cblx0ZXF1aXJlY3Q6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR0RXF1aXJlY3Q6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF9mcmFnXG5cblx0fSxcblxuXHRkaXN0YW5jZVJHQkE6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdHJlZmVyZW5jZVBvc2l0aW9uOiB7IHZhbHVlOiBuZXcgVmVjdG9yMygpIH0sXG5cdFx0XHRcdG5lYXJEaXN0YW5jZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRmYXJEaXN0YW5jZTogeyB2YWx1ZTogMTAwMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGlzdGFuY2VSR0JBX2ZyYWdcblxuXHR9LFxuXG5cdHNoYWRvdzoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0Y29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMCApIH0sXG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9LFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd19mcmFnXG5cblx0fVxuXG59O1xuXG5TaGFkZXJMaWIucGh5c2ljYWwgPSB7XG5cblx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRTaGFkZXJMaWIuc3RhbmRhcmQudW5pZm9ybXMsXG5cdFx0e1xuXHRcdFx0Y2xlYXJDb2F0OiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRjbGVhckNvYXRSb3VnaG5lc3M6IHsgdmFsdWU6IDAgfVxuXHRcdH1cblx0XSApLFxuXG5cdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xBbmltYXRpb24oKSB7XG5cblx0dmFyIGNvbnRleHQgPSBudWxsO1xuXHR2YXIgaXNBbmltYXRpbmcgPSBmYWxzZTtcblx0dmFyIGFuaW1hdGlvbkxvb3AgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0aWYgKCBpc0FuaW1hdGluZyA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRhbmltYXRpb25Mb29wKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0Y29udGV4dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggaXNBbmltYXRpbmcgPT09IHRydWUgKSByZXR1cm47XG5cdFx0XHRpZiAoIGFuaW1hdGlvbkxvb3AgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0c2V0QW5pbWF0aW9uTG9vcDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdFx0YW5pbWF0aW9uTG9vcCA9IGNhbGxiYWNrO1xuXG5cdFx0fSxcblxuXHRcdHNldENvbnRleHQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnRleHQgPSB2YWx1ZTtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEF0dHJpYnV0ZXMoIGdsICkge1xuXG5cdHZhciBidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHR2YXIgdXNhZ2UgPSBhdHRyaWJ1dGUuZHluYW1pYyA/IDM1MDQ4IDogMzUwNDQ7XG5cblx0XHR2YXIgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBidWZmZXJUeXBlLCBhcnJheSwgdXNhZ2UgKTtcblxuXHRcdGF0dHJpYnV0ZS5vblVwbG9hZENhbGxiYWNrKCk7XG5cblx0XHR2YXIgdHlwZSA9IDUxMjY7XG5cblx0XHRpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5ICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVuc3VwcG9ydGVkIGRhdGEgYnVmZmVyIGZvcm1hdDogRmxvYXQ2NEFycmF5LicgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTIzO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTI1O1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjE7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YnVmZmVyOiBidWZmZXIsXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0Ynl0ZXNQZXJFbGVtZW50OiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdHZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyKCBidWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHR2YXIgdXBkYXRlUmFuZ2UgPSBhdHRyaWJ1dGUudXBkYXRlUmFuZ2U7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblxuXHRcdGlmICggYXR0cmlidXRlLmR5bmFtaWMgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5idWZmZXJEYXRhKCBidWZmZXJUeXBlLCBhcnJheSwgMzUwNDQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHVwZGF0ZVJhbmdlLmNvdW50ID09PSAtIDEgKSB7XG5cblx0XHRcdC8vIE5vdCB1c2luZyB1cGRhdGUgcmFuZ2VzXG5cblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIDAsIGFycmF5ICk7XG5cblx0XHR9IGVsc2UgaWYgKCB1cGRhdGVSYW5nZS5jb3VudCA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMT2JqZWN0cy51cGRhdGVCdWZmZXI6IGR5bmFtaWMgVEhSRUUuQnVmZmVyQXR0cmlidXRlIG1hcmtlZCBhcyBuZWVkc1VwZGF0ZSBidXQgdXBkYXRlUmFuZ2UuY291bnQgaXMgMCwgZW5zdXJlIHlvdSBhcmUgdXNpbmcgc2V0IG1ldGhvZHMgb3IgdXBkYXRpbmcgbWFudWFsbHkuJyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdGFycmF5LnN1YmFycmF5KCB1cGRhdGVSYW5nZS5vZmZzZXQsIHVwZGF0ZVJhbmdlLm9mZnNldCArIHVwZGF0ZVJhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0dXBkYXRlUmFuZ2UuY291bnQgPSAtIDE7IC8vIHJlc2V0IHJhbmdlXG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZ2V0KCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRyZXR1cm4gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdHZhciBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhICkge1xuXG5cdFx0XHRnbC5kZWxldGVCdWZmZXIoIGRhdGEuYnVmZmVyICk7XG5cblx0XHRcdGJ1ZmZlcnMuZGVsZXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHR2YXIgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRidWZmZXJzLnNldCggYXR0cmlidXRlLCBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkYXRhLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbiApIHtcblxuXHRcdFx0dXBkYXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICk7XG5cblx0XHRcdGRhdGEudmVyc2lvbiA9IGF0dHJpYnV0ZS52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRmFjZTMoIGEsIGIsIGMsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0dGhpcy5hID0gYTtcblx0dGhpcy5iID0gYjtcblx0dGhpcy5jID0gYztcblxuXHR0aGlzLm5vcm1hbCA9ICggbm9ybWFsICYmIG5vcm1hbC5pc1ZlY3RvcjMgKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudmVydGV4Tm9ybWFscyA9IEFycmF5LmlzQXJyYXkoIG5vcm1hbCApID8gbm9ybWFsIDogW107XG5cblx0dGhpcy5jb2xvciA9ICggY29sb3IgJiYgY29sb3IuaXNDb2xvciApID8gY29sb3IgOiBuZXcgQ29sb3IoKTtcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBBcnJheS5pc0FycmF5KCBjb2xvciApID8gY29sb3IgOiBbXTtcblxuXHR0aGlzLm1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGYWNlMy5wcm90b3R5cGUsIHtcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmEgPSBzb3VyY2UuYTtcblx0XHR0aGlzLmIgPSBzb3VyY2UuYjtcblx0XHR0aGlzLmMgPSBzb3VyY2UuYztcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIHNvdXJjZS5ub3JtYWwgKTtcblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbEluZGV4ID0gc291cmNlLm1hdGVyaWFsSW5kZXg7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gc291cmNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudmVydGV4Tm9ybWFsc1sgaSBdID0gc291cmNlLnZlcnRleE5vcm1hbHNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudmVydGV4Q29sb3JzWyBpIF0gPSBzb3VyY2UudmVydGV4Q29sb3JzWyBpIF0uY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBFdWxlciggeCwgeSwgeiwgb3JkZXIgKSB7XG5cblx0dGhpcy5feCA9IHggfHwgMDtcblx0dGhpcy5feSA9IHkgfHwgMDtcblx0dGhpcy5feiA9IHogfHwgMDtcblx0dGhpcy5fb3JkZXIgPSBvcmRlciB8fCBFdWxlci5EZWZhdWx0T3JkZXI7XG5cbn1cblxuRXVsZXIuUm90YXRpb25PcmRlcnMgPSBbICdYWVonLCAnWVpYJywgJ1pYWScsICdYWlknLCAnWVhaJywgJ1pZWCcgXTtcblxuRXVsZXIuRGVmYXVsdE9yZGVyID0gJ1hZWic7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBFdWxlci5wcm90b3R5cGUsIHtcblxuXHR4OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRvcmRlcjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl9vcmRlcjtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX29yZGVyID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggRXVsZXIucHJvdG90eXBlLCB7XG5cblx0aXNFdWxlcjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgb3JkZXIgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyIHx8IHRoaXMuX29yZGVyO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5feCA9IGV1bGVyLl94O1xuXHRcdHRoaXMuX3kgPSBldWxlci5feTtcblx0XHR0aGlzLl96ID0gZXVsZXIuX3o7XG5cdFx0dGhpcy5fb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4OiBmdW5jdGlvbiAoIG0sIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHR2YXIgY2xhbXAgPSBfTWF0aC5jbGFtcDtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR2YXIgdGUgPSBtLmVsZW1lbnRzO1xuXHRcdHZhciBtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdO1xuXHRcdHZhciBtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdO1xuXHRcdHZhciBtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdG9yZGVyID0gb3JkZXIgfHwgdGhpcy5fb3JkZXI7XG5cblx0XHRpZiAoIG9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggY2xhbXAoIG0xMywgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTEzICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0yMywgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTIzICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMjIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXHRcdFx0XHR0aGlzLl96ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKCBjbGFtcCggbTMyLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMzIgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWllYJyApIHtcblxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggLSBjbGFtcCggbTMxLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMzEgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTMzICk7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIGNsYW1wKCBtMjEsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0yMSApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0yMiApO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMTIsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0xMiApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTtcblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZ2l2ZW4gdW5zdXBwb3J0ZWQgb3JkZXI6ICcgKyBvcmRlciApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb3JkZXIgPSBvcmRlcjtcblxuXHRcdGlmICggdXBkYXRlICE9PSBmYWxzZSApIHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbVF1YXRlcm5pb24oIHEsIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHRcdG1hdHJpeC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoIG1hdHJpeCwgb3JkZXIsIHVwZGF0ZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiwgb3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyIHx8IHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRyZW9yZGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBXQVJOSU5HOiB0aGlzIGRpc2NhcmRzIHJldm9sdXRpb24gaW5mb3JtYXRpb24gLWJob3VzdG9uXG5cblx0XHR2YXIgcSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmVvcmRlciggbmV3T3JkZXIgKSB7XG5cblx0XHRcdHEuc2V0RnJvbUV1bGVyKCB0aGlzICk7XG5cblx0XHRcdHJldHVybiB0aGlzLnNldEZyb21RdWF0ZXJuaW9uKCBxLCBuZXdPcmRlciApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0cmV0dXJuICggZXVsZXIuX3ggPT09IHRoaXMuX3ggKSAmJiAoIGV1bGVyLl95ID09PSB0aGlzLl95ICkgJiYgKCBldWxlci5feiA9PT0gdGhpcy5feiApICYmICggZXVsZXIuX29yZGVyID09PSB0aGlzLl9vcmRlciApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyAwIF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyAyIF07XG5cdFx0aWYgKCBhcnJheVsgMyBdICE9PSB1bmRlZmluZWQgKSB0aGlzLl9vcmRlciA9IGFycmF5WyAzIF07XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0dG9WZWN0b3IzOiBmdW5jdGlvbiAoIG9wdGlvbmFsUmVzdWx0ICkge1xuXG5cdFx0aWYgKCBvcHRpb25hbFJlc3VsdCApIHtcblxuXHRcdFx0cmV0dXJuIG9wdGlvbmFsUmVzdWx0LnNldCggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IzKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRvbkNoYW5nZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvbkNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMYXllcnMoKSB7XG5cblx0dGhpcy5tYXNrID0gMSB8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTGF5ZXJzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrID0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9LFxuXG5cdGVuYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrIHw9IDEgPDwgY2hhbm5lbCB8IDA7XG5cblx0fSxcblxuXHR0b2dnbGU6IGZ1bmN0aW9uICggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayBePSAxIDw8IGNoYW5uZWwgfCAwO1xuXG5cdH0sXG5cblx0ZGlzYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrICY9IH4gKCAxIDw8IGNoYW5uZWwgfCAwICk7XG5cblx0fSxcblxuXHR0ZXN0OiBmdW5jdGlvbiAoIGxheWVycyApIHtcblxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGVsZXBoYW50YXR3b3JrIC8gd3d3LmVsZXBoYW50YXR3b3JrLmNoXG4gKi9cblxudmFyIG9iamVjdDNESWQgPSAwO1xuXG5mdW5jdGlvbiBPYmplY3QzRCgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IG9iamVjdDNESWQgKysgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnT2JqZWN0M0QnO1xuXG5cdHRoaXMucGFyZW50ID0gbnVsbDtcblx0dGhpcy5jaGlsZHJlbiA9IFtdO1xuXG5cdHRoaXMudXAgPSBPYmplY3QzRC5EZWZhdWx0VXAuY2xvbmUoKTtcblxuXHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuXG5cdGZ1bmN0aW9uIG9uUm90YXRpb25DaGFuZ2UoKSB7XG5cblx0XHRxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggcm90YXRpb24sIGZhbHNlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUXVhdGVybmlvbkNoYW5nZSgpIHtcblxuXHRcdHJvdGF0aW9uLnNldEZyb21RdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLCB1bmRlZmluZWQsIGZhbHNlICk7XG5cblx0fVxuXG5cdHJvdGF0aW9uLm9uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7XG5cdHF1YXRlcm5pb24ub25DaGFuZ2UoIG9uUXVhdGVybmlvbkNoYW5nZSApO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0cG9zaXRpb246IHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogcG9zaXRpb25cblx0XHR9LFxuXHRcdHJvdGF0aW9uOiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHJvdGF0aW9uXG5cdFx0fSxcblx0XHRxdWF0ZXJuaW9uOiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHF1YXRlcm5pb25cblx0XHR9LFxuXHRcdHNjYWxlOiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHNjYWxlXG5cdFx0fSxcblx0XHRtb2RlbFZpZXdNYXRyaXg6IHtcblx0XHRcdHZhbHVlOiBuZXcgTWF0cml4NCgpXG5cdFx0fSxcblx0XHRub3JtYWxNYXRyaXg6IHtcblx0XHRcdHZhbHVlOiBuZXcgTWF0cml4MygpXG5cdFx0fVxuXHR9ICk7XG5cblx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR0aGlzLm1hdHJpeFdvcmxkID0gbmV3IE1hdHJpeDQoKTtcblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZTtcblx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cdHRoaXMudmlzaWJsZSA9IHRydWU7XG5cblx0dGhpcy5jYXN0U2hhZG93ID0gZmFsc2U7XG5cdHRoaXMucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG5cdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xuXG5cdHRoaXMudXNlckRhdGEgPSB7fTtcblxufVxuXG5PYmplY3QzRC5EZWZhdWx0VXAgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuT2JqZWN0M0QuRGVmYXVsdE1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xuXG5PYmplY3QzRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogT2JqZWN0M0QsXG5cblx0aXNPYmplY3QzRDogdHJ1ZSxcblxuXHRvbkJlZm9yZVJlbmRlcjogZnVuY3Rpb24gKCkge30sXG5cdG9uQWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdGFwcGx5TWF0cml4OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMubWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdHRoaXMubWF0cml4LmRlY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0fSxcblxuXHRhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGU6IGZ1bmN0aW9uICggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBhc3N1bWVzIGF4aXMgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21FdWxlcjogZnVuY3Rpb24gKCBldWxlciApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIGV1bGVyLCB0cnVlICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHQvLyBhc3N1bWVzIHEgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHEgKTtcblxuXHR9LFxuXG5cdHJvdGF0ZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIG9iamVjdCBzcGFjZVxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR2YXIgcTEgPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZU9uQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5tdWx0aXBseSggcTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVPbldvcmxkQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIHdvcmxkIHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblx0XHQvLyBtZXRob2QgYXNzdW1lcyBubyByb3RhdGVkIHBhcmVudFxuXG5cdFx0dmFyIHExID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVPbldvcmxkQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVgoIGFuZ2xlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIHYxLCBhbmdsZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCB2MSwgYW5nbGUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggdjEsIGFuZ2xlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGVPbkF4aXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBvYmplY3QgYnkgZGlzdGFuY2UgYWxvbmcgYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkge1xuXG5cdFx0XHR2MS5jb3B5KCBheGlzICkuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLnF1YXRlcm5pb24gKTtcblxuXHRcdFx0dGhpcy5wb3NpdGlvbi5hZGQoIHYxLm11bHRpcGx5U2NhbGFyKCBkaXN0YW5jZSApICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDEsIDAsIDAgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGVYKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCB2MSwgZGlzdGFuY2UgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZVk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAwLCAxLCAwICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdHJhbnNsYXRlWSggZGlzdGFuY2UgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggdjEsIGRpc3RhbmNlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGVaOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHRyYW5zbGF0ZVooIGRpc3RhbmNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIHYxLCBkaXN0YW5jZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9jYWxUb1dvcmxkOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fSxcblxuXHR3b3JsZFRvTG9jYWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gd29ybGRUb0xvY2FsKCB2ZWN0b3IgKSB7XG5cblx0XHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtMS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICkgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBvYmplY3RzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBwYXJlbnQocylcblxuXHRcdHZhciBxMSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvb2tBdCggeCwgeSwgeiApIHtcblxuXHRcdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcblxuXHRcdFx0XHR0YXJnZXQuY29weSggeCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRhcmdldC5zZXQoIHgsIHksIHogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRcdHBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRpZiAoIHRoaXMuaXNDYW1lcmEgKSB7XG5cblx0XHRcdFx0bTEubG9va0F0KCBwb3NpdGlvbiwgdGFyZ2V0LCB0aGlzLnVwICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bTEubG9va0F0KCB0YXJnZXQsIHBvc2l0aW9uLCB0aGlzLnVwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbTEgKTtcblxuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0bTEuZXh0cmFjdFJvdGF0aW9uKCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0cTEuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtMSApO1xuXHRcdFx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIHExLmludmVyc2UoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhZGQ6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmFkZCggYXJndW1lbnRzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0ID09PSB0aGlzICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCBcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhbid0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLlwiLCBvYmplY3QgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIG9iamVjdCAmJiBvYmplY3QuaXNPYmplY3QzRCApICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5wYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0b2JqZWN0LnBhcmVudC5yZW1vdmUoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2FkZGVkJyB9ICk7XG5cblx0XHRcdHRoaXMuY2hpbGRyZW4ucHVzaCggb2JqZWN0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCBcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC5cIiwgb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMucmVtb3ZlKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKCBvYmplY3QgKTtcblxuXHRcdGlmICggaW5kZXggIT09IC0gMSApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XG5cblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdyZW1vdmVkJyB9ICk7XG5cblx0XHRcdHRoaXMuY2hpbGRyZW4uc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRPYmplY3RCeUlkOiBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ2lkJywgaWQgKTtcblxuXHR9LFxuXG5cdGdldE9iamVjdEJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ25hbWUnLCBuYW1lICk7XG5cblx0fSxcblxuXHRnZXRPYmplY3RCeVByb3BlcnR5OiBmdW5jdGlvbiAoIG5hbWUsIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzWyBuYW1lIF0gPT09IHZhbHVlICkgcmV0dXJuIHRoaXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bIGkgXTtcblx0XHRcdHZhciBvYmplY3QgPSBjaGlsZC5nZXRPYmplY3RCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBvYmplY3Q7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0fSxcblxuXHRnZXRXb3JsZFBvc2l0aW9uOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRQb3NpdGlvbigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9LFxuXG5cdGdldFdvcmxkUXVhdGVybmlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRRdWF0ZXJuaW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBwb3NpdGlvbiwgdGFyZ2V0LCBzY2FsZSApO1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0V29ybGRTY2FsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0V29ybGRTY2FsZSggdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRTY2FsZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHRhcmdldCApO1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0V29ybGREaXJlY3Rpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZERpcmVjdGlvbigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0dmFyIGUgPSB0aGlzLm1hdHJpeFdvcmxkLmVsZW1lbnRzO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIGVbIDggXSwgZVsgOSBdLCBlWyAxMCBdICkubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHRyYXljYXN0OiBmdW5jdGlvbiAoKSB7fSxcblxuXHR0cmF2ZXJzZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdGNhbGxiYWNrKCB0aGlzICk7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS50cmF2ZXJzZSggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHRyYXZlcnNlVmlzaWJsZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGNhbGxiYWNrKCB0aGlzICk7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS50cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR0cmF2ZXJzZUFuY2VzdG9yczogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdGlmICggcGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRjYWxsYmFjayggcGFyZW50ICk7XG5cblx0XHRcdHBhcmVudC50cmF2ZXJzZUFuY2VzdG9ycyggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZU1hdHJpeDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5tYXRyaXguY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSB8fCBmb3JjZSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0Zm9yY2UgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGNoaWxkcmVuXG5cblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZVdvcmxkTWF0cml4OiBmdW5jdGlvbiAoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICkge1xuXG5cdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCB1cGRhdGVQYXJlbnRzID09PSB0cnVlICYmIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBjaGlsZHJlblxuXG5cdFx0aWYgKCB1cGRhdGVDaGlsZHJlbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdC8vIG1ldGEgaXMgYSBzdHJpbmcgd2hlbiBjYWxsZWQgZnJvbSBKU09OLnN0cmluZ2lmeVxuXHRcdHZhciBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdHZhciBvdXRwdXQgPSB7fTtcblxuXHRcdC8vIG1ldGEgaXMgYSBoYXNoIHVzZWQgdG8gY29sbGVjdCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMuXG5cdFx0Ly8gbm90IHByb3ZpZGluZyBpdCBpbXBsaWVzIHRoYXQgdGhpcyBpcyB0aGUgcm9vdCBvYmplY3Rcblx0XHQvLyBiZWluZyBzZXJpYWxpemVkLlxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHQvLyBpbml0aWFsaXplIG1ldGEgb2JqXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHRnZW9tZXRyaWVzOiB7fSxcblx0XHRcdFx0bWF0ZXJpYWxzOiB7fSxcblx0XHRcdFx0dGV4dHVyZXM6IHt9LFxuXHRcdFx0XHRpbWFnZXM6IHt9LFxuXHRcdFx0XHRzaGFwZXM6IHt9XG5cdFx0XHR9O1xuXG5cdFx0XHRvdXRwdXQubWV0YWRhdGEgPSB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ09iamVjdCcsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ09iamVjdDNELnRvSlNPTidcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHQvLyBzdGFuZGFyZCBPYmplY3QzRCBzZXJpYWxpemF0aW9uXG5cblx0XHR2YXIgb2JqZWN0ID0ge307XG5cblx0XHRvYmplY3QudXVpZCA9IHRoaXMudXVpZDtcblx0XHRvYmplY3QudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIG9iamVjdC5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggdGhpcy5jYXN0U2hhZG93ID09PSB0cnVlICkgb2JqZWN0LmNhc3RTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5yZWNlaXZlU2hhZG93ID09PSB0cnVlICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIG9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cdFx0aWYgKCB0aGlzLmZydXN0dW1DdWxsZWQgPT09IGZhbHNlICkgb2JqZWN0LmZydXN0dW1DdWxsZWQgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMucmVuZGVyT3JkZXIgIT09IDAgKSBvYmplY3QucmVuZGVyT3JkZXIgPSB0aGlzLnJlbmRlck9yZGVyO1xuXHRcdGlmICggSlNPTi5zdHJpbmdpZnkoIHRoaXMudXNlckRhdGEgKSAhPT0gJ3t9JyApIG9iamVjdC51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRvYmplY3QubGF5ZXJzID0gdGhpcy5sYXllcnMubWFzaztcblx0XHRvYmplY3QubWF0cml4ID0gdGhpcy5tYXRyaXgudG9BcnJheSgpO1xuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPT09IGZhbHNlICkgb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdC8vXG5cblx0XHRmdW5jdGlvbiBzZXJpYWxpemUoIGxpYnJhcnksIGVsZW1lbnQgKSB7XG5cblx0XHRcdGlmICggbGlicmFyeVsgZWxlbWVudC51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9IGVsZW1lbnQudG9KU09OKCBtZXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW1lbnQudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pc01lc2ggfHwgdGhpcy5pc0xpbmUgfHwgdGhpcy5pc1BvaW50cyApIHtcblxuXHRcdFx0b2JqZWN0Lmdlb21ldHJ5ID0gc2VyaWFsaXplKCBtZXRhLmdlb21ldHJpZXMsIHRoaXMuZ2VvbWV0cnkgKTtcblxuXHRcdFx0dmFyIHBhcmFtZXRlcnMgPSB0aGlzLmdlb21ldHJ5LnBhcmFtZXRlcnM7XG5cblx0XHRcdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIHNoYXBlcyA9IHBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hdGVyaWFsICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdGhpcy5tYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdHZhciB1dWlkcyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMubWF0ZXJpYWwubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHV1aWRzLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWxbIGkgXSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHV1aWRzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRvYmplY3QuY2hpbGRyZW4gPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmNoaWxkcmVuLnB1c2goIHRoaXMuY2hpbGRyZW5bIGkgXS50b0pTT04oIG1ldGEgKS5vYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyaWVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5nZW9tZXRyaWVzICk7XG5cdFx0XHR2YXIgbWF0ZXJpYWxzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5tYXRlcmlhbHMgKTtcblx0XHRcdHZhciB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTtcblx0XHRcdHZhciBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApO1xuXHRcdFx0dmFyIHNoYXBlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2hhcGVzICk7XG5cblx0XHRcdGlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAwICkgb3V0cHV0Lmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzO1xuXHRcdFx0aWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIG91dHB1dC5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBvdXRwdXQudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBvdXRwdXQuaW1hZ2VzID0gaW1hZ2VzO1xuXHRcdFx0aWYgKCBzaGFwZXMubGVuZ3RoID4gMCApIG91dHB1dC5zaGFwZXMgPSBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRvdXRwdXQub2JqZWN0ID0gb2JqZWN0O1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdC8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoXG5cdFx0Ly8gcmVtb3ZlIG1ldGFkYXRhIG9uIGVhY2ggaXRlbVxuXHRcdC8vIGFuZCByZXR1cm4gYXMgYXJyYXlcblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZXM7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCByZWN1cnNpdmUgKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzLCByZWN1cnNpdmUgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRpZiAoIHJlY3Vyc2l2ZSA9PT0gdW5kZWZpbmVkICkgcmVjdXJzaXZlID0gdHJ1ZTtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy51cC5jb3B5KCBzb3VyY2UudXAgKTtcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggc291cmNlLnBvc2l0aW9uICk7XG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHNvdXJjZS5xdWF0ZXJuaW9uICk7XG5cdFx0dGhpcy5zY2FsZS5jb3B5KCBzb3VyY2Uuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gc291cmNlLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR0aGlzLmxheWVycy5tYXNrID0gc291cmNlLmxheWVycy5tYXNrO1xuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7XG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gc291cmNlLnJlY2VpdmVTaGFkb3c7XG5cblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gc291cmNlLnJlbmRlck9yZGVyO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApO1xuXG5cdFx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHNvdXJjZS5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGNoaWxkID0gc291cmNlLmNoaWxkcmVuWyBpIF07XG5cdFx0XHRcdHRoaXMuYWRkKCBjaGlsZC5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGtpbGUgLyBodHRwOi8va2lsZS5zdHJhdmFnYW56YS5vcmcvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG52YXIgZ2VvbWV0cnlJZCA9IDA7IC8vIEdlb21ldHJ5IHVzZXMgZXZlbiBudW1iZXJzIGFzIElkXG5cbmZ1bmN0aW9uIEdlb21ldHJ5KCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogZ2VvbWV0cnlJZCArPSAyIH0gKTtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblx0dGhpcy50eXBlID0gJ0dlb21ldHJ5JztcblxuXHR0aGlzLnZlcnRpY2VzID0gW107XG5cdHRoaXMuY29sb3JzID0gW107XG5cdHRoaXMuZmFjZXMgPSBbXTtcblx0dGhpcy5mYWNlVmVydGV4VXZzID0gW1tdXTtcblxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IFtdO1xuXG5cdHRoaXMuc2tpbldlaWdodHMgPSBbXTtcblx0dGhpcy5za2luSW5kaWNlcyA9IFtdO1xuXG5cdHRoaXMubGluZURpc3RhbmNlcyA9IFtdO1xuXG5cdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xuXHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHQvLyB1cGRhdGUgZmxhZ3NcblxuXHR0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxufVxuXG5HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR2VvbWV0cnksXG5cblx0aXNHZW9tZXRyeTogdHJ1ZSxcblxuXHRhcHBseU1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzWyBpIF07XG5cdFx0XHR2ZXJ0ZXguYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IHRoaXMuZmFjZXNbIGkgXTtcblx0XHRcdGZhY2Uubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0ZmFjZS52ZXJ0ZXhOb3JtYWxzWyBqIF0uYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVYKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWCggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWSggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVaKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWiggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBnZW9tZXRyeVxuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGUoIHgsIHksIHogKSB7XG5cblx0XHRcdG0xLm1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzY2FsZSggeCwgeSwgeiApIHtcblxuXHRcdFx0bTEubWFrZVNjYWxlKCB4LCB5LCB6ICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbG9va0F0KCB2ZWN0b3IgKSB7XG5cblx0XHRcdG9iai5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0XHRvYmoudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG9iai5tYXRyaXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGZyb21CdWZmZXJHZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGV4ICE9PSBudWxsID8gZ2VvbWV0cnkuaW5kZXguYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cdFx0dmFyIG5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIGNvbG9ycyA9IGF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMuY29sb3IuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIHV2cyA9IGF0dHJpYnV0ZXMudXYgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMudXYuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIHV2czIgPSBhdHRyaWJ1dGVzLnV2MiAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51djIuYXJyYXkgOiB1bmRlZmluZWQ7XG5cblx0XHRpZiAoIHV2czIgIT09IHVuZGVmaW5lZCApIHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGogPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAzLCBqICs9IDIgKSB7XG5cblx0XHRcdHNjb3BlLnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKSApO1xuXG5cdFx0XHRpZiAoIGNvbG9ycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLmNvbG9ycy5wdXNoKCBuZXcgQ29sb3IoKS5mcm9tQXJyYXkoIGNvbG9ycywgaSApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZEZhY2UoIGEsIGIsIGMsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXhDb2xvcnMgPSAoIGNvbG9ycyA9PT0gdW5kZWZpbmVkICkgPyBbXSA6IFtcblx0XHRcdFx0c2NvcGUuY29sb3JzWyBhIF0uY2xvbmUoKSxcblx0XHRcdFx0c2NvcGUuY29sb3JzWyBiIF0uY2xvbmUoKSxcblx0XHRcdFx0c2NvcGUuY29sb3JzWyBjIF0uY2xvbmUoKSBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9ICggbm9ybWFscyA9PT0gdW5kZWZpbmVkICkgPyBbXSA6IFtcblx0XHRcdFx0bmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIG5vcm1hbHMsIGEgKiAzICksXG5cdFx0XHRcdG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBub3JtYWxzLCBiICogMyApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMygpLmZyb21BcnJheSggbm9ybWFscywgYyAqIDMgKVxuXHRcdFx0XTtcblxuXHRcdFx0dmFyIGZhY2UgPSBuZXcgRmFjZTMoIGEsIGIsIGMsIHZlcnRleE5vcm1hbHMsIHZlcnRleENvbG9ycywgbWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRzY29wZS5mYWNlcy5wdXNoKCBmYWNlICk7XG5cblx0XHRcdGlmICggdXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUuZmFjZVZlcnRleFV2c1sgMCBdLnB1c2goIFtcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzLCBhICogMiApLFxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMsIGIgKiAyICksXG5cdFx0XHRcdFx0bmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHV2cywgYyAqIDIgKVxuXHRcdFx0XHRdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1dnMyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUuZmFjZVZlcnRleFV2c1sgMSBdLnB1c2goIFtcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzMiwgYSAqIDIgKSxcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzMiwgYiAqIDIgKSxcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzMiwgYyAqIDIgKVxuXHRcdFx0XHRdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRcdHZhciBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuXHRcdFx0XHR2YXIgY291bnQgPSBncm91cC5jb3VudDtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpbmRpY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGFkZEZhY2UoIGluZGljZXNbIGogXSwgaW5kaWNlc1sgaiArIDEgXSwgaW5kaWNlc1sgaiArIDIgXSwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0YWRkRmFjZSggaiwgaiArIDEsIGogKyAyLCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGluZGljZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0YWRkRmFjZSggaW5kaWNlc1sgaSBdLCBpbmRpY2VzWyBpICsgMSBdLCBpbmRpY2VzWyBpICsgMiBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGggLyAzOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRhZGRGYWNlKCBpLCBpICsgMSwgaSArIDIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNlbnRlcigpIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIG9mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0XHR0aGlzLnRyYW5zbGF0ZSggb2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQueiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdHZhciBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjtcblx0XHR2YXIgcmFkaXVzID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXM7XG5cblx0XHR2YXIgcyA9IHJhZGl1cyA9PT0gMCA/IDEgOiAxLjAgLyByYWRpdXM7XG5cblx0XHR2YXIgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHRtYXRyaXguc2V0KFxuXHRcdFx0cywgMCwgMCwgLSBzICogY2VudGVyLngsXG5cdFx0XHQwLCBzLCAwLCAtIHMgKiBjZW50ZXIueSxcblx0XHRcdDAsIDAsIHMsIC0gcyAqIGNlbnRlci56LFxuXHRcdFx0MCwgMCwgMCwgMVxuXHRcdCk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4KCBtYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUZhY2VOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRmb3IgKCB2YXIgZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdHZhciB2QSA9IHRoaXMudmVydGljZXNbIGZhY2UuYSBdO1xuXHRcdFx0dmFyIHZCID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5iIF07XG5cdFx0XHR2YXIgdkMgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0Y2Iuc3ViVmVjdG9ycyggdkMsIHZCICk7XG5cdFx0XHRhYi5zdWJWZWN0b3JzKCB2QSwgdkIgKTtcblx0XHRcdGNiLmNyb3NzKCBhYiApO1xuXG5cdFx0XHRjYi5ub3JtYWxpemUoKTtcblxuXHRcdFx0ZmFjZS5ub3JtYWwuY29weSggY2IgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNvbXB1dGVWZXJ0ZXhOb3JtYWxzOiBmdW5jdGlvbiAoIGFyZWFXZWlnaHRlZCApIHtcblxuXHRcdGlmICggYXJlYVdlaWdodGVkID09PSB1bmRlZmluZWQgKSBhcmVhV2VpZ2h0ZWQgPSB0cnVlO1xuXG5cdFx0dmFyIHYsIHZsLCBmLCBmbCwgZmFjZSwgdmVydGljZXM7XG5cblx0XHR2ZXJ0aWNlcyA9IG5ldyBBcnJheSggdGhpcy52ZXJ0aWNlcy5sZW5ndGggKTtcblxuXHRcdGZvciAoIHYgPSAwLCB2bCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYgKysgKSB7XG5cblx0XHRcdHZlcnRpY2VzWyB2IF0gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhcmVhV2VpZ2h0ZWQgKSB7XG5cblx0XHRcdC8vIHZlcnRleCBub3JtYWxzIHdlaWdodGVkIGJ5IHRyaWFuZ2xlIGFyZWFzXG5cdFx0XHQvLyBodHRwOi8vd3d3LmlxdWlsZXpsZXMub3JnL3d3dy9hcnRpY2xlcy9ub3JtYWxzL25vcm1hbHMuaHRtXG5cblx0XHRcdHZhciB2QSwgdkIsIHZDO1xuXHRcdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdFx0dkEgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmEgXTtcblx0XHRcdFx0dkIgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmIgXTtcblx0XHRcdFx0dkMgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0XHRjYi5zdWJWZWN0b3JzKCB2QywgdkIgKTtcblx0XHRcdFx0YWIuc3ViVmVjdG9ycyggdkEsIHZCICk7XG5cdFx0XHRcdGNiLmNyb3NzKCBhYiApO1xuXG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmEgXS5hZGQoIGNiICk7XG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmIgXS5hZGQoIGNiICk7XG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmMgXS5hZGQoIGNiICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0XHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5hIF0uYWRkKCBmYWNlLm5vcm1hbCApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5iIF0uYWRkKCBmYWNlLm5vcm1hbCApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5jIF0uYWRkKCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2ID0gMCwgdmwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgdiA8IHZsOyB2ICsrICkge1xuXG5cdFx0XHR2ZXJ0aWNlc1sgdiBdLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMCBdLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmEgXSApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAxIF0uY29weSggdmVydGljZXNbIGZhY2UuYiBdICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAwIF0gPSB2ZXJ0aWNlc1sgZmFjZS5hIF0uY2xvbmUoKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMSBdID0gdmVydGljZXNbIGZhY2UuYiBdLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXSA9IHZlcnRpY2VzWyBmYWNlLmMgXS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmFjZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlRmxhdFZlcnRleE5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBmLCBmbCwgZmFjZTtcblxuXHRcdHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscztcblxuXHRcdFx0aWYgKCB2ZXJ0ZXhOb3JtYWxzLmxlbmd0aCA9PT0gMyApIHtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAwIF0uY29weSggZmFjZS5ub3JtYWwgKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMSBdLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXS5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDAgXSA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDEgXSA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXSA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5mYWNlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNvbXB1dGVNb3JwaE5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpLCBpbCwgZiwgZmwsIGZhY2U7XG5cblx0XHQvLyBzYXZlIG9yaWdpbmFsIG5vcm1hbHNcblx0XHQvLyAtIGNyZWF0ZSB0ZW1wIHZhcmlhYmxlcyBvbiBmaXJzdCBhY2Nlc3Ncblx0XHQvLyAgIG90aGVyd2lzZSBqdXN0IGNvcHkgKGZvciBmYXN0ZXIgcmVwZWF0ZWQgY2FsbHMpXG5cblx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRpZiAoICEgZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbCApIHtcblxuXHRcdFx0XHRmYWNlLl9fb3JpZ2luYWxGYWNlTm9ybWFsID0gZmFjZS5ub3JtYWwuY2xvbmUoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmYWNlLl9fb3JpZ2luYWxGYWNlTm9ybWFsLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhIGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHMgKSBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzID0gW107XG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoICEgZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1sgaSBdICkge1xuXG5cdFx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1sgaSBdID0gZmFjZS52ZXJ0ZXhOb3JtYWxzWyBpIF0uY2xvbmUoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1sgaSBdLmNvcHkoIGZhY2UudmVydGV4Tm9ybWFsc1sgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyB1c2UgdGVtcCBnZW9tZXRyeSB0byBjb21wdXRlIGZhY2UgYW5kIHZlcnRleCBub3JtYWxzIGZvciBlYWNoIG1vcnBoXG5cblx0XHR2YXIgdG1wR2VvID0gbmV3IEdlb21ldHJ5KCk7XG5cdFx0dG1wR2VvLmZhY2VzID0gdGhpcy5mYWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMubW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHQvLyBjcmVhdGUgb24gZmlyc3QgYWNjZXNzXG5cblx0XHRcdGlmICggISB0aGlzLm1vcnBoTm9ybWFsc1sgaSBdICkge1xuXG5cdFx0XHRcdHRoaXMubW9ycGhOb3JtYWxzWyBpIF0gPSB7fTtcblx0XHRcdFx0dGhpcy5tb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscyA9IFtdO1xuXHRcdFx0XHR0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHR2YXIgZHN0Tm9ybWFsc0ZhY2UgPSB0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzO1xuXHRcdFx0XHR2YXIgZHN0Tm9ybWFsc1ZlcnRleCA9IHRoaXMubW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFscztcblxuXHRcdFx0XHR2YXIgZmFjZU5vcm1hbCwgdmVydGV4Tm9ybWFscztcblxuXHRcdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdFx0ZmFjZU5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRcdFx0dmVydGV4Tm9ybWFscyA9IHsgYTogbmV3IFZlY3RvcjMoKSwgYjogbmV3IFZlY3RvcjMoKSwgYzogbmV3IFZlY3RvcjMoKSB9O1xuXG5cdFx0XHRcdFx0ZHN0Tm9ybWFsc0ZhY2UucHVzaCggZmFjZU5vcm1hbCApO1xuXHRcdFx0XHRcdGRzdE5vcm1hbHNWZXJ0ZXgucHVzaCggdmVydGV4Tm9ybWFscyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbW9ycGhOb3JtYWxzID0gdGhpcy5tb3JwaE5vcm1hbHNbIGkgXTtcblxuXHRcdFx0Ly8gc2V0IHZlcnRpY2VzIHRvIG1vcnBoIHRhcmdldFxuXG5cdFx0XHR0bXBHZW8udmVydGljZXMgPSB0aGlzLm1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzO1xuXG5cdFx0XHQvLyBjb21wdXRlIG1vcnBoIG5vcm1hbHNcblxuXHRcdFx0dG1wR2VvLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXHRcdFx0dG1wR2VvLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cblx0XHRcdC8vIHN0b3JlIG1vcnBoIG5vcm1hbHNcblxuXHRcdFx0dmFyIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0XHRmYWNlTm9ybWFsID0gbW9ycGhOb3JtYWxzLmZhY2VOb3JtYWxzWyBmIF07XG5cdFx0XHRcdHZlcnRleE5vcm1hbHMgPSBtb3JwaE5vcm1hbHMudmVydGV4Tm9ybWFsc1sgZiBdO1xuXG5cdFx0XHRcdGZhY2VOb3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzLmEuY29weSggZmFjZS52ZXJ0ZXhOb3JtYWxzWyAwIF0gKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFscy5iLmNvcHkoIGZhY2UudmVydGV4Tm9ybWFsc1sgMSBdICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHMuYy5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDIgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXN0b3JlIG9yaWdpbmFsIG5vcm1hbHNcblxuXHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdGZhY2Uubm9ybWFsID0gZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbDtcblx0XHRcdGZhY2UudmVydGV4Tm9ybWFscyA9IGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHM7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlQm91bmRpbmdCb3g6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21Qb2ludHMoIHRoaXMudmVydGljZXMgKTtcblxuXHR9LFxuXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5zZXRGcm9tUG9pbnRzKCB0aGlzLnZlcnRpY2VzICk7XG5cblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24gKCBnZW9tZXRyeSwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkge1xuXG5cdFx0aWYgKCAhICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkdlb21ldHJ5LicsIGdlb21ldHJ5ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR2YXIgbm9ybWFsTWF0cml4LFxuXHRcdFx0dmVydGV4T2Zmc2V0ID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGgsXG5cdFx0XHR2ZXJ0aWNlczEgPSB0aGlzLnZlcnRpY2VzLFxuXHRcdFx0dmVydGljZXMyID0gZ2VvbWV0cnkudmVydGljZXMsXG5cdFx0XHRmYWNlczEgPSB0aGlzLmZhY2VzLFxuXHRcdFx0ZmFjZXMyID0gZ2VvbWV0cnkuZmFjZXMsXG5cdFx0XHR1dnMxID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF0sXG5cdFx0XHR1dnMyID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgMCBdLFxuXHRcdFx0Y29sb3JzMSA9IHRoaXMuY29sb3JzLFxuXHRcdFx0Y29sb3JzMiA9IGdlb21ldHJ5LmNvbG9ycztcblxuXHRcdGlmICggbWF0ZXJpYWxJbmRleE9mZnNldCA9PT0gdW5kZWZpbmVkICkgbWF0ZXJpYWxJbmRleE9mZnNldCA9IDA7XG5cblx0XHRpZiAoIG1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHQvLyB2ZXJ0aWNlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHZlcnRpY2VzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHZlcnRpY2VzMlsgaSBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Q29weSA9IHZlcnRleC5jbG9uZSgpO1xuXG5cdFx0XHRpZiAoIG1hdHJpeCAhPT0gdW5kZWZpbmVkICkgdmVydGV4Q29weS5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0XHR2ZXJ0aWNlczEucHVzaCggdmVydGV4Q29weSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29sb3JzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY29sb3JzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29sb3JzMS5wdXNoKCBjb2xvcnMyWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZXNcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2VzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlczJbIGkgXSwgZmFjZUNvcHksIG5vcm1hbCwgY29sb3IsXG5cdFx0XHRcdGZhY2VWZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLFxuXHRcdFx0XHRmYWNlVmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdGZhY2VDb3B5ID0gbmV3IEZhY2UzKCBmYWNlLmEgKyB2ZXJ0ZXhPZmZzZXQsIGZhY2UuYiArIHZlcnRleE9mZnNldCwgZmFjZS5jICsgdmVydGV4T2Zmc2V0ICk7XG5cdFx0XHRmYWNlQ29weS5ub3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0aWYgKCBub3JtYWxNYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmYWNlQ29weS5ub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZmFjZVZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0bm9ybWFsID0gZmFjZVZlcnRleE5vcm1hbHNbIGogXS5jbG9uZSgpO1xuXG5cdFx0XHRcdGlmICggbm9ybWFsTWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmFjZUNvcHkudmVydGV4Tm9ybWFscy5wdXNoKCBub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmYWNlQ29weS5jb2xvci5jb3B5KCBmYWNlLmNvbG9yICk7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlVmVydGV4Q29sb3JzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdGNvbG9yID0gZmFjZVZlcnRleENvbG9yc1sgaiBdO1xuXHRcdFx0XHRmYWNlQ29weS52ZXJ0ZXhDb2xvcnMucHVzaCggY29sb3IuY2xvbmUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZhY2VDb3B5Lm1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXggKyBtYXRlcmlhbEluZGV4T2Zmc2V0O1xuXG5cdFx0XHRmYWNlczEucHVzaCggZmFjZUNvcHkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHV2c1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdXZzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHV2ID0gdXZzMlsgaSBdLCB1dkNvcHkgPSBbXTtcblxuXHRcdFx0aWYgKCB1diA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSB1di5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR1dkNvcHkucHVzaCggdXZbIGogXS5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dXZzMS5wdXNoKCB1dkNvcHkgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG1lcmdlTWVzaDogZnVuY3Rpb24gKCBtZXNoICkge1xuXG5cdFx0aWYgKCAhICggbWVzaCAmJiBtZXNoLmlzTWVzaCApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnkubWVyZ2VNZXNoKCk6IG1lc2ggbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk1lc2guJywgbWVzaCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtZXNoLm1hdHJpeEF1dG9VcGRhdGUgKSBtZXNoLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5tZXJnZSggbWVzaC5nZW9tZXRyeSwgbWVzaC5tYXRyaXggKTtcblxuXHR9LFxuXG5cdC8qXG5cdCAqIENoZWNrcyBmb3IgZHVwbGljYXRlIHZlcnRpY2VzIHdpdGggaGFzaG1hcC5cblx0ICogRHVwbGljYXRlZCB2ZXJ0aWNlcyBhcmUgcmVtb3ZlZFxuXHQgKiBhbmQgZmFjZXMnIHZlcnRpY2VzIGFyZSB1cGRhdGVkLlxuXHQgKi9cblxuXHRtZXJnZVZlcnRpY2VzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmVydGljZXNNYXAgPSB7fTsgLy8gSGFzaG1hcCBmb3IgbG9va2luZyB1cCB2ZXJ0aWNlcyBieSBwb3NpdGlvbiBjb29yZGluYXRlcyAoYW5kIG1ha2luZyBzdXJlIHRoZXkgYXJlIHVuaXF1ZSlcblx0XHR2YXIgdW5pcXVlID0gW10sIGNoYW5nZXMgPSBbXTtcblxuXHRcdHZhciB2LCBrZXk7XG5cdFx0dmFyIHByZWNpc2lvblBvaW50cyA9IDQ7IC8vIG51bWJlciBvZiBkZWNpbWFsIHBvaW50cywgZS5nLiA0IGZvciBlcHNpbG9uIG9mIDAuMDAwMVxuXHRcdHZhciBwcmVjaXNpb24gPSBNYXRoLnBvdyggMTAsIHByZWNpc2lvblBvaW50cyApO1xuXHRcdHZhciBpLCBpbCwgZmFjZTtcblx0XHR2YXIgaW5kaWNlcywgaiwgamw7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2ID0gdGhpcy52ZXJ0aWNlc1sgaSBdO1xuXHRcdFx0a2V5ID0gTWF0aC5yb3VuZCggdi54ICogcHJlY2lzaW9uICkgKyAnXycgKyBNYXRoLnJvdW5kKCB2LnkgKiBwcmVjaXNpb24gKSArICdfJyArIE1hdGgucm91bmQoIHYueiAqIHByZWNpc2lvbiApO1xuXG5cdFx0XHRpZiAoIHZlcnRpY2VzTWFwWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZlcnRpY2VzTWFwWyBrZXkgXSA9IGk7XG5cdFx0XHRcdHVuaXF1ZS5wdXNoKCB0aGlzLnZlcnRpY2VzWyBpIF0gKTtcblx0XHRcdFx0Y2hhbmdlc1sgaSBdID0gdW5pcXVlLmxlbmd0aCAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnRHVwbGljYXRlIHZlcnRleCBmb3VuZC4gJywgaSwgJyBjb3VsZCBiZSB1c2luZyAnLCB2ZXJ0aWNlc01hcFtrZXldKTtcblx0XHRcdFx0Y2hhbmdlc1sgaSBdID0gY2hhbmdlc1sgdmVydGljZXNNYXBbIGtleSBdIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0Ly8gaWYgZmFjZXMgYXJlIGNvbXBsZXRlbHkgZGVnZW5lcmF0ZSBhZnRlciBtZXJnaW5nIHZlcnRpY2VzLCB3ZVxuXHRcdC8vIGhhdmUgdG8gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZ2VvbWV0cnkuXG5cdFx0dmFyIGZhY2VJbmRpY2VzVG9SZW1vdmUgPSBbXTtcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBpIF07XG5cblx0XHRcdGZhY2UuYSA9IGNoYW5nZXNbIGZhY2UuYSBdO1xuXHRcdFx0ZmFjZS5iID0gY2hhbmdlc1sgZmFjZS5iIF07XG5cdFx0XHRmYWNlLmMgPSBjaGFuZ2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0aW5kaWNlcyA9IFsgZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyBdO1xuXG5cdFx0XHQvLyBpZiBhbnkgZHVwbGljYXRlIHZlcnRpY2VzIGFyZSBmb3VuZCBpbiBhIEZhY2UzXG5cdFx0XHQvLyB3ZSBoYXZlIHRvIHJlbW92ZSB0aGUgZmFjZSBhcyBub3RoaW5nIGNhbiBiZSBzYXZlZFxuXHRcdFx0Zm9yICggdmFyIG4gPSAwOyBuIDwgMzsgbiArKyApIHtcblxuXHRcdFx0XHRpZiAoIGluZGljZXNbIG4gXSA9PT0gaW5kaWNlc1sgKCBuICsgMSApICUgMyBdICkge1xuXG5cdFx0XHRcdFx0ZmFjZUluZGljZXNUb1JlbW92ZS5wdXNoKCBpICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCBpID0gZmFjZUluZGljZXNUb1JlbW92ZS5sZW5ndGggLSAxOyBpID49IDA7IGkgLS0gKSB7XG5cblx0XHRcdHZhciBpZHggPSBmYWNlSW5kaWNlc1RvUmVtb3ZlWyBpIF07XG5cblx0XHRcdHRoaXMuZmFjZXMuc3BsaWNlKCBpZHgsIDEgKTtcblxuXHRcdFx0Zm9yICggaiA9IDAsIGpsID0gdGhpcy5mYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmFjZVZlcnRleFV2c1sgaiBdLnNwbGljZSggaWR4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFVzZSB1bmlxdWUgc2V0IG9mIHZlcnRpY2VzXG5cblx0XHR2YXIgZGlmZiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gdW5pcXVlLmxlbmd0aDtcblx0XHR0aGlzLnZlcnRpY2VzID0gdW5pcXVlO1xuXHRcdHJldHVybiBkaWZmO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLnZlcnRpY2VzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzb3J0RmFjZXNCeU1hdGVyaWFsSW5kZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBmYWNlcyA9IHRoaXMuZmFjZXM7XG5cdFx0dmFyIGxlbmd0aCA9IGZhY2VzLmxlbmd0aDtcblxuXHRcdC8vIHRhZyBmYWNlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRmYWNlc1sgaSBdLl9pZCA9IGk7XG5cblx0XHR9XG5cblx0XHQvLyBzb3J0IGZhY2VzXG5cblx0XHRmdW5jdGlvbiBtYXRlcmlhbEluZGV4U29ydCggYSwgYiApIHtcblxuXHRcdFx0cmV0dXJuIGEubWF0ZXJpYWxJbmRleCAtIGIubWF0ZXJpYWxJbmRleDtcblxuXHRcdH1cblxuXHRcdGZhY2VzLnNvcnQoIG1hdGVyaWFsSW5kZXhTb3J0ICk7XG5cblx0XHQvLyBzb3J0IHV2c1xuXG5cdFx0dmFyIHV2czEgPSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDAgXTtcblx0XHR2YXIgdXZzMiA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdO1xuXG5cdFx0dmFyIG5ld1V2czEsIG5ld1V2czI7XG5cblx0XHRpZiAoIHV2czEgJiYgdXZzMS5sZW5ndGggPT09IGxlbmd0aCApIG5ld1V2czEgPSBbXTtcblx0XHRpZiAoIHV2czIgJiYgdXZzMi5sZW5ndGggPT09IGxlbmd0aCApIG5ld1V2czIgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGlkID0gZmFjZXNbIGkgXS5faWQ7XG5cblx0XHRcdGlmICggbmV3VXZzMSApIG5ld1V2czEucHVzaCggdXZzMVsgaWQgXSApO1xuXHRcdFx0aWYgKCBuZXdVdnMyICkgbmV3VXZzMi5wdXNoKCB1dnMyWyBpZCBdICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5ld1V2czEgKSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDAgXSA9IG5ld1V2czE7XG5cdFx0aWYgKCBuZXdVdnMyICkgdGhpcy5mYWNlVmVydGV4VXZzWyAxIF0gPSBuZXdVdnMyO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0dlb21ldHJ5Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnR2VvbWV0cnkudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBzdGFuZGFyZCBHZW9tZXRyeSBzZXJpYWxpemF0aW9uXG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblxuXHRcdGlmICggdGhpcy5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0XHRmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRcdFx0aWYgKCBwYXJhbWV0ZXJzWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgZGF0YVsga2V5IF0gPSBwYXJhbWV0ZXJzWyBrZXkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblxuXHRcdH1cblxuXHRcdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzWyBpIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgZmFjZXMgPSBbXTtcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xuXHRcdHZhciBub3JtYWxzSGFzaCA9IHt9O1xuXHRcdHZhciBjb2xvcnMgPSBbXTtcblx0XHR2YXIgY29sb3JzSGFzaCA9IHt9O1xuXHRcdHZhciB1dnMgPSBbXTtcblx0XHR2YXIgdXZzSGFzaCA9IHt9O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5mYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gdGhpcy5mYWNlc1sgaSBdO1xuXG5cdFx0XHR2YXIgaGFzTWF0ZXJpYWwgPSB0cnVlO1xuXHRcdFx0dmFyIGhhc0ZhY2VVdiA9IGZhbHNlOyAvLyBkZXByZWNhdGVkXG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleFV2ID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXSAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0dmFyIGhhc0ZhY2VOb3JtYWwgPSBmYWNlLm5vcm1hbC5sZW5ndGgoKSA+IDA7XG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleE5vcm1hbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGggPiAwO1xuXHRcdFx0dmFyIGhhc0ZhY2VDb2xvciA9IGZhY2UuY29sb3IuciAhPT0gMSB8fCBmYWNlLmNvbG9yLmcgIT09IDEgfHwgZmFjZS5jb2xvci5iICE9PSAxO1xuXHRcdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhDb2xvciA9IGZhY2UudmVydGV4Q29sb3JzLmxlbmd0aCA+IDA7XG5cblx0XHRcdHZhciBmYWNlVHlwZSA9IDA7XG5cblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMCwgMCApOyAvLyBpc1F1YWRcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMSwgaGFzTWF0ZXJpYWwgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMiwgaGFzRmFjZVV2ICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDMsIGhhc0ZhY2VWZXJ0ZXhVdiApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA0LCBoYXNGYWNlTm9ybWFsICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDUsIGhhc0ZhY2VWZXJ0ZXhOb3JtYWwgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgNiwgaGFzRmFjZUNvbG9yICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDcsIGhhc0ZhY2VWZXJ0ZXhDb2xvciApO1xuXG5cdFx0XHRmYWNlcy5wdXNoKCBmYWNlVHlwZSApO1xuXHRcdFx0ZmFjZXMucHVzaCggZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyApO1xuXHRcdFx0ZmFjZXMucHVzaCggZmFjZS5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdGlmICggaGFzRmFjZVZlcnRleFV2ICkge1xuXG5cdFx0XHRcdHZhciBmYWNlVmVydGV4VXZzID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXTtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDAgXSApLFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDEgXSApLFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDIgXSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlTm9ybWFsICkge1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goIGdldE5vcm1hbEluZGV4KCBmYWNlLm5vcm1hbCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4Tm9ybWFsICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goXG5cdFx0XHRcdFx0Z2V0Tm9ybWFsSW5kZXgoIHZlcnRleE5vcm1hbHNbIDAgXSApLFxuXHRcdFx0XHRcdGdldE5vcm1hbEluZGV4KCB2ZXJ0ZXhOb3JtYWxzWyAxIF0gKSxcblx0XHRcdFx0XHRnZXROb3JtYWxJbmRleCggdmVydGV4Tm9ybWFsc1sgMiBdIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VDb2xvciApIHtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKCBnZXRDb2xvckluZGV4KCBmYWNlLmNvbG9yICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhDb2xvciApIHtcblxuXHRcdFx0XHR2YXIgdmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdFx0ZmFjZXMucHVzaChcblx0XHRcdFx0XHRnZXRDb2xvckluZGV4KCB2ZXJ0ZXhDb2xvcnNbIDAgXSApLFxuXHRcdFx0XHRcdGdldENvbG9ySW5kZXgoIHZlcnRleENvbG9yc1sgMSBdICksXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAyIF0gKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzZXRCaXQoIHZhbHVlLCBwb3NpdGlvbiwgZW5hYmxlZCApIHtcblxuXHRcdFx0cmV0dXJuIGVuYWJsZWQgPyB2YWx1ZSB8ICggMSA8PCBwb3NpdGlvbiApIDogdmFsdWUgJiAoIH4gKCAxIDw8IHBvc2l0aW9uICkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldE5vcm1hbEluZGV4KCBub3JtYWwgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gbm9ybWFsLngudG9TdHJpbmcoKSArIG5vcm1hbC55LnRvU3RyaW5nKCkgKyBub3JtYWwuei50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIG5vcm1hbHNIYXNoWyBoYXNoIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbm9ybWFsc0hhc2hbIGhhc2ggXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRub3JtYWxzSGFzaFsgaGFzaCBdID0gbm9ybWFscy5sZW5ndGggLyAzO1xuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdHJldHVybiBub3JtYWxzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Q29sb3JJbmRleCggY29sb3IgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gY29sb3Iuci50b1N0cmluZygpICsgY29sb3IuZy50b1N0cmluZygpICsgY29sb3IuYi50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIGNvbG9yc0hhc2hbIGhhc2ggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBjb2xvcnNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y29sb3JzSGFzaFsgaGFzaCBdID0gY29sb3JzLmxlbmd0aDtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5nZXRIZXgoKSApO1xuXG5cdFx0XHRyZXR1cm4gY29sb3JzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0VXZJbmRleCggdXYgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gdXYueC50b1N0cmluZygpICsgdXYueS50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIHV2c0hhc2hbIGhhc2ggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiB1dnNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0dXZzSGFzaFsgaGFzaCBdID0gdXZzLmxlbmd0aCAvIDI7XG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRyZXR1cm4gdXZzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZGF0YS5kYXRhID0ge307XG5cblx0XHRkYXRhLmRhdGEudmVydGljZXMgPSB2ZXJ0aWNlcztcblx0XHRkYXRhLmRhdGEubm9ybWFscyA9IG5vcm1hbHM7XG5cdFx0aWYgKCBjb2xvcnMubGVuZ3RoID4gMCApIGRhdGEuZGF0YS5jb2xvcnMgPSBjb2xvcnM7XG5cdFx0aWYgKCB1dnMubGVuZ3RoID4gMCApIGRhdGEuZGF0YS51dnMgPSBbIHV2cyBdOyAvLyB0ZW1wb3JhbCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cdFx0ZGF0YS5kYXRhLmZhY2VzID0gZmFjZXM7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvKlxuXHRcdCAvLyBIYW5kbGUgcHJpbWl0aXZlc1xuXG5cdFx0IHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0IGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0IHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdCBmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7XG5cblx0XHQgdmFsdWVzLnB1c2goIHBhcmFtZXRlcnNbIGtleSBdICk7XG5cblx0XHQgfVxuXG5cdFx0IHZhciBnZW9tZXRyeSA9IE9iamVjdC5jcmVhdGUoIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlICk7XG5cdFx0IHRoaXMuY29uc3RydWN0b3IuYXBwbHkoIGdlb21ldHJ5LCB2YWx1ZXMgKTtcblx0XHQgcmV0dXJuIGdlb21ldHJ5O1xuXG5cdFx0IH1cblxuXHRcdCByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cdFx0ICovXG5cblx0XHRyZXR1cm4gbmV3IEdlb21ldHJ5KCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR2YXIgaSwgaWwsIGosIGpsLCBrLCBrbDtcblxuXHRcdC8vIHJlc2V0XG5cblx0XHR0aGlzLnZlcnRpY2VzID0gW107XG5cdFx0dGhpcy5jb2xvcnMgPSBbXTtcblx0XHR0aGlzLmZhY2VzID0gW107XG5cdFx0dGhpcy5mYWNlVmVydGV4VXZzID0gW1tdXTtcblx0XHR0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdO1xuXHRcdHRoaXMubW9ycGhOb3JtYWxzID0gW107XG5cdFx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xuXHRcdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcblx0XHR0aGlzLmxpbmVEaXN0YW5jZXMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gdmVydGljZXNcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IHNvdXJjZS52ZXJ0aWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIHZlcnRpY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29sb3JzXG5cblx0XHR2YXIgY29sb3JzID0gc291cmNlLmNvbG9ycztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGNvbG9ycy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2xvcnMucHVzaCggY29sb3JzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZXNcblxuXHRcdHZhciBmYWNlcyA9IHNvdXJjZS5mYWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmZhY2VzLnB1c2goIGZhY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZSB2ZXJ0ZXggdXZzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBzb3VyY2UuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2VWZXJ0ZXhVdnMgPSBzb3VyY2UuZmFjZVZlcnRleFV2c1sgaSBdO1xuXG5cdFx0XHRpZiAoIHRoaXMuZmFjZVZlcnRleFV2c1sgaSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy5mYWNlVmVydGV4VXZzWyBpIF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBqID0gMCwgamwgPSBmYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciB1dnMgPSBmYWNlVmVydGV4VXZzWyBqIF0sIHV2c0NvcHkgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBrID0gMCwga2wgPSB1dnMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdXYgPSB1dnNbIGsgXTtcblxuXHRcdFx0XHRcdHV2c0NvcHkucHVzaCggdXYuY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXS5wdXNoKCB1dnNDb3B5ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIHRhcmdldHNcblxuXHRcdHZhciBtb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSB7fTtcblx0XHRcdG1vcnBoVGFyZ2V0Lm5hbWUgPSBtb3JwaFRhcmdldHNbIGkgXS5uYW1lO1xuXG5cdFx0XHQvLyB2ZXJ0aWNlc1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhUYXJnZXQudmVydGljZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoVGFyZ2V0LnZlcnRpY2VzLnB1c2goIG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBub3JtYWxzXG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFscyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0Lm5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaFRhcmdldHNbIGkgXS5ub3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0bW9ycGhUYXJnZXQubm9ybWFscy5wdXNoKCBtb3JwaFRhcmdldHNbIGkgXS5ub3JtYWxzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0cy5wdXNoKCBtb3JwaFRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbW9ycGggbm9ybWFsc1xuXG5cdFx0dmFyIG1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBtb3JwaE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBtb3JwaE5vcm1hbCA9IHt9O1xuXG5cdFx0XHQvLyB2ZXJ0ZXggbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtb3JwaE5vcm1hbC52ZXJ0ZXhOb3JtYWxzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdHZhciBzcmNWZXJ0ZXhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzWyBqIF07XG5cdFx0XHRcdFx0dmFyIGRlc3RWZXJ0ZXhOb3JtYWwgPSB7fTtcblxuXHRcdFx0XHRcdGRlc3RWZXJ0ZXhOb3JtYWwuYSA9IHNyY1ZlcnRleE5vcm1hbC5hLmNsb25lKCk7XG5cdFx0XHRcdFx0ZGVzdFZlcnRleE5vcm1hbC5iID0gc3JjVmVydGV4Tm9ybWFsLmIuY2xvbmUoKTtcblx0XHRcdFx0XHRkZXN0VmVydGV4Tm9ybWFsLmMgPSBzcmNWZXJ0ZXhOb3JtYWwuYy5jbG9uZSgpO1xuXG5cdFx0XHRcdFx0bW9ycGhOb3JtYWwudmVydGV4Tm9ybWFscy5wdXNoKCBkZXN0VmVydGV4Tm9ybWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZhY2Ugbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhOb3JtYWwuZmFjZU5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoTm9ybWFsLmZhY2VOb3JtYWxzLnB1c2goIG1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vcnBoTm9ybWFscy5wdXNoKCBtb3JwaE5vcm1hbCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbiB3ZWlnaHRzXG5cblx0XHR2YXIgc2tpbldlaWdodHMgPSBzb3VyY2Uuc2tpbldlaWdodHM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBza2luV2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKCBza2luV2VpZ2h0c1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNraW4gaW5kaWNlc1xuXG5cdFx0dmFyIHNraW5JbmRpY2VzID0gc291cmNlLnNraW5JbmRpY2VzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gc2tpbkluZGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGkgXS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHQvLyBsaW5lIGRpc3RhbmNlc1xuXG5cdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBzb3VyY2UubGluZURpc3RhbmNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGxpbmVEaXN0YW5jZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMubGluZURpc3RhbmNlcy5wdXNoKCBsaW5lRGlzdGFuY2VzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIGJvdW5kaW5nIGJveFxuXG5cdFx0dmFyIGJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94O1xuXG5cdFx0aWYgKCBib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBzcGhlcmVcblxuXHRcdHZhciBib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGZsYWdzXG5cblx0XHR0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IHNvdXJjZS5lbGVtZW50c05lZWRVcGRhdGU7XG5cdFx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBzb3VyY2UudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudXZzTmVlZFVwZGF0ZSA9IHNvdXJjZS51dnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBzb3VyY2Uubm9ybWFsc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gc291cmNlLmNvbG9yc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IHNvdXJjZS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBzb3VyY2UuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0fVxuXG5cdHRoaXMubmFtZSA9ICcnO1xuXG5cdHRoaXMuYXJyYXkgPSBhcnJheTtcblx0dGhpcy5pdGVtU2l6ZSA9IGl0ZW1TaXplO1xuXHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIGl0ZW1TaXplIDogMDtcblx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZCA9PT0gdHJ1ZTtcblxuXHR0aGlzLmR5bmFtaWMgPSBmYWxzZTtcblx0dGhpcy51cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07XG5cblx0dGhpcy52ZXJzaW9uID0gMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsICduZWVkc1VwZGF0ZScsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0aXNCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cblx0b25VcGxvYWRDYWxsYmFjazogZnVuY3Rpb24gKCkge30sXG5cblx0c2V0QXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gdGhpcy5pdGVtU2l6ZSA6IDA7XG5cdFx0dGhpcy5hcnJheSA9IGFycmF5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXREeW5hbWljOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5keW5hbWljID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBzb3VyY2UuaXRlbVNpemU7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBzb3VyY2Uubm9ybWFsaXplZDtcblxuXHRcdHRoaXMuZHluYW1pYyA9IHNvdXJjZS5keW5hbWljO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5QXQ6IGZ1bmN0aW9uICggaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4MiApIHtcblxuXHRcdGluZGV4MSAqPSB0aGlzLml0ZW1TaXplO1xuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLml0ZW1TaXplOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5hcnJheVsgaW5kZXgxICsgaSBdID0gYXR0cmlidXRlLmFycmF5WyBpbmRleDIgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlBcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCBhcnJheSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5Q29sb3JzQXJyYXk6IGZ1bmN0aW9uICggY29sb3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNvbG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY29sb3IgPSBjb2xvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5Q29sb3JzQXJyYXkoKTogY29sb3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHRjb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLnI7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5nO1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gY29sb3IuYjtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVZlY3RvcjJzQXJyYXk6IGZ1bmN0aW9uICggdmVjdG9ycyApIHtcblxuXHRcdHZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Iyc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVZlY3RvcjNzQXJyYXk6IGZ1bmN0aW9uICggdmVjdG9ycyApIHtcblxuXHRcdHZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci56O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5VmVjdG9yNHNBcnJheTogZnVuY3Rpb24gKCB2ZWN0b3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlY3RvciA9IHZlY3RvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjRzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLno7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IudztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlLCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFg6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF07XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIGluZGV4LCB4ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF0gPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRZOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXTtcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggaW5kZXgsIHkgKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRaOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXTtcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggaW5kZXgsIHogKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRXOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXTtcblxuXHR9LFxuXG5cdHNldFc6IGZ1bmN0aW9uICggaW5kZXgsIHcgKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWTogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVo6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFhZWlc6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvblVwbG9hZDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmFycmF5LCB0aGlzLml0ZW1TaXplICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBJbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBJbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuSW50OEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDhCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDhCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50OENsYW1wZWRBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5VaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgSW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5JbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQxNkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cblVpbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5VaW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDE2QnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEludDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBJbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgVWludDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcblVpbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVaW50MzJCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgRmxvYXQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGbG9hdDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEZsb2F0NjRBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5GbG9hdDY0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIERpcmVjdEdlb21ldHJ5KCkge1xuXG5cdHRoaXMudmVydGljZXMgPSBbXTtcblx0dGhpcy5ub3JtYWxzID0gW107XG5cdHRoaXMuY29sb3JzID0gW107XG5cdHRoaXMudXZzID0gW107XG5cdHRoaXMudXZzMiA9IFtdO1xuXG5cdHRoaXMuZ3JvdXBzID0gW107XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSB7fTtcblxuXHR0aGlzLnNraW5XZWlnaHRzID0gW107XG5cdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcblxuXHQvLyB0aGlzLmxpbmVEaXN0YW5jZXMgPSBbXTtcblxuXHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0Ly8gdXBkYXRlIGZsYWdzXG5cblx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy51dnNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIERpcmVjdEdlb21ldHJ5LnByb3RvdHlwZSwge1xuXG5cdGNvbXB1dGVHcm91cHM6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgZ3JvdXA7XG5cdFx0dmFyIGdyb3VwcyA9IFtdO1xuXHRcdHZhciBtYXRlcmlhbEluZGV4ID0gdW5kZWZpbmVkO1xuXG5cdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0Ly8gbWF0ZXJpYWxzXG5cblx0XHRcdGlmICggZmFjZS5tYXRlcmlhbEluZGV4ICE9PSBtYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBncm91cCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Z3JvdXAuY291bnQgPSAoIGkgKiAzICkgLSBncm91cC5zdGFydDtcblx0XHRcdFx0XHRncm91cHMucHVzaCggZ3JvdXAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z3JvdXAgPSB7XG5cdFx0XHRcdFx0c3RhcnQ6IGkgKiAzLFxuXHRcdFx0XHRcdG1hdGVyaWFsSW5kZXg6IG1hdGVyaWFsSW5kZXhcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBncm91cCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRncm91cC5jb3VudCA9ICggaSAqIDMgKSAtIGdyb3VwLnN0YXJ0O1xuXHRcdFx0Z3JvdXBzLnB1c2goIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmdyb3VwcyA9IGdyb3VwcztcblxuXHR9LFxuXG5cdGZyb21HZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xuXHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdHZhciBmYWNlVmVydGV4VXZzID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2cztcblxuXHRcdHZhciBoYXNGYWNlVmVydGV4VXYgPSBmYWNlVmVydGV4VXZzWyAwIF0gJiYgZmFjZVZlcnRleFV2c1sgMCBdLmxlbmd0aCA+IDA7XG5cdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhVdjIgPSBmYWNlVmVydGV4VXZzWyAxIF0gJiYgZmFjZVZlcnRleFV2c1sgMSBdLmxlbmd0aCA+IDA7XG5cblx0XHQvLyBtb3JwaHNcblxuXHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cdFx0dmFyIG1vcnBoVGFyZ2V0c0xlbmd0aCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzUG9zaXRpb247XG5cblx0XHRpZiAoIG1vcnBoVGFyZ2V0c0xlbmd0aCA+IDAgKSB7XG5cblx0XHRcdG1vcnBoVGFyZ2V0c1Bvc2l0aW9uID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG1vcnBoVGFyZ2V0c0xlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvblsgaSBdID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1vcnBoVGFyZ2V0c1sgaSBdLm5hbWUsXG5cdFx0XHRcdCBcdGRhdGE6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMucG9zaXRpb24gPSBtb3JwaFRhcmdldHNQb3NpdGlvbjtcblxuXHRcdH1cblxuXHRcdHZhciBtb3JwaE5vcm1hbHMgPSBnZW9tZXRyeS5tb3JwaE5vcm1hbHM7XG5cdFx0dmFyIG1vcnBoTm9ybWFsc0xlbmd0aCA9IG1vcnBoTm9ybWFscy5sZW5ndGg7XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzTm9ybWFsO1xuXG5cdFx0aWYgKCBtb3JwaE5vcm1hbHNMZW5ndGggPiAwICkge1xuXG5cdFx0XHRtb3JwaFRhcmdldHNOb3JtYWwgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbW9ycGhOb3JtYWxzTGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0c05vcm1hbFsgaSBdID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1vcnBoTm9ybWFsc1sgaSBdLm5hbWUsXG5cdFx0XHRcdCBcdGRhdGE6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMubm9ybWFsID0gbW9ycGhUYXJnZXRzTm9ybWFsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbnNcblxuXHRcdHZhciBza2luSW5kaWNlcyA9IGdlb21ldHJ5LnNraW5JbmRpY2VzO1xuXHRcdHZhciBza2luV2VpZ2h0cyA9IGdlb21ldHJ5LnNraW5XZWlnaHRzO1xuXG5cdFx0dmFyIGhhc1NraW5JbmRpY2VzID0gc2tpbkluZGljZXMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7XG5cdFx0dmFyIGhhc1NraW5XZWlnaHRzID0gc2tpbldlaWdodHMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB2ZXJ0aWNlcy5sZW5ndGggPiAwICYmIGZhY2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5OiBGYWNlbGVzcyBnZW9tZXRyaWVzIGFyZSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGZhY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIHZlcnRpY2VzWyBmYWNlLmEgXSwgdmVydGljZXNbIGZhY2UuYiBdLCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKTtcblxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxzLnB1c2goIHZlcnRleE5vcm1hbHNbIDAgXSwgdmVydGV4Tm9ybWFsc1sgMSBdLCB2ZXJ0ZXhOb3JtYWxzWyAyIF0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgbm9ybWFsID0gZmFjZS5ub3JtYWw7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxzLnB1c2goIG5vcm1hbCwgbm9ybWFsLCBub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdGlmICggdmVydGV4Q29sb3JzLmxlbmd0aCA9PT0gMyApIHtcblxuXHRcdFx0XHR0aGlzLmNvbG9ycy5wdXNoKCB2ZXJ0ZXhDb2xvcnNbIDAgXSwgdmVydGV4Q29sb3JzWyAxIF0sIHZlcnRleENvbG9yc1sgMiBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIGNvbG9yID0gZmFjZS5jb2xvcjtcblxuXHRcdFx0XHR0aGlzLmNvbG9ycy5wdXNoKCBjb2xvciwgY29sb3IsIGNvbG9yICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4VXYgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIDAgXVsgaSBdO1xuXG5cdFx0XHRcdGlmICggdmVydGV4VXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnV2cy5wdXNoKCB2ZXJ0ZXhVdnNbIDAgXSwgdmVydGV4VXZzWyAxIF0sIHZlcnRleFV2c1sgMiBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5LmZyb21HZW9tZXRyeSgpOiBVbmRlZmluZWQgdmVydGV4VXYgJywgaSApO1xuXG5cdFx0XHRcdFx0dGhpcy51dnMucHVzaCggbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhVdjIgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIDEgXVsgaSBdO1xuXG5cdFx0XHRcdGlmICggdmVydGV4VXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnV2czIucHVzaCggdmVydGV4VXZzWyAwIF0sIHZlcnRleFV2c1sgMSBdLCB2ZXJ0ZXhVdnNbIDIgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5EaXJlY3RHZW9tZXRyeS5mcm9tR2VvbWV0cnkoKTogVW5kZWZpbmVkIHZlcnRleFV2MiAnLCBpICk7XG5cblx0XHRcdFx0XHR0aGlzLnV2czIucHVzaCggbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBtb3JwaHNcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhUYXJnZXRzTGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaiBdLnZlcnRpY2VzO1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0c1Bvc2l0aW9uWyBqIF0uZGF0YS5wdXNoKCBtb3JwaFRhcmdldFsgZmFjZS5hIF0sIG1vcnBoVGFyZ2V0WyBmYWNlLmIgXSwgbW9ycGhUYXJnZXRbIGZhY2UuYyBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhOb3JtYWxzTGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaE5vcm1hbCA9IG1vcnBoTm9ybWFsc1sgaiBdLnZlcnRleE5vcm1hbHNbIGkgXTtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNOb3JtYWxbIGogXS5kYXRhLnB1c2goIG1vcnBoTm9ybWFsLmEsIG1vcnBoTm9ybWFsLmIsIG1vcnBoTm9ybWFsLmMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBza2luc1xuXG5cdFx0XHRpZiAoIGhhc1NraW5JbmRpY2VzICkge1xuXG5cdFx0XHRcdHRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGZhY2UuYSBdLCBza2luSW5kaWNlc1sgZmFjZS5iIF0sIHNraW5JbmRpY2VzWyBmYWNlLmMgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2tpbldlaWdodHMgKSB7XG5cblx0XHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKCBza2luV2VpZ2h0c1sgZmFjZS5hIF0sIHNraW5XZWlnaHRzWyBmYWNlLmIgXSwgc2tpbldlaWdodHNbIGZhY2UuYyBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY29tcHV0ZUdyb3VwcyggZ2VvbWV0cnkgKTtcblxuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnV2c05lZWRVcGRhdGU7XG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gYXJyYXlNYXgoIGFycmF5ICkge1xuXG5cdGlmICggYXJyYXkubGVuZ3RoID09PSAwICkgcmV0dXJuIC0gSW5maW5pdHk7XG5cblx0dmFyIG1heCA9IGFycmF5WyAwIF07XG5cblx0Zm9yICggdmFyIGkgPSAxLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgKysgaSApIHtcblxuXHRcdGlmICggYXJyYXlbIGkgXSA+IG1heCApIG1heCA9IGFycmF5WyBpIF07XG5cblx0fVxuXG5cdHJldHVybiBtYXg7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgYnVmZmVyR2VvbWV0cnlJZCA9IDE7IC8vIEJ1ZmZlckdlb21ldHJ5IHVzZXMgb2RkIG51bWJlcnMgYXMgSWRcblxuZnVuY3Rpb24gQnVmZmVyR2VvbWV0cnkoKSB7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBidWZmZXJHZW9tZXRyeUlkICs9IDIgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMuaW5kZXggPSBudWxsO1xuXHR0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcblxuXHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXG5cdHRoaXMuZ3JvdXBzID0gW107XG5cblx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IEluZmluaXR5IH07XG5cblx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG59XG5cbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBCdWZmZXJHZW9tZXRyeSxcblxuXHRpc0J1ZmZlckdlb21ldHJ5OiB0cnVlLFxuXG5cdGdldEluZGV4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbmRleDtcblxuXHR9LFxuXG5cdHNldEluZGV4OiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbmRleCApICkge1xuXG5cdFx0XHR0aGlzLmluZGV4ID0gbmV3ICggYXJyYXlNYXgoIGluZGV4ICkgPiA2NTUzNSA/IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSA6IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSApKCBpbmRleCwgMSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5pbmRleCA9IGluZGV4O1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0YWRkQXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUsIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggISAoIGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUuaXNCdWZmZXJBdHRyaWJ1dGUgKSAmJiAhICggYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS4nICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZSggbmFtZSwgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYXJndW1lbnRzWyAxIF0sIGFyZ3VtZW50c1sgMiBdICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbmFtZSA9PT0gJ2luZGV4JyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuYWRkQXR0cmlidXRlOiBVc2UgLnNldEluZGV4KCkgZm9yIGluZGV4IGF0dHJpYnV0ZS4nICk7XG5cdFx0XHR0aGlzLnNldEluZGV4KCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSA9IGF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0fSxcblxuXHRyZW1vdmVBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkR3JvdXA6IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0dGhpcy5ncm91cHMucHVzaCgge1xuXG5cdFx0XHRzdGFydDogc3RhcnQsXG5cdFx0XHRjb3VudDogY291bnQsXG5cdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMFxuXG5cdFx0fSApO1xuXG5cdH0sXG5cblx0Y2xlYXJHcm91cHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cblx0fSxcblxuXHRzZXREcmF3UmFuZ2U6IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcblx0XHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHZhciBub3JtYWwgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0aWYgKCBub3JtYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0bm9ybWFsTWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbCApO1xuXHRcdFx0bm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB4LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblgoIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB5LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB6LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblooIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgZ2VvbWV0cnlcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdHJhbnNsYXRlKCB4LCB5LCB6ICkge1xuXG5cdFx0XHRtMS5tYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRzY2FsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gc2NhbGUgZ2VvbWV0cnlcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2NhbGUoIHgsIHksIHogKSB7XG5cblx0XHRcdG0xLm1ha2VTY2FsZSggeCwgeSwgeiApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9iaiA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvb2tBdCggdmVjdG9yICkge1xuXG5cdFx0XHRvYmoubG9va0F0KCB2ZWN0b3IgKTtcblxuXHRcdFx0b2JqLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBvYmoubWF0cml4ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNlbnRlcigpIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIG9mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0XHR0aGlzLnRyYW5zbGF0ZSggb2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQueiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5zZXRGcm9tT2JqZWN0KCkuIENvbnZlcnRpbmcnLCBvYmplY3QsIHRoaXMgKTtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggb2JqZWN0LmlzUG9pbnRzIHx8IG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMywgMyApO1xuXHRcdFx0dmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoICogMywgMyApO1xuXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS52ZXJ0aWNlcyApICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgY29sb3JzLmNvcHlDb2xvcnNBcnJheSggZ2VvbWV0cnkuY29sb3JzICkgKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICYmIGdlb21ldHJ5LmxpbmVEaXN0YW5jZXMubGVuZ3RoID09PSBnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkubGluZURpc3RhbmNlcy5sZW5ndGgsIDEgKTtcblxuXHRcdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIGxpbmVEaXN0YW5jZXMuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR0aGlzLmZyb21HZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdHZhciBwb3NpdGlvbiA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0cG9zaXRpb24ucHVzaCggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCAzICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlRnJvbU9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdHZhciBkaXJlY3QgPSBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRkaXJlY3QgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZGlyZWN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRpcmVjdC52ZXJ0aWNlc05lZWRVcGRhdGUgPSBnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU7XG5cdFx0XHRkaXJlY3Qubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5jb2xvcnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC51dnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdFx0Z2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRnZW9tZXRyeSA9IGRpcmVjdDtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdGlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS5ub3JtYWxzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmNvbG9yO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApO1xuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnV2O1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmxpbmVEaXN0YW5jZTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubGluZURpc3RhbmNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUdyb3Vwcyggb2JqZWN0Lmdlb21ldHJ5ICk7XG5cdFx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHRnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ID0gbmV3IERpcmVjdEdlb21ldHJ5KCkuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbURpcmVjdEdlb21ldHJ5KCBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ICk7XG5cblx0fSxcblxuXHRmcm9tRGlyZWN0R2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMyApO1xuXHRcdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHZhciBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggKiAzICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkubm9ybWFscyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmNvbG9ycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCAqIDMgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LnV2cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudXZzLmxlbmd0aCAqIDIgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzMi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzMiA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnV2czIubGVuZ3RoICogMiApO1xuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1djInLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMyLCAyICkuY29weVZlY3RvcjJzQXJyYXkoIGdlb21ldHJ5LnV2czIgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdC8vIG1vcnBoc1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gZ2VvbWV0cnkubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBbXTtcblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBtb3JwaFRhcmdldC5kYXRhLmxlbmd0aCAqIDMsIDMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5hbWUgPSBtb3JwaFRhcmdldC5uYW1lO1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggbW9ycGhUYXJnZXQuZGF0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbm5pbmdcblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5JbmRpY2VzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnc2tpbkluZGV4Jywgc2tpbkluZGljZXMuY29weVZlY3RvcjRzQXJyYXkoIGdlb21ldHJ5LnNraW5JbmRpY2VzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5XZWlnaHRzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnc2tpbldlaWdodCcsIHNraW5XZWlnaHRzLmNvcHlWZWN0b3I0c0FycmF5KCBnZW9tZXRyeS5za2luV2VpZ2h0cyApICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueCApIHx8IGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi55ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnogKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveDogQ29tcHV0ZWQgbWluL21heCBoYXZlIE5hTiB2YWx1ZXMuIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJywgdGhpcyApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYm94ID0gbmV3IEJveDMoKTtcblx0XHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb21wdXRlQm91bmRpbmdTcGhlcmUoKSB7XG5cblx0XHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKCBwb3NpdGlvbiApIHtcblxuXHRcdFx0XHR2YXIgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7XG5cblx0XHRcdFx0Ym94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cdFx0XHRcdGJveC5nZXRDZW50ZXIoIGNlbnRlciApO1xuXG5cdFx0XHRcdC8vIGhvcGluZyB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXG5cdFx0XHRcdC8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2VcblxuXHRcdFx0XHR2YXIgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVjdG9yLnggPSBwb3NpdGlvbi5nZXRYKCBpICk7XG5cdFx0XHRcdFx0dmVjdG9yLnkgPSBwb3NpdGlvbi5nZXRZKCBpICk7XG5cdFx0XHRcdFx0dmVjdG9yLnogPSBwb3NpdGlvbi5nZXRaKCBpICk7XG5cdFx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdmVjdG9yICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjb21wdXRlRmFjZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblx0fSxcblxuXHRjb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5pbmRleDtcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdGlmICggYXR0cmlidXRlcy5wb3NpdGlvbiApIHtcblxuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9ucy5sZW5ndGggKSwgMyApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmVzZXQgZXhpc3Rpbmcgbm9ybWFscyB0byB6ZXJvXG5cblx0XHRcdFx0dmFyIGFycmF5ID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0YXJyYXlbIGkgXSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBub3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cblx0XHRcdHZhciB2QSwgdkIsIHZDO1xuXHRcdFx0dmFyIHBBID0gbmV3IFZlY3RvcjMoKSwgcEIgPSBuZXcgVmVjdG9yMygpLCBwQyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdC8vIGluZGV4ZWQgZWxlbWVudHNcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblxuXHRcdFx0XHR2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBpbmRleC5jb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHR2QSA9IGluZGljZXNbIGkgKyAwIF0gKiAzO1xuXHRcdFx0XHRcdHZCID0gaW5kaWNlc1sgaSArIDEgXSAqIDM7XG5cdFx0XHRcdFx0dkMgPSBpbmRpY2VzWyBpICsgMiBdICogMztcblxuXHRcdFx0XHRcdHBBLmZyb21BcnJheSggcG9zaXRpb25zLCB2QSApO1xuXHRcdFx0XHRcdHBCLmZyb21BcnJheSggcG9zaXRpb25zLCB2QiApO1xuXHRcdFx0XHRcdHBDLmZyb21BcnJheSggcG9zaXRpb25zLCB2QyApO1xuXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7XG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyggcEEsIHBCICk7XG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRub3JtYWxzWyB2QSBdICs9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkEgKyAxIF0gKz0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyB2QSArIDIgXSArPSBjYi56O1xuXG5cdFx0XHRcdFx0bm9ybWFsc1sgdkIgXSArPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZCICsgMSBdICs9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkIgKyAyIF0gKz0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIHZDIF0gKz0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyB2QyArIDEgXSArPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZDICsgMiBdICs9IGNiLno7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGVsZW1lbnRzICh1bmNvbm5lY3RlZCB0cmlhbmdsZSBzb3VwKVxuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWw7IGkgKz0gOSApIHtcblxuXHRcdFx0XHRcdHBBLmZyb21BcnJheSggcG9zaXRpb25zLCBpICk7XG5cdFx0XHRcdFx0cEIuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyAzICk7XG5cdFx0XHRcdFx0cEMuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyA2ICk7XG5cblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTtcblx0XHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgXSA9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDEgXSA9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDIgXSA9IGNiLno7XG5cblx0XHRcdFx0XHRub3JtYWxzWyBpICsgMyBdID0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNCBdID0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNSBdID0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA2IF0gPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA3IF0gPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA4IF0gPSBjYi56O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcblxuXHRcdFx0YXR0cmlidXRlcy5ub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG9mZnNldCApIHtcblxuXHRcdGlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS4nLCBnZW9tZXRyeSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2Zmc2V0ID0gMDtcblxuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHQnVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogT3ZlcndyaXRpbmcgb3JpZ2luYWwgZ2VvbWV0cnksIHN0YXJ0aW5nIGF0IG9mZnNldD0wLiAnXG5cdFx0XHRcdCsgJ1VzZSBCdWZmZXJHZW9tZXRyeVV0aWxzLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZvciBsb3NzbGVzcyBtZXJnZS4nXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlMSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5MSA9IGF0dHJpYnV0ZTEuYXJyYXk7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUyID0gZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHR2YXIgYXR0cmlidXRlQXJyYXkyID0gYXR0cmlidXRlMi5hcnJheTtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZVNpemUgPSBhdHRyaWJ1dGUyLml0ZW1TaXplO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGogPSBhdHRyaWJ1dGVTaXplICogb2Zmc2V0OyBpIDwgYXR0cmlidXRlQXJyYXkyLmxlbmd0aDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVBcnJheTFbIGogXSA9IGF0dHJpYnV0ZUFycmF5MlsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIG5vcm1hbGl6ZU5vcm1hbHMoKSB7XG5cblx0XHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5vcm1hbHMuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2ZWN0b3IueCA9IG5vcm1hbHMuZ2V0WCggaSApO1xuXHRcdFx0XHR2ZWN0b3IueSA9IG5vcm1hbHMuZ2V0WSggaSApO1xuXHRcdFx0XHR2ZWN0b3IueiA9IG5vcm1hbHMuZ2V0WiggaSApO1xuXG5cdFx0XHRcdHZlY3Rvci5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRub3JtYWxzLnNldFhZWiggaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0b05vbkluZGV4ZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHR2YXIgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0XHR2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRcdHZhciBhcnJheTIgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGluZGljZXMubGVuZ3RoICogaXRlbVNpemUgKTtcblxuXHRcdFx0dmFyIGluZGV4ID0gMCwgaW5kZXgyID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc1sgaSBdICogaXRlbVNpemU7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5Mi5hZGRBdHRyaWJ1dGUoIG5hbWUsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0Z2VvbWV0cnkyLmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTI7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnQnVmZmVyR2VvbWV0cnknLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdCdWZmZXJHZW9tZXRyeS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIEJ1ZmZlckdlb21ldHJ5IHNlcmlhbGl6YXRpb25cblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRpZiAoIHRoaXMucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdGlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIGRhdGFbIGtleSBdID0gcGFyYW1ldGVyc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9XG5cblx0XHRkYXRhLmRhdGEgPSB7IGF0dHJpYnV0ZXM6IHt9IH07XG5cblx0XHR2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGluZGV4LmFycmF5ICk7XG5cblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcblx0XHRcdFx0dHlwZTogaW5kZXguYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdFx0YXJyYXk6IGFycmF5XG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0dmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGF0dHJpYnV0ZS5hcnJheSApO1xuXG5cdFx0XHRkYXRhLmRhdGEuYXR0cmlidXRlc1sga2V5IF0gPSB7XG5cdFx0XHRcdGl0ZW1TaXplOiBhdHRyaWJ1dGUuaXRlbVNpemUsXG5cdFx0XHRcdHR5cGU6IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0XHRhcnJheTogYXJyYXksXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IGF0dHJpYnV0ZS5ub3JtYWxpemVkXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBncm91cHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5ib3VuZGluZ1NwaGVyZSA9IHtcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxuXHRcdFx0XHRyYWRpdXM6IGJvdW5kaW5nU3BoZXJlLnJhZGl1c1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qXG5cdFx0IC8vIEhhbmRsZSBwcmltaXRpdmVzXG5cblx0XHQgdmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHQgaWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHQgdmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0IGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdCB2YWx1ZXMucHVzaCggcGFyYW1ldGVyc1sga2V5IF0gKTtcblxuXHRcdCB9XG5cblx0XHQgdmFyIGdlb21ldHJ5ID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgKTtcblx0XHQgdGhpcy5jb25zdHJ1Y3Rvci5hcHBseSggZ2VvbWV0cnksIHZhbHVlcyApO1xuXHRcdCByZXR1cm4gZ2VvbWV0cnk7XG5cblx0XHQgfVxuXG5cdFx0IHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblx0XHQgKi9cblxuXHRcdHJldHVybiBuZXcgQnVmZmVyR2VvbWV0cnkoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHZhciBuYW1lLCBpLCBsO1xuXG5cdFx0Ly8gcmVzZXRcblxuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gaW5kZXhcblxuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuc2V0SW5kZXgoIGluZGV4LmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IFtdO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbW9ycGhBdHRyaWJ1dGVbIGkgXS5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR2YXIgZ3JvdXBzID0gc291cmNlLmdyb3VwcztcblxuXHRcdGZvciAoIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcblxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIGRyYXcgcmFuZ2VcblxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc291cmNlLmRyYXdSYW5nZS5zdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IHNvdXJjZS5kcmF3UmFuZ2UuY291bnQ7XG5cblx0XHQvLyB1c2VyIGRhdGFcblxuXHRcdHRoaXMudXNlckRhdGEgPSBzb3VyY2UudXNlckRhdGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEJveEdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQm94QnVmZmVyR2VvbWV0cnkoIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgZGVwdGhTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkJveEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuQm94R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94R2VvbWV0cnk7XG5cbi8vIEJveEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblx0ZGVwdGggPSBkZXB0aCB8fCAxO1xuXG5cdC8vIHNlZ21lbnRzXG5cblx0d2lkdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCAxO1xuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgMTtcblx0ZGVwdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIGRlcHRoU2VnbWVudHMgKSB8fCAxO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblxuXHQvLyBidWlsZCBlYWNoIHNpZGUgb2YgdGhlIGJveCBnZW9tZXRyeVxuXG5cdGJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIC0gMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDAgKTsgLy8gcHhcblx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCAtIHdpZHRoLCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgMSApOyAvLyBueFxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAxLCB3aWR0aCwgZGVwdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMiApOyAvLyBweVxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAtIDEsIHdpZHRoLCBkZXB0aCwgLSBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDMgKTsgLy8gbnlcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHpcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgLSAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIC0gZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA1ICk7IC8vIG56XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdGZ1bmN0aW9uIGJ1aWxkUGxhbmUoIHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHR2YXIgc2VnbWVudFdpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHR2YXIgc2VnbWVudEhlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0dmFyIHdpZHRoSGFsZiA9IHdpZHRoIC8gMjtcblx0XHR2YXIgaGVpZ2h0SGFsZiA9IGhlaWdodCAvIDI7XG5cdFx0dmFyIGRlcHRoSGFsZiA9IGRlcHRoIC8gMjtcblxuXHRcdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0dmFyIGdyaWRZMSA9IGdyaWRZICsgMTtcblxuXHRcdHZhciB2ZXJ0ZXhDb3VudGVyID0gMDtcblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHR2YXIgaXgsIGl5O1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0dmFyIHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmO1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcblxuXHRcdFx0XHR2YXIgeCA9IGl4ICogc2VnbWVudFdpZHRoIC0gd2lkdGhIYWxmO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSB4ICogdWRpcjtcblx0XHRcdFx0dmVjdG9yWyB2IF0gPSB5ICogdmRpcjtcblx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aEhhbGY7XG5cblx0XHRcdFx0Ly8gbm93IGFwcGx5IHZlY3RvciB0byB2ZXJ0ZXggYnVmZmVyXG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSAwO1xuXHRcdFx0XHR2ZWN0b3JbIHYgXSA9IDA7XG5cdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTtcblxuXHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0XHQvLyB1dnNcblxuXHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XG5cblx0XHRcdFx0Ly8gY291bnRlcnNcblxuXHRcdFx0XHR2ZXJ0ZXhDb3VudGVyICs9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdC8vIDEuIHlvdSBuZWVkIHRocmVlIGluZGljZXMgdG8gZHJhdyBhIHNpbmdsZSBmYWNlXG5cdFx0Ly8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcblx0XHQvLyAzLiBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIHNpeCAoMiozKSBpbmRpY2VzIHBlciBzZWdtZW50XG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdHZhciBhID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogaXk7XG5cdFx0XHRcdHZhciBiID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdFx0dmFyIGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdHZhciBkID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiBpeTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHQvLyBpbmNyZWFzZSBjb3VudGVyXG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIG1hdGVyaWFsSW5kZXggKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0Ly8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlc1xuXG5cdFx0bnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyO1xuXG5cdH1cblxufVxuXG5Cb3hCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkJveEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFBsYW5lR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblBsYW5lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5QbGFuZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lR2VvbWV0cnk7XG5cbi8vIFBsYW5lQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVCdWZmZXJHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblxuXHR2YXIgd2lkdGhfaGFsZiA9IHdpZHRoIC8gMjtcblx0dmFyIGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMjtcblxuXHR2YXIgZ3JpZFggPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgfHwgMTtcblx0dmFyIGdyaWRZID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCAxO1xuXG5cdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdHZhciBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0dmFyIHNlZ21lbnRfd2lkdGggPSB3aWR0aCAvIGdyaWRYO1xuXHR2YXIgc2VnbWVudF9oZWlnaHQgPSBoZWlnaHQgLyBncmlkWTtcblxuXHR2YXIgaXgsIGl5O1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdHZhciB5ID0gaXkgKiBzZWdtZW50X2hlaWdodCAtIGhlaWdodF9oYWxmO1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7XG5cblx0XHRcdHZhciB4ID0gaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZjtcblxuXHRcdFx0dmVydGljZXMucHVzaCggeCwgLSB5LCAwICk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0dXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHtcblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7XG5cblx0XHRcdHZhciBhID0gaXggKyBncmlkWDEgKiBpeTtcblx0XHRcdHZhciBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0dmFyIGMgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdHZhciBkID0gKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5O1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG52YXIgbWF0ZXJpYWxJZCA9IDA7XG5cbmZ1bmN0aW9uIE1hdGVyaWFsKCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogbWF0ZXJpYWxJZCArKyB9ICk7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cdHRoaXMudHlwZSA9ICdNYXRlcmlhbCc7XG5cblx0dGhpcy5mb2cgPSB0cnVlO1xuXHR0aGlzLmxpZ2h0cyA9IHRydWU7XG5cblx0dGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nO1xuXHR0aGlzLnNpZGUgPSBGcm9udFNpZGU7XG5cdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBOb0NvbG9yczsgLy8gVEhSRUUuTm9Db2xvcnMsIFRIUkVFLlZlcnRleENvbG9ycywgVEhSRUUuRmFjZUNvbG9yc1xuXG5cdHRoaXMub3BhY2l0eSA9IDE7XG5cdHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuXHR0aGlzLmJsZW5kU3JjID0gU3JjQWxwaGFGYWN0b3I7XG5cdHRoaXMuYmxlbmREc3QgPSBPbmVNaW51c1NyY0FscGhhRmFjdG9yO1xuXHR0aGlzLmJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0dGhpcy5ibGVuZFNyY0FscGhhID0gbnVsbDtcblx0dGhpcy5ibGVuZERzdEFscGhhID0gbnVsbDtcblx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXG5cdHRoaXMuZGVwdGhGdW5jID0gTGVzc0VxdWFsRGVwdGg7XG5cdHRoaXMuZGVwdGhUZXN0ID0gdHJ1ZTtcblx0dGhpcy5kZXB0aFdyaXRlID0gdHJ1ZTtcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gbnVsbDtcblx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gZmFsc2U7XG5cdHRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTtcblxuXHR0aGlzLnNoYWRvd1NpZGUgPSBudWxsO1xuXG5cdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XG5cblx0dGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbFxuXG5cdHRoaXMucG9seWdvbk9mZnNldCA9IGZhbHNlO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7XG5cblx0dGhpcy5kaXRoZXJpbmcgPSBmYWxzZTtcblxuXHR0aGlzLmFscGhhVGVzdCA9IDA7XG5cdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG5cblx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IE1hdGVyaWFsLFxuXG5cdGlzTWF0ZXJpYWw6IHRydWUsXG5cblx0b25CZWZvcmVDb21waWxlOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRzZXRWYWx1ZXM6IGZ1bmN0aW9uICggdmFsdWVzICkge1xuXG5cdFx0aWYgKCB2YWx1ZXMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGZvciAoIHZhciBrZXkgaW4gdmFsdWVzICkge1xuXG5cdFx0XHR2YXIgbmV3VmFsdWUgPSB2YWx1ZXNbIGtleSBdO1xuXG5cdFx0XHRpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdGVyaWFsOiAnXCIgKyBrZXkgKyBcIicgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC5cIiApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBmb3IgYmFja3dhcmQgY29tcGF0YWJpbGl0eSBpZiBzaGFkaW5nIGlzIHNldCBpbiB0aGUgY29uc3RydWN0b3Jcblx0XHRcdGlmICgga2V5ID09PSAnc2hhZGluZycgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZmxhdFNoYWRpbmcgPSAoIG5ld1ZhbHVlID09PSBGbGF0U2hhZGluZyApID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY3VycmVudFZhbHVlID0gdGhpc1sga2V5IF07XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLlwiICsgdGhpcy50eXBlICsgXCI6ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5zZXQoIG5ld1ZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc1ZlY3RvcjMgKSAmJiAoIG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmlzVmVjdG9yMyApICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5jb3B5KCBuZXdWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXNbIGtleSBdID0gbmV3VmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGlzUm9vdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCBpc1Jvb3QgKSB7XG5cblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb25cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlICYmIHRoaXMuZW1pc3NpdmUuaXNDb2xvciApIGRhdGEuZW1pc3NpdmUgPSB0aGlzLmVtaXNzaXZlLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAhPT0gMSApIGRhdGEuZW1pc3NpdmVJbnRlbnNpdHkgPSB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyICYmIHRoaXMuc3BlY3VsYXIuaXNDb2xvciApIGRhdGEuc3BlY3VsYXIgPSB0aGlzLnNwZWN1bGFyLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuc2hpbmluZXNzID0gdGhpcy5zaGluaW5lc3M7XG5cdFx0aWYgKCB0aGlzLmNsZWFyQ29hdCAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhckNvYXQgPSB0aGlzLmNsZWFyQ29hdDtcblx0XHRpZiAoIHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLmNsZWFyQ29hdFJvdWdobmVzcyA9IHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzO1xuXG5cdFx0aWYgKCB0aGlzLm1hcCAmJiB0aGlzLm1hcC5pc1RleHR1cmUgKSBkYXRhLm1hcCA9IHRoaXMubWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmFscGhhTWFwICYmIHRoaXMuYWxwaGFNYXAuaXNUZXh0dXJlICkgZGF0YS5hbHBoYU1hcCA9IHRoaXMuYWxwaGFNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMubGlnaHRNYXAgJiYgdGhpcy5saWdodE1hcC5pc1RleHR1cmUgKSBkYXRhLmxpZ2h0TWFwID0gdGhpcy5saWdodE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmFvTWFwICYmIHRoaXMuYW9NYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmFvTWFwID0gdGhpcy5hb01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5hb01hcEludGVuc2l0eSA9IHRoaXMuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYnVtcE1hcCAmJiB0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmJ1bXBNYXAgPSB0aGlzLmJ1bXBNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuYnVtcFNjYWxlID0gdGhpcy5idW1wU2NhbGU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsTWFwICYmIHRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ub3JtYWxNYXAgPSB0aGlzLm5vcm1hbE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5ub3JtYWxNYXBUeXBlID0gdGhpcy5ub3JtYWxNYXBUeXBlO1xuXHRcdFx0ZGF0YS5ub3JtYWxTY2FsZSA9IHRoaXMubm9ybWFsU2NhbGUudG9BcnJheSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmRpc3BsYWNlbWVudE1hcCAmJiB0aGlzLmRpc3BsYWNlbWVudE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50TWFwID0gdGhpcy5kaXNwbGFjZW1lbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50U2NhbGUgPSB0aGlzLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzc01hcCAmJiB0aGlzLnJvdWdobmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnJvdWdobmVzc01hcCA9IHRoaXMucm91Z2huZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLm1ldGFsbmVzc01hcCAmJiB0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLm1ldGFsbmVzc01hcCA9IHRoaXMubWV0YWxuZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVNYXAgJiYgdGhpcy5lbWlzc2l2ZU1hcC5pc1RleHR1cmUgKSBkYXRhLmVtaXNzaXZlTWFwID0gdGhpcy5lbWlzc2l2ZU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhck1hcCAmJiB0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJNYXAgPSB0aGlzLnNwZWN1bGFyTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW52TWFwICYmIHRoaXMuZW52TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5lbnZNYXAgPSB0aGlzLmVudk1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eTsgLy8gU2NhbGUgYmVoaW5kIGVudk1hcFxuXG5cdFx0XHRpZiAoIHRoaXMuY29tYmluZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5jb21iaW5lID0gdGhpcy5jb21iaW5lO1xuXHRcdFx0aWYgKCB0aGlzLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ncmFkaWVudE1hcCAmJiB0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ncmFkaWVudE1hcCA9IHRoaXMuZ3JhZGllbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5zaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLnNpemUgPSB0aGlzLnNpemU7XG5cdFx0aWYgKCB0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplQXR0ZW51YXRpb24gPSB0aGlzLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdGlmICggdGhpcy5ibGVuZGluZyAhPT0gTm9ybWFsQmxlbmRpbmcgKSBkYXRhLmJsZW5kaW5nID0gdGhpcy5ibGVuZGluZztcblx0XHRpZiAoIHRoaXMuZmxhdFNoYWRpbmcgPT09IHRydWUgKSBkYXRhLmZsYXRTaGFkaW5nID0gdGhpcy5mbGF0U2hhZGluZztcblx0XHRpZiAoIHRoaXMuc2lkZSAhPT0gRnJvbnRTaWRlICkgZGF0YS5zaWRlID0gdGhpcy5zaWRlO1xuXHRcdGlmICggdGhpcy52ZXJ0ZXhDb2xvcnMgIT09IE5vQ29sb3JzICkgZGF0YS52ZXJ0ZXhDb2xvcnMgPSB0aGlzLnZlcnRleENvbG9ycztcblxuXHRcdGlmICggdGhpcy5vcGFjaXR5IDwgMSApIGRhdGEub3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgPT09IHRydWUgKSBkYXRhLnRyYW5zcGFyZW50ID0gdGhpcy50cmFuc3BhcmVudDtcblxuXHRcdGRhdGEuZGVwdGhGdW5jID0gdGhpcy5kZXB0aEZ1bmM7XG5cdFx0ZGF0YS5kZXB0aFRlc3QgPSB0aGlzLmRlcHRoVGVzdDtcblx0XHRkYXRhLmRlcHRoV3JpdGUgPSB0aGlzLmRlcHRoV3JpdGU7XG5cblx0XHQvLyByb3RhdGlvbiAoU3ByaXRlTWF0ZXJpYWwpXG5cdFx0aWYgKCB0aGlzLnJvdGF0aW9uICE9PSAwICkgZGF0YS5yb3RhdGlvbiA9IHRoaXMucm90YXRpb247XG5cblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldCA9PT0gdHJ1ZSApIGRhdGEucG9seWdvbk9mZnNldCA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldFVuaXRzID0gdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIHRoaXMubGluZXdpZHRoICE9PSAxICkgZGF0YS5saW5ld2lkdGggPSB0aGlzLmxpbmV3aWR0aDtcblx0XHRpZiAoIHRoaXMuZGFzaFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZGFzaFNpemUgPSB0aGlzLmRhc2hTaXplO1xuXHRcdGlmICggdGhpcy5nYXBTaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLmdhcFNpemUgPSB0aGlzLmdhcFNpemU7XG5cdFx0aWYgKCB0aGlzLnNjYWxlICE9PSB1bmRlZmluZWQgKSBkYXRhLnNjYWxlID0gdGhpcy5zY2FsZTtcblxuXHRcdGlmICggdGhpcy5kaXRoZXJpbmcgPT09IHRydWUgKSBkYXRhLmRpdGhlcmluZyA9IHRydWU7XG5cblx0XHRpZiAoIHRoaXMuYWxwaGFUZXN0ID4gMCApIGRhdGEuYWxwaGFUZXN0ID0gdGhpcy5hbHBoYVRlc3Q7XG5cdFx0aWYgKCB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIGRhdGEucHJlbXVsdGlwbGllZEFscGhhID0gdGhpcy5wcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lID09PSB0cnVlICkgZGF0YS53aXJlZnJhbWUgPSB0aGlzLndpcmVmcmFtZTtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVjYXAgIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVjYXAgPSB0aGlzLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVqb2luICE9PSAncm91bmQnICkgZGF0YS53aXJlZnJhbWVMaW5lam9pbiA9IHRoaXMud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRpZiAoIHRoaXMubW9ycGhUYXJnZXRzID09PSB0cnVlICkgZGF0YS5tb3JwaFRhcmdldHMgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5za2lubmluZyA9PT0gdHJ1ZSApIGRhdGEuc2tpbm5pbmcgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgZGF0YS52aXNpYmxlID0gZmFsc2U7XG5cdFx0aWYgKCBKU09OLnN0cmluZ2lmeSggdGhpcy51c2VyRGF0YSApICE9PSAne30nICkgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHQvLyBUT0RPOiBDb3BpZWQgZnJvbSBPYmplY3QzRC50b0pTT05cblxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoIGNhY2hlICkge1xuXG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBrZXkgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBjYWNoZVsga2V5IF07XG5cdFx0XHRcdGRlbGV0ZSBkYXRhLm1ldGFkYXRhO1xuXHRcdFx0XHR2YWx1ZXMucHVzaCggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzUm9vdCApIHtcblxuXHRcdFx0dmFyIHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0dmFyIGltYWdlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuaW1hZ2VzICk7XG5cblx0XHRcdGlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIGRhdGEudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBkYXRhLmltYWdlcyA9IGltYWdlcztcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cdFx0dGhpcy5saWdodHMgPSBzb3VyY2UubGlnaHRzO1xuXG5cdFx0dGhpcy5ibGVuZGluZyA9IHNvdXJjZS5ibGVuZGluZztcblx0XHR0aGlzLnNpZGUgPSBzb3VyY2Uuc2lkZTtcblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gc291cmNlLmZsYXRTaGFkaW5nO1xuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gc291cmNlLnZlcnRleENvbG9ycztcblxuXHRcdHRoaXMub3BhY2l0eSA9IHNvdXJjZS5vcGFjaXR5O1xuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSBzb3VyY2UudHJhbnNwYXJlbnQ7XG5cblx0XHR0aGlzLmJsZW5kU3JjID0gc291cmNlLmJsZW5kU3JjO1xuXHRcdHRoaXMuYmxlbmREc3QgPSBzb3VyY2UuYmxlbmREc3Q7XG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uID0gc291cmNlLmJsZW5kRXF1YXRpb247XG5cdFx0dGhpcy5ibGVuZFNyY0FscGhhID0gc291cmNlLmJsZW5kU3JjQWxwaGE7XG5cdFx0dGhpcy5ibGVuZERzdEFscGhhID0gc291cmNlLmJsZW5kRHN0QWxwaGE7XG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBzb3VyY2UuYmxlbmRFcXVhdGlvbkFscGhhO1xuXG5cdFx0dGhpcy5kZXB0aEZ1bmMgPSBzb3VyY2UuZGVwdGhGdW5jO1xuXHRcdHRoaXMuZGVwdGhUZXN0ID0gc291cmNlLmRlcHRoVGVzdDtcblx0XHR0aGlzLmRlcHRoV3JpdGUgPSBzb3VyY2UuZGVwdGhXcml0ZTtcblxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBzb3VyY2UucHJlY2lzaW9uO1xuXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gc291cmNlLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBzb3VyY2UucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0dGhpcy5kaXRoZXJpbmcgPSBzb3VyY2UuZGl0aGVyaW5nO1xuXG5cdFx0dGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xuXHRcdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gc291cmNlLnByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7XG5cdFx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gc291cmNlLmNsaXBJbnRlcnNlY3Rpb247XG5cblx0XHR2YXIgc3JjUGxhbmVzID0gc291cmNlLmNsaXBwaW5nUGxhbmVzLFxuXHRcdFx0ZHN0UGxhbmVzID0gbnVsbDtcblxuXHRcdGlmICggc3JjUGxhbmVzICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgbiA9IHNyY1BsYW5lcy5sZW5ndGg7XG5cdFx0XHRkc3RQbGFuZXMgPSBuZXcgQXJyYXkoIG4gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpIClcblx0XHRcdFx0ZHN0UGxhbmVzWyBpIF0gPSBzcmNQbGFuZXNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IGRzdFBsYW5lcztcblxuXHRcdHRoaXMuc2hhZG93U2lkZSA9IHNvdXJjZS5zaGFkb3dTaWRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgZGVmaW5lczogeyBcImxhYmVsXCIgOiBcInZhbHVlXCIgfSxcbiAqICB1bmlmb3JtczogeyBcInBhcmFtZXRlcjFcIjogeyB2YWx1ZTogMS4wIH0sIFwicGFyYW1ldGVyMlwiOiB7IHZhbHVlMjogMiB9IH0sXG4gKlxuICogIGZyYWdtZW50U2hhZGVyOiA8c3RyaW5nPixcbiAqICB2ZXJ0ZXhTaGFkZXI6IDxzdHJpbmc+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIGxpZ2h0czogPGJvb2w+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gU2hhZGVyTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFkZXJNYXRlcmlhbCc7XG5cblx0dGhpcy5kZWZpbmVzID0ge307XG5cdHRoaXMudW5pZm9ybXMgPSB7fTtcblxuXHR0aGlzLnZlcnRleFNoYWRlciA9ICd2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn0nO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gJ3ZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59JztcblxuXHR0aGlzLmxpbmV3aWR0aCA9IDE7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdHRoaXMuZm9nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgZm9nXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgbGlnaHRzXG5cdHRoaXMuY2xpcHBpbmcgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSB1c2VyLWRlZmluZWQgY2xpcHBpbmcgcGxhbmVzXG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNraW5uaW5nIGF0dHJpYnV0ZSBzdHJlYW1zXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7IC8vIHNldCB0byB1c2UgbW9ycGggdGFyZ2V0c1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIG5vcm1hbHNcblxuXHR0aGlzLmV4dGVuc2lvbnMgPSB7XG5cdFx0ZGVyaXZhdGl2ZXM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRlcml2YXRpdmVzXG5cdFx0ZnJhZ0RlcHRoOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBmcmFnbWVudCBkZXB0aCB2YWx1ZXNcblx0XHRkcmF3QnVmZmVyczogZmFsc2UsIC8vIHNldCB0byB1c2UgZHJhdyBidWZmZXJzXG5cdFx0c2hhZGVyVGV4dHVyZUxPRDogZmFsc2UgLy8gc2V0IHRvIHVzZSBzaGFkZXIgdGV4dHVyZSBMT0Rcblx0fTtcblxuXHQvLyBXaGVuIHJlbmRlcmVkIGdlb21ldHJ5IGRvZXNuJ3QgaW5jbHVkZSB0aGVzZSBhdHRyaWJ1dGVzIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lcyxcblx0Ly8gdXNlIHRoZXNlIGRlZmF1bHQgdmFsdWVzIGluIFdlYkdMLiBUaGlzIGF2b2lkcyBlcnJvcnMgd2hlbiBidWZmZXIgZGF0YSBpcyBtaXNzaW5nLlxuXHR0aGlzLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSB7XG5cdFx0J2NvbG9yJzogWyAxLCAxLCAxIF0sXG5cdFx0J3V2JzogWyAwLCAwIF0sXG5cdFx0J3V2Mic6IFsgMCwgMCBdXG5cdH07XG5cblx0dGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lID0gdW5kZWZpbmVkO1xuXHR0aGlzLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmF0dHJpYnV0ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNoYWRlck1hdGVyaWFsOiBhdHRyaWJ1dGVzIHNob3VsZCBub3cgYmUgZGVmaW5lZCBpbiBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG59XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhZGVyTWF0ZXJpYWw7XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gc291cmNlLmZyYWdtZW50U2hhZGVyO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IHNvdXJjZS52ZXJ0ZXhTaGFkZXI7XG5cblx0dGhpcy51bmlmb3JtcyA9IGNsb25lVW5pZm9ybXMoIHNvdXJjZS51bmlmb3JtcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UuZGVmaW5lcyApO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXG5cdHRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0cztcblx0dGhpcy5jbGlwcGluZyA9IHNvdXJjZS5jbGlwcGluZztcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHRoaXMuZXh0ZW5zaW9ucyA9IHNvdXJjZS5leHRlbnNpb25zO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdHZhciBkYXRhID0gTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0ZGF0YS51bmlmb3JtcyA9IHt9O1xuXG5cdGZvciAoIHZhciBuYW1lIGluIHRoaXMudW5pZm9ybXMgKSB7XG5cblx0XHR2YXIgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbIG5hbWUgXTtcblx0XHR2YXIgdmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0aWYgKCB2YWx1ZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ3QnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9KU09OKCBtZXRhICkudXVpZFxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ2MnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUuZ2V0SGV4KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc1ZlY3RvcjIgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ3YyJyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVmVjdG9yMyApIHtcblxuXHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHR0eXBlOiAndjMnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUuaXNWZWN0b3I0ICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICd2NCcsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDQgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ200Jyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBub3RlOiB0aGUgYXJyYXkgdmFyaWFudHMgdjJ2LCB2M3YsIHY0diwgbTR2IGFuZCB0diBhcmUgbm90IHN1cHBvcnRlZCBzbyBmYXJcblxuXHRcdH1cblxuXHR9XG5cblx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy5kZWZpbmVzICkubGVuZ3RoID4gMCApIGRhdGEuZGVmaW5lcyA9IHRoaXMuZGVmaW5lcztcblxuXHRkYXRhLnZlcnRleFNoYWRlciA9IHRoaXMudmVydGV4U2hhZGVyO1xuXHRkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gUmF5KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHR0aGlzLm9yaWdpbiA9ICggb3JpZ2luICE9PSB1bmRlZmluZWQgKSA/IG9yaWdpbiA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMuZGlyZWN0aW9uID0gKCBkaXJlY3Rpb24gIT09IHVuZGVmaW5lZCApID8gZGlyZWN0aW9uIDogbmV3IFZlY3RvcjMoKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBSYXkucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIG9yaWdpbiwgZGlyZWN0aW9uICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uY29weSggb3JpZ2luICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggZGlyZWN0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHJheSApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIHJheS5vcmlnaW4gKTtcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCByYXkuZGlyZWN0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGF0OiBmdW5jdGlvbiAoIHQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmF0KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0fSxcblxuXHRsb29rQXQ6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIHYgKS5zdWIoIHRoaXMub3JpZ2luICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJlY2FzdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByZWNhc3QoIHQgKSB7XG5cblx0XHRcdHRoaXMub3JpZ2luLmNvcHkoIHRoaXMuYXQoIHQsIHYxICkgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICk7XG5cblx0XHR2YXIgZGlyZWN0aW9uRGlzdGFuY2UgPSB0YXJnZXQuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5vcmlnaW4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggZGlyZWN0aW9uRGlzdGFuY2UgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVNxVG9Qb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBkaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRcdHZhciBkaXJlY3Rpb25EaXN0YW5jZSA9IHYxLnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdFx0Ly8gcG9pbnQgYmVoaW5kIHRoZSByYXlcblxuXHRcdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHYxLmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIGRpcmVjdGlvbkRpc3RhbmNlICkuYWRkKCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0XHRyZXR1cm4gdjEuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRkaXN0YW5jZVNxVG9TZWdtZW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc2VnQ2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgc2VnRGlyID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZGlmZiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGlzdGFuY2VTcVRvU2VnbWVudCggdjAsIHYxLCBvcHRpb25hbFBvaW50T25SYXksIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHRcdC8vIGZyb20gaHR0cDovL3d3dy5nZW9tZXRyaWN0b29scy5jb20vR1RFbmdpbmUvSW5jbHVkZS9NYXRoZW1hdGljcy9HdGVEaXN0UmF5U2VnbWVudC5oXG5cdFx0XHQvLyBJdCByZXR1cm5zIHRoZSBtaW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcmF5IGFuZCB0aGUgc2VnbWVudFxuXHRcdFx0Ly8gZGVmaW5lZCBieSB2MCBhbmQgdjFcblx0XHRcdC8vIEl0IGNhbiBhbHNvIHNldCB0d28gb3B0aW9uYWwgdGFyZ2V0cyA6XG5cdFx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSByYXlcblx0XHRcdC8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHNlZ21lbnRcblxuXHRcdFx0c2VnQ2VudGVyLmNvcHkoIHYwICkuYWRkKCB2MSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRcdHNlZ0Rpci5jb3B5KCB2MSApLnN1YiggdjAgKS5ub3JtYWxpemUoKTtcblx0XHRcdGRpZmYuY29weSggdGhpcy5vcmlnaW4gKS5zdWIoIHNlZ0NlbnRlciApO1xuXG5cdFx0XHR2YXIgc2VnRXh0ZW50ID0gdjAuZGlzdGFuY2VUbyggdjEgKSAqIDAuNTtcblx0XHRcdHZhciBhMDEgPSAtIHRoaXMuZGlyZWN0aW9uLmRvdCggc2VnRGlyICk7XG5cdFx0XHR2YXIgYjAgPSBkaWZmLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHRcdHZhciBiMSA9IC0gZGlmZi5kb3QoIHNlZ0RpciApO1xuXHRcdFx0dmFyIGMgPSBkaWZmLmxlbmd0aFNxKCk7XG5cdFx0XHR2YXIgZGV0ID0gTWF0aC5hYnMoIDEgLSBhMDEgKiBhMDEgKTtcblx0XHRcdHZhciBzMCwgczEsIHNxckRpc3QsIGV4dERldDtcblxuXHRcdFx0aWYgKCBkZXQgPiAwICkge1xuXG5cdFx0XHRcdC8vIFRoZSByYXkgYW5kIHNlZ21lbnQgYXJlIG5vdCBwYXJhbGxlbC5cblxuXHRcdFx0XHRzMCA9IGEwMSAqIGIxIC0gYjA7XG5cdFx0XHRcdHMxID0gYTAxICogYjAgLSBiMTtcblx0XHRcdFx0ZXh0RGV0ID0gc2VnRXh0ZW50ICogZGV0O1xuXG5cdFx0XHRcdGlmICggczAgPj0gMCApIHtcblxuXHRcdFx0XHRcdGlmICggczEgPj0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggczEgPD0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAwXG5cdFx0XHRcdFx0XHRcdC8vIE1pbmltdW0gYXQgaW50ZXJpb3IgcG9pbnRzIG9mIHJheSBhbmQgc2VnbWVudC5cblxuXHRcdFx0XHRcdFx0XHR2YXIgaW52RGV0ID0gMSAvIGRldDtcblx0XHRcdFx0XHRcdFx0czAgKj0gaW52RGV0O1xuXHRcdFx0XHRcdFx0XHRzMSAqPSBpbnZEZXQ7XG5cdFx0XHRcdFx0XHRcdHNxckRpc3QgPSBzMCAqICggczAgKyBhMDEgKiBzMSArIDIgKiBiMCApICsgczEgKiAoIGEwMSAqIHMwICsgczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDFcblxuXHRcdFx0XHRcdFx0XHRzMSA9IHNlZ0V4dGVudDtcblx0XHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gNVxuXG5cdFx0XHRcdFx0XHRzMSA9IC0gc2VnRXh0ZW50O1xuXHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBzMSA8PSAtIGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDRcblxuXHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIC0gYTAxICogc2VnRXh0ZW50ICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0czEgPSAoIHMwID4gMCApID8gLSBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDNcblxuXHRcdFx0XHRcdFx0czAgPSAwO1xuXHRcdFx0XHRcdFx0czEgPSBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAyXG5cblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzZWdFeHRlbnQgKyBiMCApICk7XG5cdFx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmF5IGFuZCBzZWdtZW50IGFyZSBwYXJhbGxlbC5cblxuXHRcdFx0XHRzMSA9ICggYTAxID4gMCApID8gLSBzZWdFeHRlbnQgOiBzZWdFeHRlbnQ7XG5cdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblJheSApIHtcblxuXHRcdFx0XHRvcHRpb25hbFBvaW50T25SYXkuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggczAgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkge1xuXG5cdFx0XHRcdG9wdGlvbmFsUG9pbnRPblNlZ21lbnQuY29weSggc2VnRGlyICkubXVsdGlwbHlTY2FsYXIoIHMxICkuYWRkKCBzZWdDZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc3FyRGlzdDtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdFNwaGVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RTcGhlcmUoIHNwaGVyZSwgdGFyZ2V0ICkge1xuXG5cdFx0XHR2MS5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLm9yaWdpbiApO1xuXHRcdFx0dmFyIHRjYSA9IHYxLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHRcdHZhciBkMiA9IHYxLmRvdCggdjEgKSAtIHRjYSAqIHRjYTtcblx0XHRcdHZhciByYWRpdXMyID0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRcdGlmICggZDIgPiByYWRpdXMyICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdHZhciB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApO1xuXG5cdFx0XHQvLyB0MCA9IGZpcnN0IGludGVyc2VjdCBwb2ludCAtIGVudHJhbmNlIG9uIGZyb250IG9mIHNwaGVyZVxuXHRcdFx0dmFyIHQwID0gdGNhIC0gdGhjO1xuXG5cdFx0XHQvLyB0MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlXG5cdFx0XHR2YXIgdDEgPSB0Y2EgKyB0aGM7XG5cblx0XHRcdC8vIHRlc3QgdG8gc2VlIGlmIGJvdGggdDAgYW5kIHQxIGFyZSBiZWhpbmQgdGhlIHJheSAtIGlmIHNvLCByZXR1cm4gbnVsbFxuXHRcdFx0aWYgKCB0MCA8IDAgJiYgdDEgPCAwICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdC8vIHRlc3QgdG8gc2VlIGlmIHQwIGlzIGJlaGluZCB0aGUgcmF5OlxuXHRcdFx0Ly8gaWYgaXQgaXMsIHRoZSByYXkgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHNvIHJldHVybiB0aGUgc2Vjb25kIGV4aXQgcG9pbnQgc2NhbGVkIGJ5IHQxLFxuXHRcdFx0Ly8gaW4gb3JkZXIgdG8gYWx3YXlzIHJldHVybiBhbiBpbnRlcnNlY3QgcG9pbnQgdGhhdCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LlxuXHRcdFx0aWYgKCB0MCA8IDAgKSByZXR1cm4gdGhpcy5hdCggdDEsIHRhcmdldCApO1xuXG5cdFx0XHQvLyBlbHNlIHQwIGlzIGluIGZyb250IG9mIHRoZSByYXksIHNvIHJldHVybiB0aGUgZmlyc3QgY29sbGlzaW9uIHBvaW50IHNjYWxlZCBieSB0MFxuXHRcdFx0cmV0dXJuIHRoaXMuYXQoIHQwLCB0YXJnZXQgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSA8PSAoIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUGxhbmU6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxuXHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMub3JpZ2luICkgPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTnVsbCBpcyBwcmVmZXJhYmxlIHRvIHVuZGVmaW5lZCBzaW5jZSB1bmRlZmluZWQgbWVhbnMuLi4uIGl0IGlzIHVuZGVmaW5lZFxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHZhciB0ID0gLSAoIHRoaXMub3JpZ2luLmRvdCggcGxhbmUubm9ybWFsICkgKyBwbGFuZS5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBSZXR1cm4gaWYgdGhlIHJheSBuZXZlciBpbnRlcnNlY3RzIHRoZSBwbGFuZVxuXG5cdFx0cmV0dXJuIHQgPj0gMCA/IHQgOiBudWxsO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0UGxhbmU6IGZ1bmN0aW9uICggcGxhbmUsIHRhcmdldCApIHtcblxuXHRcdHZhciB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUoIHBsYW5lICk7XG5cblx0XHRpZiAoIHQgPT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHQsIHRhcmdldCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Ly8gY2hlY2sgaWYgdGhlIHJheSBsaWVzIG9uIHRoZSBwbGFuZSBmaXJzdFxuXG5cdFx0dmFyIGRpc3RUb1BvaW50ID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0aWYgKCBkaXN0VG9Qb2ludCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciAqIGRpc3RUb1BvaW50IDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyByYXkgb3JpZ2luIGlzIGJlaGluZCB0aGUgcGxhbmUgKGFuZCBpcyBwb2ludGluZyBiZWhpbmQgaXQpXG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RCb3g6IGZ1bmN0aW9uICggYm94LCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdG1pbiwgdG1heCwgdHltaW4sIHR5bWF4LCB0em1pbiwgdHptYXg7XG5cblx0XHR2YXIgaW52ZGlyeCA9IDEgLyB0aGlzLmRpcmVjdGlvbi54LFxuXHRcdFx0aW52ZGlyeSA9IDEgLyB0aGlzLmRpcmVjdGlvbi55LFxuXHRcdFx0aW52ZGlyeiA9IDEgLyB0aGlzLmRpcmVjdGlvbi56O1xuXG5cdFx0dmFyIG9yaWdpbiA9IHRoaXMub3JpZ2luO1xuXG5cdFx0aWYgKCBpbnZkaXJ4ID49IDAgKSB7XG5cblx0XHRcdHRtaW4gPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXHRcdFx0dG1heCA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0bWluID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblx0XHRcdHRtYXggPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpbnZkaXJ5ID49IDAgKSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHltYXggKSB8fCAoIHR5bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBUaGVzZSBsaW5lcyBhbHNvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0bWluIG9yIHRtYXggaXMgTmFOXG5cdFx0Ly8gKHJlc3VsdCBvZiAwICogSW5maW5pdHkpLiB4ICE9PSB4IHJldHVybnMgdHJ1ZSBpZiB4IGlzIE5hTlxuXG5cdFx0aWYgKCB0eW1pbiA+IHRtaW4gfHwgdG1pbiAhPT0gdG1pbiApIHRtaW4gPSB0eW1pbjtcblxuXHRcdGlmICggdHltYXggPCB0bWF4IHx8IHRtYXggIT09IHRtYXggKSB0bWF4ID0gdHltYXg7XG5cblx0XHRpZiAoIGludmRpcnogPj0gMCApIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRtaW4gPiB0em1heCApIHx8ICggdHptaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdGlmICggdHptaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB0bWluID0gdHptaW47XG5cblx0XHRpZiAoIHR6bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR6bWF4O1xuXG5cdFx0Ly9yZXR1cm4gcG9pbnQgY2xvc2VzdCB0byB0aGUgcmF5IChwb3NpdGl2ZSBzaWRlKVxuXG5cdFx0aWYgKCB0bWF4IDwgMCApIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHRtaW4gPj0gMCA/IHRtaW4gOiB0bWF4LCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0Qm94KCBib3gsIHYgKSAhPT0gbnVsbDtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0aW50ZXJzZWN0VHJpYW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIENvbXB1dGUgdGhlIG9mZnNldCBvcmlnaW4sIGVkZ2VzLCBhbmQgbm9ybWFsLlxuXHRcdHZhciBkaWZmID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZWRnZTEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBlZGdlMiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0VHJpYW5nbGUoIGEsIGIsIGMsIGJhY2tmYWNlQ3VsbGluZywgdGFyZ2V0ICkge1xuXG5cdFx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZ2VvbWV0cmljdG9vbHMuY29tL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlSW50clJheTNUcmlhbmdsZTMuaFxuXG5cdFx0XHRlZGdlMS5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0XHRlZGdlMi5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0XHRub3JtYWwuY3Jvc3NWZWN0b3JzKCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0Ly8gU29sdmUgUSArIHQqRCA9IGIxKkUxICsgYjIqRTIgKFEgPSBrRGlmZiwgRCA9IHJheSBkaXJlY3Rpb24sXG5cdFx0XHQvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5XG5cdFx0XHQvLyAgIHxEb3QoRCxOKXwqYjEgPSBzaWduKERvdChELE4pKSpEb3QoRCxDcm9zcyhRLEUyKSlcblx0XHRcdC8vICAgfERvdChELE4pfCpiMiA9IHNpZ24oRG90KEQsTikpKkRvdChELENyb3NzKEUxLFEpKVxuXHRcdFx0Ly8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTilcblx0XHRcdHZhciBEZE4gPSB0aGlzLmRpcmVjdGlvbi5kb3QoIG5vcm1hbCApO1xuXHRcdFx0dmFyIHNpZ247XG5cblx0XHRcdGlmICggRGROID4gMCApIHtcblxuXHRcdFx0XHRpZiAoIGJhY2tmYWNlQ3VsbGluZyApIHJldHVybiBudWxsO1xuXHRcdFx0XHRzaWduID0gMTtcblxuXHRcdFx0fSBlbHNlIGlmICggRGROIDwgMCApIHtcblxuXHRcdFx0XHRzaWduID0gLSAxO1xuXHRcdFx0XHREZE4gPSAtIERkTjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0XHRkaWZmLnN1YlZlY3RvcnMoIHRoaXMub3JpZ2luLCBhICk7XG5cdFx0XHR2YXIgRGRReEUyID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggZWRnZTIuY3Jvc3NWZWN0b3JzKCBkaWZmLCBlZGdlMiApICk7XG5cblx0XHRcdC8vIGIxIDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0XHRpZiAoIERkUXhFMiA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIERkRTF4USA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIGVkZ2UxLmNyb3NzKCBkaWZmICkgKTtcblxuXHRcdFx0Ly8gYjIgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRcdGlmICggRGRFMXhRIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBiMStiMiA+IDEsIG5vIGludGVyc2VjdGlvblxuXHRcdFx0aWYgKCBEZFF4RTIgKyBEZEUxeFEgPiBEZE4gKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTGluZSBpbnRlcnNlY3RzIHRyaWFuZ2xlLCBjaGVjayBpZiByYXkgZG9lcy5cblx0XHRcdHZhciBRZE4gPSAtIHNpZ24gKiBkaWZmLmRvdCggbm9ybWFsICk7XG5cblx0XHRcdC8vIHQgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRcdGlmICggUWROIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSYXkgaW50ZXJzZWN0cyB0cmlhbmdsZS5cblx0XHRcdHJldHVybiB0aGlzLmF0KCBRZE4gLyBEZE4sIHRhcmdldCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeDQgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQoIG1hdHJpeDQgKTtcblx0XHR0aGlzLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeDQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHJheSApIHtcblxuXHRcdHJldHVybiByYXkub3JpZ2luLmVxdWFscyggdGhpcy5vcmlnaW4gKSAmJiByYXkuZGlyZWN0aW9uLmVxdWFscyggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFRyaWFuZ2xlKCBhLCBiLCBjICkge1xuXG5cdHRoaXMuYSA9ICggYSAhPT0gdW5kZWZpbmVkICkgPyBhIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5iID0gKCBiICE9PSB1bmRlZmluZWQgKSA/IGIgOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLmMgPSAoIGMgIT09IHVuZGVmaW5lZCApID8gYyA6IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUsIHtcblxuXHRnZXROb3JtYWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0Tm9ybWFsKCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXROb3JtYWwoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRhcmdldC5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0XHR2MC5zdWJWZWN0b3JzKCBhLCBiICk7XG5cdFx0XHR0YXJnZXQuY3Jvc3MoIHYwICk7XG5cblx0XHRcdHZhciB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpO1xuXHRcdFx0aWYgKCB0YXJnZXRMZW5ndGhTcSA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRhcmdldC5tdWx0aXBseVNjYWxhciggMSAvIE1hdGguc3FydCggdGFyZ2V0TGVuZ3RoU3EgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHQvLyBzdGF0aWMvaW5zdGFuY2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlc1xuXHQvLyBiYXNlZCBvbjogaHR0cDovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbFxuXHRnZXRCYXJ5Y29vcmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdFx0djAuc3ViVmVjdG9ycyggYywgYSApO1xuXHRcdFx0djEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdFx0djIuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTtcblxuXHRcdFx0dmFyIGRvdDAwID0gdjAuZG90KCB2MCApO1xuXHRcdFx0dmFyIGRvdDAxID0gdjAuZG90KCB2MSApO1xuXHRcdFx0dmFyIGRvdDAyID0gdjAuZG90KCB2MiApO1xuXHRcdFx0dmFyIGRvdDExID0gdjEuZG90KCB2MSApO1xuXHRcdFx0dmFyIGRvdDEyID0gdjEuZG90KCB2MiApO1xuXG5cdFx0XHR2YXIgZGVub20gPSAoIGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxICk7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRCYXJ5Y29vcmQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvbGxpbmVhciBvciBzaW5ndWxhciB0cmlhbmdsZVxuXHRcdFx0aWYgKCBkZW5vbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBhcmJpdHJhcnkgbG9jYXRpb24gb3V0c2lkZSBvZiB0cmlhbmdsZT9cblx0XHRcdFx0Ly8gbm90IHN1cmUgaWYgdGhpcyBpcyB0aGUgYmVzdCBpZGVhLCBtYXliZSBzaG91bGQgYmUgcmV0dXJuaW5nIHVuZGVmaW5lZFxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LnNldCggLSAyLCAtIDEsIC0gMSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBpbnZEZW5vbSA9IDEgLyBkZW5vbTtcblx0XHRcdHZhciB1ID0gKCBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMiApICogaW52RGVub207XG5cdFx0XHR2YXIgdiA9ICggZG90MDAgKiBkb3QxMiAtIGRvdDAxICogZG90MDIgKSAqIGludkRlbm9tO1xuXG5cdFx0XHQvLyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBtdXN0IGFsd2F5cyBzdW0gdG8gMVxuXHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIDEgLSB1IC0gdiwgdiwgdSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb250YWluc1BvaW50KCBwb2ludCwgYSwgYiwgYyApIHtcblxuXHRcdFx0VHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdjEgKTtcblxuXHRcdFx0cmV0dXJuICggdjEueCA+PSAwICkgJiYgKCB2MS55ID49IDAgKSAmJiAoICggdjEueCArIHYxLnkgKSA8PSAxICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRnZXRVVjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJhcnljb29yZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0VVYoIHBvaW50LCBwMSwgcDIsIHAzLCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKSB7XG5cblx0XHRcdHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgcDEsIHAyLCBwMywgYmFyeWNvb3JkICk7XG5cblx0XHRcdHRhcmdldC5zZXQoIDAsIDAgKTtcblx0XHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MSwgYmFyeWNvb3JkLnggKTtcblx0XHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MiwgYmFyeWNvb3JkLnkgKTtcblx0XHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MywgYmFyeWNvb3JkLnogKTtcblxuXHRcdFx0cmV0dXJuIHRhcmdldDtcblxuXHRcdH07XG5cblx0fSgpXG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIGEsIGIsIGMgKSB7XG5cblx0XHR0aGlzLmEuY29weSggYSApO1xuXHRcdHRoaXMuYi5jb3B5KCBiICk7XG5cdFx0dGhpcy5jLmNvcHkoIGMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50c0FuZEluZGljZXM6IGZ1bmN0aW9uICggcG9pbnRzLCBpMCwgaTEsIGkyICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHBvaW50c1sgaTAgXSApO1xuXHRcdHRoaXMuYi5jb3B5KCBwb2ludHNbIGkxIF0gKTtcblx0XHR0aGlzLmMuY29weSggcG9pbnRzWyBpMiBdICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHRyaWFuZ2xlLmEgKTtcblx0XHR0aGlzLmIuY29weSggdHJpYW5nbGUuYiApO1xuXHRcdHRoaXMuYy5jb3B5KCB0cmlhbmdsZS5jICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRBcmVhKCkge1xuXG5cdFx0XHR2MC5zdWJWZWN0b3JzKCB0aGlzLmMsIHRoaXMuYiApO1xuXHRcdFx0djEuc3ViVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKTtcblxuXHRcdFx0cmV0dXJuIHYwLmNyb3NzKCB2MSApLmxlbmd0aCgpICogMC41O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0TWlkcG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRNaWRwb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLmEsIHRoaXMuYiApLmFkZCggdGhpcy5jICkubXVsdGlwbHlTY2FsYXIoIDEgLyAzICk7XG5cblx0fSxcblxuXHRnZXROb3JtYWw6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRnZXRQbGFuZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmdldFBsYW5lKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldEZyb21Db3BsYW5hclBvaW50cyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyApO1xuXG5cdH0sXG5cblx0Z2V0QmFyeWNvb3JkOiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmNvbnRhaW5zUG9pbnQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XG5cblx0fSxcblxuXHRnZXRVVjogZnVuY3Rpb24gKCBwb2ludCwgdXYxLCB1djIsIHV2MywgcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldFVWKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdXYxLCB1djIsIHV2MywgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1RyaWFuZ2xlKCB0aGlzICk7XG5cblx0fSxcblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmFiID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmFjID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmJjID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmFwID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmJwID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmNwID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbG9zZXN0UG9pbnRUb1BvaW50KCBwLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYSA9IHRoaXMuYSwgYiA9IHRoaXMuYiwgYyA9IHRoaXMuYztcblx0XHRcdHZhciB2LCB3O1xuXG5cdFx0XHQvLyBhbGdvcml0aG0gdGhhbmtzIHRvIFJlYWwtVGltZSBDb2xsaXNpb24gRGV0ZWN0aW9uIGJ5IENocmlzdGVyIEVyaWNzb24sXG5cdFx0XHQvLyBwdWJsaXNoZWQgYnkgTW9yZ2FuIEthdWZtYW5uIFB1Ymxpc2hlcnMsIChjKSAyMDA1IEVsc2V2aWVyIEluYy4sXG5cdFx0XHQvLyB1bmRlciB0aGUgYWNjb21wYW55aW5nIGxpY2Vuc2U7IHNlZSBjaGFwdGVyIDUuMS41IGZvciBkZXRhaWxlZCBleHBsYW5hdGlvbi5cblx0XHRcdC8vIGJhc2ljYWxseSwgd2UncmUgZGlzdGluZ3Vpc2hpbmcgd2hpY2ggb2YgdGhlIHZvcm9ub2kgcmVnaW9ucyBvZiB0aGUgdHJpYW5nbGVcblx0XHRcdC8vIHRoZSBwb2ludCBsaWVzIGluIHdpdGggdGhlIG1pbmltdW0gYW1vdW50IG9mIHJlZHVuZGFudCBjb21wdXRhdGlvbi5cblxuXHRcdFx0dmFiLnN1YlZlY3RvcnMoIGIsIGEgKTtcblx0XHRcdHZhYy5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0XHR2YXAuc3ViVmVjdG9ycyggcCwgYSApO1xuXHRcdFx0dmFyIGQxID0gdmFiLmRvdCggdmFwICk7XG5cdFx0XHR2YXIgZDIgPSB2YWMuZG90KCB2YXAgKTtcblx0XHRcdGlmICggZDEgPD0gMCAmJiBkMiA8PSAwICkge1xuXG5cdFx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQTsgYmFyeWNlbnRyaWMgY29vcmRzICgxLCAwLCAwKVxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YnAuc3ViVmVjdG9ycyggcCwgYiApO1xuXHRcdFx0dmFyIGQzID0gdmFiLmRvdCggdmJwICk7XG5cdFx0XHR2YXIgZDQgPSB2YWMuZG90KCB2YnAgKTtcblx0XHRcdGlmICggZDMgPj0gMCAmJiBkNCA8PSBkMyApIHtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEI7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMSwgMClcblx0XHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBiICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHZjID0gZDEgKiBkNCAtIGQzICogZDI7XG5cdFx0XHRpZiAoIHZjIDw9IDAgJiYgZDEgPj0gMCAmJiBkMyA8PSAwICkge1xuXG5cdFx0XHRcdHYgPSBkMSAvICggZDEgLSBkMyApO1xuXHRcdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBBQjsgYmFyeWNlbnRyaWMgY29vcmRzICgxLXYsIHYsIDApXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggdmFiLCB2ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmNwLnN1YlZlY3RvcnMoIHAsIGMgKTtcblx0XHRcdHZhciBkNSA9IHZhYi5kb3QoIHZjcCApO1xuXHRcdFx0dmFyIGQ2ID0gdmFjLmRvdCggdmNwICk7XG5cdFx0XHRpZiAoIGQ2ID49IDAgJiYgZDUgPD0gZDYgKSB7XG5cblx0XHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBDOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDAsIDAsIDEpXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB2YiA9IGQ1ICogZDIgLSBkMSAqIGQ2O1xuXHRcdFx0aWYgKCB2YiA8PSAwICYmIGQyID49IDAgJiYgZDYgPD0gMCApIHtcblxuXHRcdFx0XHR3ID0gZDIgLyAoIGQyIC0gZDYgKTtcblx0XHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUM7IGJhcnljZW50cmljIGNvb3JkcyAoMS13LCAwLCB3KVxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIHZhYywgdyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB2YSA9IGQzICogZDYgLSBkNSAqIGQ0O1xuXHRcdFx0aWYgKCB2YSA8PSAwICYmICggZDQgLSBkMyApID49IDAgJiYgKCBkNSAtIGQ2ICkgPj0gMCApIHtcblxuXHRcdFx0XHR2YmMuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdFx0XHR3ID0gKCBkNCAtIGQzICkgLyAoICggZDQgLSBkMyApICsgKCBkNSAtIGQ2ICkgKTtcblx0XHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQkM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMS13LCB3KVxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKS5hZGRTY2FsZWRWZWN0b3IoIHZiYywgdyApOyAvLyBlZGdlIHJlZ2lvbiBvZiBCQ1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZhY2UgcmVnaW9uXG5cdFx0XHR2YXIgZGVub20gPSAxIC8gKCB2YSArIHZiICsgdmMgKTtcblx0XHRcdC8vIHUgPSB2YSAqIGRlbm9tXG5cdFx0XHR2ID0gdmIgKiBkZW5vbTtcblx0XHRcdHcgPSB2YyAqIGRlbm9tO1xuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCB2YWIsIHYgKS5hZGRTY2FsZWRWZWN0b3IoIHZhYywgdyApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlLmEuZXF1YWxzKCB0aGlzLmEgKSAmJiB0cmlhbmdsZS5iLmVxdWFscyggdGhpcy5iICkgJiYgdHJpYW5nbGUuYy5lcXVhbHMoIHRoaXMuYyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICBkZXB0aFRlc3Q6IDxib29sPixcbiAqICBkZXB0aFdyaXRlOiA8Ym9vbD4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PixcbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaEJhc2ljTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGVtaXNzaXZlXG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuYW9NYXAgPSBudWxsO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZW52TWFwID0gbnVsbDtcblx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hCYXNpY01hdGVyaWFsO1xuXG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoQmFzaWNNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdHRoaXMuY29tYmluZSA9IHNvdXJjZS5jb21iaW5lO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHA6Ly9qb25vYnIxLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cblx0dGhpcy5kcmF3TW9kZSA9IFRyaWFuZ2xlc0RyYXdNb2RlO1xuXG5cdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cbn1cblxuTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBNZXNoLFxuXG5cdGlzTWVzaDogdHJ1ZSxcblxuXHRzZXREcmF3TW9kZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZHJhd01vZGUgPSB2YWx1ZTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRyYXdNb2RlID0gc291cmNlLmRyYXdNb2RlO1xuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdHZhciBtLCBtbCwgbmFtZTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xuXG5cdFx0XHRpZiAoIGtleXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xuXG5cdFx0XHRcdFx0XHRuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApO1xuXG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBbXTtcblx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRmb3IgKCBtID0gMCwgbWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBtIDwgbWw7IG0gKysgKSB7XG5cblx0XHRcdFx0XHRuYW1lID0gbW9ycGhUYXJnZXRzWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHZhciB2QSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZCID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdkMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIHRlbXBBID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdGVtcEIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB0ZW1wQyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdXZBID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZCID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHZhciBpbnRlcnNlY3Rpb25Qb2ludCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGludGVyc2VjdGlvblBvaW50V29ybGQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwQSwgcEIsIHBDLCBwb2ludCApIHtcblxuXHRcdFx0dmFyIGludGVyc2VjdDtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHtcblxuXHRcdFx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBDLCBwQiwgcEEsIHRydWUsIHBvaW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQSwgcEIsIHBDLCBtYXRlcmlhbC5zaWRlICE9PSBEb3VibGVTaWRlLCBwb2ludCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdGludGVyc2VjdGlvblBvaW50V29ybGQuY29weSggcG9pbnQgKTtcblx0XHRcdGludGVyc2VjdGlvblBvaW50V29ybGQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCApO1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0cG9pbnQ6IGludGVyc2VjdGlvblBvaW50V29ybGQuY2xvbmUoKSxcblx0XHRcdFx0b2JqZWN0OiBvYmplY3Rcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIHV2LCBhLCBiLCBjICkge1xuXG5cdFx0XHR2QS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYSApO1xuXHRcdFx0dkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGIgKTtcblx0XHRcdHZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBjICk7XG5cblx0XHRcdHZhciBpbnRlcnNlY3Rpb24gPSBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHZBLCB2QiwgdkMsIGludGVyc2VjdGlvblBvaW50ICk7XG5cblx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdGlmICggdXYgKSB7XG5cblx0XHRcdFx0XHR1dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGEgKTtcblx0XHRcdFx0XHR1dkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGIgKTtcblx0XHRcdFx0XHR1dkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGMgKTtcblxuXHRcdFx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBpbnRlcnNlY3Rpb25Qb2ludCwgdkEsIHZCLCB2QywgdXZBLCB1dkIsIHV2QywgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgZmFjZSA9IG5ldyBGYWNlMyggYSwgYiwgYyApO1xuXHRcdFx0XHRUcmlhbmdsZS5nZXROb3JtYWwoIHZBLCB2QiwgdkMsIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UgPSBmYWNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpbnRlcnNlY3Rpb247XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdFx0dmFyIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcblx0XHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdFx0c3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0XHRzcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpbnZlcnNlTWF0cml4LmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRyYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0XHQvLyBDaGVjayBib3VuZGluZ0JveCBiZWZvcmUgY29udGludWluZ1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcmF5LmludGVyc2VjdHNCb3goIGdlb21ldHJ5LmJvdW5kaW5nQm94ICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBpbnRlcnNlY3Rpb247XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgYSwgYiwgYztcblx0XHRcdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdHZhciB1diA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXY7XG5cdFx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cdFx0XHRcdHZhciBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cdFx0XHRcdHZhciBpLCBqLCBpbCwgamw7XG5cdFx0XHRcdHZhciBncm91cCwgZ3JvdXBNYXRlcmlhbDtcblx0XHRcdFx0dmFyIHN0YXJ0LCBlbmQ7XG5cblx0XHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIGluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0YSA9IGluZGV4LmdldFgoIGogKTtcblx0XHRcdFx0XHRcdFx0XHRiID0gaW5kZXguZ2V0WCggaiArIDEgKTtcblx0XHRcdFx0XHRcdFx0XHRjID0gaW5kZXguZ2V0WCggaiArIDIgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgdXYsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdGEgPSBpbmRleC5nZXRYKCBpICk7XG5cdFx0XHRcdFx0XHRcdGIgPSBpbmRleC5nZXRYKCBpICsgMSApO1xuXHRcdFx0XHRcdFx0XHRjID0gaW5kZXguZ2V0WCggaSArIDIgKTtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCB1diwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBub24taW5kZXhlZCBidWZmZXIgZ2VvbWV0cnlcblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRcdGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIGdyb3VwLnN0YXJ0LCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggaiA9IHN0YXJ0LCBqbCA9IGVuZDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRhID0gajtcblx0XHRcdFx0XHRcdFx0XHRiID0gaiArIDE7XG5cdFx0XHRcdFx0XHRcdFx0YyA9IGogKyAyO1xuXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCB1diwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBqIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uLmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdGEgPSBpO1xuXHRcdFx0XHRcdFx0XHRiID0gaSArIDE7XG5cdFx0XHRcdFx0XHRcdGMgPSBpICsgMjtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCB1diwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIGZ2QSwgZnZCLCBmdkM7XG5cdFx0XHRcdHZhciBpc011bHRpTWF0ZXJpYWwgPSBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdFx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcblx0XHRcdFx0dmFyIHV2cztcblxuXHRcdFx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIDAgXTtcblx0XHRcdFx0aWYgKCBmYWNlVmVydGV4VXZzLmxlbmd0aCA+IDAgKSB1dnMgPSBmYWNlVmVydGV4VXZzO1xuXG5cdFx0XHRcdGZvciAoIHZhciBmID0gMCwgZmwgPSBmYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGYgXTtcblx0XHRcdFx0XHR2YXIgZmFjZU1hdGVyaWFsID0gaXNNdWx0aU1hdGVyaWFsID8gbWF0ZXJpYWxbIGZhY2UubWF0ZXJpYWxJbmRleCBdIDogbWF0ZXJpYWw7XG5cblx0XHRcdFx0XHRpZiAoIGZhY2VNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdFx0XHRmdkEgPSB2ZXJ0aWNlc1sgZmFjZS5hIF07XG5cdFx0XHRcdFx0ZnZCID0gdmVydGljZXNbIGZhY2UuYiBdO1xuXHRcdFx0XHRcdGZ2QyA9IHZlcnRpY2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0XHRcdGlmICggZmFjZU1hdGVyaWFsLm1vcnBoVGFyZ2V0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cztcblx0XHRcdFx0XHRcdHZhciBtb3JwaEluZmx1ZW5jZXMgPSB0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdFx0XHRcdFx0dkEuc2V0KCAwLCAwLCAwICk7XG5cdFx0XHRcdFx0XHR2Qi5zZXQoIDAsIDAsIDAgKTtcblx0XHRcdFx0XHRcdHZDLnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgdCA9IDAsIHRsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgdCA8IHRsOyB0ICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBpbmZsdWVuY2UgPSBtb3JwaEluZmx1ZW5jZXNbIHQgXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRcdHZhciB0YXJnZXRzID0gbW9ycGhUYXJnZXRzWyB0IF0udmVydGljZXM7XG5cblx0XHRcdFx0XHRcdFx0dkEuYWRkU2NhbGVkVmVjdG9yKCB0ZW1wQS5zdWJWZWN0b3JzKCB0YXJnZXRzWyBmYWNlLmEgXSwgZnZBICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRcdFx0XHR2Qi5hZGRTY2FsZWRWZWN0b3IoIHRlbXBCLnN1YlZlY3RvcnMoIHRhcmdldHNbIGZhY2UuYiBdLCBmdkIgKSwgaW5mbHVlbmNlICk7XG5cdFx0XHRcdFx0XHRcdHZDLmFkZFNjYWxlZFZlY3RvciggdGVtcEMuc3ViVmVjdG9ycyggdGFyZ2V0c1sgZmFjZS5jIF0sIGZ2QyApLCBpbmZsdWVuY2UgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2QS5hZGQoIGZ2QSApO1xuXHRcdFx0XHRcdFx0dkIuYWRkKCBmdkIgKTtcblx0XHRcdFx0XHRcdHZDLmFkZCggZnZDICk7XG5cblx0XHRcdFx0XHRcdGZ2QSA9IHZBO1xuXHRcdFx0XHRcdFx0ZnZCID0gdkI7XG5cdFx0XHRcdFx0XHRmdkMgPSB2QztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uKCB0aGlzLCBmYWNlTWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBmdkEsIGZ2QiwgZnZDLCBpbnRlcnNlY3Rpb25Qb2ludCApO1xuXG5cdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdXZzICYmIHV2c1sgZiBdICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciB1dnNfZiA9IHV2c1sgZiBdO1xuXHRcdFx0XHRcdFx0XHR1dkEuY29weSggdXZzX2ZbIDAgXSApO1xuXHRcdFx0XHRcdFx0XHR1dkIuY29weSggdXZzX2ZbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHR1dkMuY29weSggdXZzX2ZbIDIgXSApO1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBpbnRlcnNlY3Rpb25Qb2ludCwgZnZBLCBmdkIsIGZ2QywgdXZBLCB1dkIsIHV2QywgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBmO1xuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpICksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQmFja2dyb3VuZCggcmVuZGVyZXIsIHN0YXRlLCBvYmplY3RzLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0dmFyIGNsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHZhciBjbGVhckFscGhhID0gMDtcblxuXHR2YXIgcGxhbmVNZXNoO1xuXHR2YXIgYm94TWVzaDtcblx0Ly8gU3RvcmUgdGhlIGN1cnJlbnQgYmFja2dyb3VuZCB0ZXh0dXJlIGFuZCBpdHMgYHZlcnNpb25gXG5cdC8vIHNvIHdlIGNhbiByZWNvbXBpbGUgdGhlIG1hdGVyaWFsIGFjY29yZGluZ2x5LlxuXHR2YXIgY3VycmVudEJhY2tncm91bmQgPSBudWxsO1xuXHR2YXIgY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDtcblxuXHRmdW5jdGlvbiByZW5kZXIoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIGZvcmNlQ2xlYXIgKSB7XG5cblx0XHR2YXIgYmFja2dyb3VuZCA9IHNjZW5lLmJhY2tncm91bmQ7XG5cblx0XHRpZiAoIGJhY2tncm91bmQgPT09IG51bGwgKSB7XG5cblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IG51bGw7XG5cdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSAwO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdHNldENsZWFyKCBiYWNrZ3JvdW5kLCAxICk7XG5cdFx0XHRmb3JjZUNsZWFyID0gdHJ1ZTtcblx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDtcblx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IDA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlcmVyLmF1dG9DbGVhciB8fCBmb3JjZUNsZWFyICkge1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggcmVuZGVyZXIuYXV0b0NsZWFyQ29sb3IsIHJlbmRlcmVyLmF1dG9DbGVhckRlcHRoLCByZW5kZXJlci5hdXRvQ2xlYXJTdGVuY2lsICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJhY2tncm91bmQgJiYgKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgfHwgYmFja2dyb3VuZC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApICkge1xuXG5cdFx0XHRpZiAoIGJveE1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRib3hNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IEJveEJ1ZmZlckdlb21ldHJ5KCAxLCAxLCAxICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnQmFja2dyb3VuZEN1YmVNYXRlcmlhbCcsXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmN1YmUudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmN1YmUudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5jdWJlLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRcdFx0XHRkZXB0aFRlc3Q6IHRydWUsXG5cdFx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZvZzogZmFsc2Vcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRib3hNZXNoLmdlb21ldHJ5LnJlbW92ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoICd1dicgKTtcblxuXHRcdFx0XHRib3hNZXNoLm9uQmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weVBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIGVuYWJsZSBjb2RlIGluamVjdGlvbiBmb3Igbm9uLWJ1aWx0LWluIG1hdGVyaWFsXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggYm94TWVzaC5tYXRlcmlhbCwgJ21hcCcsIHtcblxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy50Q3ViZS52YWx1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0b2JqZWN0cy51cGRhdGUoIGJveE1lc2ggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdGV4dHVyZSA9IGJhY2tncm91bmQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPyBiYWNrZ3JvdW5kLnRleHR1cmUgOiBiYWNrZ3JvdW5kO1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50Q3ViZS52YWx1ZSA9IHRleHR1cmU7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLnRGbGlwLnZhbHVlID0gKCBiYWNrZ3JvdW5kLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICkgPyAxIDogLSAxO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8XG5cdFx0XHQgICAgIGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHRcdGJveE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHB1c2ggdG8gdGhlIHByZS1zb3J0ZWQgb3BhcXVlIHJlbmRlciBsaXN0XG5cdFx0XHRyZW5kZXJMaXN0LnVuc2hpZnQoIGJveE1lc2gsIGJveE1lc2guZ2VvbWV0cnksIGJveE1lc2gubWF0ZXJpYWwsIDAsIG51bGwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGlmICggcGxhbmVNZXNoID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cGxhbmVNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IFBsYW5lQnVmZmVyR2VvbWV0cnkoIDIsIDIgKSxcblx0XHRcdFx0XHRuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdFx0XHRcdHR5cGU6ICdCYWNrZ3JvdW5kTWF0ZXJpYWwnLFxuXHRcdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIFNoYWRlckxpYi5iYWNrZ3JvdW5kLnVuaWZvcm1zICksXG5cdFx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHRcdHNpZGU6IEZyb250U2lkZSxcblx0XHRcdFx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZvZzogZmFsc2Vcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRwbGFuZU1lc2guZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAnbm9ybWFsJyApO1xuXG5cdFx0XHRcdC8vIGVuYWJsZSBjb2RlIGluamVjdGlvbiBmb3Igbm9uLWJ1aWx0LWluIG1hdGVyaWFsXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggcGxhbmVNZXNoLm1hdGVyaWFsLCAnbWFwJywge1xuXG5cdFx0XHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnQyRC52YWx1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0b2JqZWN0cy51cGRhdGUoIHBsYW5lTWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50MkQudmFsdWUgPSBiYWNrZ3JvdW5kO1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCBiYWNrZ3JvdW5kLm1hdHJpeCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8XG5cdFx0XHRcdCAgIGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiAhPT0gYmFja2dyb3VuZC52ZXJzaW9uICkge1xuXG5cdFx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSBiYWNrZ3JvdW5kLnZlcnNpb247XG5cblx0XHRcdH1cblxuXG5cdFx0XHQvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdFxuXHRcdFx0cmVuZGVyTGlzdC51bnNoaWZ0KCBwbGFuZU1lc2gsIHBsYW5lTWVzaC5nZW9tZXRyeSwgcGxhbmVNZXNoLm1hdGVyaWFsLCAwLCBudWxsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldENsZWFyKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjbGVhckNvbG9yO1xuXG5cdFx0fSxcblx0XHRzZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdFx0Y2xlYXJDb2xvci5zZXQoIGNvbG9yICk7XG5cdFx0XHRjbGVhckFscGhhID0gYWxwaGEgIT09IHVuZGVmaW5lZCA/IGFscGhhIDogMTtcblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cblx0XHR9LFxuXHRcdGdldENsZWFyQWxwaGE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGNsZWFyQWxwaGE7XG5cblx0XHR9LFxuXHRcdHNldENsZWFyQWxwaGE6IGZ1bmN0aW9uICggYWxwaGEgKSB7XG5cblx0XHRcdGNsZWFyQWxwaGEgPSBhbHBoYTtcblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cblx0XHR9LFxuXHRcdHJlbmRlcjogcmVuZGVyXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApIHtcblxuXHR2YXIgbW9kZTtcblxuXHRmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHtcblxuXHRcdG1vZGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3QXJyYXlzKCBtb2RlLCBzdGFydCwgY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uO1xuXG5cdFx0aWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGdsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xCdWZmZXJSZW5kZXJlcjogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGV4dGVuc2lvblsgY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gJ2RyYXdBcnJheXNJbnN0YW5jZWQnIDogJ2RyYXdBcnJheXNJbnN0YW5jZWRBTkdMRScgXSggbW9kZSwgc3RhcnQsIGNvdW50LCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xuXHR0aGlzLnJlbmRlckluc3RhbmNlcyA9IHJlbmRlckluc3RhbmNlcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xDYXBhYmlsaXRpZXMoIGdsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzICkge1xuXG5cdHZhciBtYXhBbmlzb3Ryb3B5O1xuXG5cdGZ1bmN0aW9uIGdldE1heEFuaXNvdHJvcHkoKSB7XG5cblx0XHRpZiAoIG1heEFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHJldHVybiBtYXhBbmlzb3Ryb3B5O1xuXG5cdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdG1heEFuaXNvdHJvcHkgPSBnbC5nZXRQYXJhbWV0ZXIoIGV4dGVuc2lvbi5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1heEFuaXNvdHJvcHkgPSAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1heEFuaXNvdHJvcHk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICkge1xuXG5cdFx0aWYgKCBwcmVjaXNpb24gPT09ICdoaWdocCcgKSB7XG5cblx0XHRcdGlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMywgMzYzMzggKS5wcmVjaXNpb24gPiAwICYmXG5cdFx0XHQgICAgIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzIsIDM2MzM4ICkucHJlY2lzaW9uID4gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gJ2hpZ2hwJztcblxuXHRcdFx0fVxuXG5cdFx0XHRwcmVjaXNpb24gPSAnbWVkaXVtcCc7XG5cblx0XHR9XG5cblx0XHRpZiAoIHByZWNpc2lvbiA9PT0gJ21lZGl1bXAnICkge1xuXG5cdFx0XHRpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzMsIDM2MzM3ICkucHJlY2lzaW9uID4gMCAmJlxuXHRcdFx0ICAgICBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMyLCAzNjMzNyApLnByZWNpc2lvbiA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuICdtZWRpdW1wJztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuICdsb3dwJztcblxuXHR9XG5cblx0dmFyIGlzV2ViR0wyID0gdHlwZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIGdsIGluc3RhbmNlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcblxuXHR2YXIgcHJlY2lzaW9uID0gcGFyYW1ldGVycy5wcmVjaXNpb24gIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucHJlY2lzaW9uIDogJ2hpZ2hwJztcblx0dmFyIG1heFByZWNpc2lvbiA9IGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICk7XG5cblx0aWYgKCBtYXhQcmVjaXNpb24gIT09IHByZWNpc2lvbiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6JywgcHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBtYXhQcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblx0XHRwcmVjaXNpb24gPSBtYXhQcmVjaXNpb247XG5cblx0fVxuXG5cdHZhciBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlO1xuXG5cdHZhciBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MzAgKTtcblx0dmFyIG1heFZlcnRleFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNTY2MCApO1xuXHR2YXIgbWF4VGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIDMzNzkgKTtcblx0dmFyIG1heEN1YmVtYXBTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDA3NiApO1xuXG5cdHZhciBtYXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDkyMSApO1xuXHR2YXIgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ3ICk7XG5cdHZhciBtYXhWYXJ5aW5ncyA9IGdsLmdldFBhcmFtZXRlciggMzYzNDggKTtcblx0dmFyIG1heEZyYWdtZW50VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ5ICk7XG5cblx0dmFyIHZlcnRleFRleHR1cmVzID0gbWF4VmVydGV4VGV4dHVyZXMgPiAwO1xuXHR2YXIgZmxvYXRGcmFnbWVudFRleHR1cmVzID0gaXNXZWJHTDIgfHwgISEgZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdCcgKTtcblx0dmFyIGZsb2F0VmVydGV4VGV4dHVyZXMgPSB2ZXJ0ZXhUZXh0dXJlcyAmJiBmbG9hdEZyYWdtZW50VGV4dHVyZXM7XG5cblx0cmV0dXJuIHtcblxuXHRcdGlzV2ViR0wyOiBpc1dlYkdMMixcblxuXHRcdGdldE1heEFuaXNvdHJvcHk6IGdldE1heEFuaXNvdHJvcHksXG5cdFx0Z2V0TWF4UHJlY2lzaW9uOiBnZXRNYXhQcmVjaXNpb24sXG5cblx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0bWF4VGV4dHVyZXM6IG1heFRleHR1cmVzLFxuXHRcdG1heFZlcnRleFRleHR1cmVzOiBtYXhWZXJ0ZXhUZXh0dXJlcyxcblx0XHRtYXhUZXh0dXJlU2l6ZTogbWF4VGV4dHVyZVNpemUsXG5cdFx0bWF4Q3ViZW1hcFNpemU6IG1heEN1YmVtYXBTaXplLFxuXG5cdFx0bWF4QXR0cmlidXRlczogbWF4QXR0cmlidXRlcyxcblx0XHRtYXhWZXJ0ZXhVbmlmb3JtczogbWF4VmVydGV4VW5pZm9ybXMsXG5cdFx0bWF4VmFyeWluZ3M6IG1heFZhcnlpbmdzLFxuXHRcdG1heEZyYWdtZW50VW5pZm9ybXM6IG1heEZyYWdtZW50VW5pZm9ybXMsXG5cblx0XHR2ZXJ0ZXhUZXh0dXJlczogdmVydGV4VGV4dHVyZXMsXG5cdFx0ZmxvYXRGcmFnbWVudFRleHR1cmVzOiBmbG9hdEZyYWdtZW50VGV4dHVyZXMsXG5cdFx0ZmxvYXRWZXJ0ZXhUZXh0dXJlczogZmxvYXRWZXJ0ZXhUZXh0dXJlc1xuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gV2ViR0xDbGlwcGluZygpIHtcblxuXHR2YXIgc2NvcGUgPSB0aGlzLFxuXG5cdFx0Z2xvYmFsU3RhdGUgPSBudWxsLFxuXHRcdG51bUdsb2JhbFBsYW5lcyA9IDAsXG5cdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2UsXG5cblx0XHRwbGFuZSA9IG5ldyBQbGFuZSgpLFxuXHRcdHZpZXdOb3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLFxuXG5cdFx0dW5pZm9ybSA9IHsgdmFsdWU6IG51bGwsIG5lZWRzVXBkYXRlOiBmYWxzZSB9O1xuXG5cdHRoaXMudW5pZm9ybSA9IHVuaWZvcm07XG5cdHRoaXMubnVtUGxhbmVzID0gMDtcblx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdHRoaXMuaW5pdCA9IGZ1bmN0aW9uICggcGxhbmVzLCBlbmFibGVMb2NhbENsaXBwaW5nLCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgZW5hYmxlZCA9XG5cdFx0XHRwbGFuZXMubGVuZ3RoICE9PSAwIHx8XG5cdFx0XHRlbmFibGVMb2NhbENsaXBwaW5nIHx8XG5cdFx0XHQvLyBlbmFibGUgc3RhdGUgb2YgcHJldmlvdXMgZnJhbWUgLSB0aGUgY2xpcHBpbmcgY29kZSBoYXMgdG9cblx0XHRcdC8vIHJ1biBhbm90aGVyIGZyYW1lIGluIG9yZGVyIHRvIHJlc2V0IHRoZSBzdGF0ZTpcblx0XHRcdG51bUdsb2JhbFBsYW5lcyAhPT0gMCB8fFxuXHRcdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQ7XG5cblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGVuYWJsZUxvY2FsQ2xpcHBpbmc7XG5cblx0XHRnbG9iYWxTdGF0ZSA9IHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCAwICk7XG5cdFx0bnVtR2xvYmFsUGxhbmVzID0gcGxhbmVzLmxlbmd0aDtcblxuXHRcdHJldHVybiBlbmFibGVkO1xuXG5cdH07XG5cblx0dGhpcy5iZWdpblNoYWRvd3MgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gdHJ1ZTtcblx0XHRwcm9qZWN0UGxhbmVzKCBudWxsICk7XG5cblx0fTtcblxuXHR0aGlzLmVuZFNoYWRvd3MgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2U7XG5cdFx0cmVzZXRHbG9iYWxTdGF0ZSgpO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTdGF0ZSA9IGZ1bmN0aW9uICggcGxhbmVzLCBjbGlwSW50ZXJzZWN0aW9uLCBjbGlwU2hhZG93cywgY2FtZXJhLCBjYWNoZSwgZnJvbUNhY2hlICkge1xuXG5cdFx0aWYgKCAhIGxvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IHBsYW5lcyA9PT0gbnVsbCB8fCBwbGFuZXMubGVuZ3RoID09PSAwIHx8IHJlbmRlcmluZ1NoYWRvd3MgJiYgISBjbGlwU2hhZG93cyApIHtcblxuXHRcdFx0Ly8gdGhlcmUncyBubyBsb2NhbCBjbGlwcGluZ1xuXG5cdFx0XHRpZiAoIHJlbmRlcmluZ1NoYWRvd3MgKSB7XG5cblx0XHRcdFx0Ly8gdGhlcmUncyBubyBnbG9iYWwgY2xpcHBpbmdcblxuXHRcdFx0XHRwcm9qZWN0UGxhbmVzKCBudWxsICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVzZXRHbG9iYWxTdGF0ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgbkdsb2JhbCA9IHJlbmRlcmluZ1NoYWRvd3MgPyAwIDogbnVtR2xvYmFsUGxhbmVzLFxuXHRcdFx0XHRsR2xvYmFsID0gbkdsb2JhbCAqIDQsXG5cblx0XHRcdFx0ZHN0QXJyYXkgPSBjYWNoZS5jbGlwcGluZ1N0YXRlIHx8IG51bGw7XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTsgLy8gZW5zdXJlIHVuaXF1ZSBzdGF0ZVxuXG5cdFx0XHRkc3RBcnJheSA9IHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCBsR2xvYmFsLCBmcm9tQ2FjaGUgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBsR2xvYmFsOyArKyBpICkge1xuXG5cdFx0XHRcdGRzdEFycmF5WyBpIF0gPSBnbG9iYWxTdGF0ZVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhY2hlLmNsaXBwaW5nU3RhdGUgPSBkc3RBcnJheTtcblx0XHRcdHRoaXMubnVtSW50ZXJzZWN0aW9uID0gY2xpcEludGVyc2VjdGlvbiA/IHRoaXMubnVtUGxhbmVzIDogMDtcblx0XHRcdHRoaXMubnVtUGxhbmVzICs9IG5HbG9iYWw7XG5cblx0XHR9XG5cblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHJlc2V0R2xvYmFsU3RhdGUoKSB7XG5cblx0XHRpZiAoIHVuaWZvcm0udmFsdWUgIT09IGdsb2JhbFN0YXRlICkge1xuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZ2xvYmFsU3RhdGU7XG5cdFx0XHR1bmlmb3JtLm5lZWRzVXBkYXRlID0gbnVtR2xvYmFsUGxhbmVzID4gMDtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm51bVBsYW5lcyA9IG51bUdsb2JhbFBsYW5lcztcblx0XHRzY29wZS5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgZHN0T2Zmc2V0LCBza2lwVHJhbnNmb3JtICkge1xuXG5cdFx0dmFyIG5QbGFuZXMgPSBwbGFuZXMgIT09IG51bGwgPyBwbGFuZXMubGVuZ3RoIDogMCxcblx0XHRcdGRzdEFycmF5ID0gbnVsbDtcblxuXHRcdGlmICggblBsYW5lcyAhPT0gMCApIHtcblxuXHRcdFx0ZHN0QXJyYXkgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0XHRpZiAoIHNraXBUcmFuc2Zvcm0gIT09IHRydWUgfHwgZHN0QXJyYXkgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGZsYXRTaXplID0gZHN0T2Zmc2V0ICsgblBsYW5lcyAqIDQsXG5cdFx0XHRcdFx0dmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRcdFx0dmlld05vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRpZiAoIGRzdEFycmF5ID09PSBudWxsIHx8IGRzdEFycmF5Lmxlbmd0aCA8IGZsYXRTaXplICkge1xuXG5cdFx0XHRcdFx0ZHN0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBmbGF0U2l6ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGk0ID0gZHN0T2Zmc2V0OyBpICE9PSBuUGxhbmVzOyArKyBpLCBpNCArPSA0ICkge1xuXG5cdFx0XHRcdFx0cGxhbmUuY29weSggcGxhbmVzWyBpIF0gKS5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXgsIHZpZXdOb3JtYWxNYXRyaXggKTtcblxuXHRcdFx0XHRcdHBsYW5lLm5vcm1hbC50b0FycmF5KCBkc3RBcnJheSwgaTQgKTtcblx0XHRcdFx0XHRkc3RBcnJheVsgaTQgKyAzIF0gPSBwbGFuZS5jb25zdGFudDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGRzdEFycmF5O1xuXHRcdFx0dW5pZm9ybS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRzY29wZS5udW1QbGFuZXMgPSBuUGxhbmVzO1xuXG5cdFx0cmV0dXJuIGRzdEFycmF5O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHtcblxuXHR2YXIgZXh0ZW5zaW9ucyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBleHRlbnNpb25zWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXh0ZW5zaW9uc1sgbmFtZSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBleHRlbnNpb247XG5cblx0XHRcdHN3aXRjaCAoIG5hbWUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnV0VCR0xfZGVwdGhfdGV4dHVyZSc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnOlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnOlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJzpcblx0XHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBuYW1lICsgJyBleHRlbnNpb24gbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZXh0ZW5zaW9uc1sgbmFtZSBdID0gZXh0ZW5zaW9uO1xuXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMR2VvbWV0cmllcyggZ2wsIGF0dHJpYnV0ZXMsIGluZm8gKSB7XG5cblx0dmFyIGdlb21ldHJpZXMgPSB7fTtcblx0dmFyIHdpcmVmcmFtZUF0dHJpYnV0ZXMgPSB7fTtcblxuXHRmdW5jdGlvbiBvbkdlb21ldHJ5RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBldmVudC50YXJnZXQ7XG5cdFx0dmFyIGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggYnVmZmVyZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBidWZmZXJnZW9tZXRyeS5pbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gYnVmZmVyZ2VvbWV0cnkuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGJ1ZmZlcmdlb21ldHJ5LmF0dHJpYnV0ZXNbIG5hbWUgXSApO1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkdlb21ldHJ5RGlzcG9zZSApO1xuXG5cdFx0ZGVsZXRlIGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHR2YXIgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlc1sgYnVmZmVyZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggYXR0cmlidXRlICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggYXR0cmlidXRlICk7XG5cdFx0XHRkZWxldGUgd2lyZWZyYW1lQXR0cmlidXRlc1sgYnVmZmVyZ2VvbWV0cnkuaWQgXTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpbmZvLm1lbW9yeS5nZW9tZXRyaWVzIC0tO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCwgZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0aWYgKCBidWZmZXJnZW9tZXRyeSApIHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHRcdGdlb21ldHJ5LmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UgKTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0YnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblxuXHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Z2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbU9iamVjdCggb2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyeS5fYnVmZmVyR2VvbWV0cnk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdID0gYnVmZmVyZ2VvbWV0cnk7XG5cblx0XHRpbmZvLm1lbW9yeS5nZW9tZXRyaWVzICsrO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcmdlb21ldHJ5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0dmFyIGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggaW5kZXgsIDM0OTYzICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBnZW9tZXRyeUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXSwgMzQ5NjIgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIHRhcmdldHNcblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IG1vcnBoQXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBhcnJheVsgaSBdLCAzNDk2MiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggYXR0cmlidXRlICkgcmV0dXJuIGF0dHJpYnV0ZTtcblxuXHRcdHZhciBpbmRpY2VzID0gW107XG5cblx0XHR2YXIgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gY29uc29sZS50aW1lKCAnd2lyZWZyYW1lJyApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeUluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBnZW9tZXRyeUluZGV4LmFycmF5O1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSBhcnJheVsgaSArIDAgXTtcblx0XHRcdFx0dmFyIGIgPSBhcnJheVsgaSArIDEgXTtcblx0XHRcdFx0dmFyIGMgPSBhcnJheVsgaSArIDIgXTtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gZ2VvbWV0cnlBdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSAoIGFycmF5Lmxlbmd0aCAvIDMgKSAtIDE7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSBpICsgMDtcblx0XHRcdFx0dmFyIGIgPSBpICsgMTtcblx0XHRcdFx0dmFyIGMgPSBpICsgMjtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29uc29sZS50aW1lRW5kKCAnd2lyZWZyYW1lJyApO1xuXG5cdFx0YXR0cmlidXRlID0gbmV3ICggYXJyYXlNYXgoIGluZGljZXMgKSA+IDY1NTM1ID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGljZXMsIDEgKTtcblxuXHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBhdHRyaWJ1dGUsIDM0OTYzICk7XG5cblx0XHR3aXJlZnJhbWVBdHRyaWJ1dGVzWyBnZW9tZXRyeS5pZCBdID0gYXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZ2V0LFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXG5cdFx0Z2V0V2lyZWZyYW1lQXR0cmlidXRlOiBnZXRXaXJlZnJhbWVBdHRyaWJ1dGVcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApIHtcblxuXHR2YXIgbW9kZTtcblxuXHRmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHtcblxuXHRcdG1vZGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0dmFyIHR5cGUsIGJ5dGVzUGVyRWxlbWVudDtcblxuXHRmdW5jdGlvbiBzZXRJbmRleCggdmFsdWUgKSB7XG5cblx0XHR0eXBlID0gdmFsdWUudHlwZTtcblx0XHRieXRlc1BlckVsZW1lbnQgPSB2YWx1ZS5ieXRlc1BlckVsZW1lbnQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0VsZW1lbnRzKCBtb2RlLCBjb3VudCwgdHlwZSwgc3RhcnQgKiBieXRlc1BlckVsZW1lbnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uO1xuXG5cdFx0aWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGdsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uWyBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkJyA6ICdkcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRScgXSggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50LCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEluZm8oIGdsICkge1xuXG5cdHZhciBtZW1vcnkgPSB7XG5cdFx0Z2VvbWV0cmllczogMCxcblx0XHR0ZXh0dXJlczogMFxuXHR9O1xuXG5cdHZhciByZW5kZXIgPSB7XG5cdFx0ZnJhbWU6IDAsXG5cdFx0Y2FsbHM6IDAsXG5cdFx0dHJpYW5nbGVzOiAwLFxuXHRcdHBvaW50czogMCxcblx0XHRsaW5lczogMFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggY291bnQsIG1vZGUsIGluc3RhbmNlQ291bnQgKSB7XG5cblx0XHRpbnN0YW5jZUNvdW50ID0gaW5zdGFuY2VDb3VudCB8fCAxO1xuXG5cdFx0cmVuZGVyLmNhbGxzICsrO1xuXG5cdFx0c3dpdGNoICggbW9kZSApIHtcblxuXHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMyApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSA1OlxuXHRcdFx0Y2FzZSA2OlxuXHRcdFx0XHRyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC0gMiApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAyICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM6XG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAtIDEgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMDpcblx0XHRcdFx0cmVuZGVyLnBvaW50cyArPSBpbnN0YW5jZUNvdW50ICogY291bnQ7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xJbmZvOiBVbmtub3duIGRyYXcgbW9kZTonLCBtb2RlICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZXNldCgpIHtcblxuXHRcdHJlbmRlci5mcmFtZSArKztcblx0XHRyZW5kZXIuY2FsbHMgPSAwO1xuXHRcdHJlbmRlci50cmlhbmdsZXMgPSAwO1xuXHRcdHJlbmRlci5wb2ludHMgPSAwO1xuXHRcdHJlbmRlci5saW5lcyA9IDA7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bWVtb3J5OiBtZW1vcnksXG5cdFx0cmVuZGVyOiByZW5kZXIsXG5cdFx0cHJvZ3JhbXM6IG51bGwsXG5cdFx0YXV0b1Jlc2V0OiB0cnVlLFxuXHRcdHJlc2V0OiByZXNldCxcblx0XHR1cGRhdGU6IHVwZGF0ZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBhYnNOdW1lcmljYWxTb3J0KCBhLCBiICkge1xuXG5cdHJldHVybiBNYXRoLmFicyggYlsgMSBdICkgLSBNYXRoLmFicyggYVsgMSBdICk7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xNb3JwaHRhcmdldHMoIGdsICkge1xuXG5cdHZhciBpbmZsdWVuY2VzTGlzdCA9IHt9O1xuXHR2YXIgbW9ycGhJbmZsdWVuY2VzID0gbmV3IEZsb2F0MzJBcnJheSggOCApO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0gKSB7XG5cblx0XHR2YXIgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHR2YXIgbGVuZ3RoID0gb2JqZWN0SW5mbHVlbmNlcy5sZW5ndGg7XG5cblx0XHR2YXIgaW5mbHVlbmNlcyA9IGluZmx1ZW5jZXNMaXN0WyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0aWYgKCBpbmZsdWVuY2VzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGluaXRpYWxpc2UgbGlzdFxuXG5cdFx0XHRpbmZsdWVuY2VzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRpbmZsdWVuY2VzWyBpIF0gPSBbIGksIDAgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpbmZsdWVuY2VzTGlzdFsgZ2VvbWV0cnkuaWQgXSA9IGluZmx1ZW5jZXM7XG5cblx0XHR9XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzID0gbWF0ZXJpYWwubW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHR2YXIgbW9ycGhOb3JtYWxzID0gbWF0ZXJpYWwubW9ycGhOb3JtYWxzICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHQvLyBSZW1vdmUgY3VycmVudCBtb3JwaEF0dHJpYnV0ZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBpbmZsdWVuY2VbIDEgXSAhPT0gMCApIHtcblxuXHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyApIGdlb21ldHJ5LnJlbW92ZUF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGkgKTtcblx0XHRcdFx0aWYgKCBtb3JwaE5vcm1hbHMgKSBnZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoICdtb3JwaE5vcm1hbCcgKyBpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIENvbGxlY3QgaW5mbHVlbmNlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaW5mbHVlbmNlID0gaW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0XHRpbmZsdWVuY2VbIDAgXSA9IGk7XG5cdFx0XHRpbmZsdWVuY2VbIDEgXSA9IG9iamVjdEluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdH1cblxuXHRcdGluZmx1ZW5jZXMuc29ydCggYWJzTnVtZXJpY2FsU29ydCApO1xuXG5cdFx0Ly8gQWRkIG1vcnBoQXR0cmlidXRlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgODsgaSArKyApIHtcblxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBpbmZsdWVuY2UgKSB7XG5cblx0XHRcdFx0dmFyIGluZGV4ID0gaW5mbHVlbmNlWyAwIF07XG5cdFx0XHRcdHZhciB2YWx1ZSA9IGluZmx1ZW5jZVsgMSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyApIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGksIG1vcnBoVGFyZ2V0c1sgaW5kZXggXSApO1xuXHRcdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbW9ycGhOb3JtYWwnICsgaSwgbW9ycGhOb3JtYWxzWyBpbmRleCBdICk7XG5cblx0XHRcdFx0XHRtb3JwaEluZmx1ZW5jZXNbIGkgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRtb3JwaEluZmx1ZW5jZXNbIGkgXSA9IDA7XG5cblx0XHR9XG5cblx0XHRwcm9ncmFtLmdldFVuaWZvcm1zKCkuc2V0VmFsdWUoIGdsLCAnbW9ycGhUYXJnZXRJbmZsdWVuY2VzJywgbW9ycGhJbmZsdWVuY2VzICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHR1cGRhdGU6IHVwZGF0ZVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMT2JqZWN0cyggZ2VvbWV0cmllcywgaW5mbyApIHtcblxuXHR2YXIgdXBkYXRlTGlzdCA9IHt9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0ICkge1xuXG5cdFx0dmFyIGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cdFx0dmFyIGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cmllcy5nZXQoIG9iamVjdCwgZ2VvbWV0cnkgKTtcblxuXHRcdC8vIFVwZGF0ZSBvbmNlIHBlciBmcmFtZVxuXG5cdFx0aWYgKCB1cGRhdGVMaXN0WyBidWZmZXJnZW9tZXRyeS5pZCBdICE9PSBmcmFtZSApIHtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRcdGJ1ZmZlcmdlb21ldHJ5LnVwZGF0ZUZyb21PYmplY3QoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJpZXMudXBkYXRlKCBidWZmZXJnZW9tZXRyeSApO1xuXG5cdFx0XHR1cGRhdGVMaXN0WyBidWZmZXJnZW9tZXRyeS5pZCBdID0gZnJhbWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYnVmZmVyZ2VvbWV0cnk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHR1cGRhdGVMaXN0ID0ge307XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQ3ViZVRleHR1cmUoIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHtcblxuXHRpbWFnZXMgPSBpbWFnZXMgIT09IHVuZGVmaW5lZCA/IGltYWdlcyA6IFtdO1xuXHRtYXBwaW5nID0gbWFwcGluZyAhPT0gdW5kZWZpbmVkID8gbWFwcGluZyA6IEN1YmVSZWZsZWN0aW9uTWFwcGluZztcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxufVxuXG5DdWJlVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuQ3ViZVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViZVRleHR1cmU7XG5cbkN1YmVUZXh0dXJlLnByb3RvdHlwZS5pc0N1YmVUZXh0dXJlID0gdHJ1ZTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBDdWJlVGV4dHVyZS5wcm90b3R5cGUsICdpbWFnZXMnLCB7XG5cblx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbWFnZTtcblxuXHR9LFxuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuaW1hZ2UgPSB2YWx1ZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIEFydHVyIFRyemVzaW9rXG4gKi9cblxuZnVuY3Rpb24gRGF0YVRleHR1cmUzRCggZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggKSB7XG5cblx0Ly8gV2UncmUgZ29pbmcgdG8gYWRkIC5zZXRYWFgoKSBtZXRob2RzIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgbGF0ZXIuXG5cdC8vIFVzZXJzIGNhbiBzdGlsbCBzZXQgaW4gRGF0YVRleHR1cmUzRCBkaXJlY3RseS5cblx0Ly9cblx0Ly9cdHZhciB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XG5cdC8vIFx0dGV4dHVyZS5hbmlzb3Ryb3B5ID0gMTY7XG5cdC8vXG5cdC8vIFNlZSAjMTQ4MzlcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIG51bGwgKTtcblxuXHR0aGlzLmltYWdlID0geyBkYXRhOiBkYXRhLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBkZXB0aDogZGVwdGggfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cbn1cblxuRGF0YVRleHR1cmUzRC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuRGF0YVRleHR1cmUzRC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEYXRhVGV4dHVyZTNEO1xuRGF0YVRleHR1cmUzRC5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZTNEID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIHRzY2h3XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqXG4gKiBVbmlmb3JtcyBvZiBhIHByb2dyYW0uXG4gKiBUaG9zZSBmb3JtIGEgdHJlZSBzdHJ1Y3R1cmUgd2l0aCBhIHNwZWNpYWwgdG9wLWxldmVsIGNvbnRhaW5lciBmb3IgdGhlIHJvb3QsXG4gKiB3aGljaCB5b3UgZ2V0IGJ5IGNhbGxpbmcgJ25ldyBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSwgcmVuZGVyZXIgKScuXG4gKlxuICpcbiAqIFByb3BlcnRpZXMgb2YgaW5uZXIgbm9kZXMgaW5jbHVkaW5nIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXEgLSBhcnJheSBvZiBuZXN0ZWQgdW5pZm9ybXNcbiAqIC5tYXAgLSBuZXN0ZWQgdW5pZm9ybXMgYnkgbmFtZVxuICpcbiAqXG4gKiBNZXRob2RzIG9mIGFsbCBub2RlcyBleGNlcHQgdGhlIHRvcC1sZXZlbCBjb250YWluZXI6XG4gKlxuICogLnNldFZhbHVlKCBnbCwgdmFsdWUsIFtyZW5kZXJlcl0gKVxuICpcbiAqIFx0XHR1cGxvYWRzIGEgdW5pZm9ybSB2YWx1ZShzKVxuICogIFx0dGhlICdyZW5kZXJlcicgcGFyYW1ldGVyIGlzIG5lZWRlZCBmb3Igc2FtcGxlciB1bmlmb3Jtc1xuICpcbiAqXG4gKiBTdGF0aWMgbWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAocmVuZGVyZXIgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC51cGxvYWQoIGdsLCBzZXEsIHZhbHVlcywgcmVuZGVyZXIgKVxuICpcbiAqIFx0XHRzZXRzIHVuaWZvcm1zIGluICdzZXEnIHRvICd2YWx1ZXNbaWRdLnZhbHVlJ1xuICpcbiAqIC5zZXFXaXRoVmFsdWUoIHNlcSwgdmFsdWVzICkgOiBmaWx0ZXJlZFNlcVxuICpcbiAqIFx0XHRmaWx0ZXJzICdzZXEnIGVudHJpZXMgd2l0aCBjb3JyZXNwb25kaW5nIGVudHJ5IGluIHZhbHVlc1xuICpcbiAqXG4gKiBNZXRob2RzIG9mIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyIChyZW5kZXJlciBmYWN0b3JpemF0aW9ucyk6XG4gKlxuICogLnNldFZhbHVlKCBnbCwgbmFtZSwgdmFsdWUgKVxuICpcbiAqIFx0XHRzZXRzIHVuaWZvcm0gd2l0aCAgbmFtZSAnbmFtZScgdG8gJ3ZhbHVlJ1xuICpcbiAqIC5zZXQoIGdsLCBvYmosIHByb3AgKVxuICpcbiAqIFx0XHRzZXRzIHVuaWZvcm0gZnJvbSBvYmplY3QgYW5kIHByb3BlcnR5IHdpdGggc2FtZSBuYW1lIHRoYW4gdW5pZm9ybVxuICpcbiAqIC5zZXRPcHRpb25hbCggZ2wsIG9iaiwgcHJvcCApXG4gKlxuICogXHRcdGxpa2UgLnNldCBmb3IgYW4gb3B0aW9uYWwgcHJvcGVydHkgb2YgdGhlIG9iamVjdFxuICpcbiAqL1xuXG52YXIgZW1wdHlUZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcbnZhciBlbXB0eVRleHR1cmUzZCA9IG5ldyBEYXRhVGV4dHVyZTNEKCk7XG52YXIgZW1wdHlDdWJlVGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG4vLyAtLS0gQmFzZSBmb3IgaW5uZXIgbm9kZXMgKGluY2x1ZGluZyB0aGUgcm9vdCkgLS0tXG5cbmZ1bmN0aW9uIFVuaWZvcm1Db250YWluZXIoKSB7XG5cblx0dGhpcy5zZXEgPSBbXTtcblx0dGhpcy5tYXAgPSB7fTtcblxufVxuXG4vLyAtLS0gVXRpbGl0aWVzIC0tLVxuXG4vLyBBcnJheSBDYWNoZXMgKHByb3ZpZGUgdHlwZWQgYXJyYXlzIGZvciB0ZW1wb3JhcnkgYnkgc2l6ZSlcblxudmFyIGFycmF5Q2FjaGVGMzIgPSBbXTtcbnZhciBhcnJheUNhY2hlSTMyID0gW107XG5cbi8vIEZsb2F0MzJBcnJheSBjYWNoZXMgdXNlZCBmb3IgdXBsb2FkaW5nIE1hdHJpeCB1bmlmb3Jtc1xuXG52YXIgbWF0NGFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggMTYgKTtcbnZhciBtYXQzYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCA5ICk7XG52YXIgbWF0MmFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggNCApO1xuXG4vLyBGbGF0dGVuaW5nIGZvciBhcnJheXMgb2YgdmVjdG9ycyBhbmQgbWF0cmljZXNcblxuZnVuY3Rpb24gZmxhdHRlbiggYXJyYXksIG5CbG9ja3MsIGJsb2NrU2l6ZSApIHtcblxuXHR2YXIgZmlyc3RFbGVtID0gYXJyYXlbIDAgXTtcblxuXHRpZiAoIGZpcnN0RWxlbSA8PSAwIHx8IGZpcnN0RWxlbSA+IDAgKSByZXR1cm4gYXJyYXk7XG5cdC8vIHVub3B0aW1pemVkOiAhIGlzTmFOKCBmaXJzdEVsZW0gKVxuXHQvLyBzZWUgaHR0cDovL2phY2tzb25kdW5zdGFuLmNvbS9hcnRpY2xlcy85ODNcblxuXHR2YXIgbiA9IG5CbG9ja3MgKiBibG9ja1NpemUsXG5cdFx0ciA9IGFycmF5Q2FjaGVGMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgRmxvYXQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUYzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0aWYgKCBuQmxvY2tzICE9PSAwICkge1xuXG5cdFx0Zmlyc3RFbGVtLnRvQXJyYXkoIHIsIDAgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMSwgb2Zmc2V0ID0gMDsgaSAhPT0gbkJsb2NrczsgKysgaSApIHtcblxuXHRcdFx0b2Zmc2V0ICs9IGJsb2NrU2l6ZTtcblx0XHRcdGFycmF5WyBpIF0udG9BcnJheSggciwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiByO1xuXG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKCBhLCBiICkge1xuXG5cdGlmICggYS5sZW5ndGggIT09IGIubGVuZ3RoICkgcmV0dXJuIGZhbHNlO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGlmICggYVsgaSBdICE9PSBiWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmZ1bmN0aW9uIGNvcHlBcnJheSggYSwgYiApIHtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBiLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRhWyBpIF0gPSBiWyBpIF07XG5cblx0fVxuXG59XG5cbi8vIFRleHR1cmUgdW5pdCBhbGxvY2F0aW9uXG5cbmZ1bmN0aW9uIGFsbG9jVGV4VW5pdHMoIHJlbmRlcmVyLCBuICkge1xuXG5cdHZhciByID0gYXJyYXlDYWNoZUkzMlsgbiBdO1xuXG5cdGlmICggciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0ciA9IG5ldyBJbnQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUkzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpIClcblx0XHRyWyBpIF0gPSByZW5kZXJlci5hbGxvY1RleHR1cmVVbml0KCk7XG5cblx0cmV0dXJuIHI7XG5cbn1cblxuLy8gLS0tIFNldHRlcnMgLS0tXG5cbi8vIE5vdGU6IERlZmluaW5nIHRoZXNlIG1ldGhvZHMgZXh0ZXJuYWxseSwgYmVjYXVzZSB0aGV5IGNvbWUgaW4gYSBidW5jaFxuLy8gYW5kIHRoaXMgd2F5IHRoZWlyIG5hbWVzIG1pbmlmeS5cblxuLy8gU2luZ2xlIHNjYWxhclxuXG5mdW5jdGlvbiBzZXRWYWx1ZTFmKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlMWkoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBjYWNoZVsgMCBdID09PSB2ICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIGZsb2F0IHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlMmZ2KCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0yZiggdGhpcy5hZGRyLCB2LngsIHYueSApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTNmdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnogKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAoIHYuciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnIgfHwgY2FjaGVbIDEgXSAhPT0gdi5nIHx8IGNhY2hlWyAyIF0gIT09IHYuYiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYuciwgdi5nLCB2LmIgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYucjtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lmc7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi5iO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlNGZ2KCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTRmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSBtYXRyaXggKGZyb20gZmxhdCBhcnJheSBvciBNYXRyaXhOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTJmbSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDJhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQyYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlM2ZtKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0M2FycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDNhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWU0Zm0oIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQ0YXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0NGFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgdGV4dHVyZSAoMkQgLyBDdWJlKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQxKCBnbCwgdiwgcmVuZGVyZXIgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIHVuaXQgPSByZW5kZXJlci5hbGxvY1RleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0cmVuZGVyZXIuc2V0VGV4dHVyZTJEKCB2IHx8IGVtcHR5VGV4dHVyZSwgdW5pdCApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDNEMSggZ2wsIHYsIHJlbmRlcmVyICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciB1bml0ID0gcmVuZGVyZXIuYWxsb2NUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHJlbmRlcmVyLnNldFRleHR1cmUzRCggdiB8fCBlbXB0eVRleHR1cmUzZCwgdW5pdCApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDYoIGdsLCB2LCByZW5kZXJlciApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgdW5pdCA9IHJlbmRlcmVyLmFsbG9jVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHRyZW5kZXJlci5zZXRUZXh0dXJlQ3ViZSggdiB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuLy8gSW50ZWdlciAvIEJvb2xlYW4gdmVjdG9ycyBvciBhcnJheXMgdGhlcmVvZiAoYWx3YXlzIGZsYXQgYXJyYXlzKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTJpdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0yaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTNpdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0zaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTRpdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm00aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciB0aGUgc2luZ3VsYXIgY2FzZVxuXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZTFmOyAvLyBGTE9BVFxuXHRcdGNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWUyZnY7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZTNmdjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlNGZ2OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZTJmbTsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlM2ZtOyAvLyBfTUFUM1xuXHRcdGNhc2UgMHg4YjVjOiByZXR1cm4gc2V0VmFsdWU0Zm07IC8vIF9NQVQ0XG5cblx0XHRjYXNlIDB4OGI1ZTogY2FzZSAweDhkNjY6IHJldHVybiBzZXRWYWx1ZVQxOyAvLyBTQU1QTEVSXzJELCBTQU1QTEVSX0VYVEVSTkFMX09FU1xuXHRcdGNhc2UgMHg4QjVGOiByZXR1cm4gc2V0VmFsdWVUM0QxOyAvLyBTQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhiNjA6IHJldHVybiBzZXRWYWx1ZVQ2OyAvLyBTQU1QTEVSX0NVQkVcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlMWk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlMml2OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlM2l2OyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlNGl2OyAvLyBfVkVDNFxuXG5cdH1cblxufVxuXG4vLyBBcnJheSBvZiBzY2FsYXJzXG5cbmZ1bmN0aW9uIHNldFZhbHVlMWZ2KCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTFmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5mdW5jdGlvbiBzZXRWYWx1ZTFpdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG4vLyBBcnJheSBvZiB2ZWN0b3JzIChmbGF0IG9yIGZyb20gVEhSRUUgY2xhc3NlcylcblxuZnVuY3Rpb24gc2V0VmFsdWVWMmEoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAyICk7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGRhdGEgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2EoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAzICk7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGRhdGEgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtM2Z2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGEoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA0ICk7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGRhdGEgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtNGZ2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgbWF0cmljZXMgKGZsYXQgb3IgZnJvbSBUSFJFRSBjbGFzZXMpXG5cbmZ1bmN0aW9uIHNldFZhbHVlTTJhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG5cdHRoaXMudXBkYXRlQ2FjaGUoIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0zYSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDkgKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZGF0YSApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNNGEoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAxNiApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG5cdHRoaXMudXBkYXRlQ2FjaGUoIGRhdGEgKTtcblxufVxuXG4vLyBBcnJheSBvZiB0ZXh0dXJlcyAoMkQgLyBDdWJlKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQxYSggZ2wsIHYsIHJlbmRlcmVyICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBuID0gdi5sZW5ndGg7XG5cblx0dmFyIHVuaXRzID0gYWxsb2NUZXhVbml0cyggcmVuZGVyZXIsIG4gKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdW5pdHMgKTtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0cmVuZGVyZXIuc2V0VGV4dHVyZTJEKCB2WyBpIF0gfHwgZW1wdHlUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDZhKCBnbCwgdiwgcmVuZGVyZXIgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIG4gPSB2Lmxlbmd0aDtcblxuXHR2YXIgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCByZW5kZXJlciwgbiApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB1bml0cyApID09PSBmYWxzZSApIHtcblxuXHRcdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTtcblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB1bml0cyApO1xuXG5cdH1cblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRyZW5kZXJlci5zZXRUZXh0dXJlQ3ViZSggdlsgaSBdIHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuLy8gSGVscGVyIHRvIHBpY2sgdGhlIHJpZ2h0IHNldHRlciBmb3IgYSBwdXJlIChib3R0b20tbGV2ZWwpIGFycmF5XG5cbmZ1bmN0aW9uIGdldFB1cmVBcnJheVNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZTFmdjsgLy8gRkxPQVRcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlVjJhOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2E7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0YTsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWVNMmE7IC8vIF9NQVQyXG5cdFx0Y2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zYTsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTRhOyAvLyBfTUFUNFxuXG5cdFx0Y2FzZSAweDhiNWU6IHJldHVybiBzZXRWYWx1ZVQxYTsgLy8gU0FNUExFUl8yRFxuXHRcdGNhc2UgMHg4YjYwOiByZXR1cm4gc2V0VmFsdWVUNmE7IC8vIFNBTVBMRVJfQ1VCRVxuXG5cdFx0Y2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWUxaXY7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlMml2OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlM2l2OyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlNGl2OyAvLyBfVkVDNFxuXG5cdH1cblxufVxuXG4vLyAtLS0gVW5pZm9ybSBDbGFzc2VzIC0tLVxuXG5mdW5jdGlvbiBTaW5nbGVVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHtcblxuXHR0aGlzLmlkID0gaWQ7XG5cdHRoaXMuYWRkciA9IGFkZHI7XG5cdHRoaXMuY2FjaGUgPSBbXTtcblx0dGhpcy5zZXRWYWx1ZSA9IGdldFNpbmd1bGFyU2V0dGVyKCBhY3RpdmVJbmZvLnR5cGUgKTtcblxuXHQvLyB0aGlzLnBhdGggPSBhY3RpdmVJbmZvLm5hbWU7IC8vIERFQlVHXG5cbn1cblxuZnVuY3Rpb24gUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7XG5cblx0dGhpcy5pZCA9IGlkO1xuXHR0aGlzLmFkZHIgPSBhZGRyO1xuXHR0aGlzLmNhY2hlID0gW107XG5cdHRoaXMuc2l6ZSA9IGFjdGl2ZUluZm8uc2l6ZTtcblx0dGhpcy5zZXRWYWx1ZSA9IGdldFB1cmVBcnJheVNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0Ly8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVR1xuXG59XG5cblB1cmVBcnJheVVuaWZvcm0ucHJvdG90eXBlLnVwZGF0ZUNhY2hlID0gZnVuY3Rpb24gKCBkYXRhICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBkYXRhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICYmIGNhY2hlLmxlbmd0aCAhPT0gZGF0YS5sZW5ndGggKSB7XG5cblx0XHR0aGlzLmNhY2hlID0gbmV3IEZsb2F0MzJBcnJheSggZGF0YS5sZW5ndGggKTtcblxuXHR9XG5cblx0Y29weUFycmF5KCBjYWNoZSwgZGF0YSApO1xuXG59O1xuXG5mdW5jdGlvbiBTdHJ1Y3R1cmVkVW5pZm9ybSggaWQgKSB7XG5cblx0dGhpcy5pZCA9IGlkO1xuXG5cdFVuaWZvcm1Db250YWluZXIuY2FsbCggdGhpcyApOyAvLyBtaXgtaW5cblxufVxuXG5TdHJ1Y3R1cmVkVW5pZm9ybS5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAoIGdsLCB2YWx1ZSwgcmVuZGVyZXIgKSB7XG5cblx0dmFyIHNlcSA9IHRoaXMuc2VxO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR2YXIgdSA9IHNlcVsgaSBdO1xuXHRcdHUuc2V0VmFsdWUoIGdsLCB2YWx1ZVsgdS5pZCBdLCByZW5kZXJlciApO1xuXG5cdH1cblxufTtcblxuLy8gLS0tIFRvcC1sZXZlbCAtLS1cblxuLy8gUGFyc2VyIC0gYnVpbGRzIHVwIHRoZSBwcm9wZXJ0eSB0cmVlIGZyb20gdGhlIHBhdGggc3RyaW5nc1xuXG52YXIgUmVQYXRoUGFydCA9IC8oW1xcd1xcZF9dKykoXFxdKT8oXFxbfFxcLik/L2c7XG5cbi8vIGV4dHJhY3RzXG4vLyBcdC0gdGhlIGlkZW50aWZpZXIgKG1lbWJlciBuYW1lIG9yIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgcmlnaHQgYnJhY2tldCAoZm91bmQgd2hlbiBhcnJheSBpbmRleClcbi8vICAtIGZvbGxvd2VkIGJ5IGFuIG9wdGlvbmFsIGxlZnQgYnJhY2tldCBvciBkb3QgKHR5cGUgb2Ygc3Vic2NyaXB0KVxuLy9cbi8vIE5vdGU6IFRoZXNlIHBvcnRpb25zIGNhbiBiZSByZWFkIGluIGEgbm9uLW92ZXJsYXBwaW5nIGZhc2hpb24gYW5kXG4vLyBhbGxvdyBzdHJhaWdodGZvcndhcmQgcGFyc2luZyBvZiB0aGUgaGllcmFyY2h5IHRoYXQgV2ViR0wgZW5jb2Rlc1xuLy8gaW4gdGhlIHVuaWZvcm0gbmFtZXMuXG5cbmZ1bmN0aW9uIGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgdW5pZm9ybU9iamVjdCApIHtcblxuXHRjb250YWluZXIuc2VxLnB1c2goIHVuaWZvcm1PYmplY3QgKTtcblx0Y29udGFpbmVyLm1hcFsgdW5pZm9ybU9iamVjdC5pZCBdID0gdW5pZm9ybU9iamVjdDtcblxufVxuXG5mdW5jdGlvbiBwYXJzZVVuaWZvcm0oIGFjdGl2ZUluZm8sIGFkZHIsIGNvbnRhaW5lciApIHtcblxuXHR2YXIgcGF0aCA9IGFjdGl2ZUluZm8ubmFtZSxcblx0XHRwYXRoTGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cblx0Ly8gcmVzZXQgUmVnRXhwIG9iamVjdCwgYmVjYXVzZSBvZiB0aGUgZWFybHkgZXhpdCBvZiBhIHByZXZpb3VzIHJ1blxuXHRSZVBhdGhQYXJ0Lmxhc3RJbmRleCA9IDA7XG5cblx0d2hpbGUgKCB0cnVlICkge1xuXG5cdFx0dmFyIG1hdGNoID0gUmVQYXRoUGFydC5leGVjKCBwYXRoICksXG5cdFx0XHRtYXRjaEVuZCA9IFJlUGF0aFBhcnQubGFzdEluZGV4LFxuXG5cdFx0XHRpZCA9IG1hdGNoWyAxIF0sXG5cdFx0XHRpZElzSW5kZXggPSBtYXRjaFsgMiBdID09PSAnXScsXG5cdFx0XHRzdWJzY3JpcHQgPSBtYXRjaFsgMyBdO1xuXG5cdFx0aWYgKCBpZElzSW5kZXggKSBpZCA9IGlkIHwgMDsgLy8gY29udmVydCB0byBpbnRlZ2VyXG5cblx0XHRpZiAoIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkIHx8IHN1YnNjcmlwdCA9PT0gJ1snICYmIG1hdGNoRW5kICsgMiA9PT0gcGF0aExlbmd0aCApIHtcblxuXHRcdFx0Ly8gYmFyZSBuYW1lIG9yIFwicHVyZVwiIGJvdHRvbS1sZXZlbCBhcnJheSBcIlswXVwiIHN1ZmZpeFxuXG5cdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0bmV3IFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgOlxuXHRcdFx0XHRuZXcgUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHN0ZXAgaW50byBpbm5lciBub2RlIC8gY3JlYXRlIGl0IGluIGNhc2UgaXQgZG9lc24ndCBleGlzdFxuXG5cdFx0XHR2YXIgbWFwID0gY29udGFpbmVyLm1hcCwgbmV4dCA9IG1hcFsgaWQgXTtcblxuXHRcdFx0aWYgKCBuZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bmV4dCA9IG5ldyBTdHJ1Y3R1cmVkVW5pZm9ybSggaWQgKTtcblx0XHRcdFx0YWRkVW5pZm9ybSggY29udGFpbmVyLCBuZXh0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29udGFpbmVyID0gbmV4dDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gUm9vdCBDb250YWluZXJcblxuZnVuY3Rpb24gV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0sIHJlbmRlcmVyICkge1xuXG5cdFVuaWZvcm1Db250YWluZXIuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcblxuXHR2YXIgbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE4ICk7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbjsgKysgaSApIHtcblxuXHRcdHZhciBpbmZvID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSggcHJvZ3JhbSwgaSApLFxuXHRcdFx0YWRkciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbSwgaW5mby5uYW1lICk7XG5cblx0XHRwYXJzZVVuaWZvcm0oIGluZm8sIGFkZHIsIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAoIGdsLCBuYW1lLCB2YWx1ZSApIHtcblxuXHR2YXIgdSA9IHRoaXMubWFwWyBuYW1lIF07XG5cblx0aWYgKCB1ICE9PSB1bmRlZmluZWQgKSB1LnNldFZhbHVlKCBnbCwgdmFsdWUsIHRoaXMucmVuZGVyZXIgKTtcblxufTtcblxuV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAoIGdsLCBvYmplY3QsIG5hbWUgKSB7XG5cblx0dmFyIHYgPSBvYmplY3RbIG5hbWUgXTtcblxuXHRpZiAoIHYgIT09IHVuZGVmaW5lZCApIHRoaXMuc2V0VmFsdWUoIGdsLCBuYW1lLCB2ICk7XG5cbn07XG5cblxuLy8gU3RhdGljIGludGVyZmFjZVxuXG5XZWJHTFVuaWZvcm1zLnVwbG9hZCA9IGZ1bmN0aW9uICggZ2wsIHNlcSwgdmFsdWVzLCByZW5kZXJlciApIHtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dmFyIHUgPSBzZXFbIGkgXSxcblx0XHRcdHYgPSB2YWx1ZXNbIHUuaWQgXTtcblxuXHRcdGlmICggdi5uZWVkc1VwZGF0ZSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGFsd2F5cyB1cGRhdGluZyB3aGVuIC5uZWVkc1VwZGF0ZSBpcyB1bmRlZmluZWRcblx0XHRcdHUuc2V0VmFsdWUoIGdsLCB2LnZhbHVlLCByZW5kZXJlciApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuV2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUgPSBmdW5jdGlvbiAoIHNlcSwgdmFsdWVzICkge1xuXG5cdHZhciByID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHZhciB1ID0gc2VxWyBpIF07XG5cdFx0aWYgKCB1LmlkIGluIHZhbHVlcyApIHIucHVzaCggdSApO1xuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIGFkZExpbmVOdW1iZXJzKCBzdHJpbmcgKSB7XG5cblx0dmFyIGxpbmVzID0gc3RyaW5nLnNwbGl0KCAnXFxuJyApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGxpbmVzWyBpIF0gPSAoIGkgKyAxICkgKyAnOiAnICsgbGluZXNbIGkgXTtcblxuXHR9XG5cblx0cmV0dXJuIGxpbmVzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xTaGFkZXIoIGdsLCB0eXBlLCBzdHJpbmcgKSB7XG5cblx0dmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlciggdHlwZSApO1xuXG5cdGdsLnNoYWRlclNvdXJjZSggc2hhZGVyLCBzdHJpbmcgKTtcblx0Z2wuY29tcGlsZVNoYWRlciggc2hhZGVyICk7XG5cblx0aWYgKCBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoIHNoYWRlciwgMzU3MTMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTaGFkZXI6IFNoYWRlciBjb3VsZG5cXCd0IGNvbXBpbGUuJyApO1xuXG5cdH1cblxuXHRpZiAoIGdsLmdldFNoYWRlckluZm9Mb2coIHNoYWRlciApICE9PSAnJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZGVyOiBnbC5nZXRTaGFkZXJJbmZvTG9nKCknLCB0eXBlID09PSAzNTYzMyA/ICd2ZXJ0ZXgnIDogJ2ZyYWdtZW50JywgZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICksIGFkZExpbmVOdW1iZXJzKCBzdHJpbmcgKSApO1xuXG5cdH1cblxuXHQvLyAtLWVuYWJsZS1wcml2aWxlZ2VkLXdlYmdsLWV4dGVuc2lvblxuXHQvLyBjb25zb2xlLmxvZyggdHlwZSwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVidWdfc2hhZGVycycgKS5nZXRUcmFuc2xhdGVkU2hhZGVyU291cmNlKCBzaGFkZXIgKSApO1xuXG5cdHJldHVybiBzaGFkZXI7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBwcm9ncmFtSWRDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGdldEVuY29kaW5nQ29tcG9uZW50cyggZW5jb2RpbmcgKSB7XG5cblx0c3dpdGNoICggZW5jb2RpbmcgKSB7XG5cblx0XHRjYXNlIExpbmVhckVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ0xpbmVhcicsICcoIHZhbHVlICknIF07XG5cdFx0Y2FzZSBzUkdCRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnc1JHQicsICcoIHZhbHVlICknIF07XG5cdFx0Y2FzZSBSR0JFRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnUkdCRScsICcoIHZhbHVlICknIF07XG5cdFx0Y2FzZSBSR0JNN0VuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ1JHQk0nLCAnKCB2YWx1ZSwgNy4wICknIF07XG5cdFx0Y2FzZSBSR0JNMTZFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdSR0JNJywgJyggdmFsdWUsIDE2LjAgKScgXTtcblx0XHRjYXNlIFJHQkRFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdSR0JEJywgJyggdmFsdWUsIDI1Ni4wICknIF07XG5cdFx0Y2FzZSBHYW1tYUVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ0dhbW1hJywgJyggdmFsdWUsIGZsb2F0KCBHQU1NQV9GQUNUT1IgKSApJyBdO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICd1bnN1cHBvcnRlZCBlbmNvZGluZzogJyArIGVuY29kaW5nICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCBlbmNvZGluZyApIHtcblxuXHR2YXIgY29tcG9uZW50cyA9IGdldEVuY29kaW5nQ29tcG9uZW50cyggZW5jb2RpbmcgKTtcblx0cmV0dXJuICd2ZWM0ICcgKyBmdW5jdGlvbk5hbWUgKyAnKCB2ZWM0IHZhbHVlICkgeyByZXR1cm4gJyArIGNvbXBvbmVudHNbIDAgXSArICdUb0xpbmVhcicgKyBjb21wb25lbnRzWyAxIF0gKyAnOyB9JztcblxufVxuXG5mdW5jdGlvbiBnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgZW5jb2RpbmcgKSB7XG5cblx0dmFyIGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICk7XG5cdHJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuIExpbmVhclRvJyArIGNvbXBvbmVudHNbIDAgXSArIGNvbXBvbmVudHNbIDEgXSArICc7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7XG5cblx0dmFyIHRvbmVNYXBwaW5nTmFtZTtcblxuXHRzd2l0Y2ggKCB0b25lTWFwcGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1JlaW5oYXJkJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnVW5jaGFydGVkMic7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgQ2luZW9uVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnT3B0aW1pemVkQ2luZW9uJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBBQ0VTRmlsbWljVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnQUNFU0ZpbG1pYyc7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICd1bnN1cHBvcnRlZCB0b25lTWFwcGluZzogJyArIHRvbmVNYXBwaW5nICk7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXh0ZW5zaW9ucyggZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgcmVuZGVyZXJFeHRlbnNpb25zICkge1xuXG5cdGV4dGVuc2lvbnMgPSBleHRlbnNpb25zIHx8IHt9O1xuXG5cdHZhciBjaHVua3MgPSBbXG5cdFx0KCBleHRlbnNpb25zLmRlcml2YXRpdmVzIHx8IHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWIHx8IHBhcmFtZXRlcnMuYnVtcE1hcCB8fCAoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmICEgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApIHx8IHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgKSA/ICcjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZScgOiAnJyxcblx0XHQoIGV4dGVuc2lvbnMuZnJhZ0RlcHRoIHx8IHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoICdFWFRfZnJhZ19kZXB0aCcgKSA/ICcjZXh0ZW5zaW9uIEdMX0VYVF9mcmFnX2RlcHRoIDogZW5hYmxlJyA6ICcnLFxuXHRcdCggZXh0ZW5zaW9ucy5kcmF3QnVmZmVycyApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9kcmF3X2J1ZmZlcnMnICkgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZHJhd19idWZmZXJzIDogcmVxdWlyZScgOiAnJyxcblx0XHQoIGV4dGVuc2lvbnMuc2hhZGVyVGV4dHVyZUxPRCB8fCBwYXJhbWV0ZXJzLmVudk1hcCApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoICdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJyApID8gJyNleHRlbnNpb24gR0xfRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCA6IGVuYWJsZScgOiAnJ1xuXHRdO1xuXG5cdHJldHVybiBjaHVua3MuZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApIHtcblxuXHR2YXIgY2h1bmtzID0gW107XG5cblx0Zm9yICggdmFyIG5hbWUgaW4gZGVmaW5lcyApIHtcblxuXHRcdHZhciB2YWx1ZSA9IGRlZmluZXNbIG5hbWUgXTtcblxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRjaHVua3MucHVzaCggJyNkZWZpbmUgJyArIG5hbWUgKyAnICcgKyB2YWx1ZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gY2h1bmtzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICkge1xuXG5cdHZhciBhdHRyaWJ1dGVzID0ge307XG5cblx0dmFyIG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCAzNTcyMSApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IG47IGkgKysgKSB7XG5cblx0XHR2YXIgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYiggcHJvZ3JhbSwgaSApO1xuXHRcdHZhciBuYW1lID0gaW5mby5uYW1lO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5XZWJHTFByb2dyYW06IEFDVElWRSBWRVJURVggQVRUUklCVVRFOicsIG5hbWUsIGkgKTtcblxuXHRcdGF0dHJpYnV0ZXNbIG5hbWUgXSA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCBuYW1lICk7XG5cblx0fVxuXG5cdHJldHVybiBhdHRyaWJ1dGVzO1xuXG59XG5cbmZ1bmN0aW9uIGZpbHRlckVtcHR5TGluZSggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmcgIT09ICcnO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VMaWdodE51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHtcblxuXHRyZXR1cm4gc3RyaW5nXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9SRUNUX0FSRUFfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUmVjdEFyZWFMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1BPSU5UX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9IRU1JX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bUhlbWlMaWdodHMgKTtcblxufVxuXG5mdW5jdGlvbiByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHtcblxuXHRyZXR1cm4gc3RyaW5nXG5cdFx0LnJlcGxhY2UoIC9OVU1fQ0xJUFBJTkdfUExBTkVTL2csIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgKVxuXHRcdC5yZXBsYWNlKCAvVU5JT05fQ0xJUFBJTkdfUExBTkVTL2csICggcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyAtIHBhcmFtZXRlcnMubnVtQ2xpcEludGVyc2VjdGlvbiApICk7XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VJbmNsdWRlcyggc3RyaW5nICkge1xuXG5cdHZhciBwYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcblxuXHRmdW5jdGlvbiByZXBsYWNlKCBtYXRjaCwgaW5jbHVkZSApIHtcblxuXHRcdHZhciByZXBsYWNlID0gU2hhZGVyQ2h1bmtbIGluY2x1ZGUgXTtcblxuXHRcdGlmICggcmVwbGFjZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcGFyc2VJbmNsdWRlcyggcmVwbGFjZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHBhdHRlcm4sIHJlcGxhY2UgKTtcblxufVxuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHZhciBwYXR0ZXJuID0gLyNwcmFnbWEgdW5yb2xsX2xvb3BbXFxzXSs/Zm9yIFxcKCBpbnQgaSBcXD0gKFxcZCspXFw7IGkgPCAoXFxkKylcXDsgaSBcXCtcXCsgXFwpIFxceyhbXFxzXFxTXSs/KSg/PVxcfSlcXH0vZztcblxuXHRmdW5jdGlvbiByZXBsYWNlKCBtYXRjaCwgc3RhcnQsIGVuZCwgc25pcHBldCApIHtcblxuXHRcdHZhciB1bnJvbGwgPSAnJztcblxuXHRcdGZvciAoIHZhciBpID0gcGFyc2VJbnQoIHN0YXJ0ICk7IGkgPCBwYXJzZUludCggZW5kICk7IGkgKysgKSB7XG5cblx0XHRcdHVucm9sbCArPSBzbmlwcGV0LnJlcGxhY2UoIC9cXFsgaSBcXF0vZywgJ1sgJyArIGkgKyAnIF0nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5yb2xsO1xuXG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHBhdHRlcm4sIHJlcGxhY2UgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBleHRlbnNpb25zLCBjb2RlLCBtYXRlcmlhbCwgc2hhZGVyLCBwYXJhbWV0ZXJzLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIGdsID0gcmVuZGVyZXIuY29udGV4dDtcblxuXHR2YXIgZGVmaW5lcyA9IG1hdGVyaWFsLmRlZmluZXM7XG5cblx0dmFyIHZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXI7XG5cdHZhciBmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlcjtcblxuXHR2YXIgc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9CQVNJQyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNvZnRTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRl9TT0ZUJztcblxuXHR9XG5cblx0dmFyIGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdHZhciBlbnZNYXBNb2RlRGVmaW5lID0gJ0VOVk1BUF9NT0RFX1JFRkxFQ1RJT04nO1xuXHR2YXIgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcgKSB7XG5cblx0XHRcdGNhc2UgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFX1VWJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6XG5cdFx0XHRjYXNlIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0VRVUlSRUMnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9TUEhFUkUnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHRcdHN3aXRjaCAoIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0c3dpdGNoICggbWF0ZXJpYWwuY29tYmluZSApIHtcblxuXHRcdFx0Y2FzZSBNdWx0aXBseU9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTUlYJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfQUREJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZhciBnYW1tYUZhY3RvckRlZmluZSA9ICggcmVuZGVyZXIuZ2FtbWFGYWN0b3IgPiAwICkgPyByZW5kZXJlci5nYW1tYUZhY3RvciA6IDEuMDtcblxuXHQvLyBjb25zb2xlLmxvZyggJ2J1aWxkaW5nIG5ldyBwcm9ncmFtICcgKTtcblxuXHQvL1xuXG5cdHZhciBjdXN0b21FeHRlbnNpb25zID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gJycgOiBnZW5lcmF0ZUV4dGVuc2lvbnMoIG1hdGVyaWFsLmV4dGVuc2lvbnMsIHBhcmFtZXRlcnMsIGV4dGVuc2lvbnMgKTtcblxuXHR2YXIgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApO1xuXG5cdC8vXG5cblx0dmFyIHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0dmFyIHByZWZpeFZlcnRleCwgcHJlZml4RnJhZ21lbnQ7XG5cblx0aWYgKCBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4VmVydGV4Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeFZlcnRleCArPSAnXFxuJztcblxuXHRcdH1cblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRpZiAoIHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdCdwcmVjaXNpb24gJyArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgJyBmbG9hdDsnLFxuXHRcdFx0J3ByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGludDsnLFxuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgc2hhZGVyLm5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA/ICcjZGVmaW5lIFZFUlRFWF9URVhUVVJFUycgOiAnJyxcblxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcblxuXHRcdFx0JyNkZWZpbmUgTUFYX0JPTkVTICcgKyBwYXJhbWV0ZXJzLm1heEJvbmVzLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgJiYgcGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5za2lubmluZyA/ICcjZGVmaW5lIFVTRV9TS0lOTklORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXNlVmVydGV4VGV4dHVyZSA/ICcjZGVmaW5lIEJPTkVfVEVYVFVSRScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPyAnI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2l6ZUF0dGVudWF0aW9uID8gJyNkZWZpbmUgVVNFX1NJWkVBVFRFTlVBVElPTicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2ZyYWdfZGVwdGgnICkgKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsXG5cblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247JyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgbm9ybWFsOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfQ09MT1InLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQwOycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDE7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MjsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQzOycsXG5cblx0XHRcdCdcdCNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTJyxcblxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDA7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwxOycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMjsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDM7JyxcblxuXHRcdFx0J1x0I2Vsc2UnLFxuXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NDsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDU7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2OycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NzsnLFxuXG5cdFx0XHQnXHQjZW5kaWYnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfU0tJTk5JTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luSW5kZXg7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXG5cdFx0XHQncHJlY2lzaW9uICcgKyBwYXJhbWV0ZXJzLnByZWNpc2lvbiArICcgZmxvYXQ7Jyxcblx0XHRcdCdwcmVjaXNpb24gJyArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgJyBpbnQ7JyxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHNoYWRlci5uYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhVGVzdCA/ICcjZGVmaW5lIEFMUEhBVEVTVCAnICsgcGFyYW1ldGVycy5hbHBoYVRlc3QgKyAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0ICUgMSA/ICcnIDogJy4wJyApIDogJycsIC8vIGFkZCAnLjAnIGlmIGludGVnZXJcblxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1hdGNhcCA/ICcjZGVmaW5lIFVTRV9NQVRDQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBUeXBlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBCbGVuZGluZ0RlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIE9CSkVDVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZ3JhZGllbnRNYXAgPyAnI2RlZmluZSBVU0VfR1JBRElFTlRNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhID8gJyNkZWZpbmUgUFJFTVVMVElQTElFRF9BTFBIQScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyA/ICcjZGVmaW5lIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciAmJiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ0VYVF9mcmFnX2RlcHRoJyApICkgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUZfRVhUJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCAmJiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QnICkgKSA/ICcjZGVmaW5lIFRFWFRVUkVfTE9EX0VYVCcgOiAnJyxcblxuXHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsXG5cblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gJyNkZWZpbmUgVE9ORV9NQVBQSU5HJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBTaGFkZXJDaHVua1sgJ3RvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQnIF0gOiAnJywgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB0b25lTWFwcGluZygpIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3dcblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiggJ3RvbmVNYXBwaW5nJywgcGFyYW1ldGVycy50b25lTWFwcGluZyApIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGl0aGVyaW5nID8gJyNkZWZpbmUgRElUSEVSSU5HJyA6ICcnLFxuXG5cdFx0XHQoIHBhcmFtZXRlcnMub3V0cHV0RW5jb2RpbmcgfHwgcGFyYW1ldGVycy5tYXBFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLm1hdGNhcEVuY29kaW5nIHx8IHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5lbWlzc2l2ZU1hcEVuY29kaW5nICkgP1xuXHRcdFx0XHRTaGFkZXJDaHVua1sgJ2VuY29kaW5nc19wYXJzX2ZyYWdtZW50JyBdIDogJycsIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XG5cdFx0XHRwYXJhbWV0ZXJzLm1hcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnbWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tYXRjYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ21hdGNhcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLm1hdGNhcEVuY29kaW5nICkgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdlbnZNYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyApIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdlbWlzc2l2ZU1hcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyA/IGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggJ2xpbmVhclRvT3V0cHV0VGV4ZWwnLCBwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nICkgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgPyAnI2RlZmluZSBERVBUSF9QQUNLSU5HICcgKyBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgOiAnJyxcblxuXHRcdFx0J1xcbidcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdH1cblxuXHR2ZXJ0ZXhTaGFkZXIgPSBwYXJzZUluY2x1ZGVzKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cdHZlcnRleFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0ZnJhZ21lbnRTaGFkZXIgPSBwYXJzZUluY2x1ZGVzKCBmcmFnbWVudFNoYWRlciApO1xuXHRmcmFnbWVudFNoYWRlciA9IHJlcGxhY2VMaWdodE51bXMoIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cdGZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyApO1xuXG5cdHZlcnRleFNoYWRlciA9IHVucm9sbExvb3BzKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSB1bnJvbGxMb29wcyggZnJhZ21lbnRTaGFkZXIgKTtcblxuXHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiAmJiAhIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHR2YXIgaXNHTFNMM1NoYWRlck1hdGVyaWFsID0gZmFsc2U7XG5cblx0XHR2YXIgdmVyc2lvblJlZ2V4ID0gL15cXHMqI3ZlcnNpb25cXHMrMzAwXFxzK2VzXFxzKlxcbi87XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiZcblx0XHRcdHZlcnRleFNoYWRlci5tYXRjaCggdmVyc2lvblJlZ2V4ICkgIT09IG51bGwgJiZcblx0XHRcdGZyYWdtZW50U2hhZGVyLm1hdGNoKCB2ZXJzaW9uUmVnZXggKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0aXNHTFNMM1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdFx0dmVydGV4U2hhZGVyID0gdmVydGV4U2hhZGVyLnJlcGxhY2UoIHZlcnNpb25SZWdleCwgJycgKTtcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRTaGFkZXIucmVwbGFjZSggdmVyc2lvblJlZ2V4LCAnJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gR0xTTCAzLjAgY29udmVyc2lvblxuXHRcdHByZWZpeFZlcnRleCA9IFtcblx0XHRcdCcjdmVyc2lvbiAzMDAgZXNcXG4nLFxuXHRcdFx0JyNkZWZpbmUgYXR0cmlidXRlIGluJyxcblx0XHRcdCcjZGVmaW5lIHZhcnlpbmcgb3V0Jyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4VmVydGV4O1xuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cdFx0XHQnI3ZlcnNpb24gMzAwIGVzXFxuJyxcblx0XHRcdCcjZGVmaW5lIHZhcnlpbmcgaW4nLFxuXHRcdFx0aXNHTFNMM1NoYWRlck1hdGVyaWFsID8gJycgOiAnb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yOycsXG5cdFx0XHRpc0dMU0wzU2hhZGVyTWF0ZXJpYWwgPyAnJyA6ICcjZGVmaW5lIGdsX0ZyYWdDb2xvciBwY19mcmFnQ29sb3InLFxuXHRcdFx0JyNkZWZpbmUgZ2xfRnJhZ0RlcHRoRVhUIGdsX0ZyYWdEZXB0aCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkQgdGV4dHVyZScsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlQ3ViZSB0ZXh0dXJlJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRFByb2ogdGV4dHVyZVByb2onLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJETG9kRVhUIHRleHR1cmVMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvakxvZEVYVCB0ZXh0dXJlUHJvakxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlQ3ViZUxvZEVYVCB0ZXh0dXJlTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyREdyYWRFWFQgdGV4dHVyZUdyYWQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvakdyYWRFWFQgdGV4dHVyZVByb2pHcmFkJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlR3JhZEVYVCB0ZXh0dXJlR3JhZCdcblx0XHRdLmpvaW4oICdcXG4nICkgKyAnXFxuJyArIHByZWZpeEZyYWdtZW50O1xuXG5cdH1cblxuXHR2YXIgdmVydGV4R2xzbCA9IHByZWZpeFZlcnRleCArIHZlcnRleFNoYWRlcjtcblx0dmFyIGZyYWdtZW50R2xzbCA9IHByZWZpeEZyYWdtZW50ICsgZnJhZ21lbnRTaGFkZXI7XG5cblx0Ly8gY29uc29sZS5sb2coICcqVkVSVEVYKicsIHZlcnRleEdsc2wgKTtcblx0Ly8gY29uc29sZS5sb2coICcqRlJBR01FTlQqJywgZnJhZ21lbnRHbHNsICk7XG5cblx0dmFyIGdsVmVydGV4U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMywgdmVydGV4R2xzbCApO1xuXHR2YXIgZ2xGcmFnbWVudFNoYWRlciA9IFdlYkdMU2hhZGVyKCBnbCwgMzU2MzIsIGZyYWdtZW50R2xzbCApO1xuXG5cdGdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Ly8gRm9yY2UgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSB0byBpbmRleCAwLlxuXG5cdGlmICggbWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCAwLCBtYXRlcmlhbC5pbmRleDBBdHRyaWJ1dGVOYW1lICk7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XG5cblx0XHQvLyBwcm9ncmFtcyB3aXRoIG1vcnBoVGFyZ2V0cyBkaXNwbGFjZSBwb3NpdGlvbiBvdXQgb2YgYXR0cmlidXRlIDBcblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsICdwb3NpdGlvbicgKTtcblxuXHR9XG5cblx0Z2wubGlua1Byb2dyYW0oIHByb2dyYW0gKTtcblxuXHR2YXIgcHJvZ3JhbUxvZyA9IGdsLmdldFByb2dyYW1JbmZvTG9nKCBwcm9ncmFtICkudHJpbSgpO1xuXHR2YXIgdmVydGV4TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xWZXJ0ZXhTaGFkZXIgKS50cmltKCk7XG5cdHZhciBmcmFnbWVudExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsRnJhZ21lbnRTaGFkZXIgKS50cmltKCk7XG5cblx0dmFyIHJ1bm5hYmxlID0gdHJ1ZTtcblx0dmFyIGhhdmVEaWFnbm9zdGljcyA9IHRydWU7XG5cblx0Ly8gY29uc29sZS5sb2coICcqKlZFUlRFWCoqJywgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVidWdfc2hhZGVycycgKS5nZXRUcmFuc2xhdGVkU2hhZGVyU291cmNlKCBnbFZlcnRleFNoYWRlciApICk7XG5cdC8vIGNvbnNvbGUubG9nKCAnKipGUkFHTUVOVCoqJywgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVidWdfc2hhZGVycycgKS5nZXRUcmFuc2xhdGVkU2hhZGVyU291cmNlKCBnbEZyYWdtZW50U2hhZGVyICkgKTtcblxuXHRpZiAoIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0cnVubmFibGUgPSBmYWxzZTtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFByb2dyYW06IHNoYWRlciBlcnJvcjogJywgZ2wuZ2V0RXJyb3IoKSwgJzM1NzE1JywgZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MTUgKSwgJ2dsLmdldFByb2dyYW1JbmZvTG9nJywgcHJvZ3JhbUxvZywgdmVydGV4TG9nLCBmcmFnbWVudExvZyApO1xuXG5cdH0gZWxzZSBpZiAoIHByb2dyYW1Mb2cgIT09ICcnICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBnbC5nZXRQcm9ncmFtSW5mb0xvZygpJywgcHJvZ3JhbUxvZyApO1xuXG5cdH0gZWxzZSBpZiAoIHZlcnRleExvZyA9PT0gJycgfHwgZnJhZ21lbnRMb2cgPT09ICcnICkge1xuXG5cdFx0aGF2ZURpYWdub3N0aWNzID0gZmFsc2U7XG5cblx0fVxuXG5cdGlmICggaGF2ZURpYWdub3N0aWNzICkge1xuXG5cdFx0dGhpcy5kaWFnbm9zdGljcyA9IHtcblxuXHRcdFx0cnVubmFibGU6IHJ1bm5hYmxlLFxuXHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxuXG5cdFx0XHRwcm9ncmFtTG9nOiBwcm9ncmFtTG9nLFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IHtcblxuXHRcdFx0XHRsb2c6IHZlcnRleExvZyxcblx0XHRcdFx0cHJlZml4OiBwcmVmaXhWZXJ0ZXhcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHtcblxuXHRcdFx0XHRsb2c6IGZyYWdtZW50TG9nLFxuXHRcdFx0XHRwcmVmaXg6IHByZWZpeEZyYWdtZW50XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdC8vIGNsZWFuIHVwXG5cblx0Z2wuZGVsZXRlU2hhZGVyKCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5kZWxldGVTaGFkZXIoIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgdW5pZm9ybSBsb2NhdGlvbnNcblxuXHR2YXIgY2FjaGVkVW5pZm9ybXM7XG5cblx0dGhpcy5nZXRVbmlmb3JtcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY2FjaGVkVW5pZm9ybXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2FjaGVkVW5pZm9ybXMgPSBuZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0sIHJlbmRlcmVyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkVW5pZm9ybXM7XG5cblx0fTtcblxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgYXR0cmlidXRlIGxvY2F0aW9uc1xuXG5cdHZhciBjYWNoZWRBdHRyaWJ1dGVzO1xuXG5cdHRoaXMuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY2FjaGVkQXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjYWNoZWRBdHRyaWJ1dGVzID0gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkQXR0cmlidXRlcztcblxuXHR9O1xuXG5cdC8vIGZyZWUgcmVzb3VyY2VcblxuXHR0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRnbC5kZWxldGVQcm9ncmFtKCBwcm9ncmFtICk7XG5cdFx0dGhpcy5wcm9ncmFtID0gdW5kZWZpbmVkO1xuXG5cdH07XG5cblx0Ly8gREVQUkVDQVRFRFxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiAudW5pZm9ybXMgaXMgbm93IC5nZXRVbmlmb3JtcygpLicgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0VW5pZm9ybXMoKTtcblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW06IC5hdHRyaWJ1dGVzIGlzIG5vdyAuZ2V0QXR0cmlidXRlcygpLicgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0gKTtcblxuXG5cdC8vXG5cblx0dGhpcy5uYW1lID0gc2hhZGVyLm5hbWU7XG5cdHRoaXMuaWQgPSBwcm9ncmFtSWRDb3VudCArKztcblx0dGhpcy5jb2RlID0gY29kZTtcblx0dGhpcy51c2VkVGltZXMgPSAxO1xuXHR0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IGdsVmVydGV4U2hhZGVyO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZ2xGcmFnbWVudFNoYWRlcjtcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xQcm9ncmFtcyggcmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHR2YXIgcHJvZ3JhbXMgPSBbXTtcblxuXHR2YXIgc2hhZGVySURzID0ge1xuXHRcdE1lc2hEZXB0aE1hdGVyaWFsOiAnZGVwdGgnLFxuXHRcdE1lc2hEaXN0YW5jZU1hdGVyaWFsOiAnZGlzdGFuY2VSR0JBJyxcblx0XHRNZXNoTm9ybWFsTWF0ZXJpYWw6ICdub3JtYWwnLFxuXHRcdE1lc2hCYXNpY01hdGVyaWFsOiAnYmFzaWMnLFxuXHRcdE1lc2hMYW1iZXJ0TWF0ZXJpYWw6ICdsYW1iZXJ0Jyxcblx0XHRNZXNoUGhvbmdNYXRlcmlhbDogJ3Bob25nJyxcblx0XHRNZXNoVG9vbk1hdGVyaWFsOiAncGhvbmcnLFxuXHRcdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXG5cdFx0TGluZUJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJyxcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXG5cdFx0U2hhZG93TWF0ZXJpYWw6ICdzaGFkb3cnLFxuXHRcdFNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJ1xuXHR9O1xuXG5cdHZhciBwYXJhbWV0ZXJOYW1lcyA9IFtcblx0XHRcInByZWNpc2lvblwiLCBcInN1cHBvcnRzVmVydGV4VGV4dHVyZXNcIiwgXCJtYXBcIiwgXCJtYXBFbmNvZGluZ1wiLCBcIm1hdGNhcFwiLCBcIm1hdGNhcEVuY29kaW5nXCIsIFwiZW52TWFwXCIsIFwiZW52TWFwTW9kZVwiLCBcImVudk1hcEVuY29kaW5nXCIsXG5cdFx0XCJsaWdodE1hcFwiLCBcImFvTWFwXCIsIFwiZW1pc3NpdmVNYXBcIiwgXCJlbWlzc2l2ZU1hcEVuY29kaW5nXCIsIFwiYnVtcE1hcFwiLCBcIm5vcm1hbE1hcFwiLCBcIm9iamVjdFNwYWNlTm9ybWFsTWFwXCIsIFwiZGlzcGxhY2VtZW50TWFwXCIsIFwic3BlY3VsYXJNYXBcIixcblx0XHRcInJvdWdobmVzc01hcFwiLCBcIm1ldGFsbmVzc01hcFwiLCBcImdyYWRpZW50TWFwXCIsXG5cdFx0XCJhbHBoYU1hcFwiLCBcImNvbWJpbmVcIiwgXCJ2ZXJ0ZXhDb2xvcnNcIiwgXCJmb2dcIiwgXCJ1c2VGb2dcIiwgXCJmb2dFeHBcIixcblx0XHRcImZsYXRTaGFkaW5nXCIsIFwic2l6ZUF0dGVudWF0aW9uXCIsIFwibG9nYXJpdGhtaWNEZXB0aEJ1ZmZlclwiLCBcInNraW5uaW5nXCIsXG5cdFx0XCJtYXhCb25lc1wiLCBcInVzZVZlcnRleFRleHR1cmVcIiwgXCJtb3JwaFRhcmdldHNcIiwgXCJtb3JwaE5vcm1hbHNcIixcblx0XHRcIm1heE1vcnBoVGFyZ2V0c1wiLCBcIm1heE1vcnBoTm9ybWFsc1wiLCBcInByZW11bHRpcGxpZWRBbHBoYVwiLFxuXHRcdFwibnVtRGlyTGlnaHRzXCIsIFwibnVtUG9pbnRMaWdodHNcIiwgXCJudW1TcG90TGlnaHRzXCIsIFwibnVtSGVtaUxpZ2h0c1wiLCBcIm51bVJlY3RBcmVhTGlnaHRzXCIsXG5cdFx0XCJzaGFkb3dNYXBFbmFibGVkXCIsIFwic2hhZG93TWFwVHlwZVwiLCBcInRvbmVNYXBwaW5nXCIsICdwaHlzaWNhbGx5Q29ycmVjdExpZ2h0cycsXG5cdFx0XCJhbHBoYVRlc3RcIiwgXCJkb3VibGVTaWRlZFwiLCBcImZsaXBTaWRlZFwiLCBcIm51bUNsaXBwaW5nUGxhbmVzXCIsIFwibnVtQ2xpcEludGVyc2VjdGlvblwiLCBcImRlcHRoUGFja2luZ1wiLCBcImRpdGhlcmluZ1wiXG5cdF07XG5cblxuXHRmdW5jdGlvbiBhbGxvY2F0ZUJvbmVzKCBvYmplY3QgKSB7XG5cblx0XHR2YXIgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XG5cdFx0dmFyIGJvbmVzID0gc2tlbGV0b24uYm9uZXM7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzICkge1xuXG5cdFx0XHRyZXR1cm4gMTAyNDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGRlZmF1bHQgZm9yIHdoZW4gb2JqZWN0IGlzIG5vdCBzcGVjaWZpZWRcblx0XHRcdC8vICggZm9yIGV4YW1wbGUgd2hlbiBwcmVidWlsZGluZyBzaGFkZXIgdG8gYmUgdXNlZCB3aXRoIG11bHRpcGxlIG9iamVjdHMgKVxuXHRcdFx0Ly9cblx0XHRcdC8vICAtIGxlYXZlIHNvbWUgZXh0cmEgc3BhY2UgZm9yIG90aGVyIHVuaWZvcm1zXG5cdFx0XHQvLyAgLSBsaW1pdCBoZXJlIGlzIEFOR0xFJ3MgMjU0IG1heCB1bmlmb3JtIHZlY3RvcnNcblx0XHRcdC8vICAgICh1cCB0byA1NCBzaG91bGQgYmUgc2FmZSlcblxuXHRcdFx0dmFyIG5WZXJ0ZXhVbmlmb3JtcyA9IGNhcGFiaWxpdGllcy5tYXhWZXJ0ZXhVbmlmb3Jtcztcblx0XHRcdHZhciBuVmVydGV4TWF0cmljZXMgPSBNYXRoLmZsb29yKCAoIG5WZXJ0ZXhVbmlmb3JtcyAtIDIwICkgLyA0ICk7XG5cblx0XHRcdHZhciBtYXhCb25lcyA9IE1hdGgubWluKCBuVmVydGV4TWF0cmljZXMsIGJvbmVzLmxlbmd0aCApO1xuXG5cdFx0XHRpZiAoIG1heEJvbmVzIDwgYm9uZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFNrZWxldG9uIGhhcyAnICsgYm9uZXMubGVuZ3RoICsgJyBib25lcy4gVGhpcyBHUFUgc3VwcG9ydHMgJyArIG1heEJvbmVzICsgJy4nICk7XG5cdFx0XHRcdHJldHVybiAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXhCb25lcztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWFwLCBnYW1tYU92ZXJyaWRlTGluZWFyICkge1xuXG5cdFx0dmFyIGVuY29kaW5nO1xuXG5cdFx0aWYgKCAhIG1hcCApIHtcblxuXHRcdFx0ZW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcblxuXHRcdH0gZWxzZSBpZiAoIG1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGVuY29kaW5nID0gbWFwLmVuY29kaW5nO1xuXG5cdFx0fSBlbHNlIGlmICggbWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5XZWJHTFByb2dyYW1zLmdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXA6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIgKTtcblx0XHRcdGVuY29kaW5nID0gbWFwLnRleHR1cmUuZW5jb2Rpbmc7XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIFdlYkdMUmVuZGVyZXIuZ2FtbWFJbnB1dC9nYW1tYU91dHB1dCBwYXJhbWV0ZXIsIHNob3VsZCBwcm9iYWJseSBiZSByZW1vdmVkIGF0IHNvbWUgcG9pbnQuXG5cdFx0aWYgKCBlbmNvZGluZyA9PT0gTGluZWFyRW5jb2RpbmcgJiYgZ2FtbWFPdmVycmlkZUxpbmVhciApIHtcblxuXHRcdFx0ZW5jb2RpbmcgPSBHYW1tYUVuY29kaW5nO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVuY29kaW5nO1xuXG5cdH1cblxuXHR0aGlzLmdldFBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoIG1hdGVyaWFsLCBsaWdodHMsIHNoYWRvd3MsIGZvZywgbkNsaXBQbGFuZXMsIG5DbGlwSW50ZXJzZWN0aW9uLCBvYmplY3QgKSB7XG5cblx0XHR2YXIgc2hhZGVySUQgPSBzaGFkZXJJRHNbIG1hdGVyaWFsLnR5cGUgXTtcblxuXHRcdC8vIGhldXJpc3RpY3MgdG8gY3JlYXRlIHNoYWRlciBwYXJhbWV0ZXJzIGFjY29yZGluZyB0byBsaWdodHMgaW4gdGhlIHNjZW5lXG5cdFx0Ly8gKG5vdCB0byBibG93IG92ZXIgbWF4TGlnaHRzIGJ1ZGdldClcblxuXHRcdHZhciBtYXhCb25lcyA9IG9iamVjdC5pc1NraW5uZWRNZXNoID8gYWxsb2NhdGVCb25lcyggb2JqZWN0ICkgOiAwO1xuXHRcdHZhciBwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5wcmVjaXNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5nZXRNYXhQcmVjaXNpb24oIG1hdGVyaWFsLnByZWNpc2lvbiApO1xuXG5cdFx0XHRpZiAoIHByZWNpc2lvbiAhPT0gbWF0ZXJpYWwucHJlY2lzaW9uICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbS5nZXRQYXJhbWV0ZXJzOicsIG1hdGVyaWFsLnByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgcHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHR2YXIgcGFyYW1ldGVycyA9IHtcblxuXHRcdFx0c2hhZGVySUQ6IHNoYWRlcklELFxuXG5cdFx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblx0XHRcdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IGNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcyxcblx0XHRcdG91dHB1dEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCAoICEgY3VycmVudFJlbmRlclRhcmdldCApID8gbnVsbCA6IGN1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZSwgcmVuZGVyZXIuZ2FtbWFPdXRwdXQgKSxcblx0XHRcdG1hcDogISEgbWF0ZXJpYWwubWFwLFxuXHRcdFx0bWFwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hdGVyaWFsLm1hcCwgcmVuZGVyZXIuZ2FtbWFJbnB1dCApLFxuXHRcdFx0bWF0Y2FwOiAhISBtYXRlcmlhbC5tYXRjYXAsXG5cdFx0XHRtYXRjYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwubWF0Y2FwLCByZW5kZXJlci5nYW1tYUlucHV0ICksXG5cdFx0XHRlbnZNYXA6ICEhIG1hdGVyaWFsLmVudk1hcCxcblx0XHRcdGVudk1hcE1vZGU6IG1hdGVyaWFsLmVudk1hcCAmJiBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyxcblx0XHRcdGVudk1hcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXRlcmlhbC5lbnZNYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQgKSxcblx0XHRcdGVudk1hcEN1YmVVVjogKCAhISBtYXRlcmlhbC5lbnZNYXAgKSAmJiAoICggbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcgPT09IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nICkgfHwgKCBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcgKSApLFxuXHRcdFx0bGlnaHRNYXA6ICEhIG1hdGVyaWFsLmxpZ2h0TWFwLFxuXHRcdFx0YW9NYXA6ICEhIG1hdGVyaWFsLmFvTWFwLFxuXHRcdFx0ZW1pc3NpdmVNYXA6ICEhIG1hdGVyaWFsLmVtaXNzaXZlTWFwLFxuXHRcdFx0ZW1pc3NpdmVNYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwuZW1pc3NpdmVNYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQgKSxcblx0XHRcdGJ1bXBNYXA6ICEhIG1hdGVyaWFsLmJ1bXBNYXAsXG5cdFx0XHRub3JtYWxNYXA6ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCxcblx0XHRcdG9iamVjdFNwYWNlTm9ybWFsTWFwOiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBPYmplY3RTcGFjZU5vcm1hbE1hcCxcblx0XHRcdGRpc3BsYWNlbWVudE1hcDogISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLFxuXHRcdFx0cm91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsXG5cdFx0XHRtZXRhbG5lc3NNYXA6ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCxcblx0XHRcdHNwZWN1bGFyTWFwOiAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCxcblx0XHRcdGFscGhhTWFwOiAhISBtYXRlcmlhbC5hbHBoYU1hcCxcblxuXHRcdFx0Z3JhZGllbnRNYXA6ICEhIG1hdGVyaWFsLmdyYWRpZW50TWFwLFxuXG5cdFx0XHRjb21iaW5lOiBtYXRlcmlhbC5jb21iaW5lLFxuXG5cdFx0XHR2ZXJ0ZXhDb2xvcnM6IG1hdGVyaWFsLnZlcnRleENvbG9ycyxcblxuXHRcdFx0Zm9nOiAhISBmb2csXG5cdFx0XHR1c2VGb2c6IG1hdGVyaWFsLmZvZyxcblx0XHRcdGZvZ0V4cDogKCBmb2cgJiYgZm9nLmlzRm9nRXhwMiApLFxuXG5cdFx0XHRmbGF0U2hhZGluZzogbWF0ZXJpYWwuZmxhdFNoYWRpbmcsXG5cblx0XHRcdHNpemVBdHRlbnVhdGlvbjogbWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uLFxuXHRcdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIsXG5cblx0XHRcdHNraW5uaW5nOiBtYXRlcmlhbC5za2lubmluZyAmJiBtYXhCb25lcyA+IDAsXG5cdFx0XHRtYXhCb25lczogbWF4Qm9uZXMsXG5cdFx0XHR1c2VWZXJ0ZXhUZXh0dXJlOiBjYXBhYmlsaXRpZXMuZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcblxuXHRcdFx0bW9ycGhUYXJnZXRzOiBtYXRlcmlhbC5tb3JwaFRhcmdldHMsXG5cdFx0XHRtb3JwaE5vcm1hbHM6IG1hdGVyaWFsLm1vcnBoTm9ybWFscyxcblx0XHRcdG1heE1vcnBoVGFyZ2V0czogcmVuZGVyZXIubWF4TW9ycGhUYXJnZXRzLFxuXHRcdFx0bWF4TW9ycGhOb3JtYWxzOiByZW5kZXJlci5tYXhNb3JwaE5vcm1hbHMsXG5cblx0XHRcdG51bURpckxpZ2h0czogbGlnaHRzLmRpcmVjdGlvbmFsLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRzOiBsaWdodHMucG9pbnQubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0czogbGlnaHRzLnNwb3QubGVuZ3RoLFxuXHRcdFx0bnVtUmVjdEFyZWFMaWdodHM6IGxpZ2h0cy5yZWN0QXJlYS5sZW5ndGgsXG5cdFx0XHRudW1IZW1pTGlnaHRzOiBsaWdodHMuaGVtaS5sZW5ndGgsXG5cblx0XHRcdG51bUNsaXBwaW5nUGxhbmVzOiBuQ2xpcFBsYW5lcyxcblx0XHRcdG51bUNsaXBJbnRlcnNlY3Rpb246IG5DbGlwSW50ZXJzZWN0aW9uLFxuXG5cdFx0XHRkaXRoZXJpbmc6IG1hdGVyaWFsLmRpdGhlcmluZyxcblxuXHRcdFx0c2hhZG93TWFwRW5hYmxlZDogcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgJiYgb2JqZWN0LnJlY2VpdmVTaGFkb3cgJiYgc2hhZG93cy5sZW5ndGggPiAwLFxuXHRcdFx0c2hhZG93TWFwVHlwZTogcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUsXG5cblx0XHRcdHRvbmVNYXBwaW5nOiByZW5kZXJlci50b25lTWFwcGluZyxcblx0XHRcdHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzOiByZW5kZXJlci5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyxcblxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEsXG5cblx0XHRcdGFscGhhVGVzdDogbWF0ZXJpYWwuYWxwaGFUZXN0LFxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHRkZXB0aFBhY2tpbmc6ICggbWF0ZXJpYWwuZGVwdGhQYWNraW5nICE9PSB1bmRlZmluZWQgKSA/IG1hdGVyaWFsLmRlcHRoUGFja2luZyA6IGZhbHNlXG5cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHBhcmFtZXRlcnM7XG5cblx0fTtcblxuXHR0aGlzLmdldFByb2dyYW1Db2RlID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApIHtcblxuXHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciApO1xuXHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWwudmVydGV4U2hhZGVyICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIG5hbWUgaW4gbWF0ZXJpYWwuZGVmaW5lcyApIHtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBuYW1lICk7XG5cdFx0XHRcdGFycmF5LnB1c2goIG1hdGVyaWFsLmRlZmluZXNbIG5hbWUgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBwYXJhbWV0ZXJOYW1lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnNbIHBhcmFtZXRlck5hbWVzWyBpIF0gXSApO1xuXG5cdFx0fVxuXG5cdFx0YXJyYXkucHVzaCggbWF0ZXJpYWwub25CZWZvcmVDb21waWxlLnRvU3RyaW5nKCkgKTtcblxuXHRcdGFycmF5LnB1c2goIHJlbmRlcmVyLmdhbW1hT3V0cHV0ICk7XG5cblx0XHRhcnJheS5wdXNoKCByZW5kZXJlci5nYW1tYUZhY3RvciApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9O1xuXG5cdHRoaXMuYWNxdWlyZVByb2dyYW0gPSBmdW5jdGlvbiAoIG1hdGVyaWFsLCBzaGFkZXIsIHBhcmFtZXRlcnMsIGNvZGUgKSB7XG5cblx0XHR2YXIgcHJvZ3JhbTtcblxuXHRcdC8vIENoZWNrIGlmIGNvZGUgaGFzIGJlZW4gYWxyZWFkeSBjb21waWxlZFxuXHRcdGZvciAoIHZhciBwID0gMCwgcGwgPSBwcm9ncmFtcy5sZW5ndGg7IHAgPCBwbDsgcCArKyApIHtcblxuXHRcdFx0dmFyIHByb2dyYW1JbmZvID0gcHJvZ3JhbXNbIHAgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtSW5mby5jb2RlID09PSBjb2RlICkge1xuXG5cdFx0XHRcdHByb2dyYW0gPSBwcm9ncmFtSW5mbztcblx0XHRcdFx0KysgcHJvZ3JhbS51c2VkVGltZXM7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtID0gbmV3IFdlYkdMUHJvZ3JhbSggcmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNvZGUsIG1hdGVyaWFsLCBzaGFkZXIsIHBhcmFtZXRlcnMsIGNhcGFiaWxpdGllcyApO1xuXHRcdFx0cHJvZ3JhbXMucHVzaCggcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fTtcblxuXHR0aGlzLnJlbGVhc2VQcm9ncmFtID0gZnVuY3Rpb24gKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCAtLSBwcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGZyb20gdW5vcmRlcmVkIHNldFxuXHRcdFx0dmFyIGkgPSBwcm9ncmFtcy5pbmRleE9mKCBwcm9ncmFtICk7XG5cdFx0XHRwcm9ncmFtc1sgaSBdID0gcHJvZ3JhbXNbIHByb2dyYW1zLmxlbmd0aCAtIDEgXTtcblx0XHRcdHByb2dyYW1zLnBvcCgpO1xuXG5cdFx0XHQvLyBGcmVlIFdlYkdMIHJlc291cmNlc1xuXHRcdFx0cHJvZ3JhbS5kZXN0cm95KCk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLyBFeHBvc2VkIGZvciByZXNvdXJjZSBtb25pdG9yaW5nICYgZXJyb3IgZmVlZGJhY2sgdmlhIHJlbmRlcmVyLmluZm86XG5cdHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgZm9yZGFjaW91cyAvIGZvcmRhY2lvdXMuZ2l0aHViLmlvXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xQcm9wZXJ0aWVzKCkge1xuXG5cdHZhciBwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCApIHtcblxuXHRcdHZhciBtYXAgPSBwcm9wZXJ0aWVzLmdldCggb2JqZWN0ICk7XG5cblx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXAgPSB7fTtcblx0XHRcdHByb3BlcnRpZXMuc2V0KCBvYmplY3QsIG1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBvYmplY3QgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBrZXksIHZhbHVlICkge1xuXG5cdFx0cHJvcGVydGllcy5nZXQoIG9iamVjdCApWyBrZXkgXSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBwYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5wcm9ncmFtICYmIGIucHJvZ3JhbSAmJiBhLnByb2dyYW0gIT09IGIucHJvZ3JhbSApIHtcblxuXHRcdHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHtcblxuXHRcdHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcblxuXHR9IGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xuXG5cdHZhciByZW5kZXJJdGVtcyA9IFtdO1xuXHR2YXIgcmVuZGVySXRlbXNJbmRleCA9IDA7XG5cblx0dmFyIG9wYXF1ZSA9IFtdO1xuXHR2YXIgdHJhbnNwYXJlbnQgPSBbXTtcblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXG5cdFx0cmVuZGVySXRlbXNJbmRleCA9IDA7XG5cblx0XHRvcGFxdWUubGVuZ3RoID0gMDtcblx0XHR0cmFuc3BhcmVudC5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHosIGdyb3VwICkge1xuXG5cdFx0dmFyIHJlbmRlckl0ZW0gPSByZW5kZXJJdGVtc1sgcmVuZGVySXRlbXNJbmRleCBdO1xuXG5cdFx0aWYgKCByZW5kZXJJdGVtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlckl0ZW0gPSB7XG5cdFx0XHRcdGlkOiBvYmplY3QuaWQsXG5cdFx0XHRcdG9iamVjdDogb2JqZWN0LFxuXHRcdFx0XHRnZW9tZXRyeTogZ2VvbWV0cnksXG5cdFx0XHRcdG1hdGVyaWFsOiBtYXRlcmlhbCxcblx0XHRcdFx0cHJvZ3JhbTogbWF0ZXJpYWwucHJvZ3JhbSxcblx0XHRcdFx0cmVuZGVyT3JkZXI6IG9iamVjdC5yZW5kZXJPcmRlcixcblx0XHRcdFx0ejogeixcblx0XHRcdFx0Z3JvdXA6IGdyb3VwXG5cdFx0XHR9O1xuXG5cdFx0XHRyZW5kZXJJdGVtc1sgcmVuZGVySXRlbXNJbmRleCBdID0gcmVuZGVySXRlbTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlckl0ZW0uaWQgPSBvYmplY3QuaWQ7XG5cdFx0XHRyZW5kZXJJdGVtLm9iamVjdCA9IG9iamVjdDtcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHRcdHJlbmRlckl0ZW0ubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblx0XHRcdHJlbmRlckl0ZW0ucHJvZ3JhbSA9IG1hdGVyaWFsLnByb2dyYW07XG5cdFx0XHRyZW5kZXJJdGVtLnJlbmRlck9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS56ID0gejtcblx0XHRcdHJlbmRlckl0ZW0uZ3JvdXAgPSBncm91cDtcblxuXHRcdH1cblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggKys7XG5cblx0XHRyZXR1cm4gcmVuZGVySXRlbTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHosIGdyb3VwICkge1xuXG5cdFx0dmFyIHJlbmRlckl0ZW0gPSBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHosIGdyb3VwICk7XG5cblx0XHQoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlID8gdHJhbnNwYXJlbnQgOiBvcGFxdWUgKS5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVuc2hpZnQoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCB6LCBncm91cCApIHtcblxuXHRcdHZhciByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCB6LCBncm91cCApO1xuXG5cdFx0KCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSA/IHRyYW5zcGFyZW50IDogb3BhcXVlICkudW5zaGlmdCggcmVuZGVySXRlbSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzb3J0KCkge1xuXG5cdFx0aWYgKCBvcGFxdWUubGVuZ3RoID4gMSApIG9wYXF1ZS5zb3J0KCBwYWludGVyU29ydFN0YWJsZSApO1xuXHRcdGlmICggdHJhbnNwYXJlbnQubGVuZ3RoID4gMSApIHRyYW5zcGFyZW50LnNvcnQoIHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG9wYXF1ZTogb3BhcXVlLFxuXHRcdHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcblxuXHRcdGluaXQ6IGluaXQsXG5cdFx0cHVzaDogcHVzaCxcblx0XHR1bnNoaWZ0OiB1bnNoaWZ0LFxuXG5cdFx0c29ydDogc29ydFxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdHMoKSB7XG5cblx0dmFyIGxpc3RzID0ge307XG5cblx0ZnVuY3Rpb24gZ2V0KCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0dmFyIGNhbWVyYXMgPSBsaXN0c1sgc2NlbmUuaWQgXTtcblx0XHR2YXIgbGlzdDtcblx0XHRpZiAoIGNhbWVyYXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdGxpc3RzWyBzY2VuZS5pZCBdID0ge307XG5cdFx0XHRsaXN0c1sgc2NlbmUuaWQgXVsgY2FtZXJhLmlkIF0gPSBsaXN0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bGlzdCA9IGNhbWVyYXNbIGNhbWVyYS5pZCBdO1xuXHRcdFx0aWYgKCBsaXN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdFx0Y2FtZXJhc1sgY2FtZXJhLmlkIF0gPSBsaXN0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGxpc3RzID0ge307XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBVbmlmb3Jtc0NhY2hlKCkge1xuXG5cdHZhciBsaWdodHMgPSB7fTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIGxpZ2h0c1sgbGlnaHQuaWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBsaWdodHNbIGxpZ2h0LmlkIF07XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHVuaWZvcm1zO1xuXG5cdFx0XHRzd2l0Y2ggKCBsaWdodC50eXBlICkge1xuXG5cdFx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXG5cdFx0XHRcdFx0XHRzaGFkb3c6IGZhbHNlLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiAwLFxuXHRcdFx0XHRcdFx0Y29uZUNvczogMCxcblx0XHRcdFx0XHRcdHBlbnVtYnJhQ29zOiAwLFxuXHRcdFx0XHRcdFx0ZGVjYXk6IDAsXG5cblx0XHRcdFx0XHRcdHNoYWRvdzogZmFsc2UsXG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiAwLFxuXHRcdFx0XHRcdFx0ZGVjYXk6IDAsXG5cblx0XHRcdFx0XHRcdHNoYWRvdzogZmFsc2UsXG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYU5lYXI6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dDYW1lcmFGYXI6IDEwMDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRza3lDb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRncm91bmRDb2xvcjogbmV3IENvbG9yKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRoYWxmV2lkdGg6IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRoYWxmSGVpZ2h0OiBuZXcgVmVjdG9yMygpXG5cdFx0XHRcdFx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogc2V0IFJlY3RBcmVhTGlnaHQgc2hhZG93IHVuaWZvcm1zXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRsaWdodHNbIGxpZ2h0LmlkIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxudmFyIGNvdW50ID0gMDtcblxuZnVuY3Rpb24gV2ViR0xMaWdodHMoKSB7XG5cblx0dmFyIGNhY2hlID0gbmV3IFVuaWZvcm1zQ2FjaGUoKTtcblxuXHR2YXIgc3RhdGUgPSB7XG5cblx0XHRpZDogY291bnQgKyssXG5cblx0XHRoYXNoOiB7XG5cdFx0XHRzdGF0ZUlEOiAtIDEsXG5cdFx0XHRkaXJlY3Rpb25hbExlbmd0aDogLSAxLFxuXHRcdFx0cG9pbnRMZW5ndGg6IC0gMSxcblx0XHRcdHNwb3RMZW5ndGg6IC0gMSxcblx0XHRcdHJlY3RBcmVhTGVuZ3RoOiAtIDEsXG5cdFx0XHRoZW1pTGVuZ3RoOiAtIDEsXG5cdFx0XHRzaGFkb3dzTGVuZ3RoOiAtIDFcblx0XHR9LFxuXG5cdFx0YW1iaWVudDogWyAwLCAwLCAwIF0sXG5cdFx0ZGlyZWN0aW9uYWw6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWFwOiBbXSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hdHJpeDogW10sXG5cdFx0c3BvdDogW10sXG5cdFx0c3BvdFNoYWRvd01hcDogW10sXG5cdFx0c3BvdFNoYWRvd01hdHJpeDogW10sXG5cdFx0cmVjdEFyZWE6IFtdLFxuXHRcdHBvaW50OiBbXSxcblx0XHRwb2ludFNoYWRvd01hcDogW10sXG5cdFx0cG9pbnRTaGFkb3dNYXRyaXg6IFtdLFxuXHRcdGhlbWk6IFtdXG5cblx0fTtcblxuXHR2YXIgdmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBtYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIG1hdHJpeDQyID0gbmV3IE1hdHJpeDQoKTtcblxuXHRmdW5jdGlvbiBzZXR1cCggbGlnaHRzLCBzaGFkb3dzLCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgciA9IDAsIGcgPSAwLCBiID0gMDtcblxuXHRcdHZhciBkaXJlY3Rpb25hbExlbmd0aCA9IDA7XG5cdFx0dmFyIHBvaW50TGVuZ3RoID0gMDtcblx0XHR2YXIgc3BvdExlbmd0aCA9IDA7XG5cdFx0dmFyIHJlY3RBcmVhTGVuZ3RoID0gMDtcblx0XHR2YXIgaGVtaUxlbmd0aCA9IDA7XG5cblx0XHR2YXIgdmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cblx0XHRcdHZhciBjb2xvciA9IGxpZ2h0LmNvbG9yO1xuXHRcdFx0dmFyIGludGVuc2l0eSA9IGxpZ2h0LmludGVuc2l0eTtcblx0XHRcdHZhciBkaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXG5cdFx0XHR2YXIgc2hhZG93TWFwID0gKCBsaWdodC5zaGFkb3cgJiYgbGlnaHQuc2hhZG93Lm1hcCApID8gbGlnaHQuc2hhZG93Lm1hcC50ZXh0dXJlIDogbnVsbDtcblxuXHRcdFx0aWYgKCBsaWdodC5pc0FtYmllbnRMaWdodCApIHtcblxuXHRcdFx0XHRyICs9IGNvbG9yLnIgKiBpbnRlbnNpdHk7XG5cdFx0XHRcdGcgKz0gY29sb3IuZyAqIGludGVuc2l0eTtcblx0XHRcdFx0YiArPSBjb2xvci5iICogaW50ZW5zaXR5O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBkaXJlY3Rpb25hbExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRkaXJlY3Rpb25hbExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNTcG90TGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc3ViKCB2ZWN0b3IzICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb25lQ29zID0gTWF0aC5jb3MoIGxpZ2h0LmFuZ2xlICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBlbnVtYnJhQ29zID0gTWF0aC5jb3MoIGxpZ2h0LmFuZ2xlICogKCAxIC0gbGlnaHQucGVudW1icmEgKSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcFsgc3BvdExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRzdGF0ZS5zcG90U2hhZG93TWF0cml4WyBzcG90TGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXHRcdFx0XHRzdGF0ZS5zcG90WyBzcG90TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRzcG90TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1JlY3RBcmVhTGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdC8vIChhKSBpbnRlbnNpdHkgaXMgdGhlIHRvdGFsIHZpc2libGUgbGlnaHQgZW1pdHRlZFxuXHRcdFx0XHQvL3VuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAvICggbGlnaHQud2lkdGggKiBsaWdodC5oZWlnaHQgKiBNYXRoLlBJICkgKTtcblxuXHRcdFx0XHQvLyAoYikgaW50ZW5zaXR5IGlzIHRoZSBicmlnaHRuZXNzIG9mIHRoZSBsaWdodFxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdC8vIGV4dHJhY3QgbG9jYWwgcm90YXRpb24gb2YgbGlnaHQgdG8gZGVyaXZlIHdpZHRoL2hlaWdodCBoYWxmIHZlY3RvcnNcblx0XHRcdFx0bWF0cml4NDIuaWRlbnRpdHkoKTtcblx0XHRcdFx0bWF0cml4NC5jb3B5KCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRtYXRyaXg0LnByZW11bHRpcGx5KCB2aWV3TWF0cml4ICk7XG5cdFx0XHRcdG1hdHJpeDQyLmV4dHJhY3RSb3RhdGlvbiggbWF0cml4NCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZXaWR0aC5zZXQoIGxpZ2h0LndpZHRoICogMC41LCAwLjAsIDAuMCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LnNldCggMC4wLCBsaWdodC5oZWlnaHQgKiAwLjUsIDAuMCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZXaWR0aC5hcHBseU1hdHJpeDQoIG1hdHJpeDQyICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXG5cdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IGRpc3RhbmNlP1xuXHRcdFx0XHQvLyB1bmlmb3Jtcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuXG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhWyByZWN0QXJlYUxlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0cmVjdEFyZWFMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlzdGFuY2UgPSBsaWdodC5kaXN0YW5jZTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3cgPSBsaWdodC5jYXN0U2hhZG93O1xuXG5cdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdHZhciBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1cztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dNYXBTaXplID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93Q2FtZXJhTmVhciA9IHNoYWRvdy5jYW1lcmEubmVhcjtcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dDYW1lcmFGYXIgPSBzaGFkb3cuY2FtZXJhLmZhcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXBbIHBvaW50TGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4WyBwb2ludExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblx0XHRcdFx0c3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNreUNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5ncm91bmRDb2xvci5jb3B5KCBsaWdodC5ncm91bmRDb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRzdGF0ZS5oZW1pWyBoZW1pTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRoZW1pTGVuZ3RoICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hbWJpZW50WyAwIF0gPSByO1xuXHRcdHN0YXRlLmFtYmllbnRbIDEgXSA9IGc7XG5cdFx0c3RhdGUuYW1iaWVudFsgMiBdID0gYjtcblxuXHRcdHN0YXRlLmRpcmVjdGlvbmFsLmxlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoO1xuXHRcdHN0YXRlLnNwb3QubGVuZ3RoID0gc3BvdExlbmd0aDtcblx0XHRzdGF0ZS5yZWN0QXJlYS5sZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRzdGF0ZS5wb2ludC5sZW5ndGggPSBwb2ludExlbmd0aDtcblx0XHRzdGF0ZS5oZW1pLmxlbmd0aCA9IGhlbWlMZW5ndGg7XG5cblx0XHRzdGF0ZS5oYXNoLnN0YXRlSUQgPSBzdGF0ZS5pZDtcblx0XHRzdGF0ZS5oYXNoLmRpcmVjdGlvbmFsTGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0c3RhdGUuaGFzaC5wb2ludExlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdHN0YXRlLmhhc2guc3BvdExlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0c3RhdGUuaGFzaC5yZWN0QXJlYUxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xuXHRcdHN0YXRlLmhhc2guaGVtaUxlbmd0aCA9IGhlbWlMZW5ndGg7XG5cdFx0c3RhdGUuaGFzaC5zaGFkb3dzTGVuZ3RoID0gc2hhZG93cy5sZW5ndGg7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c2V0dXA6IHNldHVwLFxuXHRcdHN0YXRlOiBzdGF0ZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlKCkge1xuXG5cdHZhciBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoKTtcblxuXHR2YXIgbGlnaHRzQXJyYXkgPSBbXTtcblx0dmFyIHNoYWRvd3NBcnJheSA9IFtdO1xuXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cblx0XHRsaWdodHNBcnJheS5sZW5ndGggPSAwO1xuXHRcdHNoYWRvd3NBcnJheS5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoTGlnaHQoIGxpZ2h0ICkge1xuXG5cdFx0bGlnaHRzQXJyYXkucHVzaCggbGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFNoYWRvdyggc2hhZG93TGlnaHQgKSB7XG5cblx0XHRzaGFkb3dzQXJyYXkucHVzaCggc2hhZG93TGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBMaWdodHMoIGNhbWVyYSApIHtcblxuXHRcdGxpZ2h0cy5zZXR1cCggbGlnaHRzQXJyYXksIHNoYWRvd3NBcnJheSwgY2FtZXJhICk7XG5cblx0fVxuXG5cdHZhciBzdGF0ZSA9IHtcblx0XHRsaWdodHNBcnJheTogbGlnaHRzQXJyYXksXG5cdFx0c2hhZG93c0FycmF5OiBzaGFkb3dzQXJyYXksXG5cblx0XHRsaWdodHM6IGxpZ2h0c1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdCxcblx0XHRzdGF0ZTogc3RhdGUsXG5cdFx0c2V0dXBMaWdodHM6IHNldHVwTGlnaHRzLFxuXG5cdFx0cHVzaExpZ2h0OiBwdXNoTGlnaHQsXG5cdFx0cHVzaFNoYWRvdzogcHVzaFNoYWRvd1xuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyU3RhdGVzKCkge1xuXG5cdHZhciByZW5kZXJTdGF0ZXMgPSB7fTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgcmVuZGVyU3RhdGU7XG5cblx0XHRpZiAoIHJlbmRlclN0YXRlc1sgc2NlbmUuaWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJTdGF0ZSA9IG5ldyBXZWJHTFJlbmRlclN0YXRlKCk7XG5cdFx0XHRyZW5kZXJTdGF0ZXNbIHNjZW5lLmlkIF0gPSB7fTtcblx0XHRcdHJlbmRlclN0YXRlc1sgc2NlbmUuaWQgXVsgY2FtZXJhLmlkIF0gPSByZW5kZXJTdGF0ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdWyBjYW1lcmEuaWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoKTtcblx0XHRcdFx0cmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdWyBjYW1lcmEuaWQgXSA9IHJlbmRlclN0YXRlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdWyBjYW1lcmEuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlbmRlclN0YXRlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cmVuZGVyU3RhdGVzID0ge307XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cHM6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hEZXB0aE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaERlcHRoTWF0ZXJpYWwnO1xuXG5cdHRoaXMuZGVwdGhQYWNraW5nID0gQmFzaWNEZXB0aFBhY2tpbmc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoRGVwdGhNYXRlcmlhbDtcblxuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaERlcHRoTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVwdGhQYWNraW5nID0gc291cmNlLmRlcHRoUGFja2luZztcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICpcbiAqICByZWZlcmVuY2VQb3NpdGlvbjogPGZsb2F0PixcbiAqICBuZWFyRGlzdGFuY2U6IDxmbG9hdD4sXG4gKiAgZmFyRGlzdGFuY2U6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+XG4gKlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hEaXN0YW5jZU1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaERpc3RhbmNlTWF0ZXJpYWwnO1xuXG5cdHRoaXMucmVmZXJlbmNlUG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLm5lYXJEaXN0YW5jZSA9IDE7XG5cdHRoaXMuZmFyRGlzdGFuY2UgPSAxMDAwO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoRGlzdGFuY2VNYXRlcmlhbDtcblxuTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMucmVmZXJlbmNlUG9zaXRpb24uY29weSggc291cmNlLnJlZmVyZW5jZVBvc2l0aW9uICk7XG5cdHRoaXMubmVhckRpc3RhbmNlID0gc291cmNlLm5lYXJEaXN0YW5jZTtcblx0dGhpcy5mYXJEaXN0YW5jZSA9IHNvdXJjZS5mYXJEaXN0YW5jZTtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRvd01hcCggX3JlbmRlcmVyLCBfb2JqZWN0cywgbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0dmFyIF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKSxcblx0XHRfcHJvalNjcmVlbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCksXG5cblx0XHRfc2hhZG93TWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCksXG5cdFx0X21heFNoYWRvd01hcFNpemUgPSBuZXcgVmVjdG9yMiggbWF4VGV4dHVyZVNpemUsIG1heFRleHR1cmVTaXplICksXG5cblx0XHRfbG9va1RhcmdldCA9IG5ldyBWZWN0b3IzKCksXG5cdFx0X2xpZ2h0UG9zaXRpb25Xb3JsZCA9IG5ldyBWZWN0b3IzKCksXG5cblx0XHRfTW9ycGhpbmdGbGFnID0gMSxcblx0XHRfU2tpbm5pbmdGbGFnID0gMixcblxuXHRcdF9OdW1iZXJPZk1hdGVyaWFsVmFyaWFudHMgPSAoIF9Nb3JwaGluZ0ZsYWcgfCBfU2tpbm5pbmdGbGFnICkgKyAxLFxuXG5cdFx0X2RlcHRoTWF0ZXJpYWxzID0gbmV3IEFycmF5KCBfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzICksXG5cdFx0X2Rpc3RhbmNlTWF0ZXJpYWxzID0gbmV3IEFycmF5KCBfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzICksXG5cblx0XHRfbWF0ZXJpYWxDYWNoZSA9IHt9O1xuXG5cdHZhciBzaGFkb3dTaWRlID0geyAwOiBCYWNrU2lkZSwgMTogRnJvbnRTaWRlLCAyOiBEb3VibGVTaWRlIH07XG5cblx0dmFyIGN1YmVEaXJlY3Rpb25zID0gW1xuXHRcdG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcblx0XHRuZXcgVmVjdG9yMyggMCwgMCwgLSAxICksIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAtIDEsIDAgKVxuXHRdO1xuXG5cdHZhciBjdWJlVXBzID0gW1xuXHRcdG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksXG5cdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKVxuXHRdO1xuXG5cdHZhciBjdWJlMkRWaWV3UG9ydHMgPSBbXG5cdFx0bmV3IFZlY3RvcjQoKSwgbmV3IFZlY3RvcjQoKSwgbmV3IFZlY3RvcjQoKSxcblx0XHRuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpXG5cdF07XG5cblx0Ly8gaW5pdFxuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gX051bWJlck9mTWF0ZXJpYWxWYXJpYW50czsgKysgaSApIHtcblxuXHRcdHZhciB1c2VNb3JwaGluZyA9ICggaSAmIF9Nb3JwaGluZ0ZsYWcgKSAhPT0gMDtcblx0XHR2YXIgdXNlU2tpbm5pbmcgPSAoIGkgJiBfU2tpbm5pbmdGbGFnICkgIT09IDA7XG5cblx0XHR2YXIgZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCgge1xuXG5cdFx0XHRkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcsXG5cblx0XHRcdG1vcnBoVGFyZ2V0czogdXNlTW9ycGhpbmcsXG5cdFx0XHRza2lubmluZzogdXNlU2tpbm5pbmdcblxuXHRcdH0gKTtcblxuXHRcdF9kZXB0aE1hdGVyaWFsc1sgaSBdID0gZGVwdGhNYXRlcmlhbDtcblxuXHRcdC8vXG5cblx0XHR2YXIgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBNZXNoRGlzdGFuY2VNYXRlcmlhbCgge1xuXG5cdFx0XHRtb3JwaFRhcmdldHM6IHVzZU1vcnBoaW5nLFxuXHRcdFx0c2tpbm5pbmc6IHVzZVNraW5uaW5nXG5cblx0XHR9ICk7XG5cblx0XHRfZGlzdGFuY2VNYXRlcmlhbHNbIGkgXSA9IGRpc3RhbmNlTWF0ZXJpYWw7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlO1xuXHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy50eXBlID0gUENGU2hhZG93TWFwO1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBsaWdodHMsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdGlmICggc2NvcGUuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgJiYgc2NvcGUubmVlZHNVcGRhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0aWYgKCBsaWdodHMubGVuZ3RoID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Ly8gVE9ETyBDbGVhbiB1cCAobmVlZGVkIGluIGNhc2Ugb2YgY29udGV4dGxvc3QpXG5cdFx0dmFyIF9nbCA9IF9yZW5kZXJlci5jb250ZXh0O1xuXHRcdHZhciBfc3RhdGUgPSBfcmVuZGVyZXIuc3RhdGU7XG5cblx0XHQvLyBTZXQgR0wgc3RhdGUgZm9yIGRlcHRoIG1hcC5cblx0XHRfc3RhdGUuZGlzYWJsZSggMzA0MiApO1xuXHRcdF9zdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCAxLCAxLCAxLCAxICk7XG5cdFx0X3N0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdF9zdGF0ZS5zZXRTY2lzc29yVGVzdCggZmFsc2UgKTtcblxuXHRcdC8vIHJlbmRlciBkZXB0aCBtYXBcblxuXHRcdHZhciBmYWNlQ291bnQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGlnaHQgPSBsaWdodHNbIGkgXTtcblx0XHRcdHZhciBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cdFx0XHR2YXIgaXNQb2ludExpZ2h0ID0gbGlnaHQgJiYgbGlnaHQuaXNQb2ludExpZ2h0O1xuXG5cdFx0XHRpZiAoIHNoYWRvdyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZG93TWFwOicsIGxpZ2h0LCAnaGFzIG5vIHNoYWRvdy4nICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBzaGFkb3dDYW1lcmEgPSBzaGFkb3cuY2FtZXJhO1xuXG5cdFx0XHRfc2hhZG93TWFwU2l6ZS5jb3B5KCBzaGFkb3cubWFwU2l6ZSApO1xuXHRcdFx0X3NoYWRvd01hcFNpemUubWluKCBfbWF4U2hhZG93TWFwU2l6ZSApO1xuXG5cdFx0XHRpZiAoIGlzUG9pbnRMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdnBXaWR0aCA9IF9zaGFkb3dNYXBTaXplLng7XG5cdFx0XHRcdHZhciB2cEhlaWdodCA9IF9zaGFkb3dNYXBTaXplLnk7XG5cblx0XHRcdFx0Ly8gVGhlc2Ugdmlld3BvcnRzIG1hcCBhIGN1YmUtbWFwIG9udG8gYSAyRCB0ZXh0dXJlIHdpdGggdGhlXG5cdFx0XHRcdC8vIGZvbGxvd2luZyBvcmllbnRhdGlvbjpcblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gIHh6WFpcblx0XHRcdFx0Ly8gICB5IFlcblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gWCAtIFBvc2l0aXZlIHggZGlyZWN0aW9uXG5cdFx0XHRcdC8vIHggLSBOZWdhdGl2ZSB4IGRpcmVjdGlvblxuXHRcdFx0XHQvLyBZIC0gUG9zaXRpdmUgeSBkaXJlY3Rpb25cblx0XHRcdFx0Ly8geSAtIE5lZ2F0aXZlIHkgZGlyZWN0aW9uXG5cdFx0XHRcdC8vIFogLSBQb3NpdGl2ZSB6IGRpcmVjdGlvblxuXHRcdFx0XHQvLyB6IC0gTmVnYXRpdmUgeiBkaXJlY3Rpb25cblxuXHRcdFx0XHQvLyBwb3NpdGl2ZSBYXG5cdFx0XHRcdGN1YmUyRFZpZXdQb3J0c1sgMCBdLnNldCggdnBXaWR0aCAqIDIsIHZwSGVpZ2h0LCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXHRcdFx0XHQvLyBuZWdhdGl2ZSBYXG5cdFx0XHRcdGN1YmUyRFZpZXdQb3J0c1sgMSBdLnNldCggMCwgdnBIZWlnaHQsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cdFx0XHRcdC8vIHBvc2l0aXZlIFpcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyAyIF0uc2V0KCB2cFdpZHRoICogMywgdnBIZWlnaHQsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cdFx0XHRcdC8vIG5lZ2F0aXZlIFpcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyAzIF0uc2V0KCB2cFdpZHRoLCB2cEhlaWdodCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblx0XHRcdFx0Ly8gcG9zaXRpdmUgWVxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDQgXS5zZXQoIHZwV2lkdGggKiAzLCAwLCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXHRcdFx0XHQvLyBuZWdhdGl2ZSBZXG5cdFx0XHRcdGN1YmUyRFZpZXdQb3J0c1sgNSBdLnNldCggdnBXaWR0aCwgMCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblxuXHRcdFx0XHRfc2hhZG93TWFwU2l6ZS54ICo9IDQuMDtcblx0XHRcdFx0X3NoYWRvd01hcFNpemUueSAqPSAyLjA7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzaGFkb3cubWFwID09PSBudWxsICkge1xuXG5cdFx0XHRcdHZhciBwYXJzID0geyBtaW5GaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsIG1hZ0ZpbHRlcjogTmVhcmVzdEZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07XG5cblx0XHRcdFx0c2hhZG93Lm1hcCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyApO1xuXHRcdFx0XHRzaGFkb3cubWFwLnRleHR1cmUubmFtZSA9IGxpZ2h0Lm5hbWUgKyBcIi5zaGFkb3dNYXBcIjtcblxuXHRcdFx0XHRzaGFkb3dDYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93LmlzU3BvdExpZ2h0U2hhZG93ICkge1xuXG5cdFx0XHRcdHNoYWRvdy51cGRhdGUoIGxpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHNoYWRvd01hcCA9IHNoYWRvdy5tYXA7XG5cdFx0XHR2YXIgc2hhZG93TWF0cml4ID0gc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0X2xpZ2h0UG9zaXRpb25Xb3JsZC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRzaGFkb3dDYW1lcmEucG9zaXRpb24uY29weSggX2xpZ2h0UG9zaXRpb25Xb3JsZCApO1xuXG5cdFx0XHRpZiAoIGlzUG9pbnRMaWdodCApIHtcblxuXHRcdFx0XHRmYWNlQ291bnQgPSA2O1xuXG5cdFx0XHRcdC8vIGZvciBwb2ludCBsaWdodHMgd2Ugc2V0IHRoZSBzaGFkb3cgbWF0cml4IHRvIGJlIGEgdHJhbnNsYXRpb24tb25seSBtYXRyaXhcblx0XHRcdFx0Ly8gZXF1YWwgdG8gaW52ZXJzZSBvZiB0aGUgbGlnaHQncyBwb3NpdGlvblxuXG5cdFx0XHRcdHNoYWRvd01hdHJpeC5tYWtlVHJhbnNsYXRpb24oIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC54LCAtIF9saWdodFBvc2l0aW9uV29ybGQueSwgLSBfbGlnaHRQb3NpdGlvbldvcmxkLnogKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmYWNlQ291bnQgPSAxO1xuXG5cdFx0XHRcdF9sb29rVGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHNoYWRvd0NhbWVyYS5sb29rQXQoIF9sb29rVGFyZ2V0ICk7XG5cdFx0XHRcdHNoYWRvd0NhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0XHRcdC8vIGNvbXB1dGUgc2hhZG93IG1hdHJpeFxuXG5cdFx0XHRcdHNoYWRvd01hdHJpeC5zZXQoXG5cdFx0XHRcdFx0MC41LCAwLjAsIDAuMCwgMC41LFxuXHRcdFx0XHRcdDAuMCwgMC41LCAwLjAsIDAuNSxcblx0XHRcdFx0XHQwLjAsIDAuMCwgMC41LCAwLjUsXG5cdFx0XHRcdFx0MC4wLCAwLjAsIDAuMCwgMS4wXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0c2hhZG93TWF0cml4Lm11bHRpcGx5KCBzaGFkb3dDYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBzaGFkb3dNYXAgKTtcblx0XHRcdF9yZW5kZXJlci5jbGVhcigpO1xuXG5cdFx0XHQvLyByZW5kZXIgc2hhZG93IG1hcCBmb3IgZWFjaCBjdWJlIGZhY2UgKGlmIG9tbmktZGlyZWN0aW9uYWwpIG9yXG5cdFx0XHQvLyBydW4gYSBzaW5nbGUgcGFzcyBpZiBub3RcblxuXHRcdFx0Zm9yICggdmFyIGZhY2UgPSAwOyBmYWNlIDwgZmFjZUNvdW50OyBmYWNlICsrICkge1xuXG5cdFx0XHRcdGlmICggaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdFx0X2xvb2tUYXJnZXQuY29weSggc2hhZG93Q2FtZXJhLnBvc2l0aW9uICk7XG5cdFx0XHRcdFx0X2xvb2tUYXJnZXQuYWRkKCBjdWJlRGlyZWN0aW9uc1sgZmFjZSBdICk7XG5cdFx0XHRcdFx0c2hhZG93Q2FtZXJhLnVwLmNvcHkoIGN1YmVVcHNbIGZhY2UgXSApO1xuXHRcdFx0XHRcdHNoYWRvd0NhbWVyYS5sb29rQXQoIF9sb29rVGFyZ2V0ICk7XG5cdFx0XHRcdFx0c2hhZG93Q2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRcdFx0XHR2YXIgdnBEaW1lbnNpb25zID0gY3ViZTJEVmlld1BvcnRzWyBmYWNlIF07XG5cdFx0XHRcdFx0X3N0YXRlLnZpZXdwb3J0KCB2cERpbWVuc2lvbnMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gdXBkYXRlIGNhbWVyYSBtYXRyaWNlcyBhbmQgZnJ1c3R1bVxuXG5cdFx0XHRcdF9wcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0XHRcdF9mcnVzdHVtLnNldEZyb21NYXRyaXgoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0Ly8gc2V0IG9iamVjdCBtYXRyaWNlcyAmIGZydXN0dW0gY3VsbGluZ1xuXG5cdFx0XHRcdHJlbmRlck9iamVjdCggc2NlbmUsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBpc1BvaW50TGlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c2NvcGUubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGlzUG9pbnRMaWdodCwgbGlnaHRQb3NpdGlvbldvcmxkLCBzaGFkb3dDYW1lcmFOZWFyLCBzaGFkb3dDYW1lcmFGYXIgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHR2YXIgcmVzdWx0ID0gbnVsbDtcblxuXHRcdHZhciBtYXRlcmlhbFZhcmlhbnRzID0gX2RlcHRoTWF0ZXJpYWxzO1xuXHRcdHZhciBjdXN0b21NYXRlcmlhbCA9IG9iamVjdC5jdXN0b21EZXB0aE1hdGVyaWFsO1xuXG5cdFx0aWYgKCBpc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdG1hdGVyaWFsVmFyaWFudHMgPSBfZGlzdGFuY2VNYXRlcmlhbHM7XG5cdFx0XHRjdXN0b21NYXRlcmlhbCA9IG9iamVjdC5jdXN0b21EaXN0YW5jZU1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhIGN1c3RvbU1hdGVyaWFsICkge1xuXG5cdFx0XHR2YXIgdXNlTW9ycGhpbmcgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0dXNlTW9ycGhpbmcgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbi5sZW5ndGggPiAwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHR1c2VNb3JwaGluZyA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaFRhcmdldHMubGVuZ3RoID4gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbC5za2lubmluZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6IFRIUkVFLlNraW5uZWRNZXNoIHdpdGggbWF0ZXJpYWwuc2tpbm5pbmcgc2V0IHRvIGZhbHNlOicsIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB1c2VTa2lubmluZyA9IG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsLnNraW5uaW5nO1xuXG5cdFx0XHR2YXIgdmFyaWFudEluZGV4ID0gMDtcblxuXHRcdFx0aWYgKCB1c2VNb3JwaGluZyApIHZhcmlhbnRJbmRleCB8PSBfTW9ycGhpbmdGbGFnO1xuXHRcdFx0aWYgKCB1c2VTa2lubmluZyApIHZhcmlhbnRJbmRleCB8PSBfU2tpbm5pbmdGbGFnO1xuXG5cdFx0XHRyZXN1bHQgPSBtYXRlcmlhbFZhcmlhbnRzWyB2YXJpYW50SW5kZXggXTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc3VsdCA9IGN1c3RvbU1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfcmVuZGVyZXIubG9jYWxDbGlwcGluZ0VuYWJsZWQgJiZcblx0XHRcdFx0bWF0ZXJpYWwuY2xpcFNoYWRvd3MgPT09IHRydWUgJiZcblx0XHRcdFx0bWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHQvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCBhIHVuaXF1ZSBtYXRlcmlhbCBpbnN0YW5jZSByZWZsZWN0aW5nIHRoZVxuXHRcdFx0Ly8gYXBwcm9wcmlhdGUgc3RhdGVcblxuXHRcdFx0dmFyIGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7XG5cblx0XHRcdHZhciBtYXRlcmlhbHNGb3JWYXJpYW50ID0gX21hdGVyaWFsQ2FjaGVbIGtleUEgXTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbHNGb3JWYXJpYW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudCA9IHt9O1xuXHRcdFx0XHRfbWF0ZXJpYWxDYWNoZVsga2V5QSBdID0gbWF0ZXJpYWxzRm9yVmFyaWFudDtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF07XG5cblx0XHRcdGlmICggY2FjaGVkTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjYWNoZWRNYXRlcmlhbCA9IHJlc3VsdC5jbG9uZSgpO1xuXHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF0gPSBjYWNoZWRNYXRlcmlhbDtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQgPSBjYWNoZWRNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdHJlc3VsdC52aXNpYmxlID0gbWF0ZXJpYWwudmlzaWJsZTtcblx0XHRyZXN1bHQud2lyZWZyYW1lID0gbWF0ZXJpYWwud2lyZWZyYW1lO1xuXG5cdFx0cmVzdWx0LnNpZGUgPSAoIG1hdGVyaWFsLnNoYWRvd1NpZGUgIT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IHNoYWRvd1NpZGVbIG1hdGVyaWFsLnNpZGUgXTtcblxuXHRcdHJlc3VsdC5jbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzO1xuXHRcdHJlc3VsdC5jbGlwcGluZ1BsYW5lcyA9IG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzO1xuXHRcdHJlc3VsdC5jbGlwSW50ZXJzZWN0aW9uID0gbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbjtcblxuXHRcdHJlc3VsdC53aXJlZnJhbWVMaW5ld2lkdGggPSBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0cmVzdWx0LmxpbmV3aWR0aCA9IG1hdGVyaWFsLmxpbmV3aWR0aDtcblxuXHRcdGlmICggaXNQb2ludExpZ2h0ICYmIHJlc3VsdC5pc01lc2hEaXN0YW5jZU1hdGVyaWFsICkge1xuXG5cdFx0XHRyZXN1bHQucmVmZXJlbmNlUG9zaXRpb24uY29weSggbGlnaHRQb3NpdGlvbldvcmxkICk7XG5cdFx0XHRyZXN1bHQubmVhckRpc3RhbmNlID0gc2hhZG93Q2FtZXJhTmVhcjtcblx0XHRcdHJlc3VsdC5mYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYUZhcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0aWYgKCBvYmplY3QudmlzaWJsZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHR2YXIgdmlzaWJsZSA9IG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApO1xuXG5cdFx0aWYgKCB2aXNpYmxlICYmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICYmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSApICkge1xuXG5cdFx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0dmFyIGdlb21ldHJ5ID0gX29iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgayA9IDAsIGtsID0gZ3JvdXBzLmxlbmd0aDsgayA8IGtsOyBrICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGsgXTtcblx0XHRcdFx0XHRcdHZhciBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBncm91cE1hdGVyaWFsICYmIGdyb3VwTWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgZGVwdGhNYXRlcmlhbCA9IGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgZ3JvdXBNYXRlcmlhbCwgaXNQb2ludExpZ2h0LCBfbGlnaHRQb3NpdGlvbldvcmxkLCBzaGFkb3dDYW1lcmEubmVhciwgc2hhZG93Q2FtZXJhLmZhciApO1xuXHRcdFx0XHRcdFx0XHRfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0dmFyIGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBpc1BvaW50TGlnaHQsIF9saWdodFBvc2l0aW9uV29ybGQsIHNoYWRvd0NhbWVyYS5uZWFyLCBzaGFkb3dDYW1lcmEuZmFyICk7XG5cdFx0XHRcdFx0X3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggc2hhZG93Q2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgb2JqZWN0LCBudWxsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBpc1BvaW50TGlnaHQgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMU3RhdGUoIGdsLCBleHRlbnNpb25zLCB1dGlscywgY2FwYWJpbGl0aWVzICkge1xuXG5cdGZ1bmN0aW9uIENvbG9yQnVmZmVyKCkge1xuXG5cdFx0dmFyIGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIGNvbG9yID0gbmV3IFZlY3RvcjQoKTtcblx0XHR2YXIgY3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRDb2xvckNsZWFyID0gbmV3IFZlY3RvcjQoIDAsIDAsIDAsIDAgKTtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uICggY29sb3JNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudENvbG9yTWFzayAhPT0gY29sb3JNYXNrICYmICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0Z2wuY29sb3JNYXNrKCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50Q29sb3JNYXNrID0gY29sb3JNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggciwgZywgYiwgYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0XHRcdGlmICggcHJlbXVsdGlwbGllZEFscGhhID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0ciAqPSBhOyBnICo9IGE7IGIgKj0gYTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29sb3Iuc2V0KCByLCBnLCBiLCBhICk7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50Q29sb3JDbGVhci5lcXVhbHMoIGNvbG9yICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJDb2xvciggciwgZywgYiwgYSApO1xuXHRcdFx0XHRcdGN1cnJlbnRDb2xvckNsZWFyLmNvcHkoIGNvbG9yICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGN1cnJlbnRDb2xvck1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5zZXQoIC0gMSwgMCwgMCwgMCApOyAvLyBzZXQgdG8gaW52YWxpZCBzdGF0ZVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBEZXB0aEJ1ZmZlcigpIHtcblxuXHRcdHZhciBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdHZhciBjdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHR2YXIgY3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNldFRlc3Q6IGZ1bmN0aW9uICggZGVwdGhUZXN0ICkge1xuXG5cdFx0XHRcdGlmICggZGVwdGhUZXN0ICkge1xuXG5cdFx0XHRcdFx0ZW5hYmxlKCAyOTI5ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGRpc2FibGUoIDI5MjkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uICggZGVwdGhNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoTWFzayAhPT0gZGVwdGhNYXNrICYmICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0Z2wuZGVwdGhNYXNrKCBkZXB0aE1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gZGVwdGhNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0RnVuYzogZnVuY3Rpb24gKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhGdW5jICE9PSBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRcdFx0c3dpdGNoICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTmV2ZXJEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTEyICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBBbHdheXNEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE5ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBMZXNzRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxMyApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTGVzc0VxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE0ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE4ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNiApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTm90RXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE3ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE1ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE1ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjdXJyZW50RGVwdGhGdW5jID0gZGVwdGhGdW5jO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggZGVwdGggKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhDbGVhciAhPT0gZGVwdGggKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhckRlcHRoKCBkZXB0aCApO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gZGVwdGg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50RGVwdGhGdW5jID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBTdGVuY2lsQnVmZmVyKCkge1xuXG5cdFx0dmFyIGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsTWFzayA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsUmVmID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsWkZhaWwgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbFpQYXNzID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxDbGVhciA9IG51bGw7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRUZXN0OiBmdW5jdGlvbiAoIHN0ZW5jaWxUZXN0ICkge1xuXG5cdFx0XHRcdGlmICggc3RlbmNpbFRlc3QgKSB7XG5cblx0XHRcdFx0XHRlbmFibGUoIDI5NjAgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGlzYWJsZSggMjk2MCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsTWFzayAhPT0gc3RlbmNpbE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsTWFzayggc3RlbmNpbE1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGdW5jICE9PSBzdGVuY2lsRnVuYyB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsUmVmIFx0IT09IHN0ZW5jaWxSZWYgXHR8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgIT09IHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbEZ1bmMoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApO1xuXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jID0gc3RlbmNpbEZ1bmM7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxSZWYgPSBzdGVuY2lsUmVmO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldE9wOiBmdW5jdGlvbiAoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsRmFpbFx0ICE9PSBzdGVuY2lsRmFpbCBcdHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxaRmFpbCAhPT0gc3RlbmNpbFpGYWlsIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxaUGFzcyAhPT0gc3RlbmNpbFpQYXNzICkge1xuXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbE9wKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRmFpbCA9IHN0ZW5jaWxGYWlsO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWkZhaWwgPSBzdGVuY2lsWkZhaWw7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IHN0ZW5jaWxaUGFzcztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbENsZWFyICE9PSBzdGVuY2lsICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJTdGVuY2lsKCBzdGVuY2lsICk7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxDbGVhciA9IHN0ZW5jaWw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsUmVmID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsWkZhaWwgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFpQYXNzID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxDbGVhciA9IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIGNvbG9yQnVmZmVyID0gbmV3IENvbG9yQnVmZmVyKCk7XG5cdHZhciBkZXB0aEJ1ZmZlciA9IG5ldyBEZXB0aEJ1ZmZlcigpO1xuXHR2YXIgc3RlbmNpbEJ1ZmZlciA9IG5ldyBTdGVuY2lsQnVmZmVyKCk7XG5cblx0dmFyIG1heFZlcnRleEF0dHJpYnV0ZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM0OTIxICk7XG5cdHZhciBuZXdBdHRyaWJ1dGVzID0gbmV3IFVpbnQ4QXJyYXkoIG1heFZlcnRleEF0dHJpYnV0ZXMgKTtcblx0dmFyIGVuYWJsZWRBdHRyaWJ1dGVzID0gbmV3IFVpbnQ4QXJyYXkoIG1heFZlcnRleEF0dHJpYnV0ZXMgKTtcblx0dmFyIGF0dHJpYnV0ZURpdmlzb3JzID0gbmV3IFVpbnQ4QXJyYXkoIG1heFZlcnRleEF0dHJpYnV0ZXMgKTtcblxuXHR2YXIgZW5hYmxlZENhcGFiaWxpdGllcyA9IHt9O1xuXG5cdHZhciBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMgPSBudWxsO1xuXG5cdHZhciBjdXJyZW50UHJvZ3JhbSA9IG51bGw7XG5cblx0dmFyIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdHZhciBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTtcblxuXHR2YXIgY3VycmVudEZsaXBTaWRlZCA9IG51bGw7XG5cdHZhciBjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdHZhciBjdXJyZW50TGluZVdpZHRoID0gbnVsbDtcblxuXHR2YXIgY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBudWxsO1xuXHR2YXIgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IG51bGw7XG5cblx0dmFyIG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNTY2MSApO1xuXG5cdHZhciBsaW5lV2lkdGhBdmFpbGFibGUgPSBmYWxzZTtcblx0dmFyIHZlcnNpb24gPSAwO1xuXHR2YXIgZ2xWZXJzaW9uID0gZ2wuZ2V0UGFyYW1ldGVyKCA3OTM4ICk7XG5cblx0aWYgKCBnbFZlcnNpb24uaW5kZXhPZiggJ1dlYkdMJyApICE9PSAtIDEgKSB7XG5cblx0XHR2ZXJzaW9uID0gcGFyc2VGbG9hdCggL15XZWJHTFxcIChbMC05XSkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMS4wICk7XG5cblx0fSBlbHNlIGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdPcGVuR0wgRVMnICkgIT09IC0gMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXk9wZW5HTFxcIEVTXFwgKFswLTldKS8uZXhlYyggZ2xWZXJzaW9uIClbIDEgXSApO1xuXHRcdGxpbmVXaWR0aEF2YWlsYWJsZSA9ICggdmVyc2lvbiA+PSAyLjAgKTtcblxuXHR9XG5cblx0dmFyIGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdHZhciBjdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9O1xuXG5cdHZhciBjdXJyZW50U2Npc3NvciA9IG5ldyBWZWN0b3I0KCk7XG5cdHZhciBjdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoIHR5cGUsIHRhcmdldCwgY291bnQgKSB7XG5cblx0XHR2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KCA0ICk7IC8vIDQgaXMgcmVxdWlyZWQgdG8gbWF0Y2ggZGVmYXVsdCB1bnBhY2sgYWxpZ25tZW50IG9mIDQuXG5cdFx0dmFyIHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRnbC5iaW5kVGV4dHVyZSggdHlwZSwgdGV4dHVyZSApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIDEwMjQxLCA5NzI4ICk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaSggdHlwZSwgMTAyNDAsIDk3MjggKTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xuXG5cdFx0XHRnbC50ZXhJbWFnZTJEKCB0YXJnZXQgKyBpLCAwLCA2NDA4LCAxLCAxLCAwLCA2NDA4LCA1MTIxLCBkYXRhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0dmFyIGVtcHR5VGV4dHVyZXMgPSB7fTtcblx0ZW1wdHlUZXh0dXJlc1sgMzU1MyBdID0gY3JlYXRlVGV4dHVyZSggMzU1MywgMzU1MywgMSApO1xuXHRlbXB0eVRleHR1cmVzWyAzNDA2NyBdID0gY3JlYXRlVGV4dHVyZSggMzQwNjcsIDM0MDY5LCA2ICk7XG5cblx0Ly8gaW5pdFxuXG5cdGNvbG9yQnVmZmVyLnNldENsZWFyKCAwLCAwLCAwLCAxICk7XG5cdGRlcHRoQnVmZmVyLnNldENsZWFyKCAxICk7XG5cdHN0ZW5jaWxCdWZmZXIuc2V0Q2xlYXIoIDAgKTtcblxuXHRlbmFibGUoIDI5MjkgKTtcblx0ZGVwdGhCdWZmZXIuc2V0RnVuYyggTGVzc0VxdWFsRGVwdGggKTtcblxuXHRzZXRGbGlwU2lkZWQoIGZhbHNlICk7XG5cdHNldEN1bGxGYWNlKCBDdWxsRmFjZUJhY2sgKTtcblx0ZW5hYmxlKCAyODg0ICk7XG5cblx0c2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGluaXRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbmV3QXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRuZXdBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgMCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRuZXdBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7XG5cblx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9PT0gMCApIHtcblxuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoIGF0dHJpYnV0ZSApO1xuXHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggYXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdICE9PSBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdFx0XHR2YXIgZXh0ZW5zaW9uID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gZ2wgOiBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cblx0XHRcdGV4dGVuc2lvblsgY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gJ3ZlcnRleEF0dHJpYkRpdmlzb3InIDogJ3ZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRScgXSggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICk7XG5cdFx0XHRhdHRyaWJ1dGVEaXZpc29yc1sgYXR0cmlidXRlIF0gPSBtZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNhYmxlVW51c2VkQXR0cmlidXRlcygpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGVuYWJsZWRBdHRyaWJ1dGVzLmxlbmd0aDsgaSAhPT0gbDsgKysgaSApIHtcblxuXHRcdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgaSBdICE9PSBuZXdBdHRyaWJ1dGVzWyBpIF0gKSB7XG5cblx0XHRcdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KCBpICk7XG5cdFx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGVuYWJsZSggaWQgKSB7XG5cblx0XHRpZiAoIGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gIT09IHRydWUgKSB7XG5cblx0XHRcdGdsLmVuYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNhYmxlKCBpZCApIHtcblxuXHRcdGlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLmRpc2FibGUoIGlkICk7XG5cdFx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpIHtcblxuXHRcdGlmICggY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID09PSBudWxsICkge1xuXG5cdFx0XHRjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMgPSBbXTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKSB8fFxuXHRcdFx0ICAgICBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8XG5cdFx0XHQgICAgIGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnICkgfHxcblx0XHRcdCAgICAgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycgKSApIHtcblxuXHRcdFx0XHR2YXIgZm9ybWF0cyA9IGdsLmdldFBhcmFtZXRlciggMzQ0NjcgKTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBmb3JtYXRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cy5wdXNoKCBmb3JtYXRzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVzZVByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRQcm9ncmFtICE9PSBwcm9ncmFtICkge1xuXG5cdFx0XHRnbC51c2VQcm9ncmFtKCBwcm9ncmFtICk7XG5cblx0XHRcdGN1cnJlbnRQcm9ncmFtID0gcHJvZ3JhbTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldEJsZW5kaW5nKCBibGVuZGluZywgYmxlbmRFcXVhdGlvbiwgYmxlbmRTcmMsIGJsZW5kRHN0LCBibGVuZEVxdWF0aW9uQWxwaGEsIGJsZW5kU3JjQWxwaGEsIGJsZW5kRHN0QWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdGlmICggYmxlbmRpbmcgPT09IE5vQmxlbmRpbmcgKSB7XG5cblx0XHRcdGlmICggY3VycmVudEJsZW5kaW5nRW5hYmxlZCApIHtcblxuXHRcdFx0XHRkaXNhYmxlKCAzMDQyICk7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoICEgY3VycmVudEJsZW5kaW5nRW5hYmxlZCApIHtcblxuXHRcdFx0ZW5hYmxlKCAzMDQyICk7XG5cdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRpbmcgIT09IEN1c3RvbUJsZW5kaW5nICkge1xuXG5cdFx0XHRpZiAoIGJsZW5kaW5nICE9PSBjdXJyZW50QmxlbmRpbmcgfHwgcHJlbXVsdGlwbGllZEFscGhhICE9PSBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50QmxlbmRFcXVhdGlvbiAhPT0gQWRkRXF1YXRpb24gfHwgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSAhPT0gQWRkRXF1YXRpb24gKSB7XG5cblx0XHRcdFx0XHRnbC5ibGVuZEVxdWF0aW9uKCAzMjc3NCApO1xuXG5cdFx0XHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0XHRcdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gQWRkRXF1YXRpb247XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggYmxlbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCAxLCA3NzEsIDEsIDc3MSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDEsIDEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDAsIDAsIDc2OSwgNzcxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCAwLCA3NjgsIDAsIDc3MCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IEludmFsaWQgYmxlbmRpbmc6ICcsIGJsZW5kaW5nICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBOb3JtYWxCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDc3MCwgNzcxLCAxLCA3NzEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgQWRkaXRpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCA3NzAsIDEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCAwLCA3NjkgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCAwLCA3NjggKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XG5cdFx0XHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBjdXN0b20gYmxlbmRpbmdcblxuXHRcdGJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYSB8fCBibGVuZEVxdWF0aW9uO1xuXHRcdGJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhIHx8IGJsZW5kU3JjO1xuXHRcdGJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhIHx8IGJsZW5kRHN0O1xuXG5cdFx0aWYgKCBibGVuZEVxdWF0aW9uICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbiB8fCBibGVuZEVxdWF0aW9uQWxwaGEgIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgKSB7XG5cblx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggdXRpbHMuY29udmVydCggYmxlbmRFcXVhdGlvbiApLCB1dGlscy5jb252ZXJ0KCBibGVuZEVxdWF0aW9uQWxwaGEgKSApO1xuXG5cdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IGJsZW5kRXF1YXRpb247XG5cdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gYmxlbmRFcXVhdGlvbkFscGhhO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZFNyYyAhPT0gY3VycmVudEJsZW5kU3JjIHx8IGJsZW5kRHN0ICE9PSBjdXJyZW50QmxlbmREc3QgfHwgYmxlbmRTcmNBbHBoYSAhPT0gY3VycmVudEJsZW5kU3JjQWxwaGEgfHwgYmxlbmREc3RBbHBoYSAhPT0gY3VycmVudEJsZW5kRHN0QWxwaGEgKSB7XG5cblx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCB1dGlscy5jb252ZXJ0KCBibGVuZFNyYyApLCB1dGlscy5jb252ZXJ0KCBibGVuZERzdCApLCB1dGlscy5jb252ZXJ0KCBibGVuZFNyY0FscGhhICksIHV0aWxzLmNvbnZlcnQoIGJsZW5kRHN0QWxwaGEgKSApO1xuXG5cdFx0XHRjdXJyZW50QmxlbmRTcmMgPSBibGVuZFNyYztcblx0XHRcdGN1cnJlbnRCbGVuZERzdCA9IGJsZW5kRHN0O1xuXHRcdFx0Y3VycmVudEJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhO1xuXHRcdFx0Y3VycmVudEJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhO1xuXG5cdFx0fVxuXG5cdFx0Y3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XG5cdFx0Y3VycmVudFByZW11bHRpcGxlZEFscGhhID0gbnVsbDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApIHtcblxuXHRcdG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGVcblx0XHRcdD8gZGlzYWJsZSggMjg4NCApXG5cdFx0XHQ6IGVuYWJsZSggMjg4NCApO1xuXG5cdFx0dmFyIGZsaXBTaWRlZCA9ICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKTtcblx0XHRpZiAoIGZyb250RmFjZUNXICkgZmxpcFNpZGVkID0gISBmbGlwU2lkZWQ7XG5cblx0XHRzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApO1xuXG5cdFx0KCBtYXRlcmlhbC5ibGVuZGluZyA9PT0gTm9ybWFsQmxlbmRpbmcgJiYgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IGZhbHNlIClcblx0XHRcdD8gc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKVxuXHRcdFx0OiBzZXRCbGVuZGluZyggbWF0ZXJpYWwuYmxlbmRpbmcsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb24sIG1hdGVyaWFsLmJsZW5kU3JjLCBtYXRlcmlhbC5ibGVuZERzdCwgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhLCBtYXRlcmlhbC5ibGVuZFNyY0FscGhhLCBtYXRlcmlhbC5ibGVuZERzdEFscGhhLCBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdGRlcHRoQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLmRlcHRoRnVuYyApO1xuXHRcdGRlcHRoQnVmZmVyLnNldFRlc3QoIG1hdGVyaWFsLmRlcHRoVGVzdCApO1xuXHRcdGRlcHRoQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmRlcHRoV3JpdGUgKTtcblx0XHRjb2xvckJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5jb2xvcldyaXRlICk7XG5cblx0XHRzZXRQb2x5Z29uT2Zmc2V0KCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0LCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yLCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0VW5pdHMgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApIHtcblxuXHRcdGlmICggY3VycmVudEZsaXBTaWRlZCAhPT0gZmxpcFNpZGVkICkge1xuXG5cdFx0XHRpZiAoIGZsaXBTaWRlZCApIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIDIzMDQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIDIzMDUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50RmxpcFNpZGVkID0gZmxpcFNpZGVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDdWxsRmFjZSggY3VsbEZhY2UgKSB7XG5cblx0XHRpZiAoIGN1bGxGYWNlICE9PSBDdWxsRmFjZU5vbmUgKSB7XG5cblx0XHRcdGVuYWJsZSggMjg4NCApO1xuXG5cdFx0XHRpZiAoIGN1bGxGYWNlICE9PSBjdXJyZW50Q3VsbEZhY2UgKSB7XG5cblx0XHRcdFx0aWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VCYWNrICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMjkgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VGcm9udCApIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCAxMDI4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCAxMDMyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCAyODg0ICk7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBjdWxsRmFjZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TGluZVdpZHRoKCB3aWR0aCApIHtcblxuXHRcdGlmICggd2lkdGggIT09IGN1cnJlbnRMaW5lV2lkdGggKSB7XG5cblx0XHRcdGlmICggbGluZVdpZHRoQXZhaWxhYmxlICkgZ2wubGluZVdpZHRoKCB3aWR0aCApO1xuXG5cdFx0XHRjdXJyZW50TGluZVdpZHRoID0gd2lkdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQoIHBvbHlnb25PZmZzZXQsIGZhY3RvciwgdW5pdHMgKSB7XG5cblx0XHRpZiAoIHBvbHlnb25PZmZzZXQgKSB7XG5cblx0XHRcdGVuYWJsZSggMzI4MjMgKTtcblxuXHRcdFx0aWYgKCBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciAhPT0gZmFjdG9yIHx8IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuaXRzICkge1xuXG5cdFx0XHRcdGdsLnBvbHlnb25PZmZzZXQoIGZhY3RvciwgdW5pdHMgKTtcblxuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IGZhY3Rvcjtcblx0XHRcdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IHVuaXRzO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCAzMjgyMyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRTY2lzc29yVGVzdCggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRpZiAoIHNjaXNzb3JUZXN0ICkge1xuXG5cdFx0XHRlbmFibGUoIDMwODkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDMwODkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gdGV4dHVyZVxuXG5cdGZ1bmN0aW9uIGFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApIHtcblxuXHRcdGlmICggd2ViZ2xTbG90ID09PSB1bmRlZmluZWQgKSB3ZWJnbFNsb3QgPSAzMzk4NCArIG1heFRleHR1cmVzIC0gMTtcblxuXHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ICE9PSB3ZWJnbFNsb3QgKSB7XG5cblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApO1xuXHRcdFx0Y3VycmVudFRleHR1cmVTbG90ID0gd2ViZ2xTbG90O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBiaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0YWN0aXZlVGV4dHVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJvdW5kVGV4dHVyZSA9IHsgdHlwZTogdW5kZWZpbmVkLCB0ZXh0dXJlOiB1bmRlZmluZWQgfTtcblx0XHRcdGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXSA9IGJvdW5kVGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdGlmICggYm91bmRUZXh0dXJlLnR5cGUgIT09IHdlYmdsVHlwZSB8fCBib3VuZFRleHR1cmUudGV4dHVyZSAhPT0gd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgfHwgZW1wdHlUZXh0dXJlc1sgd2ViZ2xUeXBlIF0gKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB3ZWJnbFR5cGU7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHdlYmdsVGV4dHVyZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcHJlc3NlZFRleEltYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UzRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNjaXNzb3IoIHNjaXNzb3IgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRTY2lzc29yLmVxdWFscyggc2Npc3NvciApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuc2Npc3Nvciggc2Npc3Nvci54LCBzY2lzc29yLnksIHNjaXNzb3Iueiwgc2Npc3Nvci53ICk7XG5cdFx0XHRjdXJyZW50U2Npc3Nvci5jb3B5KCBzY2lzc29yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHZpZXdwb3J0KCB2aWV3cG9ydCApIHtcblxuXHRcdGlmICggY3VycmVudFZpZXdwb3J0LmVxdWFscyggdmlld3BvcnQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLnZpZXdwb3J0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC56LCB2aWV3cG9ydC53ICk7XG5cdFx0XHRjdXJyZW50Vmlld3BvcnQuY29weSggdmlld3BvcnQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiByZXNldCgpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGVuYWJsZWRBdHRyaWJ1dGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgaSBdID09PSAxICkge1xuXG5cdFx0XHRcdGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSggaSApO1xuXHRcdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZW5hYmxlZENhcGFiaWxpdGllcyA9IHt9O1xuXG5cdFx0Y29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gbnVsbDtcblxuXHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcblx0XHRkZXB0aEJ1ZmZlci5yZXNldCgpO1xuXHRcdHN0ZW5jaWxCdWZmZXIucmVzZXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGJ1ZmZlcnM6IHtcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcblx0XHRcdGRlcHRoOiBkZXB0aEJ1ZmZlcixcblx0XHRcdHN0ZW5jaWw6IHN0ZW5jaWxCdWZmZXJcblx0XHR9LFxuXG5cdFx0aW5pdEF0dHJpYnV0ZXM6IGluaXRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3I6IGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IsXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM6IGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZTogZW5hYmxlLFxuXHRcdGRpc2FibGU6IGRpc2FibGUsXG5cdFx0Z2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzOiBnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMsXG5cblx0XHR1c2VQcm9ncmFtOiB1c2VQcm9ncmFtLFxuXG5cdFx0c2V0QmxlbmRpbmc6IHNldEJsZW5kaW5nLFxuXHRcdHNldE1hdGVyaWFsOiBzZXRNYXRlcmlhbCxcblxuXHRcdHNldEZsaXBTaWRlZDogc2V0RmxpcFNpZGVkLFxuXHRcdHNldEN1bGxGYWNlOiBzZXRDdWxsRmFjZSxcblxuXHRcdHNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLFxuXHRcdHNldFBvbHlnb25PZmZzZXQ6IHNldFBvbHlnb25PZmZzZXQsXG5cblx0XHRzZXRTY2lzc29yVGVzdDogc2V0U2Npc3NvclRlc3QsXG5cblx0XHRhY3RpdmVUZXh0dXJlOiBhY3RpdmVUZXh0dXJlLFxuXHRcdGJpbmRUZXh0dXJlOiBiaW5kVGV4dHVyZSxcblx0XHRjb21wcmVzc2VkVGV4SW1hZ2UyRDogY29tcHJlc3NlZFRleEltYWdlMkQsXG5cdFx0dGV4SW1hZ2UyRDogdGV4SW1hZ2UyRCxcblx0XHR0ZXhJbWFnZTNEOiB0ZXhJbWFnZTNELFxuXG5cdFx0c2Npc3Nvcjogc2Npc3Nvcixcblx0XHR2aWV3cG9ydDogdmlld3BvcnQsXG5cblx0XHRyZXNldDogcmVzZXRcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICkge1xuXG5cdHZhciBfdmlkZW9UZXh0dXJlcyA9IHt9O1xuXHR2YXIgX2NhbnZhcztcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGNsYW1wVG9NYXhTaXplKCBpbWFnZSwgbWF4U2l6ZSApIHtcblxuXHRcdGlmICggaW1hZ2Uud2lkdGggPiBtYXhTaXplIHx8IGltYWdlLmhlaWdodCA+IG1heFNpemUgKSB7XG5cblx0XHRcdGlmICggJ2RhdGEnIGluIGltYWdlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IGltYWdlIGluIERhdGFUZXh0dXJlIGlzIHRvbyBiaWcgKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFdhcm5pbmc6IFNjYWxpbmcgdGhyb3VnaCB0aGUgY2FudmFzIHdpbGwgb25seSB3b3JrIHdpdGggaW1hZ2VzIHRoYXQgdXNlXG5cdFx0XHQvLyBwcmVtdWx0aXBsaWVkIGFscGhhLlxuXG5cdFx0XHR2YXIgc2NhbGUgPSBtYXhTaXplIC8gTWF0aC5tYXgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnY2FudmFzJyApO1xuXHRcdFx0Y2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggaW1hZ2Uud2lkdGggKiBzY2FsZSApO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IE1hdGguZmxvb3IoIGltYWdlLmhlaWdodCAqIHNjYWxlICk7XG5cblx0XHRcdHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0ICk7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IGltYWdlIGlzIHRvbyBiaWcgKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpLiBSZXNpemVkIHRvICcgKyBjYW52YXMud2lkdGggKyAneCcgKyBjYW52YXMuaGVpZ2h0ICk7XG5cblx0XHRcdHJldHVybiBjYW52YXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGlzUG93ZXJPZlR3byggaW1hZ2UgKSB7XG5cblx0XHRyZXR1cm4gX01hdGguaXNQb3dlck9mVHdvKCBpbWFnZS53aWR0aCApICYmIF9NYXRoLmlzUG93ZXJPZlR3byggaW1hZ2UuaGVpZ2h0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG1ha2VQb3dlck9mVHdvKCBpbWFnZSApIHtcblxuXHRcdGlmICggaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50IHx8IGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgfHwgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApIHtcblxuXHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdjYW52YXMnICk7XG5cblx0XHRcdF9jYW52YXMud2lkdGggPSBfTWF0aC5mbG9vclBvd2VyT2ZUd28oIGltYWdlLndpZHRoICk7XG5cdFx0XHRfY2FudmFzLmhlaWdodCA9IF9NYXRoLmZsb29yUG93ZXJPZlR3byggaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdHZhciBjb250ZXh0ID0gX2NhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIF9jYW52YXMud2lkdGgsIF9jYW52YXMuaGVpZ2h0ICk7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IGltYWdlIGlzIG5vdCBwb3dlciBvZiB0d28gKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpLiBSZXNpemVkIHRvICcgKyBfY2FudmFzLndpZHRoICsgJ3gnICsgX2NhbnZhcy5oZWlnaHQgKTtcblxuXHRcdFx0cmV0dXJuIF9jYW52YXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleHR1cmVOZWVkc1Bvd2VyT2ZUd28oIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiBmYWxzZTtcblxuXHRcdHJldHVybiAoIHRleHR1cmUud3JhcFMgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgfHwgdGV4dHVyZS53cmFwVCAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHx8XG5cdFx0XHQoIHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXIgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBpc1Bvd2VyT2ZUd28gKSB7XG5cblx0XHRyZXR1cm4gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgJiYgaXNQb3dlck9mVHdvICYmXG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZU1pcG1hcCggdGFyZ2V0LCB0ZXh0dXJlLCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0X2dsLmdlbmVyYXRlTWlwbWFwKCB0YXJnZXQgKTtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHQvLyBOb3RlOiBNYXRoLmxvZyggeCApICogTWF0aC5MT0cyRSB1c2VkIGluc3RlYWQgb2YgTWF0aC5sb2cyKCB4ICkgd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBieSBJRTExXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IE1hdGgubG9nKCBNYXRoLm1heCggd2lkdGgsIGhlaWdodCApICkgKiBNYXRoLkxPRzJFO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApIHtcblxuXHRcdGlmICggISBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSByZXR1cm4gZ2xGb3JtYXQ7XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSA2NDAzICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyNiApIHJldHVybiAzMzMyNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgcmV0dXJuIDMzMzI1O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjEgKSByZXR1cm4gMzMzMjE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSA2NDA3ICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyNiApIHJldHVybiAzNDgzNztcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgcmV0dXJuIDM0ODQzO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjEgKSByZXR1cm4gMzI4NDk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSA2NDA4ICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyNiApIHJldHVybiAzNDgzNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgcmV0dXJuIDM0ODQyO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjEgKSByZXR1cm4gMzI4NTY7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2xGb3JtYXQ7XG5cblx0fVxuXG5cdC8vIEZhbGxiYWNrIGZpbHRlcnMgZm9yIG5vbi1wb3dlci1vZi0yIHRleHR1cmVzXG5cblx0ZnVuY3Rpb24gZmlsdGVyRmFsbGJhY2soIGYgKSB7XG5cblx0XHRpZiAoIGYgPT09IE5lYXJlc3RGaWx0ZXIgfHwgZiA9PT0gTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIgfHwgZiA9PT0gTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciApIHtcblxuXHRcdFx0cmV0dXJuIDk3Mjg7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gOTcyOTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciB0ZXh0dXJlID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0dGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB7XG5cblx0XHRcdGRlbGV0ZSBfdmlkZW9UZXh0dXJlc1sgdGV4dHVyZS5pZCBdO1xuXG5cdFx0fVxuXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgLS07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25SZW5kZXJUYXJnZXREaXNwb3NlICk7XG5cblx0XHRkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pbWFnZSAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlICkge1xuXG5cdFx0XHQvLyBjdWJlIHRleHR1cmVcblxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIDJEIHRleHR1cmVcblxuXHRcdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdC8vIHJlbW92ZSBhbGwgd2ViZ2wgcHJvcGVydGllc1xuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXG5cdFx0aWYgKCAhIHJlbmRlclRhcmdldCApIHJldHVybjtcblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkgdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHZhciBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdGlmICggaW1hZ2UgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyB1bmRlZmluZWQnICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGltYWdlLmNvbXBsZXRlID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyBpbmNvbXBsZXRlJyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1NTMsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUzRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzI4NzksIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0fVxuXG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCA9PT0gNiApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHRcdGlmICggISB0ZXh0dXJlUHJvcGVydGllcy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0XHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzQwNjcsIHRleHR1cmVQcm9wZXJ0aWVzLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUgKTtcblxuXHRcdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQwLCB0ZXh0dXJlLmZsaXBZICk7XG5cblx0XHRcdFx0dmFyIGlzQ29tcHJlc3NlZCA9ICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKTtcblx0XHRcdFx0dmFyIGlzRGF0YVRleHR1cmUgPSAoIHRleHR1cmUuaW1hZ2VbIDAgXSAmJiB0ZXh0dXJlLmltYWdlWyAwIF0uaXNEYXRhVGV4dHVyZSApO1xuXG5cdFx0XHRcdHZhciBjdWJlSW1hZ2UgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIGlzQ29tcHJlc3NlZCAmJiAhIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gY2xhbXBUb01heFNpemUoIHRleHR1cmUuaW1hZ2VbIGkgXSwgY2FwYWJpbGl0aWVzLm1heEN1YmVtYXBTaXplICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjdWJlSW1hZ2VbIGkgXSA9IGlzRGF0YVRleHR1cmUgPyB0ZXh0dXJlLmltYWdlWyBpIF0uaW1hZ2UgOiB0ZXh0dXJlLmltYWdlWyBpIF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBpbWFnZSA9IGN1YmVJbWFnZVsgMCBdLFxuXHRcdFx0XHRcdGlzUG93ZXJPZlR3b0ltYWdlID0gaXNQb3dlck9mVHdvKCBpbWFnZSApLFxuXHRcdFx0XHRcdGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQgKSxcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSxcblx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIGdsRm9ybWF0LCBnbFR5cGUgKTtcblxuXHRcdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzQwNjcsIHRleHR1cmUsIGlzUG93ZXJPZlR3b0ltYWdlICk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggISBpc0NvbXByZXNzZWQgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGN1YmVJbWFnZVsgaSBdLndpZHRoLCBjdWJlSW1hZ2VbIGkgXS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHZhciBtaXBtYXAsIG1pcG1hcHMgPSBjdWJlSW1hZ2VbIGkgXS5taXBtYXBzO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gbWlwbWFwcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBqIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBzdGF0ZS5nZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMoKS5pbmRleE9mKCBnbEZvcm1hdCApID4gLSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAuc2V0VGV4dHVyZUN1YmUoKScgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggISBpc0NvbXByZXNzZWQgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoIC0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIGlzUG93ZXJPZlR3b0ltYWdlICkgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBhc3N1bWUgaW1hZ2VzIGZvciBjdWJlIG1hcCBoYXZlIHRoZSBzYW1lIHNpemUuXG5cdFx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM0MDY3LCB0ZXh0dXJlLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlRHluYW1pYyggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUsIGlzUG93ZXJPZlR3b0ltYWdlICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggaXNQb3dlck9mVHdvSW1hZ2UgKSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDIsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmUud3JhcFMgKSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MywgdXRpbHMuY29udmVydCggdGV4dHVyZS53cmFwVCApICk7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDAsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmUubWFnRmlsdGVyICkgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDEsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmUubWluRmlsdGVyICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDIsIDMzMDcxICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQzLCAzMzA3MSApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUud3JhcFMgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgfHwgdGV4dHVyZS53cmFwVCAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGlzIG5vdCBwb3dlciBvZiB0d28uIFRleHR1cmUud3JhcFMgYW5kIFRleHR1cmUud3JhcFQgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQwLCBmaWx0ZXJGYWxsYmFjayggdGV4dHVyZS5tYWdGaWx0ZXIgKSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MSwgZmlsdGVyRmFsbGJhY2soIHRleHR1cmUubWluRmlsdGVyICkgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IG51bGwgKSByZXR1cm47XG5cdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gSGFsZkZsb2F0VHlwZSAmJiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApICkgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdGlmICggdGV4dHVyZS5hbmlzb3Ryb3B5ID4gMSB8fCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmYoIHRleHR1cmVUeXBlLCBleHRlbnNpb24uVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIE1hdGgubWluKCB0ZXh0dXJlLmFuaXNvdHJvcHksIGNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCkgKSApO1xuXHRcdFx0XHRwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgPSB0ZXh0dXJlLmFuaXNvdHJvcHk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVR5cGU7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZTNEICkge1xuXG5cdFx0XHR0ZXh0dXJlVHlwZSA9IDMyODc5O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGV4dHVyZVR5cGUgPSAzNTUzO1xuXG5cdFx0fVxuXG5cblx0XHRpZiAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID0gdHJ1ZTtcblxuXHRcdFx0dGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdH1cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblxuXG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIHRleHR1cmVUeXBlLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cblxuXHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDAsIHRleHR1cmUuZmxpcFkgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQxLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTcsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cblx0XHR2YXIgaW1hZ2UgPSBjbGFtcFRvTWF4U2l6ZSggdGV4dHVyZS5pbWFnZSwgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICk7XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc1Bvd2VyT2ZUd28oIHRleHR1cmUgKSAmJiBpc1Bvd2VyT2ZUd28oIGltYWdlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpbWFnZSA9IG1ha2VQb3dlck9mVHdvKCBpbWFnZSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGlzUG93ZXJPZlR3b0ltYWdlID0gaXNQb3dlck9mVHdvKCBpbWFnZSApLFxuXHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCApLFxuXHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICksXG5cdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIGdsRm9ybWF0LCBnbFR5cGUgKTtcblxuXHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZSwgaXNQb3dlck9mVHdvSW1hZ2UgKTtcblxuXHRcdHZhciBtaXBtYXAsIG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdC8vIHBvcHVsYXRlIGRlcHRoIHRleHR1cmUgd2l0aCBkdW1teSBkYXRhXG5cblx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSA2NDAyO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICkge1xuXG5cdFx0XHRcdGlmICggISBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSB0aHJvdyBuZXcgRXJyb3IoICdGbG9hdCBEZXB0aCBUZXh0dXJlIG9ubHkgc3VwcG9ydGVkIGluIFdlYkdMMi4wJyApO1xuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzYwMTI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0XHQvLyBXZWJHTCAyLjAgcmVxdWlyZXMgc2lnbmVkIGludGVybmFsZm9ybWF0IGZvciBnbFRleEltYWdlMkRcblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDMzMTg5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgPT09IERlcHRoRm9ybWF0ICYmIGdsSW50ZXJuYWxGb3JtYXQgPT09IDY0MDIgKSB7XG5cblx0XHRcdFx0Ly8gVGhlIGVycm9yIElOVkFMSURfT1BFUkFUSU9OIGlzIGdlbmVyYXRlZCBieSB0ZXhJbWFnZTJEIGlmIGZvcm1hdCBhbmQgaW50ZXJuYWxmb3JtYXQgYXJlXG5cdFx0XHRcdC8vIERFUFRIX0NPTVBPTkVOVCBhbmQgdHlwZSBpcyBub3QgVU5TSUdORURfU0hPUlQgb3IgVU5TSUdORURfSU5UXG5cdFx0XHRcdC8vIChodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2RlcHRoX3RleHR1cmUvKVxuXHRcdFx0XHRpZiAoIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRTaG9ydFR5cGUgJiYgdGV4dHVyZS50eXBlICE9PSBVbnNpZ25lZEludFR5cGUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRTaG9ydFR5cGUgb3IgVW5zaWduZWRJbnRUeXBlIGZvciBEZXB0aEZvcm1hdCBEZXB0aFRleHR1cmUuJyApO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS50eXBlID0gVW5zaWduZWRTaG9ydFR5cGU7XG5cdFx0XHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcHRoIHN0ZW5jaWwgdGV4dHVyZXMgbmVlZCB0aGUgREVQVEhfU1RFTkNJTCBpbnRlcm5hbCBmb3JtYXRcblx0XHRcdC8vIChodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2RlcHRoX3RleHR1cmUvKVxuXHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xuXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNDA0MTtcblxuXHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcblx0XHRcdFx0Ly8gREVQVEhfU1RFTkNJTCBhbmQgdHlwZSBpcyBub3QgVU5TSUdORURfSU5UXzI0XzhfV0VCR0wuXG5cdFx0XHRcdC8vIChodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2RlcHRoX3RleHR1cmUvKVxuXHRcdFx0XHRpZiAoIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVXNlIFVuc2lnbmVkSW50MjQ4VHlwZSBmb3IgRGVwdGhTdGVuY2lsRm9ybWF0IERlcHRoVGV4dHVyZS4nICk7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZEludDI0OFR5cGU7XG5cdFx0XHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdC8vIGlmIHRoZXJlIGFyZSBubyBtYW51YWwgbWlwbWFwc1xuXHRcdFx0Ly8gc2V0IDAgbGV2ZWwgbWlwbWFwIGFuZCB0aGVuIHVzZSBHTCB0byBnZW5lcmF0ZSBvdGhlciBtaXBtYXAgbGV2ZWxzXG5cblx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICYmIGlzUG93ZXJPZlR3b0ltYWdlICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoIC0gMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JGb3JtYXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHN0YXRlLmdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpLmluZGV4T2YoIGdsRm9ybWF0ICkgPiAtIDEgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUzRCApIHtcblxuXHRcdFx0c3RhdGUudGV4SW1hZ2UzRCggMzI4NzksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHJlZ3VsYXIgVGV4dHVyZSAoaW1hZ2UsIHZpZGVvLCBjYW52YXMpXG5cblx0XHRcdC8vIHVzZSBtYW51YWxseSBjcmVhdGVkIG1pcG1hcHMgaWYgYXZhaWxhYmxlXG5cdFx0XHQvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHNcblx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xuXG5cdFx0XHRpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCAmJiBpc1Bvd2VyT2ZUd29JbWFnZSApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbWlwbWFwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoIC0gMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIGlzUG93ZXJPZlR3b0ltYWdlICkgKSB7XG5cblx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNTUzLCB0ZXh0dXJlLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0XHRpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdC8vIFJlbmRlciB0YXJnZXRzXG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgdGFyZ2V0IHRleHR1cmUgYW5kIGJpbmQgaXQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggZnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCApIHtcblxuXHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLmZvcm1hdCApO1xuXHRcdHZhciBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCByZW5kZXJUYXJnZXQudGV4dHVyZS50eXBlICk7XG5cdFx0dmFyIGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApO1xuXHRcdHN0YXRlLnRleEltYWdlMkQoIHRleHR1cmVUYXJnZXQsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCAwICk7XG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgaW50ZXJuYWwgZGVwdGgvc3RlbmNpbCBidWZmZXJzIGFuZCBiaW5kIHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCApIHtcblxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiAhIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICkge1xuXG5cdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIDMzMTg5LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggMzYxNjAsIDM2MDk2LCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSB7XG5cblx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCAzNjE2MSwgMzQwNDEsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCAzNjE2MCwgMzMzMDYsIDM2MTYxLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZJWE1FOiBXZSBkb24ndCBzdXBwb3J0ICFkZXB0aCAhc3RlbmNpbFxuXHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIDM2MTYxLCAzMjg1NCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgcmVzb3VyY2VzIGZvciBhIERlcHRoIFRleHR1cmUgZm9yIGEgRkJPIChuZWVkcyBhbiBleHRlbnNpb24pXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApO1xuXHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAnRGVwdGggVGV4dHVyZSB3aXRoIGN1YmUgcmVuZGVyIHRhcmdldHMgaXMgbm90IHN1cHBvcnRlZCcgKTtcblxuXHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSAmJiByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ3JlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBUSFJFRS5EZXB0aFRleHR1cmUnICk7XG5cblx0XHR9XG5cblx0XHQvLyB1cGxvYWQgYW4gZW1wdHkgZGVwdGggdGV4dHVyZSB3aXRoIGZyYW1lYnVmZmVyIHNpemVcblx0XHRpZiAoICEgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSB8fFxuXHRcdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoICE9PSByZW5kZXJUYXJnZXQud2lkdGggfHxcblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgIT09IHJlbmRlclRhcmdldC5oZWlnaHQgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggPSByZW5kZXJUYXJnZXQud2lkdGg7XG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLmhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHNldFRleHR1cmUyRCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0dmFyIHdlYmdsRGVwdGhUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5mb3JtYXQgPT09IERlcHRoRm9ybWF0ICkge1xuXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIDM2MTYwLCAzNjA5NiwgMzU1Mywgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDMzMzA2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVW5rbm93biBkZXB0aFRleHR1cmUgZm9ybWF0JyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBTZXR1cCBHTCByZXNvdXJjZXMgZm9yIGEgbm9uLXRleHR1cmUgZGVwdGggYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0dmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID09PSB0cnVlICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAndGFyZ2V0LmRlcHRoVGV4dHVyZSBub3Qgc3VwcG9ydGVkIGluIEN1YmUgcmVuZGVyIHRhcmdldHMnICk7XG5cblx0XHRcdHNldHVwRGVwdGhUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0IHVwIEdMIHJlc291cmNlcyBmb3IgdGhlIHJlbmRlciB0YXJnZXRcblx0ZnVuY3Rpb24gc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25SZW5kZXJUYXJnZXREaXNwb3NlICk7XG5cblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdHZhciBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSA9PT0gdHJ1ZSApO1xuXHRcdHZhciBpc1RhcmdldFBvd2VyT2ZUd28gPSBpc1Bvd2VyT2ZUd28oIHJlbmRlclRhcmdldCApO1xuXG5cdFx0Ly8gU2V0dXAgZnJhbWVidWZmZXJcblxuXHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGNvbG9yIGJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCAzNDA2NywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIGlzVGFyZ2V0UG93ZXJPZlR3byApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNDA2OSArIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIGlzVGFyZ2V0UG93ZXJPZlR3byApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNDA2NywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgbnVsbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1NTMsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzU1MywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIGlzVGFyZ2V0UG93ZXJPZlR3byApO1xuXHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNTUzICk7XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgaXNUYXJnZXRQb3dlck9mVHdvICkgKSB7XG5cblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM1NTMsIHJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2V0dXAgZGVwdGggYW5kIHN0ZW5jaWwgYnVmZmVyc1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0dmFyIGlzVGFyZ2V0UG93ZXJPZlR3byA9IGlzUG93ZXJPZlR3byggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgaXNUYXJnZXRQb3dlck9mVHdvICkgKSB7XG5cblx0XHRcdHZhciB0YXJnZXQgPSByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPyAzNDA2NyA6IDM1NTM7XG5cdFx0XHR2YXIgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIHRhcmdldCwgd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRnZW5lcmF0ZU1pcG1hcCggdGFyZ2V0LCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0YXJnZXQsIG51bGwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0dmFyIGlkID0gdGV4dHVyZS5pZDtcblx0XHR2YXIgZnJhbWUgPSBpbmZvLnJlbmRlci5mcmFtZTtcblxuXHRcdC8vIENoZWNrIHRoZSBsYXN0IGZyYW1lIHdlIHVwZGF0ZWQgdGhlIFZpZGVvVGV4dHVyZVxuXG5cdFx0aWYgKCBfdmlkZW9UZXh0dXJlc1sgaWQgXSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdF92aWRlb1RleHR1cmVzWyBpZCBdID0gZnJhbWU7XG5cdFx0XHR0ZXh0dXJlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR0aGlzLnNldFRleHR1cmUyRCA9IHNldFRleHR1cmUyRDtcblx0dGhpcy5zZXRUZXh0dXJlM0QgPSBzZXRUZXh0dXJlM0Q7XG5cdHRoaXMuc2V0VGV4dHVyZUN1YmUgPSBzZXRUZXh0dXJlQ3ViZTtcblx0dGhpcy5zZXRUZXh0dXJlQ3ViZUR5bmFtaWMgPSBzZXRUZXh0dXJlQ3ViZUR5bmFtaWM7XG5cdHRoaXMuc2V0dXBSZW5kZXJUYXJnZXQgPSBzZXR1cFJlbmRlclRhcmdldDtcblx0dGhpcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAgPSB1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXA7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIHRoZXNwaXRlIC8gaHR0cDovL3d3dy50d2l0dGVyLmNvbS90aGVzcGl0ZVxuICovXG5cbmZ1bmN0aW9uIFdlYkdMVXRpbHMoIGdsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0ZnVuY3Rpb24gY29udmVydCggcCApIHtcblxuXHRcdHZhciBleHRlbnNpb247XG5cblx0XHRpZiAoIHAgPT09IFJlcGVhdFdyYXBwaW5nICkgcmV0dXJuIDEwNDk3O1xuXHRcdGlmICggcCA9PT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHJldHVybiAzMzA3MTtcblx0XHRpZiAoIHAgPT09IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgKSByZXR1cm4gMzM2NDg7XG5cblx0XHRpZiAoIHAgPT09IE5lYXJlc3RGaWx0ZXIgKSByZXR1cm4gOTcyODtcblx0XHRpZiAoIHAgPT09IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyICkgcmV0dXJuIDk5ODQ7XG5cdFx0aWYgKCBwID09PSBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyICkgcmV0dXJuIDk5ODY7XG5cblx0XHRpZiAoIHAgPT09IExpbmVhckZpbHRlciApIHJldHVybiA5NzI5O1xuXHRcdGlmICggcCA9PT0gTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciApIHJldHVybiA5OTg1O1xuXHRcdGlmICggcCA9PT0gTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyICkgcmV0dXJuIDk5ODc7XG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkQnl0ZVR5cGUgKSByZXR1cm4gNTEyMTtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSApIHJldHVybiAzMjgxOTtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSApIHJldHVybiAzMjgyMDtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NjVUeXBlICkgcmV0dXJuIDMzNjM1O1xuXG5cdFx0aWYgKCBwID09PSBCeXRlVHlwZSApIHJldHVybiA1MTIwO1xuXHRcdGlmICggcCA9PT0gU2hvcnRUeXBlICkgcmV0dXJuIDUxMjI7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHJldHVybiA1MTIzO1xuXHRcdGlmICggcCA9PT0gSW50VHlwZSApIHJldHVybiA1MTI0O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnRUeXBlICkgcmV0dXJuIDUxMjU7XG5cdFx0aWYgKCBwID09PSBGbG9hdFR5cGUgKSByZXR1cm4gNTEyNjtcblxuXHRcdGlmICggcCA9PT0gSGFsZkZsb2F0VHlwZSApIHtcblxuXHRcdFx0aWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSByZXR1cm4gNTEzMTtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHJldHVybiBleHRlbnNpb24uSEFMRl9GTE9BVF9PRVM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IEFscGhhRm9ybWF0ICkgcmV0dXJuIDY0MDY7XG5cdFx0aWYgKCBwID09PSBSR0JGb3JtYXQgKSByZXR1cm4gNjQwNztcblx0XHRpZiAoIHAgPT09IFJHQkFGb3JtYXQgKSByZXR1cm4gNjQwODtcblx0XHRpZiAoIHAgPT09IEx1bWluYW5jZUZvcm1hdCApIHJldHVybiA2NDA5O1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlQWxwaGFGb3JtYXQgKSByZXR1cm4gNjQxMDtcblx0XHRpZiAoIHAgPT09IERlcHRoRm9ybWF0ICkgcmV0dXJuIDY0MDI7XG5cdFx0aWYgKCBwID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSByZXR1cm4gMzQwNDE7XG5cdFx0aWYgKCBwID09PSBSZWRGb3JtYXQgKSByZXR1cm4gNjQwMztcblxuXHRcdGlmICggcCA9PT0gQWRkRXF1YXRpb24gKSByZXR1cm4gMzI3NzQ7XG5cdFx0aWYgKCBwID09PSBTdWJ0cmFjdEVxdWF0aW9uICkgcmV0dXJuIDMyNzc4O1xuXHRcdGlmICggcCA9PT0gUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gKSByZXR1cm4gMzI3Nzk7XG5cblx0XHRpZiAoIHAgPT09IFplcm9GYWN0b3IgKSByZXR1cm4gMDtcblx0XHRpZiAoIHAgPT09IE9uZUZhY3RvciApIHJldHVybiAxO1xuXHRcdGlmICggcCA9PT0gU3JjQ29sb3JGYWN0b3IgKSByZXR1cm4gNzY4O1xuXHRcdGlmICggcCA9PT0gT25lTWludXNTcmNDb2xvckZhY3RvciApIHJldHVybiA3Njk7XG5cdFx0aWYgKCBwID09PSBTcmNBbHBoYUZhY3RvciApIHJldHVybiA3NzA7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c1NyY0FscGhhRmFjdG9yICkgcmV0dXJuIDc3MTtcblx0XHRpZiAoIHAgPT09IERzdEFscGhhRmFjdG9yICkgcmV0dXJuIDc3Mjtcblx0XHRpZiAoIHAgPT09IE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgKSByZXR1cm4gNzczO1xuXG5cdFx0aWYgKCBwID09PSBEc3RDb2xvckZhY3RvciApIHJldHVybiA3NzQ7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c0RzdENvbG9yRmFjdG9yICkgcmV0dXJuIDc3NTtcblx0XHRpZiAoIHAgPT09IFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgKSByZXR1cm4gNzc2O1xuXG5cdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ184eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzEweDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IE1pbkVxdWF0aW9uIHx8IHAgPT09IE1heEVxdWF0aW9uICkge1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IE1pbkVxdWF0aW9uICkgcmV0dXJuIDMyNzc1O1xuXHRcdFx0XHRpZiAoIHAgPT09IE1heEVxdWF0aW9uICkgcmV0dXJuIDMyNzc2O1xuXG5cdFx0XHR9XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBNaW5FcXVhdGlvbiApIHJldHVybiBleHRlbnNpb24uTUlOX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBNYXhFcXVhdGlvbiApIHJldHVybiBleHRlbnNpb24uTUFYX0VYVDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkgcmV0dXJuIDM0MDQyO1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgcmV0dXJuIGV4dGVuc2lvbi5VTlNJR05FRF9JTlRfMjRfOF9XRUJHTDtcblxuXHRcdH1cblxuXHRcdHJldHVybiAwO1xuXG5cdH1cblxuXHRyZXR1cm4geyBjb252ZXJ0OiBjb252ZXJ0IH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEdyb3VwKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnR3JvdXAnO1xuXG59XG5cbkdyb3VwLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEdyb3VwLFxuXG5cdGlzR3JvdXA6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4qL1xuXG5mdW5jdGlvbiBDYW1lcmEoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDYW1lcmEnO1xuXG5cdHRoaXMubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxuXHR0aGlzLnByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxufVxuXG5DYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ2FtZXJhLFxuXG5cdGlzQ2FtZXJhOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuY29weSggc291cmNlLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCBzb3VyY2UucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0V29ybGREaXJlY3Rpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ2FtZXJhOiAuZ2V0V29ybGREaXJlY3Rpb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdHZhciBlID0gdGhpcy5tYXRyaXhXb3JsZC5lbGVtZW50cztcblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCAtIGVbIDggXSwgLSBlWyA5IF0sIC0gZVsgMTAgXSApLm5vcm1hbGl6ZSgpO1xuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgZ3JlZ2dtYW4gLyBodHRwOi8vZ2FtZXMuZ3JlZ2dtYW4uY29tL1xuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICkge1xuXG5cdENhbWVyYS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BlcnNwZWN0aXZlQ2FtZXJhJztcblxuXHR0aGlzLmZvdiA9IGZvdiAhPT0gdW5kZWZpbmVkID8gZm92IDogNTA7XG5cdHRoaXMuem9vbSA9IDE7XG5cblx0dGhpcy5uZWFyID0gbmVhciAhPT0gdW5kZWZpbmVkID8gbmVhciA6IDAuMTtcblx0dGhpcy5mYXIgPSBmYXIgIT09IHVuZGVmaW5lZCA/IGZhciA6IDIwMDA7XG5cdHRoaXMuZm9jdXMgPSAxMDtcblxuXHR0aGlzLmFzcGVjdCA9IGFzcGVjdCAhPT0gdW5kZWZpbmVkID8gYXNwZWN0IDogMTtcblx0dGhpcy52aWV3ID0gbnVsbDtcblxuXHR0aGlzLmZpbG1HYXVnZSA9IDM1O1x0Ly8gd2lkdGggb2YgdGhlIGZpbG0gKGRlZmF1bHQgaW4gbWlsbGltZXRlcnMpXG5cdHRoaXMuZmlsbU9mZnNldCA9IDA7XHQvLyBob3Jpem9udGFsIGZpbG0gb2Zmc2V0IChzYW1lIHVuaXQgYXMgZ2F1Z2UpXG5cblx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cbn1cblxuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQ2FtZXJhLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBlcnNwZWN0aXZlQ2FtZXJhLFxuXG5cdGlzUGVyc3BlY3RpdmVDYW1lcmE6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdENhbWVyYS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5mb3YgPSBzb3VyY2UuZm92O1xuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xuXG5cdFx0dGhpcy5uZWFyID0gc291cmNlLm5lYXI7XG5cdFx0dGhpcy5mYXIgPSBzb3VyY2UuZmFyO1xuXHRcdHRoaXMuZm9jdXMgPSBzb3VyY2UuZm9jdXM7XG5cblx0XHR0aGlzLmFzcGVjdCA9IHNvdXJjZS5hc3BlY3Q7XG5cdFx0dGhpcy52aWV3ID0gc291cmNlLnZpZXcgPT09IG51bGwgPyBudWxsIDogT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS52aWV3ICk7XG5cblx0XHR0aGlzLmZpbG1HYXVnZSA9IHNvdXJjZS5maWxtR2F1Z2U7XG5cdFx0dGhpcy5maWxtT2Zmc2V0ID0gc291cmNlLmZpbG1PZmZzZXQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBGT1YgYnkgZm9jYWwgbGVuZ3RoIGluIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgLmZpbG1HYXVnZS5cblx0ICpcblx0ICogVGhlIGRlZmF1bHQgZmlsbSBnYXVnZSBpcyAzNSwgc28gdGhhdCB0aGUgZm9jYWwgbGVuZ3RoIGNhbiBiZSBzcGVjaWZpZWQgZm9yXG5cdCAqIGEgMzVtbSAoZnVsbCBmcmFtZSkgY2FtZXJhLlxuXHQgKlxuXHQgKiBWYWx1ZXMgZm9yIGZvY2FsIGxlbmd0aCBhbmQgZmlsbSBnYXVnZSBtdXN0IGhhdmUgdGhlIHNhbWUgdW5pdC5cblx0ICovXG5cdHNldEZvY2FsTGVuZ3RoOiBmdW5jdGlvbiAoIGZvY2FsTGVuZ3RoICkge1xuXG5cdFx0Ly8gc2VlIGh0dHA6Ly93d3cuYm9iYXRraW5zLmNvbS9waG90b2dyYXBoeS90ZWNobmljYWwvZmllbGRfb2Zfdmlldy5odG1sXG5cdFx0dmFyIHZFeHRlbnRTbG9wZSA9IDAuNSAqIHRoaXMuZ2V0RmlsbUhlaWdodCgpIC8gZm9jYWxMZW5ndGg7XG5cblx0XHR0aGlzLmZvdiA9IF9NYXRoLlJBRDJERUcgKiAyICogTWF0aC5hdGFuKCB2RXh0ZW50U2xvcGUgKTtcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIHRoZSBmb2NhbCBsZW5ndGggZnJvbSB0aGUgY3VycmVudCAuZm92IGFuZCAuZmlsbUdhdWdlLlxuXHQgKi9cblx0Z2V0Rm9jYWxMZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2RXh0ZW50U2xvcGUgPSBNYXRoLnRhbiggX01hdGguREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICk7XG5cblx0XHRyZXR1cm4gMC41ICogdGhpcy5nZXRGaWxtSGVpZ2h0KCkgLyB2RXh0ZW50U2xvcGU7XG5cblx0fSxcblxuXHRnZXRFZmZlY3RpdmVGT1Y6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfTWF0aC5SQUQyREVHICogMiAqIE1hdGguYXRhbihcblx0XHRcdE1hdGgudGFuKCBfTWF0aC5ERUcyUkFEICogMC41ICogdGhpcy5mb3YgKSAvIHRoaXMuem9vbSApO1xuXG5cdH0sXG5cblx0Z2V0RmlsbVdpZHRoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gcG9ydHJhaXQgZm9ybWF0IChhc3BlY3QgPCAxKVxuXHRcdHJldHVybiB0aGlzLmZpbG1HYXVnZSAqIE1hdGgubWluKCB0aGlzLmFzcGVjdCwgMSApO1xuXG5cdH0sXG5cblx0Z2V0RmlsbUhlaWdodDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIGxhbmRzY2FwZSBmb3JtYXQgKGFzcGVjdCA+IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlIC8gTWF0aC5tYXgoIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fSxcblxuXHQvKipcblx0ICogU2V0cyBhbiBvZmZzZXQgaW4gYSBsYXJnZXIgZnJ1c3R1bS4gVGhpcyBpcyB1c2VmdWwgZm9yIG11bHRpLXdpbmRvdyBvclxuXHQgKiBtdWx0aS1tb25pdG9yL211bHRpLW1hY2hpbmUgc2V0dXBzLlxuXHQgKlxuXHQgKiBGb3IgZXhhbXBsZSwgaWYgeW91IGhhdmUgM3gyIG1vbml0b3JzIGFuZCBlYWNoIG1vbml0b3IgaXMgMTkyMHgxMDgwIGFuZFxuXHQgKiB0aGUgbW9uaXRvcnMgYXJlIGluIGdyaWQgbGlrZSB0aGlzXG5cdCAqXG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKiAgIHwgQSB8IEIgfCBDIHxcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqICAgfCBEIHwgRSB8IEYgfFxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICpcblx0ICogdGhlbiBmb3IgZWFjaCBtb25pdG9yIHlvdSB3b3VsZCBjYWxsIGl0IGxpa2UgdGhpc1xuXHQgKlxuXHQgKiAgIHZhciB3ID0gMTkyMDtcblx0ICogICB2YXIgaCA9IDEwODA7XG5cdCAqICAgdmFyIGZ1bGxXaWR0aCA9IHcgKiAzO1xuXHQgKiAgIHZhciBmdWxsSGVpZ2h0ID0gaCAqIDI7XG5cdCAqXG5cdCAqICAgLS1BLS1cblx0ICogICBjYW1lcmEuc2V0T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tQi0tXG5cdCAqICAgY2FtZXJhLnNldE9mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUMtLVxuXHQgKiAgIGNhbWVyYS5zZXRPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDIsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1ELS1cblx0ICogICBjYW1lcmEuc2V0T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMSwgdywgaCApO1xuXHQgKiAgIC0tRS0tXG5cdCAqICAgY2FtZXJhLnNldE9mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDEsIHcsIGggKTtcblx0ICogICAtLUYtLVxuXHQgKiAgIGNhbWVyYS5zZXRPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDIsIGggKiAxLCB3LCBoICk7XG5cdCAqXG5cdCAqICAgTm90ZSB0aGVyZSBpcyBubyByZWFzb24gbW9uaXRvcnMgaGF2ZSB0byBiZSB0aGUgc2FtZSBzaXplIG9yIGluIGEgZ3JpZC5cblx0ICovXG5cdHNldFZpZXdPZmZzZXQ6IGZ1bmN0aW9uICggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0dGhpcy5hc3BlY3QgPSBmdWxsV2lkdGggLyBmdWxsSGVpZ2h0O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldyA9IHtcblx0XHRcdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRcdFx0ZnVsbFdpZHRoOiAxLFxuXHRcdFx0XHRmdWxsSGVpZ2h0OiAxLFxuXHRcdFx0XHRvZmZzZXRYOiAwLFxuXHRcdFx0XHRvZmZzZXRZOiAwLFxuXHRcdFx0XHR3aWR0aDogMSxcblx0XHRcdFx0aGVpZ2h0OiAxXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52aWV3LmVuYWJsZWQgPSB0cnVlO1xuXHRcdHRoaXMudmlldy5mdWxsV2lkdGggPSBmdWxsV2lkdGg7XG5cdFx0dGhpcy52aWV3LmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0O1xuXHRcdHRoaXMudmlldy5vZmZzZXRYID0geDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WSA9IHk7XG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy52aWV3LmhlaWdodCA9IGhlaWdodDtcblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH0sXG5cblx0Y2xlYXJWaWV3T2Zmc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3LmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH0sXG5cblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG5lYXIgPSB0aGlzLm5lYXIsXG5cdFx0XHR0b3AgPSBuZWFyICogTWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tLFxuXHRcdFx0aGVpZ2h0ID0gMiAqIHRvcCxcblx0XHRcdHdpZHRoID0gdGhpcy5hc3BlY3QgKiBoZWlnaHQsXG5cdFx0XHRsZWZ0ID0gLSAwLjUgKiB3aWR0aCxcblx0XHRcdHZpZXcgPSB0aGlzLnZpZXc7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHtcblxuXHRcdFx0dmFyIGZ1bGxXaWR0aCA9IHZpZXcuZnVsbFdpZHRoLFxuXHRcdFx0XHRmdWxsSGVpZ2h0ID0gdmlldy5mdWxsSGVpZ2h0O1xuXG5cdFx0XHRsZWZ0ICs9IHZpZXcub2Zmc2V0WCAqIHdpZHRoIC8gZnVsbFdpZHRoO1xuXHRcdFx0dG9wIC09IHZpZXcub2Zmc2V0WSAqIGhlaWdodCAvIGZ1bGxIZWlnaHQ7XG5cdFx0XHR3aWR0aCAqPSB2aWV3LndpZHRoIC8gZnVsbFdpZHRoO1xuXHRcdFx0aGVpZ2h0ICo9IHZpZXcuaGVpZ2h0IC8gZnVsbEhlaWdodDtcblxuXHRcdH1cblxuXHRcdHZhciBza2V3ID0gdGhpcy5maWxtT2Zmc2V0O1xuXHRcdGlmICggc2tldyAhPT0gMCApIGxlZnQgKz0gbmVhciAqIHNrZXcgLyB0aGlzLmdldEZpbG1XaWR0aCgpO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgbGVmdCArIHdpZHRoLCB0b3AsIHRvcCAtIGhlaWdodCwgbmVhciwgdGhpcy5mYXIgKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5mb3YgPSB0aGlzLmZvdjtcblx0XHRkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tO1xuXG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcblx0XHRkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjtcblx0XHRkYXRhLm9iamVjdC5mb2N1cyA9IHRoaXMuZm9jdXM7XG5cblx0XHRkYXRhLm9iamVjdC5hc3BlY3QgPSB0aGlzLmFzcGVjdDtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcblxuXHRcdGRhdGEub2JqZWN0LmZpbG1HYXVnZSA9IHRoaXMuZmlsbUdhdWdlO1xuXHRcdGRhdGEub2JqZWN0LmZpbG1PZmZzZXQgPSB0aGlzLmZpbG1PZmZzZXQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEFycmF5Q2FtZXJhKCBhcnJheSApIHtcblxuXHRQZXJzcGVjdGl2ZUNhbWVyYS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5jYW1lcmFzID0gYXJyYXkgfHwgW107XG5cbn1cblxuQXJyYXlDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQXJyYXlDYW1lcmEsXG5cblx0aXNBcnJheUNhbWVyYTogdHJ1ZVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBqc2FudGVsbCAvIGh0dHBzOi8vd3d3LmpzYW50ZWxsLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIGNhbWVyYUxQb3MgPSBuZXcgVmVjdG9yMygpO1xudmFyIGNhbWVyYVJQb3MgPSBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIEFzc3VtZXMgMiBjYW1lcmFzIHRoYXQgYXJlIHBhcmFsbGVsIGFuZCBzaGFyZSBhbiBYLWF4aXMsIGFuZCB0aGF0XG4gKiB0aGUgY2FtZXJhcycgcHJvamVjdGlvbiBhbmQgd29ybGQgbWF0cmljZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0LlxuICogQW5kIHRoYXQgbmVhciBhbmQgZmFyIHBsYW5lcyBhcmUgaWRlbnRpY2FsIGZvciBib3RoIGNhbWVyYXMuXG4gKiBWaXN1YWxpemF0aW9uIG9mIHRoaXMgdGVjaG5pcXVlOiBodHRwczovL2NvbXB1dGVyZ3JhcGhpY3Muc3RhY2tleGNoYW5nZS5jb20vYS80NzY1XG4gKi9cbmZ1bmN0aW9uIHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYSwgY2FtZXJhTCwgY2FtZXJhUiApIHtcblxuXHRjYW1lcmFMUG9zLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhTC5tYXRyaXhXb3JsZCApO1xuXHRjYW1lcmFSUG9zLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhUi5tYXRyaXhXb3JsZCApO1xuXG5cdHZhciBpcGQgPSBjYW1lcmFMUG9zLmRpc3RhbmNlVG8oIGNhbWVyYVJQb3MgKTtcblxuXHR2YXIgcHJvakwgPSBjYW1lcmFMLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7XG5cdHZhciBwcm9qUiA9IGNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblxuXHQvLyBWUiBzeXN0ZW1zIHdpbGwgaGF2ZSBpZGVudGljYWwgZmFyIGFuZCBuZWFyIHBsYW5lcywgYW5kXG5cdC8vIG1vc3QgbGlrZWx5IGlkZW50aWNhbCB0b3AgYW5kIGJvdHRvbSBmcnVzdHVtIGV4dGVudHMuXG5cdC8vIFVzZSB0aGUgbGVmdCBjYW1lcmEgZm9yIHRoZXNlIHZhbHVlcy5cblx0dmFyIG5lYXIgPSBwcm9qTFsgMTQgXSAvICggcHJvakxbIDEwIF0gLSAxICk7XG5cdHZhciBmYXIgPSBwcm9qTFsgMTQgXSAvICggcHJvakxbIDEwIF0gKyAxICk7XG5cdHZhciB0b3BGb3YgPSAoIHByb2pMWyA5IF0gKyAxICkgLyBwcm9qTFsgNSBdO1xuXHR2YXIgYm90dG9tRm92ID0gKCBwcm9qTFsgOSBdIC0gMSApIC8gcHJvakxbIDUgXTtcblxuXHR2YXIgbGVmdEZvdiA9ICggcHJvakxbIDggXSAtIDEgKSAvIHByb2pMWyAwIF07XG5cdHZhciByaWdodEZvdiA9ICggcHJvalJbIDggXSArIDEgKSAvIHByb2pSWyAwIF07XG5cdHZhciBsZWZ0ID0gbmVhciAqIGxlZnRGb3Y7XG5cdHZhciByaWdodCA9IG5lYXIgKiByaWdodEZvdjtcblxuXHQvLyBDYWxjdWxhdGUgdGhlIG5ldyBjYW1lcmEncyBwb3NpdGlvbiBvZmZzZXQgZnJvbSB0aGVcblx0Ly8gbGVmdCBjYW1lcmEuIHhPZmZzZXQgc2hvdWxkIGJlIHJvdWdobHkgaGFsZiBgaXBkYC5cblx0dmFyIHpPZmZzZXQgPSBpcGQgLyAoIC0gbGVmdEZvdiArIHJpZ2h0Rm92ICk7XG5cdHZhciB4T2Zmc2V0ID0gek9mZnNldCAqIC0gbGVmdEZvdjtcblxuXHQvLyBUT0RPOiBCZXR0ZXIgd2F5IHRvIGFwcGx5IHRoaXMgb2Zmc2V0P1xuXHRjYW1lcmFMLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7XG5cdGNhbWVyYS50cmFuc2xhdGVYKCB4T2Zmc2V0ICk7XG5cdGNhbWVyYS50cmFuc2xhdGVaKCB6T2Zmc2V0ICk7XG5cdGNhbWVyYS5tYXRyaXhXb3JsZC5jb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHQvLyBGaW5kIHRoZSB1bmlvbiBvZiB0aGUgZnJ1c3R1bSB2YWx1ZXMgb2YgdGhlIGNhbWVyYXMgYW5kIHNjYWxlXG5cdC8vIHRoZSB2YWx1ZXMgc28gdGhhdCB0aGUgbmVhciBwbGFuZSdzIHBvc2l0aW9uIGRvZXMgbm90IGNoYW5nZSBpbiB3b3JsZCBzcGFjZSxcblx0Ly8gYWx0aG91Z2ggbXVzdCBub3cgYmUgcmVsYXRpdmUgdG8gdGhlIG5ldyB1bmlvbiBjYW1lcmEuXG5cdHZhciBuZWFyMiA9IG5lYXIgKyB6T2Zmc2V0O1xuXHR2YXIgZmFyMiA9IGZhciArIHpPZmZzZXQ7XG5cdHZhciBsZWZ0MiA9IGxlZnQgLSB4T2Zmc2V0O1xuXHR2YXIgcmlnaHQyID0gcmlnaHQgKyAoIGlwZCAtIHhPZmZzZXQgKTtcblx0dmFyIHRvcDIgPSB0b3BGb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cdHZhciBib3R0b20yID0gYm90dG9tRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyO1xuXG5cdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdDIsIHJpZ2h0MiwgdG9wMiwgYm90dG9tMiwgbmVhcjIsIGZhcjIgKTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViVlJNYW5hZ2VyKCByZW5kZXJlciApIHtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHZhciBkZXZpY2UgPSBudWxsO1xuXHR2YXIgZnJhbWVEYXRhID0gbnVsbDtcblxuXHR2YXIgcG9zZVRhcmdldCA9IG51bGw7XG5cblx0dmFyIGNvbnRyb2xsZXJzID0gW107XG5cdHZhciBzdGFuZGluZ01hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdHZhciBzdGFuZGluZ01hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdHZhciBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gMS4wO1xuXG5cdHZhciBmcmFtZU9mUmVmZXJlbmNlVHlwZSA9ICdzdGFnZSc7XG5cblx0aWYgKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnVlJGcmFtZURhdGEnIGluIHdpbmRvdyApIHtcblxuXHRcdGZyYW1lRGF0YSA9IG5ldyB3aW5kb3cuVlJGcmFtZURhdGEoKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UsIGZhbHNlICk7XG5cblx0fVxuXG5cdHZhciBtYXRyaXhXb3JsZEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXHR2YXIgdGVtcFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHR2YXIgdGVtcFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRjYW1lcmFMLmJvdW5kcyA9IG5ldyBWZWN0b3I0KCAwLjAsIDAuMCwgMC41LCAxLjAgKTtcblx0Y2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7XG5cblx0dmFyIGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0Y2FtZXJhUi5ib3VuZHMgPSBuZXcgVmVjdG9yNCggMC41LCAwLjAsIDAuNSwgMS4wICk7XG5cdGNhbWVyYVIubGF5ZXJzLmVuYWJsZSggMiApO1xuXG5cdHZhciBjYW1lcmFWUiA9IG5ldyBBcnJheUNhbWVyYSggWyBjYW1lcmFMLCBjYW1lcmFSIF0gKTtcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBpc1ByZXNlbnRpbmcoKSB7XG5cblx0XHRyZXR1cm4gZGV2aWNlICE9PSBudWxsICYmIGRldmljZS5pc1ByZXNlbnRpbmcgPT09IHRydWU7XG5cblx0fVxuXG5cdHZhciBjdXJyZW50U2l6ZSwgY3VycmVudFBpeGVsUmF0aW87XG5cblx0ZnVuY3Rpb24gb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlKCkge1xuXG5cdFx0aWYgKCBpc1ByZXNlbnRpbmcoKSApIHtcblxuXHRcdFx0dmFyIGV5ZVBhcmFtZXRlcnMgPSBkZXZpY2UuZ2V0RXllUGFyYW1ldGVycyggJ2xlZnQnICk7XG5cdFx0XHR2YXIgcmVuZGVyV2lkdGggPSBleWVQYXJhbWV0ZXJzLnJlbmRlcldpZHRoICogZnJhbWVidWZmZXJTY2FsZUZhY3Rvcjtcblx0XHRcdHZhciByZW5kZXJIZWlnaHQgPSBleWVQYXJhbWV0ZXJzLnJlbmRlckhlaWdodCAqIGZyYW1lYnVmZmVyU2NhbGVGYWN0b3I7XG5cblx0XHRcdGN1cnJlbnRQaXhlbFJhdGlvID0gcmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpO1xuXHRcdFx0Y3VycmVudFNpemUgPSByZW5kZXJlci5nZXRTaXplKCk7XG5cblx0XHRcdHJlbmRlcmVyLnNldERyYXdpbmdCdWZmZXJTaXplKCByZW5kZXJXaWR0aCAqIDIsIHJlbmRlckhlaWdodCwgMSApO1xuXG5cdFx0XHRhbmltYXRpb24uc3RhcnQoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXREcmF3aW5nQnVmZmVyU2l6ZSggY3VycmVudFNpemUud2lkdGgsIGN1cnJlbnRTaXplLmhlaWdodCwgY3VycmVudFBpeGVsUmF0aW8gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHZhciB0cmlnZ2VycyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGZpbmRHYW1lcGFkKCBpZCApIHtcblxuXHRcdHZhciBnYW1lcGFkcyA9IG5hdmlnYXRvci5nZXRHYW1lcGFkcyAmJiBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDAsIGwgPSBnYW1lcGFkcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZ2FtZXBhZCA9IGdhbWVwYWRzWyBpIF07XG5cblx0XHRcdGlmICggZ2FtZXBhZCAmJiAoIGdhbWVwYWQuaWQgPT09ICdEYXlkcmVhbSBDb250cm9sbGVyJyB8fFxuXHRcdFx0XHRnYW1lcGFkLmlkID09PSAnR2VhciBWUiBDb250cm9sbGVyJyB8fCBnYW1lcGFkLmlkID09PSAnT2N1bHVzIEdvIENvbnRyb2xsZXInIHx8XG5cdFx0XHRcdGdhbWVwYWQuaWQgPT09ICdPcGVuVlIgR2FtZXBhZCcgfHwgZ2FtZXBhZC5pZC5zdGFydHNXaXRoKCAnT2N1bHVzIFRvdWNoJyApIHx8XG5cdFx0XHRcdGdhbWVwYWQuaWQuc3RhcnRzV2l0aCggJ1NwYXRpYWwgQ29udHJvbGxlcicgKSApICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gaWQgKSByZXR1cm4gZ2FtZXBhZDtcblxuXHRcdFx0XHRqICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpIF07XG5cblx0XHRcdHZhciBnYW1lcGFkID0gZmluZEdhbWVwYWQoIGkgKTtcblxuXHRcdFx0aWYgKCBnYW1lcGFkICE9PSB1bmRlZmluZWQgJiYgZ2FtZXBhZC5wb3NlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBnYW1lcGFkLnBvc2UgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdFx0Ly8gIFBvc2VcblxuXHRcdFx0XHR2YXIgcG9zZSA9IGdhbWVwYWQucG9zZTtcblxuXHRcdFx0XHRpZiAoIHBvc2UuaGFzUG9zaXRpb24gPT09IGZhbHNlICkgY29udHJvbGxlci5wb3NpdGlvbi5zZXQoIDAuMiwgLSAwLjYsIC0gMC4wNSApO1xuXG5cdFx0XHRcdGlmICggcG9zZS5wb3NpdGlvbiAhPT0gbnVsbCApIGNvbnRyb2xsZXIucG9zaXRpb24uZnJvbUFycmF5KCBwb3NlLnBvc2l0aW9uICk7XG5cdFx0XHRcdGlmICggcG9zZS5vcmllbnRhdGlvbiAhPT0gbnVsbCApIGNvbnRyb2xsZXIucXVhdGVybmlvbi5mcm9tQXJyYXkoIHBvc2Uub3JpZW50YXRpb24gKTtcblx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguY29tcG9zZSggY29udHJvbGxlci5wb3NpdGlvbiwgY29udHJvbGxlci5xdWF0ZXJuaW9uLCBjb250cm9sbGVyLnNjYWxlICk7XG5cdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LnByZW11bHRpcGx5KCBzdGFuZGluZ01hdHJpeCApO1xuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5kZWNvbXBvc2UoIGNvbnRyb2xsZXIucG9zaXRpb24sIGNvbnRyb2xsZXIucXVhdGVybmlvbiwgY29udHJvbGxlci5zY2FsZSApO1xuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdC8vICBUcmlnZ2VyXG5cblx0XHRcdFx0dmFyIGJ1dHRvbklkID0gZ2FtZXBhZC5pZCA9PT0gJ0RheWRyZWFtIENvbnRyb2xsZXInID8gMCA6IDE7XG5cblx0XHRcdFx0aWYgKCB0cmlnZ2Vyc1sgaSBdICE9PSBnYW1lcGFkLmJ1dHRvbnNbIGJ1dHRvbklkIF0ucHJlc3NlZCApIHtcblxuXHRcdFx0XHRcdHRyaWdnZXJzWyBpIF0gPSBnYW1lcGFkLmJ1dHRvbnNbIGJ1dHRvbklkIF0ucHJlc3NlZDtcblxuXHRcdFx0XHRcdGlmICggdHJpZ2dlcnNbIGkgXSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZWxlY3RzdGFydCcgfSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZWxlY3RlbmQnIH0gKTtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2VsZWN0JyB9ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0dGhpcy5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24gKCBpZCApIHtcblxuXHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGlkIF07XG5cblx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29udHJvbGxlciA9IG5ldyBHcm91cCgpO1xuXHRcdFx0Y29udHJvbGxlci5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0Y29udHJvbGxlcnNbIGlkIF0gPSBjb250cm9sbGVyO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnRyb2xsZXI7XG5cblx0fTtcblxuXHR0aGlzLmdldERldmljZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBkZXZpY2U7XG5cblx0fTtcblxuXHR0aGlzLnNldERldmljZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSBkZXZpY2UgPSB2YWx1ZTtcblxuXHRcdGFuaW1hdGlvbi5zZXRDb250ZXh0KCB2YWx1ZSApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSB2YWx1ZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0ZnJhbWVPZlJlZmVyZW5jZVR5cGUgPSB2YWx1ZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0UG9zZVRhcmdldCA9IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBvYmplY3QgIT09IHVuZGVmaW5lZCApIHBvc2VUYXJnZXQgPSBvYmplY3Q7XG5cblx0fTtcblxuXHR0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uICggY2FtZXJhICkge1xuXG5cdFx0dmFyIHVzZXJIZWlnaHQgPSBmcmFtZU9mUmVmZXJlbmNlVHlwZSA9PT0gJ3N0YWdlJyA/IDEuNiA6IDA7XG5cblx0XHRpZiAoIGRldmljZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y2FtZXJhLnBvc2l0aW9uLnNldCggMCwgdXNlckhlaWdodCwgMCApO1xuXHRcdFx0cmV0dXJuIGNhbWVyYTtcblxuXHRcdH1cblxuXHRcdGRldmljZS5kZXB0aE5lYXIgPSBjYW1lcmEubmVhcjtcblx0XHRkZXZpY2UuZGVwdGhGYXIgPSBjYW1lcmEuZmFyO1xuXG5cdFx0ZGV2aWNlLmdldEZyYW1lRGF0YSggZnJhbWVEYXRhICk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBmcmFtZU9mUmVmZXJlbmNlVHlwZSA9PT0gJ3N0YWdlJyApIHtcblxuXHRcdFx0dmFyIHN0YWdlUGFyYW1ldGVycyA9IGRldmljZS5zdGFnZVBhcmFtZXRlcnM7XG5cblx0XHRcdGlmICggc3RhZ2VQYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdHN0YW5kaW5nTWF0cml4LmZyb21BcnJheSggc3RhZ2VQYXJhbWV0ZXJzLnNpdHRpbmdUb1N0YW5kaW5nVHJhbnNmb3JtICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RhbmRpbmdNYXRyaXgubWFrZVRyYW5zbGF0aW9uKCAwLCB1c2VySGVpZ2h0LCAwICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0dmFyIHBvc2UgPSBmcmFtZURhdGEucG9zZTtcblx0XHR2YXIgcG9zZU9iamVjdCA9IHBvc2VUYXJnZXQgIT09IG51bGwgPyBwb3NlVGFyZ2V0IDogY2FtZXJhO1xuXG5cdFx0Ly8gV2Ugd2FudCB0byBtYW5pcHVsYXRlIHBvc2VPYmplY3QgYnkgaXRzIHBvc2l0aW9uIGFuZCBxdWF0ZXJuaW9uIGNvbXBvbmVudHMgc2luY2UgdXNlcnMgbWF5IHJlbHkgb24gdGhlbS5cblx0XHRwb3NlT2JqZWN0Lm1hdHJpeC5jb3B5KCBzdGFuZGluZ01hdHJpeCApO1xuXHRcdHBvc2VPYmplY3QubWF0cml4LmRlY29tcG9zZSggcG9zZU9iamVjdC5wb3NpdGlvbiwgcG9zZU9iamVjdC5xdWF0ZXJuaW9uLCBwb3NlT2JqZWN0LnNjYWxlICk7XG5cblx0XHRpZiAoIHBvc2Uub3JpZW50YXRpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHRlbXBRdWF0ZXJuaW9uLmZyb21BcnJheSggcG9zZS5vcmllbnRhdGlvbiApO1xuXHRcdFx0cG9zZU9iamVjdC5xdWF0ZXJuaW9uLm11bHRpcGx5KCB0ZW1wUXVhdGVybmlvbiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwb3NlLnBvc2l0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHR0ZW1wUXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIHN0YW5kaW5nTWF0cml4ICk7XG5cdFx0XHR0ZW1wUG9zaXRpb24uZnJvbUFycmF5KCBwb3NlLnBvc2l0aW9uICk7XG5cdFx0XHR0ZW1wUG9zaXRpb24uYXBwbHlRdWF0ZXJuaW9uKCB0ZW1wUXVhdGVybmlvbiApO1xuXHRcdFx0cG9zZU9iamVjdC5wb3NpdGlvbi5hZGQoIHRlbXBQb3NpdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cG9zZU9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0aWYgKCBkZXZpY2UuaXNQcmVzZW50aW5nID09PSBmYWxzZSApIHJldHVybiBjYW1lcmE7XG5cblx0XHQvL1xuXG5cdFx0Y2FtZXJhTC5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0Y2FtZXJhUi5uZWFyID0gY2FtZXJhLm5lYXI7XG5cblx0XHRjYW1lcmFMLmZhciA9IGNhbWVyYS5mYXI7XG5cdFx0Y2FtZXJhUi5mYXIgPSBjYW1lcmEuZmFyO1xuXG5cdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UuZnJvbUFycmF5KCBmcmFtZURhdGEubGVmdFZpZXdNYXRyaXggKTtcblx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZS5mcm9tQXJyYXkoIGZyYW1lRGF0YS5yaWdodFZpZXdNYXRyaXggKTtcblxuXHRcdC8vIFRPRE8gKG1yZG9vYikgRG91YmxlIGNoZWNrIHRoaXMgY29kZVxuXG5cdFx0c3RhbmRpbmdNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIHN0YW5kaW5nTWF0cml4ICk7XG5cblx0XHRpZiAoIGZyYW1lT2ZSZWZlcmVuY2VUeXBlID09PSAnc3RhZ2UnICkge1xuXG5cdFx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseSggc3RhbmRpbmdNYXRyaXhJbnZlcnNlICk7XG5cdFx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseSggc3RhbmRpbmdNYXRyaXhJbnZlcnNlICk7XG5cblx0XHR9XG5cblx0XHR2YXIgcGFyZW50ID0gcG9zZU9iamVjdC5wYXJlbnQ7XG5cblx0XHRpZiAoIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0bWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIHBhcmVudC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseSggbWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseSggbWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHR9XG5cblx0XHQvLyBlbnZNYXAgYW5kIE1pcnJvciBuZWVkcyBjYW1lcmEubWF0cml4V29ybGRcblxuXHRcdGNhbWVyYUwubWF0cml4V29ybGQuZ2V0SW52ZXJzZSggY2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkLmdldEludmVyc2UoIGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHRjYW1lcmFMLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KCBmcmFtZURhdGEubGVmdFByb2plY3Rpb25NYXRyaXggKTtcblx0XHRjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KCBmcmFtZURhdGEucmlnaHRQcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKCBjYW1lcmFWUiwgY2FtZXJhTCwgY2FtZXJhUiApO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBsYXllcnMgPSBkZXZpY2UuZ2V0TGF5ZXJzKCk7XG5cblx0XHRpZiAoIGxheWVycy5sZW5ndGggKSB7XG5cblx0XHRcdHZhciBsYXllciA9IGxheWVyc1sgMCBdO1xuXG5cdFx0XHRpZiAoIGxheWVyLmxlZnRCb3VuZHMgIT09IG51bGwgJiYgbGF5ZXIubGVmdEJvdW5kcy5sZW5ndGggPT09IDQgKSB7XG5cblx0XHRcdFx0Y2FtZXJhTC5ib3VuZHMuZnJvbUFycmF5KCBsYXllci5sZWZ0Qm91bmRzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBsYXllci5yaWdodEJvdW5kcyAhPT0gbnVsbCAmJiBsYXllci5yaWdodEJvdW5kcy5sZW5ndGggPT09IDQgKSB7XG5cblx0XHRcdFx0Y2FtZXJhUi5ib3VuZHMuZnJvbUFycmF5KCBsYXllci5yaWdodEJvdW5kcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR1cGRhdGVDb250cm9sbGVycygpO1xuXG5cdFx0cmV0dXJuIGNhbWVyYVZSO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTdGFuZGluZ01hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBzdGFuZGluZ01hdHJpeDtcblxuXHR9O1xuXG5cdHRoaXMuaXNQcmVzZW50aW5nID0gaXNQcmVzZW50aW5nO1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0dmFyIGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xuXG5cdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHR9O1xuXG5cdHRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGlzUHJlc2VudGluZygpICkgZGV2aWNlLnN1Ym1pdEZyYW1lKCk7XG5cblx0fTtcblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UgKTtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJYUk1hbmFnZXIoIHJlbmRlcmVyICkge1xuXG5cdHZhciBnbCA9IHJlbmRlcmVyLmNvbnRleHQ7XG5cblx0dmFyIGRldmljZSA9IG51bGw7XG5cdHZhciBzZXNzaW9uID0gbnVsbDtcblxuXHR2YXIgZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IDEuMDtcblxuXHR2YXIgZnJhbWVPZlJlZmVyZW5jZSA9IG51bGw7XG5cdHZhciBmcmFtZU9mUmVmZXJlbmNlVHlwZSA9ICdzdGFnZSc7XG5cblx0dmFyIHBvc2UgPSBudWxsO1xuXG5cdHZhciBjb250cm9sbGVycyA9IFtdO1xuXHR2YXIgaW5wdXRTb3VyY2VzID0gW107XG5cblx0ZnVuY3Rpb24gaXNQcmVzZW50aW5nKCkge1xuXG5cdFx0cmV0dXJuIHNlc3Npb24gIT09IG51bGwgJiYgZnJhbWVPZlJlZmVyZW5jZSAhPT0gbnVsbDtcblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRjYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblx0Y2FtZXJhTC52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0dmFyIGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0Y2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cdGNhbWVyYVIudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdHZhciBjYW1lcmFWUiA9IG5ldyBBcnJheUNhbWVyYSggWyBjYW1lcmFMLCBjYW1lcmFSIF0gKTtcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cblx0Ly9cblxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHR0aGlzLmdldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaWQgXTtcblxuXHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250cm9sbGVyID0gbmV3IEdyb3VwKCk7XG5cdFx0XHRjb250cm9sbGVyLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHRjb250cm9sbGVyc1sgaWQgXSA9IGNvbnRyb2xsZXI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udHJvbGxlcjtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIGRldmljZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RGV2aWNlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIGRldmljZSA9IHZhbHVlO1xuXHRcdGlmICggdmFsdWUgaW5zdGFuY2VvZiBYUkRldmljZSApIGdsLnNldENvbXBhdGlibGVYUkRldmljZSggdmFsdWUgKTtcblxuXHR9O1xuXG5cdC8vXG5cblx0ZnVuY3Rpb24gb25TZXNzaW9uRXZlbnQoIGV2ZW50ICkge1xuXG5cdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5wdXRTb3VyY2VzLmluZGV4T2YoIGV2ZW50LmlucHV0U291cmNlICkgXTtcblx0XHRpZiAoIGNvbnRyb2xsZXIgKSBjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogZXZlbnQudHlwZSB9ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHtcblxuXHRcdHJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBudWxsICk7XG5cdFx0YW5pbWF0aW9uLnN0b3AoKTtcblxuXHR9XG5cblx0dGhpcy5zZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSB2YWx1ZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0ZnJhbWVPZlJlZmVyZW5jZVR5cGUgPSB2YWx1ZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRzZXNzaW9uID0gdmFsdWU7XG5cblx0XHRpZiAoIHNlc3Npb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnZW5kJywgb25TZXNzaW9uRW5kICk7XG5cblx0XHRcdHNlc3Npb24uYmFzZUxheWVyID0gbmV3IFhSV2ViR0xMYXllciggc2Vzc2lvbiwgZ2wsIHsgZnJhbWVidWZmZXJTY2FsZUZhY3RvcjogZnJhbWVidWZmZXJTY2FsZUZhY3RvciB9ICk7XG5cdFx0XHRzZXNzaW9uLnJlcXVlc3RGcmFtZU9mUmVmZXJlbmNlKCBmcmFtZU9mUmVmZXJlbmNlVHlwZSApLnRoZW4oIGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdFx0ZnJhbWVPZlJlZmVyZW5jZSA9IHZhbHVlO1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBzZXNzaW9uLmJhc2VMYXllci5mcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdGFuaW1hdGlvbi5zZXRDb250ZXh0KCBzZXNzaW9uICk7XG5cdFx0XHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vXG5cblx0XHRcdGlucHV0U291cmNlcyA9IHNlc3Npb24uZ2V0SW5wdXRTb3VyY2VzKCk7XG5cblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2lucHV0c291cmNlc2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpbnB1dFNvdXJjZXMgPSBzZXNzaW9uLmdldElucHV0U291cmNlcygpO1xuXHRcdFx0XHRjb25zb2xlLmxvZyggaW5wdXRTb3VyY2VzICk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaSBdO1xuXHRcdFx0XHRcdGNvbnRyb2xsZXIudXNlckRhdGEuaW5wdXRTb3VyY2UgPSBpbnB1dFNvdXJjZXNbIGkgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZUNhbWVyYSggY2FtZXJhLCBwYXJlbnQgKSB7XG5cblx0XHRpZiAoIHBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCBwYXJlbnQubWF0cml4V29ybGQsIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdHRoaXMuZ2V0Q2FtZXJhID0gZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIGlzUHJlc2VudGluZygpICkge1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gY2FtZXJhLnBhcmVudDtcblx0XHRcdHZhciBjYW1lcmFzID0gY2FtZXJhVlIuY2FtZXJhcztcblxuXHRcdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFWUiwgcGFyZW50ICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhc1sgaSBdLCBwYXJlbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB1cGRhdGUgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW5cblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYVZSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHZhciBjaGlsZHJlbiA9IGNhbWVyYS5jaGlsZHJlbjtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhVlIsIGNhbWVyYUwsIGNhbWVyYVIgKTtcblxuXHRcdFx0cmV0dXJuIGNhbWVyYVZSO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhbWVyYTtcblxuXHR9O1xuXG5cdHRoaXMuaXNQcmVzZW50aW5nID0gaXNQcmVzZW50aW5nO1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0dmFyIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7XG5cblx0XHRwb3NlID0gZnJhbWUuZ2V0RGV2aWNlUG9zZSggZnJhbWVPZlJlZmVyZW5jZSApO1xuXG5cdFx0aWYgKCBwb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgbGF5ZXIgPSBzZXNzaW9uLmJhc2VMYXllcjtcblx0XHRcdHZhciB2aWV3cyA9IGZyYW1lLnZpZXdzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHZpZXcgPSB2aWV3c1sgaSBdO1xuXHRcdFx0XHR2YXIgdmlld3BvcnQgPSBsYXllci5nZXRWaWV3cG9ydCggdmlldyApO1xuXHRcdFx0XHR2YXIgdmlld01hdHJpeCA9IHBvc2UuZ2V0Vmlld01hdHJpeCggdmlldyApO1xuXG5cdFx0XHRcdHZhciBjYW1lcmEgPSBjYW1lcmFWUi5jYW1lcmFzWyBpIF07XG5cdFx0XHRcdGNhbWVyYS5tYXRyaXguZnJvbUFycmF5KCB2aWV3TWF0cml4ICkuZ2V0SW52ZXJzZSggY2FtZXJhLm1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoIHZpZXcucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEudmlld3BvcnQuc2V0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0Y2FtZXJhVlIubWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGkgXTtcblxuXHRcdFx0dmFyIGlucHV0U291cmNlID0gaW5wdXRTb3VyY2VzWyBpIF07XG5cblx0XHRcdGlmICggaW5wdXRTb3VyY2UgKSB7XG5cblx0XHRcdFx0dmFyIGlucHV0UG9zZSA9IGZyYW1lLmdldElucHV0UG9zZSggaW5wdXRTb3VyY2UsIGZyYW1lT2ZSZWZlcmVuY2UgKTtcblxuXHRcdFx0XHRpZiAoIGlucHV0UG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGlmICggJ3RhcmdldFJheScgaW4gaW5wdXRQb3NlICkge1xuXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5lbGVtZW50cyA9IGlucHV0UG9zZS50YXJnZXRSYXkudHJhbnNmb3JtTWF0cml4O1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggJ3BvaW50ZXJNYXRyaXgnIGluIGlucHV0UG9zZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gREVQUkVDQVRFRFxuXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5lbGVtZW50cyA9IGlucHV0UG9zZS5wb2ludGVyTWF0cml4O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguZGVjb21wb3NlKCBjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnJvdGF0aW9uLCBjb250cm9sbGVyLnNjYWxlICk7XG5cdFx0XHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0fVxuXG5cdHZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0fTtcblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHQvLyBERVBSRUNBVEVEXG5cblx0dGhpcy5nZXRTdGFuZGluZ01hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogZ2V0U3RhbmRpbmdNYXRyaXgoKSBpcyBubyBsb25nZXIgbmVlZGVkLicgKTtcblx0XHRyZXR1cm4gbmV3IFRIUkVFLk1hdHJpeDQoKTtcblxuXHR9O1xuXG5cdHRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFJlbmRlcmVyKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcicsIFJFVklTSU9OICk7XG5cblx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XG5cblx0dmFyIF9jYW52YXMgPSBwYXJhbWV0ZXJzLmNhbnZhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jYW52YXMgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKSxcblx0XHRfY29udGV4dCA9IHBhcmFtZXRlcnMuY29udGV4dCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jb250ZXh0IDogbnVsbCxcblxuXHRcdF9hbHBoYSA9IHBhcmFtZXRlcnMuYWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYWxwaGEgOiBmYWxzZSxcblx0XHRfZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmRlcHRoIDogdHJ1ZSxcblx0XHRfc3RlbmNpbCA9IHBhcmFtZXRlcnMuc3RlbmNpbCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5zdGVuY2lsIDogdHJ1ZSxcblx0XHRfYW50aWFsaWFzID0gcGFyYW1ldGVycy5hbnRpYWxpYXMgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYW50aWFsaWFzIDogZmFsc2UsXG5cdFx0X3ByZW11bHRpcGxpZWRBbHBoYSA9IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA6IHRydWUsXG5cdFx0X3ByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IHBhcmFtZXRlcnMucHJlc2VydmVEcmF3aW5nQnVmZmVyICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciA6IGZhbHNlLFxuXHRcdF9wb3dlclByZWZlcmVuY2UgPSBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wb3dlclByZWZlcmVuY2UgOiAnZGVmYXVsdCc7XG5cblx0dmFyIGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDtcblx0dmFyIGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7XG5cblx0Ly8gcHVibGljIHByb3BlcnRpZXNcblxuXHR0aGlzLmRvbUVsZW1lbnQgPSBfY2FudmFzO1xuXHR0aGlzLmNvbnRleHQgPSBudWxsO1xuXG5cdC8vIGNsZWFyaW5nXG5cblx0dGhpcy5hdXRvQ2xlYXIgPSB0cnVlO1xuXHR0aGlzLmF1dG9DbGVhckNvbG9yID0gdHJ1ZTtcblx0dGhpcy5hdXRvQ2xlYXJEZXB0aCA9IHRydWU7XG5cdHRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9IHRydWU7XG5cblx0Ly8gc2NlbmUgZ3JhcGhcblxuXHR0aGlzLnNvcnRPYmplY3RzID0gdHJ1ZTtcblxuXHQvLyB1c2VyLWRlZmluZWQgY2xpcHBpbmdcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gW107XG5cdHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHQvLyBwaHlzaWNhbGx5IGJhc2VkIHNoYWRpbmdcblxuXHR0aGlzLmdhbW1hRmFjdG9yID0gMi4wO1x0Ly8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdHRoaXMuZ2FtbWFJbnB1dCA9IGZhbHNlO1xuXHR0aGlzLmdhbW1hT3V0cHV0ID0gZmFsc2U7XG5cblx0Ly8gcGh5c2ljYWwgbGlnaHRzXG5cblx0dGhpcy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyA9IGZhbHNlO1xuXG5cdC8vIHRvbmUgbWFwcGluZ1xuXG5cdHRoaXMudG9uZU1hcHBpbmcgPSBMaW5lYXJUb25lTWFwcGluZztcblx0dGhpcy50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXHR0aGlzLnRvbmVNYXBwaW5nV2hpdGVQb2ludCA9IDEuMDtcblxuXHQvLyBtb3JwaHNcblxuXHR0aGlzLm1heE1vcnBoVGFyZ2V0cyA9IDg7XG5cdHRoaXMubWF4TW9ycGhOb3JtYWxzID0gNDtcblxuXHQvLyBpbnRlcm5hbCBwcm9wZXJ0aWVzXG5cblx0dmFyIF90aGlzID0gdGhpcyxcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gZmFsc2UsXG5cblx0XHQvLyBpbnRlcm5hbCBzdGF0ZSBjYWNoZVxuXG5cdFx0X2ZyYW1lYnVmZmVyID0gbnVsbCxcblxuXHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbCxcblx0XHRfY3VycmVudEZyYW1lYnVmZmVyID0gbnVsbCxcblx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtIDEsXG5cblx0XHQvLyBnZW9tZXRyeSBhbmQgcHJvZ3JhbSBjYWNoaW5nXG5cblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbSA9IHtcblx0XHRcdGdlb21ldHJ5OiBudWxsLFxuXHRcdFx0cHJvZ3JhbTogbnVsbCxcblx0XHRcdHdpcmVmcmFtZTogZmFsc2Vcblx0XHR9LFxuXG5cdFx0X2N1cnJlbnRDYW1lcmEgPSBudWxsLFxuXHRcdF9jdXJyZW50QXJyYXlDYW1lcmEgPSBudWxsLFxuXG5cdFx0X2N1cnJlbnRWaWV3cG9ydCA9IG5ldyBWZWN0b3I0KCksXG5cdFx0X2N1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKSxcblx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gbnVsbCxcblxuXHRcdC8vXG5cblx0XHRfdXNlZFRleHR1cmVVbml0cyA9IDAsXG5cblx0XHQvL1xuXG5cdFx0X3dpZHRoID0gX2NhbnZhcy53aWR0aCxcblx0XHRfaGVpZ2h0ID0gX2NhbnZhcy5oZWlnaHQsXG5cblx0XHRfcGl4ZWxSYXRpbyA9IDEsXG5cblx0XHRfdmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgX3dpZHRoLCBfaGVpZ2h0ICksXG5cdFx0X3NjaXNzb3IgPSBuZXcgVmVjdG9yNCggMCwgMCwgX3dpZHRoLCBfaGVpZ2h0ICksXG5cdFx0X3NjaXNzb3JUZXN0ID0gZmFsc2UsXG5cblx0XHQvLyBmcnVzdHVtXG5cblx0XHRfZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCksXG5cblx0XHQvLyBjbGlwcGluZ1xuXG5cdFx0X2NsaXBwaW5nID0gbmV3IFdlYkdMQ2xpcHBpbmcoKSxcblx0XHRfY2xpcHBpbmdFbmFibGVkID0gZmFsc2UsXG5cdFx0X2xvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2UsXG5cblx0XHQvLyBjYW1lcmEgbWF0cmljZXMgY2FjaGVcblxuXHRcdF9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IE1hdHJpeDQoKSxcblxuXHRcdF92ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRmdW5jdGlvbiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsID8gX3BpeGVsUmF0aW8gOiAxO1xuXG5cdH1cblxuXHQvLyBpbml0aWFsaXplXG5cblx0dmFyIF9nbDtcblxuXHR0cnkge1xuXG5cdFx0dmFyIGNvbnRleHRBdHRyaWJ1dGVzID0ge1xuXHRcdFx0YWxwaGE6IF9hbHBoYSxcblx0XHRcdGRlcHRoOiBfZGVwdGgsXG5cdFx0XHRzdGVuY2lsOiBfc3RlbmNpbCxcblx0XHRcdGFudGlhbGlhczogX2FudGlhbGlhcyxcblx0XHRcdHByZW11bHRpcGxpZWRBbHBoYTogX3ByZW11bHRpcGxpZWRBbHBoYSxcblx0XHRcdHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogX3ByZXNlcnZlRHJhd2luZ0J1ZmZlcixcblx0XHRcdHBvd2VyUHJlZmVyZW5jZTogX3Bvd2VyUHJlZmVyZW5jZVxuXHRcdH07XG5cblx0XHQvLyBldmVudCBsaXN0ZW5lcnMgbXVzdCBiZSByZWdpc3RlcmVkIGJlZm9yZSBXZWJHTCBjb250ZXh0IGlzIGNyZWF0ZWQsIHNlZSAjMTI3NTNcblxuXHRcdF9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdF9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTtcblxuXHRcdF9nbCA9IF9jb250ZXh0IHx8IF9jYW52YXMuZ2V0Q29udGV4dCggJ3dlYmdsJywgY29udGV4dEF0dHJpYnV0ZXMgKSB8fCBfY2FudmFzLmdldENvbnRleHQoICdleHBlcmltZW50YWwtd2ViZ2wnLCBjb250ZXh0QXR0cmlidXRlcyApO1xuXG5cdFx0aWYgKCBfZ2wgPT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggX2NhbnZhcy5nZXRDb250ZXh0KCAnd2ViZ2wnICkgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dCB3aXRoIHlvdXIgc2VsZWN0ZWQgYXR0cmlidXRlcy4nICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNvbWUgZXhwZXJpbWVudGFsLXdlYmdsIGltcGxlbWVudGF0aW9ucyBkbyBub3QgaGF2ZSBnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXRcblxuXHRcdGlmICggX2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHJldHVybiB7ICdyYW5nZU1pbic6IDEsICdyYW5nZU1heCc6IDEsICdwcmVjaXNpb24nOiAxIH07XG5cblx0XHRcdH07XG5cblx0XHR9XG5cblx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBlcnJvci5tZXNzYWdlICk7XG5cblx0fVxuXG5cdHZhciBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIHN0YXRlLCBpbmZvO1xuXHR2YXIgcHJvcGVydGllcywgdGV4dHVyZXMsIGF0dHJpYnV0ZXMsIGdlb21ldHJpZXMsIG9iamVjdHM7XG5cdHZhciBwcm9ncmFtQ2FjaGUsIHJlbmRlckxpc3RzLCByZW5kZXJTdGF0ZXM7XG5cblx0dmFyIGJhY2tncm91bmQsIG1vcnBodGFyZ2V0cywgYnVmZmVyUmVuZGVyZXIsIGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblxuXHR2YXIgdXRpbHM7XG5cblx0ZnVuY3Rpb24gaW5pdEdMQ29udGV4dCgpIHtcblxuXHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKCBfZ2wgKTtcblxuXHRcdGNhcGFiaWxpdGllcyA9IG5ldyBXZWJHTENhcGFiaWxpdGllcyggX2dsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRpZiAoICEgY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cdFx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicgKTtcblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfZWxlbWVudF9pbmRleF91aW50JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICk7XG5cblx0XHR1dGlscyA9IG5ldyBXZWJHTFV0aWxzKCBfZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0c3RhdGUgPSBuZXcgV2ViR0xTdGF0ZSggX2dsLCBleHRlbnNpb25zLCB1dGlscywgY2FwYWJpbGl0aWVzICk7XG5cdFx0c3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkgKTtcblx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKSApO1xuXG5cdFx0aW5mbyA9IG5ldyBXZWJHTEluZm8oIF9nbCApO1xuXHRcdHByb3BlcnRpZXMgPSBuZXcgV2ViR0xQcm9wZXJ0aWVzKCk7XG5cdFx0dGV4dHVyZXMgPSBuZXcgV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApO1xuXHRcdGF0dHJpYnV0ZXMgPSBuZXcgV2ViR0xBdHRyaWJ1dGVzKCBfZ2wgKTtcblx0XHRnZW9tZXRyaWVzID0gbmV3IFdlYkdMR2VvbWV0cmllcyggX2dsLCBhdHRyaWJ1dGVzLCBpbmZvICk7XG5cdFx0b2JqZWN0cyA9IG5ldyBXZWJHTE9iamVjdHMoIGdlb21ldHJpZXMsIGluZm8gKTtcblx0XHRtb3JwaHRhcmdldHMgPSBuZXcgV2ViR0xNb3JwaHRhcmdldHMoIF9nbCApO1xuXHRcdHByb2dyYW1DYWNoZSA9IG5ldyBXZWJHTFByb2dyYW1zKCBfdGhpcywgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7XG5cdFx0cmVuZGVyTGlzdHMgPSBuZXcgV2ViR0xSZW5kZXJMaXN0cygpO1xuXHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWJHTFJlbmRlclN0YXRlcygpO1xuXG5cdFx0YmFja2dyb3VuZCA9IG5ldyBXZWJHTEJhY2tncm91bmQoIF90aGlzLCBzdGF0ZSwgb2JqZWN0cywgX3ByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0YnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRpbmRleGVkQnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICk7XG5cblx0XHRpbmZvLnByb2dyYW1zID0gcHJvZ3JhbUNhY2hlLnByb2dyYW1zO1xuXG5cdFx0X3RoaXMuY29udGV4dCA9IF9nbDtcblx0XHRfdGhpcy5jYXBhYmlsaXRpZXMgPSBjYXBhYmlsaXRpZXM7XG5cdFx0X3RoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG5cdFx0X3RoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG5cdFx0X3RoaXMucmVuZGVyTGlzdHMgPSByZW5kZXJMaXN0cztcblx0XHRfdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHRcdF90aGlzLmluZm8gPSBpbmZvO1xuXG5cdH1cblxuXHRpbml0R0xDb250ZXh0KCk7XG5cblx0Ly8gdnJcblxuXHR2YXIgdnIgPSBudWxsO1xuXG5cdGlmICggdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHR2ciA9ICggJ3hyJyBpbiBuYXZpZ2F0b3IgKSA/IG5ldyBXZWJYUk1hbmFnZXIoIF90aGlzICkgOiBuZXcgV2ViVlJNYW5hZ2VyKCBfdGhpcyApO1xuXG5cdH1cblxuXHR0aGlzLnZyID0gdnI7XG5cblx0Ly8gc2hhZG93IG1hcFxuXG5cdHZhciBzaGFkb3dNYXAgPSBuZXcgV2ViR0xTaGFkb3dNYXAoIF90aGlzLCBvYmplY3RzLCBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZVNpemUgKTtcblxuXHR0aGlzLnNoYWRvd01hcCA9IHNoYWRvd01hcDtcblxuXHQvLyBBUElcblxuXHR0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2dsO1xuXG5cdH07XG5cblx0dGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcblxuXHR9O1xuXG5cdHRoaXMuZm9yY2VDb250ZXh0TG9zcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2xvc2VfY29udGV4dCcgKTtcblx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5sb3NlQ29udGV4dCgpO1xuXG5cdH07XG5cblx0dGhpcy5mb3JjZUNvbnRleHRSZXN0b3JlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApO1xuXHRcdGlmICggZXh0ZW5zaW9uICkgZXh0ZW5zaW9uLnJlc3RvcmVDb250ZXh0KCk7XG5cblx0fTtcblxuXHR0aGlzLmdldFBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX3BpeGVsUmF0aW87XG5cblx0fTtcblxuXHR0aGlzLnNldFBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0X3BpeGVsUmF0aW8gPSB2YWx1ZTtcblxuXHRcdHRoaXMuc2V0U2l6ZSggX3dpZHRoLCBfaGVpZ2h0LCBmYWxzZSApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiBfd2lkdGgsXG5cdFx0XHRoZWlnaHQ6IF9oZWlnaHRcblx0XHR9O1xuXG5cdH07XG5cblx0dGhpcy5zZXRTaXplID0gZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0LCB1cGRhdGVTdHlsZSApIHtcblxuXHRcdGlmICggdnIuaXNQcmVzZW50aW5nKCkgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENhblxcJ3QgY2hhbmdlIHNpemUgd2hpbGUgVlIgZGV2aWNlIGlzIHByZXNlbnRpbmcuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0X3dpZHRoID0gd2lkdGg7XG5cdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdF9jYW52YXMud2lkdGggPSB3aWR0aCAqIF9waXhlbFJhdGlvO1xuXHRcdF9jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogX3BpeGVsUmF0aW87XG5cblx0XHRpZiAoIHVwZGF0ZVN0eWxlICE9PSBmYWxzZSApIHtcblxuXHRcdFx0X2NhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHRcdF9jYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcblxuXHRcdH1cblxuXHRcdHRoaXMuc2V0Vmlld3BvcnQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0RHJhd2luZ0J1ZmZlclNpemUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IF93aWR0aCAqIF9waXhlbFJhdGlvLFxuXHRcdFx0aGVpZ2h0OiBfaGVpZ2h0ICogX3BpeGVsUmF0aW9cblx0XHR9O1xuXG5cdH07XG5cblx0dGhpcy5zZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgcGl4ZWxSYXRpbyApIHtcblxuXHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRfcGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG5cblx0XHRfY2FudmFzLndpZHRoID0gd2lkdGggKiBwaXhlbFJhdGlvO1xuXHRcdF9jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogcGl4ZWxSYXRpbztcblxuXHRcdHRoaXMuc2V0Vmlld3BvcnQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Q3VycmVudFZpZXdwb3J0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50Vmlld3BvcnQ7XG5cblx0fTtcblxuXHR0aGlzLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0X3ZpZXdwb3J0LnNldCggeCwgX2hlaWdodCAtIHkgLSBoZWlnaHQsIHdpZHRoLCBoZWlnaHQgKTtcblx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKSApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTY2lzc29yID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0X3NjaXNzb3Iuc2V0KCB4LCBfaGVpZ2h0IC0geSAtIGhlaWdodCwgd2lkdGgsIGhlaWdodCApO1xuXHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFNjaXNzb3JUZXN0ID0gZnVuY3Rpb24gKCBib29sZWFuICkge1xuXG5cdFx0c3RhdGUuc2V0U2Npc3NvclRlc3QoIF9zY2lzc29yVGVzdCA9IGJvb2xlYW4gKTtcblxuXHR9O1xuXG5cdC8vIENsZWFyaW5nXG5cblx0dGhpcy5nZXRDbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIGJhY2tncm91bmQuZ2V0Q2xlYXJDb2xvcigpO1xuXG5cdH07XG5cblx0dGhpcy5zZXRDbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0YmFja2dyb3VuZC5zZXRDbGVhckNvbG9yLmFwcGx5KCBiYWNrZ3JvdW5kLCBhcmd1bWVudHMgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Q2xlYXJBbHBoYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBiYWNrZ3JvdW5kLmdldENsZWFyQWxwaGEoKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0Q2xlYXJBbHBoYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJhY2tncm91bmQuc2V0Q2xlYXJBbHBoYS5hcHBseSggYmFja2dyb3VuZCwgYXJndW1lbnRzICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0XHR2YXIgYml0cyA9IDA7XG5cblx0XHRpZiAoIGNvbG9yID09PSB1bmRlZmluZWQgfHwgY29sb3IgKSBiaXRzIHw9IDE2Mzg0O1xuXHRcdGlmICggZGVwdGggPT09IHVuZGVmaW5lZCB8fCBkZXB0aCApIGJpdHMgfD0gMjU2O1xuXHRcdGlmICggc3RlbmNpbCA9PT0gdW5kZWZpbmVkIHx8IHN0ZW5jaWwgKSBiaXRzIHw9IDEwMjQ7XG5cblx0XHRfZ2wuY2xlYXIoIGJpdHMgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY2xlYXIoIHRydWUsIGZhbHNlLCBmYWxzZSApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhckRlcHRoID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggZmFsc2UsIHRydWUsIGZhbHNlICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyU3RlbmNpbCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY2xlYXIoIGZhbHNlLCBmYWxzZSwgdHJ1ZSApO1xuXG5cdH07XG5cblx0Ly9cblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRfY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTtcblx0XHRfY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cblx0XHRyZW5kZXJMaXN0cy5kaXNwb3NlKCk7XG5cdFx0cmVuZGVyU3RhdGVzLmRpc3Bvc2UoKTtcblx0XHRwcm9wZXJ0aWVzLmRpc3Bvc2UoKTtcblx0XHRvYmplY3RzLmRpc3Bvc2UoKTtcblxuXHRcdHZyLmRpc3Bvc2UoKTtcblxuXHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0fTtcblxuXHQvLyBFdmVudHNcblxuXHRmdW5jdGlvbiBvbkNvbnRleHRMb3N0KCBldmVudCApIHtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgTG9zdC4nICk7XG5cblx0XHRfaXNDb250ZXh0TG9zdCA9IHRydWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uQ29udGV4dFJlc3RvcmUoIC8qIGV2ZW50ICovICkge1xuXG5cdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IFJlc3RvcmVkLicgKTtcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0XHRpbml0R0xDb250ZXh0KCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uTWF0ZXJpYWxEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciBtYXRlcmlhbCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdG1hdGVyaWFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0Ly8gQnVmZmVyIGRlYWxsb2NhdGlvblxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKCBtYXRlcmlhbCApO1xuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIG1hdGVyaWFsICk7XG5cblx0fVxuXG5cblx0ZnVuY3Rpb24gcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSggbWF0ZXJpYWwgKSB7XG5cblx0XHR2YXIgcHJvZ3JhbUluZm8gPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKS5wcm9ncmFtO1xuXG5cdFx0bWF0ZXJpYWwucHJvZ3JhbSA9IHVuZGVmaW5lZDtcblxuXHRcdGlmICggcHJvZ3JhbUluZm8gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbUNhY2hlLnJlbGVhc2VQcm9ncmFtKCBwcm9ncmFtSW5mbyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBCdWZmZXIgcmVuZGVyaW5nXG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0SW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0gKSB7XG5cblx0XHRvYmplY3QucmVuZGVyKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0X3RoaXMucmVuZGVyQnVmZmVySW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0gKTtcblxuXHRcdH0gKTtcblxuXHR9XG5cblx0dGhpcy5yZW5kZXJCdWZmZXJJbW1lZGlhdGUgPSBmdW5jdGlvbiAoIG9iamVjdCwgcHJvZ3JhbSApIHtcblxuXHRcdHN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7XG5cblx0XHR2YXIgYnVmZmVycyA9IHByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKTtcblxuXHRcdGlmICggb2JqZWN0Lmhhc1Bvc2l0aW9ucyAmJiAhIGJ1ZmZlcnMucG9zaXRpb24gKSBidWZmZXJzLnBvc2l0aW9uID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGlmICggb2JqZWN0Lmhhc05vcm1hbHMgJiYgISBidWZmZXJzLm5vcm1hbCApIGJ1ZmZlcnMubm9ybWFsID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGlmICggb2JqZWN0Lmhhc1V2cyAmJiAhIGJ1ZmZlcnMudXYgKSBidWZmZXJzLnV2ID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGlmICggb2JqZWN0Lmhhc0NvbG9ycyAmJiAhIGJ1ZmZlcnMuY29sb3IgKSBidWZmZXJzLmNvbG9yID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXG5cdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRpZiAoIG9iamVjdC5oYXNQb3NpdGlvbnMgKSB7XG5cblx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVycy5wb3NpdGlvbiApO1xuXHRcdFx0X2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3QucG9zaXRpb25BcnJheSwgMzUwNDggKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy5wb3NpdGlvbiApO1xuXHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGVzLnBvc2l0aW9uLCAzLCA1MTI2LCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzTm9ybWFscyApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXJzLm5vcm1hbCApO1xuXHRcdFx0X2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3Qubm9ybWFsQXJyYXksIDM1MDQ4ICk7XG5cblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMubm9ybWFsICk7XG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMubm9ybWFsLCAzLCA1MTI2LCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzVXZzICkge1xuXG5cdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlcnMudXYgKTtcblx0XHRcdF9nbC5idWZmZXJEYXRhKCAzNDk2Miwgb2JqZWN0LnV2QXJyYXksIDM1MDQ4ICk7XG5cblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMudXYgKTtcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy51diwgMiwgNTEyNiwgZmFsc2UsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0Lmhhc0NvbG9ycyApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXJzLmNvbG9yICk7XG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSggMzQ5NjIsIG9iamVjdC5jb2xvckFycmF5LCAzNTA0OCApO1xuXG5cdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLmNvbG9yICk7XG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMuY29sb3IsIDMsIDUxMjYsIGZhbHNlLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5kaXNhYmxlVW51c2VkQXR0cmlidXRlcygpO1xuXG5cdFx0X2dsLmRyYXdBcnJheXMoIDQsIDAsIG9iamVjdC5jb3VudCApO1xuXG5cdFx0b2JqZWN0LmNvdW50ID0gMDtcblxuXHR9O1xuXG5cdHRoaXMucmVuZGVyQnVmZmVyRGlyZWN0ID0gZnVuY3Rpb24gKCBjYW1lcmEsIGZvZywgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICkge1xuXG5cdFx0dmFyIGZyb250RmFjZUNXID0gKCBvYmplY3QuaXNNZXNoICYmIG9iamVjdC5ub3JtYWxNYXRyaXguZGV0ZXJtaW5hbnQoKSA8IDAgKTtcblxuXHRcdHN0YXRlLnNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKTtcblxuXHRcdHZhciBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBmb2csIG1hdGVyaWFsLCBvYmplY3QgKTtcblxuXHRcdHZhciB1cGRhdGVCdWZmZXJzID0gZmFsc2U7XG5cblx0XHRpZiAoIF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ICE9PSBnZW9tZXRyeS5pZCB8fFxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSAhPT0gcHJvZ3JhbS5pZCB8fFxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lICE9PSAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApICkge1xuXG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5nZW9tZXRyeSA9IGdlb21ldHJ5LmlkO1xuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSA9IHByb2dyYW0uaWQ7XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgPSBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWU7XG5cdFx0XHR1cGRhdGVCdWZmZXJzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyApIHtcblxuXHRcdFx0bW9ycGh0YXJnZXRzLnVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0gKTtcblxuXHRcdFx0dXBkYXRlQnVmZmVycyA9IHRydWU7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHR2YXIgcmFuZ2VGYWN0b3IgPSAxO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKSB7XG5cblx0XHRcdGluZGV4ID0gZ2VvbWV0cmllcy5nZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cdFx0XHRyYW5nZUZhY3RvciA9IDI7XG5cblx0XHR9XG5cblx0XHR2YXIgYXR0cmlidXRlO1xuXHRcdHZhciByZW5kZXJlciA9IGJ1ZmZlclJlbmRlcmVyO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGluZGV4ICk7XG5cblx0XHRcdHJlbmRlcmVyID0gaW5kZXhlZEJ1ZmZlclJlbmRlcmVyO1xuXHRcdFx0cmVuZGVyZXIuc2V0SW5kZXgoIGF0dHJpYnV0ZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1cGRhdGVCdWZmZXJzICkge1xuXG5cdFx0XHRzZXR1cFZlcnRleEF0dHJpYnV0ZXMoIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MywgYXR0cmlidXRlLmJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dmFyIGRhdGFDb3VudCA9IEluZmluaXR5O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0ZGF0YUNvdW50ID0gaW5kZXguY291bnQ7XG5cblx0XHR9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhQ291bnQgPSBwb3NpdGlvbi5jb3VudDtcblxuXHRcdH1cblxuXHRcdHZhciByYW5nZVN0YXJ0ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLnN0YXJ0ICogcmFuZ2VGYWN0b3I7XG5cdFx0dmFyIHJhbmdlQ291bnQgPSBnZW9tZXRyeS5kcmF3UmFuZ2UuY291bnQgKiByYW5nZUZhY3RvcjtcblxuXHRcdHZhciBncm91cFN0YXJ0ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5zdGFydCAqIHJhbmdlRmFjdG9yIDogMDtcblx0XHR2YXIgZ3JvdXBDb3VudCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAuY291bnQgKiByYW5nZUZhY3RvciA6IEluZmluaXR5O1xuXG5cdFx0dmFyIGRyYXdTdGFydCA9IE1hdGgubWF4KCByYW5nZVN0YXJ0LCBncm91cFN0YXJ0ICk7XG5cdFx0dmFyIGRyYXdFbmQgPSBNYXRoLm1pbiggZGF0YUNvdW50LCByYW5nZVN0YXJ0ICsgcmFuZ2VDb3VudCwgZ3JvdXBTdGFydCArIGdyb3VwQ291bnQgKSAtIDE7XG5cblx0XHR2YXIgZHJhd0NvdW50ID0gTWF0aC5tYXgoIDAsIGRyYXdFbmQgLSBkcmF3U3RhcnQgKyAxICk7XG5cblx0XHRpZiAoIGRyYXdDb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdC8vXG5cblx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHN0YXRlLnNldExpbmVXaWR0aCggbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoICogZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpICk7XG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzd2l0Y2ggKCBvYmplY3QuZHJhd01vZGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlIFRyaWFuZ2xlc0RyYXdNb2RlOlxuXHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggNCApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFRyaWFuZ2xlU3RyaXBEcmF3TW9kZTpcblx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBUcmlhbmdsZUZhbkRyYXdNb2RlOlxuXHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggNiApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdHZhciBsaW5lV2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7XG5cblx0XHRcdGlmICggbGluZVdpZHRoID09PSB1bmRlZmluZWQgKSBsaW5lV2lkdGggPSAxOyAvLyBOb3QgdXNpbmcgTGluZSpNYXRlcmlhbFxuXG5cdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIGxpbmVXaWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApO1xuXG5cdFx0XHRpZiAoIG9iamVjdC5pc0xpbmVTZWdtZW50cyApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAxICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmVMb29wICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAzICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1BvaW50cyApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMCApO1xuXG5cdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRNb2RlKCA0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPiAwICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnJlbmRlckluc3RhbmNlcyggZ2VvbWV0cnksIGRyYXdTdGFydCwgZHJhd0NvdW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlciggZHJhd1N0YXJ0LCBkcmF3Q291bnQgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHNldHVwVmVydGV4QXR0cmlidXRlcyggbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5ICkge1xuXG5cdFx0aWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ICYgISBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSB7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnNldHVwVmVydGV4QXR0cmlidXRlczogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7XG5cblx0XHR2YXIgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdHZhciBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0dmFyIG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IG1hdGVyaWFsLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM7XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBwcm9ncmFtQXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGUgPSBwcm9ncmFtQXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGUgPj0gMCApIHtcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR2YXIgbm9ybWFsaXplZCA9IGdlb21ldHJ5QXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG5cdFx0XHRcdFx0dmFyIHNpemUgPSBnZW9tZXRyeUF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnlBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdC8vIFRPRE8gQXR0cmlidXRlIG1heSBub3QgYmUgYXZhaWxhYmxlIG9uIGNvbnRleHQgcmVzdG9yZVxuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IGF0dHJpYnV0ZS5idWZmZXI7XG5cdFx0XHRcdFx0dmFyIHR5cGUgPSBhdHRyaWJ1dGUudHlwZTtcblx0XHRcdFx0XHR2YXIgYnl0ZXNQZXJFbGVtZW50ID0gYXR0cmlidXRlLmJ5dGVzUGVyRWxlbWVudDtcblxuXHRcdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhO1xuXHRcdFx0XHRcdFx0dmFyIHN0cmlkZSA9IGRhdGEuc3RyaWRlO1xuXHRcdFx0XHRcdFx0dmFyIG9mZnNldCA9IGdlb21ldHJ5QXR0cmlidXRlLm9mZnNldDtcblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhICYmIGRhdGEuaXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLCBkYXRhLm1lc2hQZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9IGRhdGEubWVzaFBlckF0dHJpYnV0ZSAqIGRhdGEuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZSwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlICogYnl0ZXNQZXJFbGVtZW50LCBvZmZzZXQgKiBieXRlc1BlckVsZW1lbnQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZSwgZ2VvbWV0cnlBdHRyaWJ1dGUubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID0gZ2VvbWV0cnlBdHRyaWJ1dGUubWVzaFBlckF0dHJpYnV0ZSAqIGdlb21ldHJ5QXR0cmlidXRlLmNvdW50O1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGUsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIDAsIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHZhciB2YWx1ZSA9IG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRzd2l0Y2ggKCB2YWx1ZS5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWIyZnYoIHByb2dyYW1BdHRyaWJ1dGUsIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWIzZnYoIHByb2dyYW1BdHRyaWJ1dGUsIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWI0ZnYoIHByb2dyYW1BdHRyaWJ1dGUsIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliMWZ2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5kaXNhYmxlVW51c2VkQXR0cmlidXRlcygpO1xuXG5cdH1cblxuXHQvLyBDb21waWxlXG5cblx0dGhpcy5jb21waWxlID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIGNhbWVyYSApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCk7XG5cblx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LmlzTGlnaHQgKSB7XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodCggb2JqZWN0ICk7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0cyggY2FtZXJhICk7XG5cblx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0Lm1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggb2JqZWN0Lm1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmplY3QubWF0ZXJpYWwubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpbml0TWF0ZXJpYWwoIG9iamVjdC5tYXRlcmlhbFsgaSBdLCBzY2VuZS5mb2csIG9iamVjdCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbml0TWF0ZXJpYWwoIG9iamVjdC5tYXRlcmlhbCwgc2NlbmUuZm9nLCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0dmFyIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSApIHtcblxuXHRcdGlmICggdnIuaXNQcmVzZW50aW5nKCkgKSByZXR1cm47XG5cdFx0aWYgKCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgKSBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUgKTtcblxuXHR9XG5cblx0dmFyIGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xuXHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdGlmICggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgKSBhbmltYXRpb24uc2V0Q29udGV4dCggd2luZG93ICk7XG5cblx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdHZyLnNldEFuaW1hdGlvbkxvb3AoIGNhbGxiYWNrICk7XG5cblx0XHRhbmltYXRpb24uc3RhcnQoKTtcblxuXHR9O1xuXG5cdC8vIFJlbmRlcmluZ1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhLCByZW5kZXJUYXJnZXQsIGZvcmNlQ2xlYXIgKSB7XG5cblx0XHRpZiAoICEgKCBjYW1lcmEgJiYgY2FtZXJhLmlzQ2FtZXJhICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfaXNDb250ZXh0TG9zdCApIHJldHVybjtcblxuXHRcdC8vIHJlc2V0IGNhY2hpbmcgZm9yIHRoaXMgZnJhbWVcblxuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gbnVsbDtcblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gbnVsbDtcblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtIDE7XG5cdFx0X2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRpZiAoIHNjZW5lLmF1dG9VcGRhdGUgPT09IHRydWUgKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0Ly8gdXBkYXRlIGNhbWVyYSBtYXRyaWNlcyBhbmQgZnJ1c3R1bVxuXG5cdFx0aWYgKCBjYW1lcmEucGFyZW50ID09PSBudWxsICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRpZiAoIHZyLmVuYWJsZWQgKSB7XG5cblx0XHRcdGNhbWVyYSA9IHZyLmdldENhbWVyYSggY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIGNhbWVyYSApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCk7XG5cblx0XHRzY2VuZS5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRfZnJ1c3R1bS5zZXRGcm9tTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0X2xvY2FsQ2xpcHBpbmdFbmFibGVkID0gdGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZDtcblx0XHRfY2xpcHBpbmdFbmFibGVkID0gX2NsaXBwaW5nLmluaXQoIHRoaXMuY2xpcHBpbmdQbGFuZXMsIF9sb2NhbENsaXBwaW5nRW5hYmxlZCwgY2FtZXJhICk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RzLmdldCggc2NlbmUsIGNhbWVyYSApO1xuXHRcdGN1cnJlbnRSZW5kZXJMaXN0LmluaXQoKTtcblxuXHRcdHByb2plY3RPYmplY3QoIHNjZW5lLCBjYW1lcmEsIF90aGlzLnNvcnRPYmplY3RzICk7XG5cblx0XHRpZiAoIF90aGlzLnNvcnRPYmplY3RzID09PSB0cnVlICkge1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5zb3J0KCk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkICkgX2NsaXBwaW5nLmJlZ2luU2hhZG93cygpO1xuXG5cdFx0dmFyIHNoYWRvd3NBcnJheSA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5zaGFkb3dzQXJyYXk7XG5cblx0XHRzaGFkb3dNYXAucmVuZGVyKCBzaGFkb3dzQXJyYXksIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0cyggY2FtZXJhICk7XG5cblx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgKSBfY2xpcHBpbmcuZW5kU2hhZG93cygpO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5pbmZvLmF1dG9SZXNldCApIHRoaXMuaW5mby5yZXNldCgpO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdC8vXG5cblx0XHRiYWNrZ3JvdW5kLnJlbmRlciggY3VycmVudFJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIGZvcmNlQ2xlYXIgKTtcblxuXHRcdC8vIHJlbmRlciBzY2VuZVxuXG5cdFx0dmFyIG9wYXF1ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC5vcGFxdWU7XG5cdFx0dmFyIHRyYW5zcGFyZW50T2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zcGFyZW50O1xuXG5cdFx0aWYgKCBzY2VuZS5vdmVycmlkZU1hdGVyaWFsICkge1xuXG5cdFx0XHR2YXIgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0XHRcdGlmICggb3BhcXVlT2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsICk7XG5cdFx0XHRpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCB0cmFuc3BhcmVudE9iamVjdHMsIHNjZW5lLCBjYW1lcmEsIG92ZXJyaWRlTWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG9wYXF1ZSBwYXNzIChmcm9udC10by1iYWNrIG9yZGVyKVxuXG5cdFx0XHRpZiAoIG9wYXF1ZU9iamVjdHMubGVuZ3RoICkgcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHQvLyB0cmFuc3BhcmVudCBwYXNzIChiYWNrLXRvLWZyb250IG9yZGVyKVxuXG5cdFx0XHRpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCB0cmFuc3BhcmVudE9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdC8vIEdlbmVyYXRlIG1pcG1hcCBpZiB3ZSdyZSB1c2luZyBhbnkga2luZCBvZiBtaXBtYXAgZmlsdGVyaW5nXG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSBkZXB0aCBidWZmZXIgd3JpdGluZyBpcyBlbmFibGVkIHNvIGl0IGNhbiBiZSBjbGVhcmVkIG9uIG5leHQgcmVuZGVyXG5cblx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTtcblx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldE1hc2soIHRydWUgKTtcblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2soIHRydWUgKTtcblxuXHRcdHN0YXRlLnNldFBvbHlnb25PZmZzZXQoIGZhbHNlICk7XG5cblx0XHRzY2VuZS5vbkFmdGVyUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0aWYgKCB2ci5lbmFibGVkICkge1xuXG5cdFx0XHR2ci5zdWJtaXRGcmFtZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gX2dsLmZpbmlzaCgpO1xuXG5cdFx0Y3VycmVudFJlbmRlckxpc3QgPSBudWxsO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBwcm9qZWN0T2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgc29ydE9iamVjdHMgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdHZhciB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7XG5cblx0XHRpZiAoIHZpc2libGUgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LmlzTGlnaHQgKSB7XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodCggb2JqZWN0ICk7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHtcblxuXHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c1Nwcml0ZSggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIF92ZWN0b3IzLnosIG51bGwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCApIHtcblxuXHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0X3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKVxuXHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBudWxsLCBvYmplY3QubWF0ZXJpYWwsIF92ZWN0b3IzLnosIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LnNrZWxldG9uLnVwZGF0ZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdFx0XHRcdFx0dmFyIGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBncm91cE1hdGVyaWFsLCBfdmVjdG9yMy56LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIF92ZWN0b3IzLnosIG51bGwgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHByb2plY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgc29ydE9iamVjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0cyggcmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbCApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHJlbmRlckxpc3QubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHJlbmRlckl0ZW0gPSByZW5kZXJMaXN0WyBpIF07XG5cblx0XHRcdHZhciBvYmplY3QgPSByZW5kZXJJdGVtLm9iamVjdDtcblx0XHRcdHZhciBnZW9tZXRyeSA9IHJlbmRlckl0ZW0uZ2VvbWV0cnk7XG5cdFx0XHR2YXIgbWF0ZXJpYWwgPSBvdmVycmlkZU1hdGVyaWFsID09PSB1bmRlZmluZWQgPyByZW5kZXJJdGVtLm1hdGVyaWFsIDogb3ZlcnJpZGVNYXRlcmlhbDtcblx0XHRcdHZhciBncm91cCA9IHJlbmRlckl0ZW0uZ3JvdXA7XG5cblx0XHRcdGlmICggY2FtZXJhLmlzQXJyYXlDYW1lcmEgKSB7XG5cblx0XHRcdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdFx0XHR2YXIgY2FtZXJhcyA9IGNhbWVyYS5jYW1lcmFzO1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBjYW1lcmFzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNhbWVyYTIgPSBjYW1lcmFzWyBqIF07XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhMi5sYXllcnMgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCAndmlld3BvcnQnIGluIGNhbWVyYTIgKSB7IC8vIFhSXG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggY2FtZXJhMi52aWV3cG9ydCApICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGJvdW5kcyA9IGNhbWVyYTIuYm91bmRzO1xuXG5cdFx0XHRcdFx0XHRcdHZhciB4ID0gYm91bmRzLnggKiBfd2lkdGg7XG5cdFx0XHRcdFx0XHRcdHZhciB5ID0gYm91bmRzLnkgKiBfaGVpZ2h0O1xuXHRcdFx0XHRcdFx0XHR2YXIgd2lkdGggPSBib3VuZHMueiAqIF93aWR0aDtcblx0XHRcdFx0XHRcdFx0dmFyIGhlaWdodCA9IGJvdW5kcy53ICogX2hlaWdodDtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0cyggY2FtZXJhMiApO1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYTIsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IG51bGw7XG5cblx0XHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApIHtcblxuXHRcdG9iamVjdC5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEgKTtcblxuXHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cdFx0b2JqZWN0Lm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIG9iamVjdC5tb2RlbFZpZXdNYXRyaXggKTtcblxuXHRcdGlmICggb2JqZWN0LmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0XHRzdGF0ZS5zZXRNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHRcdFx0dmFyIHByb2dyYW0gPSBzZXRQcm9ncmFtKCBjYW1lcmEsIHNjZW5lLmZvZywgbWF0ZXJpYWwsIG9iamVjdCApO1xuXG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5nZW9tZXRyeSA9IG51bGw7XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gbnVsbDtcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSA9IGZhbHNlO1xuXG5cdFx0XHRyZW5kZXJPYmplY3RJbW1lZGlhdGUoIG9iamVjdCwgcHJvZ3JhbSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIHNjZW5lLmZvZywgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHRvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgZm9nLCBvYmplY3QgKSB7XG5cblx0XHR2YXIgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHR2YXIgbGlnaHRzID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLmxpZ2h0cztcblx0XHR2YXIgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdHZhciBsaWdodHNIYXNoID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c0hhc2g7XG5cdFx0dmFyIGxpZ2h0c1N0YXRlSGFzaCA9IGxpZ2h0cy5zdGF0ZS5oYXNoO1xuXG5cdFx0dmFyIHBhcmFtZXRlcnMgPSBwcm9ncmFtQ2FjaGUuZ2V0UGFyYW1ldGVycyhcblx0XHRcdG1hdGVyaWFsLCBsaWdodHMuc3RhdGUsIHNoYWRvd3NBcnJheSwgZm9nLCBfY2xpcHBpbmcubnVtUGxhbmVzLCBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uLCBvYmplY3QgKTtcblxuXHRcdHZhciBjb2RlID0gcHJvZ3JhbUNhY2hlLmdldFByb2dyYW1Db2RlKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApO1xuXG5cdFx0dmFyIHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbTtcblx0XHR2YXIgcHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRpZiAoIHByb2dyYW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbmV3IG1hdGVyaWFsXG5cdFx0XHRtYXRlcmlhbC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHR9IGVsc2UgaWYgKCBwcm9ncmFtLmNvZGUgIT09IGNvZGUgKSB7XG5cblx0XHRcdC8vIGNoYW5nZWQgZ2xzbCBvciBwYXJhbWV0ZXJzXG5cdFx0XHRyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbGlnaHRzSGFzaC5zdGF0ZUlEICE9PSBsaWdodHNTdGF0ZUhhc2guc3RhdGVJRCB8fFxuXHRcdFx0bGlnaHRzSGFzaC5kaXJlY3Rpb25hbExlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoIHx8XG5cdFx0XHRsaWdodHNIYXNoLnBvaW50TGVuZ3RoICE9PSBsaWdodHNTdGF0ZUhhc2gucG9pbnRMZW5ndGggfHxcblx0XHRcdGxpZ2h0c0hhc2guc3BvdExlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLnNwb3RMZW5ndGggfHxcblx0XHRcdGxpZ2h0c0hhc2gucmVjdEFyZWFMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5yZWN0QXJlYUxlbmd0aCB8fFxuXHRcdFx0bGlnaHRzSGFzaC5oZW1pTGVuZ3RoICE9PSBsaWdodHNTdGF0ZUhhc2guaGVtaUxlbmd0aCB8fFxuXHRcdFx0bGlnaHRzSGFzaC5zaGFkb3dzTGVuZ3RoICE9PSBsaWdodHNTdGF0ZUhhc2guc2hhZG93c0xlbmd0aCApIHtcblxuXHRcdFx0bGlnaHRzSGFzaC5zdGF0ZUlEID0gbGlnaHRzU3RhdGVIYXNoLnN0YXRlSUQ7XG5cdFx0XHRsaWdodHNIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoO1xuXHRcdFx0bGlnaHRzSGFzaC5wb2ludExlbmd0aCA9IGxpZ2h0c1N0YXRlSGFzaC5wb2ludExlbmd0aDtcblx0XHRcdGxpZ2h0c0hhc2guc3BvdExlbmd0aCA9IGxpZ2h0c1N0YXRlSGFzaC5zcG90TGVuZ3RoO1xuXHRcdFx0bGlnaHRzSGFzaC5yZWN0QXJlYUxlbmd0aCA9IGxpZ2h0c1N0YXRlSGFzaC5yZWN0QXJlYUxlbmd0aDtcblx0XHRcdGxpZ2h0c0hhc2guaGVtaUxlbmd0aCA9IGxpZ2h0c1N0YXRlSGFzaC5oZW1pTGVuZ3RoO1xuXHRcdFx0bGlnaHRzSGFzaC5zaGFkb3dzTGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLnNoYWRvd3NMZW5ndGg7XG5cblx0XHRcdHByb2dyYW1DaGFuZ2UgPSBmYWxzZTtcblxuXHRcdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMuc2hhZGVySUQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gc2FtZSBnbHNsIGFuZCB1bmlmb3JtIGxpc3Rcblx0XHRcdHJldHVybjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG9ubHkgcmVidWlsZCB1bmlmb3JtIGxpc3Rcblx0XHRcdHByb2dyYW1DaGFuZ2UgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggcHJvZ3JhbUNoYW5nZSApIHtcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRcdHZhciBzaGFkZXIgPSBTaGFkZXJMaWJbIHBhcmFtZXRlcnMuc2hhZGVySUQgXTtcblxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1hdGVyaWFsLnR5cGUsXG5cdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIHNoYWRlci51bmlmb3JtcyApLFxuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciA9IHtcblx0XHRcdFx0XHRuYW1lOiBtYXRlcmlhbC50eXBlLFxuXHRcdFx0XHRcdHVuaWZvcm1zOiBtYXRlcmlhbC51bmlmb3Jtcyxcblx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IG1hdGVyaWFsLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXJcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUoIG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIsIF90aGlzICk7XG5cblx0XHRcdC8vIENvbXB1dGluZyBjb2RlIGFnYWluIGFzIG9uQmVmb3JlQ29tcGlsZSBtYXkgaGF2ZSBjaGFuZ2VkIHRoZSBzaGFkZXJzXG5cdFx0XHRjb2RlID0gcHJvZ3JhbUNhY2hlLmdldFByb2dyYW1Db2RlKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApO1xuXG5cdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBtYXRlcmlhbCwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciwgcGFyYW1ldGVycywgY29kZSApO1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0XHRtYXRlcmlhbC5wcm9ncmFtID0gcHJvZ3JhbTtcblxuXHRcdH1cblxuXHRcdHZhciBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IF90aGlzLm1heE1vcnBoVGFyZ2V0czsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGVzWyAnbW9ycGhUYXJnZXQnICsgaSBdID49IDAgKSB7XG5cblx0XHRcdFx0XHRtYXRlcmlhbC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1vcnBoTm9ybWFscyApIHtcblxuXHRcdFx0bWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgX3RoaXMubWF4TW9ycGhOb3JtYWxzOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZXNbICdtb3JwaE5vcm1hbCcgKyBpIF0gPj0gMCApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIudW5pZm9ybXM7XG5cblx0XHRpZiAoICEgbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJlxuXHRcdFx0ISBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsIHx8XG5cdFx0XHRtYXRlcmlhbC5jbGlwcGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzID0gX2NsaXBwaW5nLm51bVBsYW5lcztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gPSBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uO1xuXHRcdFx0dW5pZm9ybXMuY2xpcHBpbmdQbGFuZXMgPSBfY2xpcHBpbmcudW5pZm9ybTtcblxuXHRcdH1cblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5mb2cgPSBmb2c7XG5cblx0XHQvLyBzdG9yZSB0aGUgbGlnaHQgc2V0dXAgaXQgd2FzIGNyZWF0ZWQgZm9yXG5cdFx0aWYgKCBsaWdodHNIYXNoID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNIYXNoID0gbGlnaHRzSGFzaCA9IHt9O1xuXG5cdFx0fVxuXG5cdFx0bGlnaHRzSGFzaC5zdGF0ZUlEID0gbGlnaHRzU3RhdGVIYXNoLnN0YXRlSUQ7XG5cdFx0bGlnaHRzSGFzaC5kaXJlY3Rpb25hbExlbmd0aCA9IGxpZ2h0c1N0YXRlSGFzaC5kaXJlY3Rpb25hbExlbmd0aDtcblx0XHRsaWdodHNIYXNoLnBvaW50TGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLnBvaW50TGVuZ3RoO1xuXHRcdGxpZ2h0c0hhc2guc3BvdExlbmd0aCA9IGxpZ2h0c1N0YXRlSGFzaC5zcG90TGVuZ3RoO1xuXHRcdGxpZ2h0c0hhc2gucmVjdEFyZWFMZW5ndGggPSBsaWdodHNTdGF0ZUhhc2gucmVjdEFyZWFMZW5ndGg7XG5cdFx0bGlnaHRzSGFzaC5oZW1pTGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLmhlbWlMZW5ndGg7XG5cdFx0bGlnaHRzSGFzaC5zaGFkb3dzTGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLnNoYWRvd3NMZW5ndGg7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmxpZ2h0cyApIHtcblxuXHRcdFx0Ly8gd2lyZSB1cCB0aGUgbWF0ZXJpYWwgdG8gdGhpcyByZW5kZXJlcidzIGxpZ2h0aW5nIHN0YXRlXG5cblx0XHRcdHVuaWZvcm1zLmFtYmllbnRMaWdodENvbG9yLnZhbHVlID0gbGlnaHRzLnN0YXRlLmFtYmllbnQ7XG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbDtcblx0XHRcdHVuaWZvcm1zLnNwb3RMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdDtcblx0XHRcdHVuaWZvcm1zLnJlY3RBcmVhTGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnJlY3RBcmVhO1xuXHRcdFx0dW5pZm9ybXMucG9pbnRMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnQ7XG5cdFx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmhlbWk7XG5cblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg7XG5cdFx0XHR1bmlmb3Jtcy5zcG90U2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RTaGFkb3dNYXA7XG5cdFx0XHR1bmlmb3Jtcy5zcG90U2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RTaGFkb3dNYXRyaXg7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hcDtcblx0XHRcdHVuaWZvcm1zLnBvaW50U2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93TWF0cml4O1xuXHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IGFkZCBhcmVhIGxpZ2h0cyBzaGFkb3cgaW5mbyB0byB1bmlmb3Jtc1xuXG5cdFx0fVxuXG5cdFx0dmFyIHByb2dVbmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtLmdldFVuaWZvcm1zKCksXG5cdFx0XHR1bmlmb3Jtc0xpc3QgPVxuXHRcdFx0XHRXZWJHTFVuaWZvcm1zLnNlcVdpdGhWYWx1ZSggcHJvZ1VuaWZvcm1zLnNlcSwgdW5pZm9ybXMgKTtcblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QgPSB1bmlmb3Jtc0xpc3Q7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFByb2dyYW0oIGNhbWVyYSwgZm9nLCBtYXRlcmlhbCwgb2JqZWN0ICkge1xuXG5cdFx0X3VzZWRUZXh0dXJlVW5pdHMgPSAwO1xuXG5cdFx0dmFyIG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXHRcdHZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXG5cdFx0dmFyIGxpZ2h0c0hhc2ggPSBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzSGFzaDtcblx0XHR2YXIgbGlnaHRzU3RhdGVIYXNoID0gbGlnaHRzLnN0YXRlLmhhc2g7XG5cblx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgKSB7XG5cblx0XHRcdGlmICggX2xvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IGNhbWVyYSAhPT0gX2N1cnJlbnRDYW1lcmEgKSB7XG5cblx0XHRcdFx0dmFyIHVzZUNhY2hlID1cblx0XHRcdFx0XHRjYW1lcmEgPT09IF9jdXJyZW50Q2FtZXJhICYmXG5cdFx0XHRcdFx0bWF0ZXJpYWwuaWQgPT09IF9jdXJyZW50TWF0ZXJpYWxJZDtcblxuXHRcdFx0XHQvLyB3ZSBtaWdodCB3YW50IHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIHNvbWUgQ2xpcHBpbmdHcm91cFxuXHRcdFx0XHQvLyBvYmplY3QgaW5zdGVhZCBvZiB0aGUgbWF0ZXJpYWwsIG9uY2UgaXQgYmVjb21lcyBmZWFzaWJsZVxuXHRcdFx0XHQvLyAoIzg0NjUsICM4Mzc5KVxuXHRcdFx0XHRfY2xpcHBpbmcuc2V0U3RhdGUoXG5cdFx0XHRcdFx0bWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMsIG1hdGVyaWFsLmNsaXBJbnRlcnNlY3Rpb24sIG1hdGVyaWFsLmNsaXBTaGFkb3dzLFxuXHRcdFx0XHRcdGNhbWVyYSwgbWF0ZXJpYWxQcm9wZXJ0aWVzLCB1c2VDYWNoZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5lZWRzVXBkYXRlID09PSBmYWxzZSApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZm9nICYmIG1hdGVyaWFsUHJvcGVydGllcy5mb2cgIT09IGZvZyApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmxpZ2h0cyAmJiAoIGxpZ2h0c0hhc2guc3RhdGVJRCAhPT0gbGlnaHRzU3RhdGVIYXNoLnN0YXRlSUQgfHxcblx0XHRcdFx0bGlnaHRzSGFzaC5kaXJlY3Rpb25hbExlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoIHx8XG5cdFx0XHRcdGxpZ2h0c0hhc2gucG9pbnRMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5wb2ludExlbmd0aCB8fFxuXHRcdFx0XHRsaWdodHNIYXNoLnNwb3RMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5zcG90TGVuZ3RoIHx8XG5cdFx0XHRcdGxpZ2h0c0hhc2gucmVjdEFyZWFMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5yZWN0QXJlYUxlbmd0aCB8fFxuXHRcdFx0XHRsaWdodHNIYXNoLmhlbWlMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5oZW1pTGVuZ3RoIHx8XG5cdFx0XHRcdGxpZ2h0c0hhc2guc2hhZG93c0xlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLnNoYWRvd3NMZW5ndGggKSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdCggbWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSBfY2xpcHBpbmcubnVtUGxhbmVzIHx8XG5cdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gIT09IF9jbGlwcGluZy5udW1JbnRlcnNlY3Rpb24gKSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdGluaXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZvZywgb2JqZWN0ICk7XG5cdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHJlZnJlc2hQcm9ncmFtID0gZmFsc2U7XG5cdFx0dmFyIHJlZnJlc2hNYXRlcmlhbCA9IGZhbHNlO1xuXHRcdHZhciByZWZyZXNoTGlnaHRzID0gZmFsc2U7XG5cblx0XHR2YXIgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtLFxuXHRcdFx0cF91bmlmb3JtcyA9IHByb2dyYW0uZ2V0VW5pZm9ybXMoKSxcblx0XHRcdG1fdW5pZm9ybXMgPSBtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyLnVuaWZvcm1zO1xuXG5cdFx0aWYgKCBzdGF0ZS51c2VQcm9ncmFtKCBwcm9ncmFtLnByb2dyYW0gKSApIHtcblxuXHRcdFx0cmVmcmVzaFByb2dyYW0gPSB0cnVlO1xuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pZCAhPT0gX2N1cnJlbnRNYXRlcmlhbElkICkge1xuXG5cdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDtcblxuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVmcmVzaFByb2dyYW0gfHwgX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncHJvamVjdGlvbk1hdHJpeCcsIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbG9nRGVwdGhCdWZGQycsXG5cdFx0XHRcdFx0Mi4wIC8gKCBNYXRoLmxvZyggY2FtZXJhLmZhciArIDEuMCApIC8gTWF0aC5MTjIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0XHRfY3VycmVudENhbWVyYSA9IGNhbWVyYTtcblxuXHRcdFx0XHQvLyBsaWdodGluZyB1bmlmb3JtcyBkZXBlbmQgb24gdGhlIGNhbWVyYSBzbyBlbmZvcmNlIGFuIHVwZGF0ZVxuXHRcdFx0XHQvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlblxuXHRcdFx0XHQvLyB0aGUgbmV4dCBtYXRlcmlhbCB0aGF0IGRvZXMgZ2V0cyBhY3RpdmF0ZWQ6XG5cblx0XHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcdFx0Ly8gc2V0IHRvIHRydWUgb24gbWF0ZXJpYWwgY2hhbmdlXG5cdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1x0XHQvLyByZW1haW5zIHNldCB1bnRpbCB1cGRhdGUgZG9uZVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGxvYWQgbWF0ZXJpYWwgc3BlY2lmaWMgdW5pZm9ybXNcblx0XHRcdC8vIChzaGFkZXIgbWF0ZXJpYWwgYWxzbyBnZXRzIHRoZW0gZm9yIHRoZSBzYWtlIG9mIGdlbmVyaWNpdHkpXG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuZW52TWFwICkge1xuXG5cdFx0XHRcdHZhciB1Q2FtUG9zID0gcF91bmlmb3Jtcy5tYXAuY2FtZXJhUG9zaXRpb247XG5cblx0XHRcdFx0aWYgKCB1Q2FtUG9zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR1Q2FtUG9zLnNldFZhbHVlKCBfZ2wsXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuc2tpbm5pbmcgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndmlld01hdHJpeCcsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbm5pbmcgdW5pZm9ybXMgbXVzdCBiZSBzZXQgZXZlbiBpZiBtYXRlcmlhbCBkaWRuJ3QgY2hhbmdlXG5cdFx0Ly8gYXV0by1zZXR0aW5nIG9mIHRleHR1cmUgdW5pdCBmb3IgYm9uZSB0ZXh0dXJlIG11c3QgZ28gYmVmb3JlIG90aGVyIHRleHR1cmVzXG5cdFx0Ly8gbm90IHN1cmUgd2h5LCBidXQgb3RoZXJ3aXNlIHdlaXJkIHRoaW5ncyBoYXBwZW5cblxuXHRcdGlmICggbWF0ZXJpYWwuc2tpbm5pbmcgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeCcgKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnICk7XG5cblx0XHRcdHZhciBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcblxuXHRcdFx0aWYgKCBza2VsZXRvbiApIHtcblxuXHRcdFx0XHR2YXIgYm9uZXMgPSBza2VsZXRvbi5ib25lcztcblxuXHRcdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzICkge1xuXG5cdFx0XHRcdFx0aWYgKCBza2VsZXRvbi5ib25lVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsYXlvdXQgKDEgbWF0cml4ID0gNCBwaXhlbHMpXG5cdFx0XHRcdFx0XHQvLyAgICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgKD0+IGNvbHVtbjEsIGNvbHVtbjIsIGNvbHVtbjMsIGNvbHVtbjQpXG5cdFx0XHRcdFx0XHQvLyAgd2l0aCAgOHg4ICBwaXhlbCB0ZXh0dXJlIG1heCAgIDE2IGJvbmVzICogNCBwaXhlbHMgPSAgKDggKiA4KVxuXHRcdFx0XHRcdFx0Ly8gICAgICAgMTZ4MTYgcGl4ZWwgdGV4dHVyZSBtYXggICA2NCBib25lcyAqIDQgcGl4ZWxzID0gKDE2ICogMTYpXG5cdFx0XHRcdFx0XHQvLyAgICAgICAzMngzMiBwaXhlbCB0ZXh0dXJlIG1heCAgMjU2IGJvbmVzICogNCBwaXhlbHMgPSAoMzIgKiAzMilcblx0XHRcdFx0XHRcdC8vICAgICAgIDY0eDY0IHBpeGVsIHRleHR1cmUgbWF4IDEwMjQgYm9uZXMgKiA0IHBpeGVscyA9ICg2NCAqIDY0KVxuXG5cblx0XHRcdFx0XHRcdHZhciBzaXplID0gTWF0aC5zcXJ0KCBib25lcy5sZW5ndGggKiA0ICk7IC8vIDQgcGl4ZWxzIG5lZWRlZCBmb3IgMSBtYXRyaXhcblx0XHRcdFx0XHRcdHNpemUgPSBfTWF0aC5jZWlsUG93ZXJPZlR3byggc2l6ZSApO1xuXHRcdFx0XHRcdFx0c2l6ZSA9IE1hdGgubWF4KCBzaXplLCA0ICk7XG5cblx0XHRcdFx0XHRcdHZhciBib25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcblx0XHRcdFx0XHRcdGJvbmVNYXRyaWNlcy5zZXQoIHNrZWxldG9uLmJvbmVNYXRyaWNlcyApOyAvLyBjb3B5IGN1cnJlbnQgdmFsdWVzXG5cblx0XHRcdFx0XHRcdHZhciBib25lVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggYm9uZU1hdHJpY2VzLCBzaXplLCBzaXplLCBSR0JBRm9ybWF0LCBGbG9hdFR5cGUgKTtcblx0XHRcdFx0XHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZU1hdHJpY2VzID0gYm9uZU1hdHJpY2VzO1xuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZVRleHR1cmUgPSBib25lVGV4dHVyZTtcblx0XHRcdFx0XHRcdHNrZWxldG9uLmJvbmVUZXh0dXJlU2l6ZSA9IHNpemU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlICk7XG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnYm9uZVRleHR1cmVTaXplJywgc2tlbGV0b24uYm9uZVRleHR1cmVTaXplICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgc2tlbGV0b24sICdib25lTWF0cmljZXMnICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdFeHBvc3VyZScsIF90aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3RvbmVNYXBwaW5nV2hpdGVQb2ludCcsIF90aGlzLnRvbmVNYXBwaW5nV2hpdGVQb2ludCApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmxpZ2h0cyApIHtcblxuXHRcdFx0XHQvLyB0aGUgY3VycmVudCBtYXRlcmlhbCByZXF1aXJlcyBsaWdodGluZyBpbmZvXG5cblx0XHRcdFx0Ly8gbm90ZTogYWxsIGxpZ2h0aW5nIHVuaWZvcm1zIGFyZSBhbHdheXMgc2V0IGNvcnJlY3RseVxuXHRcdFx0XHQvLyB0aGV5IHNpbXBseSByZWZlcmVuY2UgdGhlIHJlbmRlcmVyJ3Mgc3RhdGUgZm9yIHRoZWlyXG5cdFx0XHRcdC8vIHZhbHVlc1xuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyB1c2UgdGhlIGN1cnJlbnQgbWF0ZXJpYWwncyAubmVlZHNVcGRhdGUgZmxhZ3MgdG8gc2V0XG5cdFx0XHRcdC8vIHRoZSBHTCBzdGF0ZSB3aGVuIHJlcXVpcmVkXG5cblx0XHRcdFx0bWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIG1fdW5pZm9ybXMsIHJlZnJlc2hMaWdodHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZWZyZXNoIHVuaWZvcm1zIGNvbW1vbiB0byBzZXZlcmFsIG1hdGVyaWFsc1xuXG5cdFx0XHRpZiAoIGZvZyAmJiBtYXRlcmlhbC5mb2cgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRm9nKCBtX3VuaWZvcm1zLCBmb2cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNMYW1iZXJ0KCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Rvb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Bob25nKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaHlzaWNhbE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTWF0Y2FwTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc01hdGNhcCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoRGVwdGhNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0RlcHRoKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEaXN0YW5jZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaE5vcm1hbE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTm9ybWFsKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc0xpbmVCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0xpbmUoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5pc0xpbmVEYXNoZWRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0Rhc2goIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1BvaW50c01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1BvaW50cyggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsICkge1xuXG5cdFx0XHRcdG1fdW5pZm9ybXMuY29sb3IudmFsdWUgPSBtYXRlcmlhbC5jb2xvcjtcblx0XHRcdFx0bV91bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZWN0QXJlYUxpZ2h0IFRleHR1cmVcblx0XHRcdC8vIFRPRE8gKG1yZG9vYik6IEZpbmQgYSBuaWNlciBpbXBsZW1lbnRhdGlvblxuXG5cdFx0XHRpZiAoIG1fdW5pZm9ybXMubHRjXzEgIT09IHVuZGVmaW5lZCApIG1fdW5pZm9ybXMubHRjXzEudmFsdWUgPSBVbmlmb3Jtc0xpYi5MVENfMTtcblx0XHRcdGlmICggbV91bmlmb3Jtcy5sdGNfMiAhPT0gdW5kZWZpbmVkICkgbV91bmlmb3Jtcy5sdGNfMi52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18yO1xuXG5cdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0LCBtX3VuaWZvcm1zLCBfdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmIG1hdGVyaWFsLnVuaWZvcm1zTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0V2ViR0xVbmlmb3Jtcy51cGxvYWQoIF9nbCwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCwgbV91bmlmb3JtcywgX3RoaXMgKTtcblx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkge1xuXG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdjZW50ZXInLCBvYmplY3QuY2VudGVyICk7XG5cblx0XHR9XG5cblx0XHQvLyBjb21tb24gbWF0cmljZXNcblxuXHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsVmlld01hdHJpeCcsIG9iamVjdC5tb2RlbFZpZXdNYXRyaXggKTtcblx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdub3JtYWxNYXRyaXgnLCBvYmplY3Qubm9ybWFsTWF0cml4ICk7XG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxNYXRyaXgnLCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdH1cblxuXHQvLyBVbmlmb3JtcyAocmVmcmVzaCB1bmlmb3JtcyBvYmplY3RzKVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmNvbG9yICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlID0gbWF0ZXJpYWwuY29sb3I7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5lbWlzc2l2ZSApLm11bHRpcGx5U2NhbGFyKCBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5zcGVjdWxhck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbnZNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDtcblxuXHRcdFx0Ly8gZG9uJ3QgZmxpcCBDdWJlVGV4dHVyZSBlbnZNYXBzLCBmbGlwIGV2ZXJ5dGhpbmcgZWxzZTpcblx0XHRcdC8vICBXZWJHTFJlbmRlclRhcmdldEN1YmUgd2lsbCBiZSBmbGlwcGVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0Ly8gIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZS50ZXh0dXJlIHdpbGwgYmUgZmxpcHBlZCBiZWNhdXNlIGl0J3MgYSBUZXh0dXJlIGFuZCBOT1QgYSBDdWJlVGV4dHVyZVxuXHRcdFx0Ly8gdGhpcyBjaGVjayBtdXN0IGJlIGhhbmRsZWQgZGlmZmVyZW50bHksIG9yIHJlbW92ZWQgZW50aXJlbHksIGlmIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSB1c2VzIGEgQ3ViZVRleHR1cmUgaW4gdGhlIGZ1dHVyZVxuXHRcdFx0dW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcC5pc0N1YmVUZXh0dXJlID8gLSAxIDogMTtcblxuXHRcdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5O1xuXHRcdFx0dW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXhNaXBMZXZlbC52YWx1ZSA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbC5lbnZNYXAgKS5fX21heE1pcExldmVsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFvTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hb01hcC52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwO1xuXHRcdFx0dW5pZm9ybXMuYW9NYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5hb01hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdC8vIHV2IHJlcGVhdCBhbmQgb2Zmc2V0IHNldHRpbmcgcHJpb3JpdGllc1xuXHRcdC8vIDEuIGNvbG9yIG1hcFxuXHRcdC8vIDIuIHNwZWN1bGFyIG1hcFxuXHRcdC8vIDMuIG5vcm1hbCBtYXBcblx0XHQvLyA0LiBidW1wIG1hcFxuXHRcdC8vIDUuIGFscGhhIG1hcFxuXHRcdC8vIDYuIGVtaXNzaXZlIG1hcFxuXG5cdFx0dmFyIHV2U2NhbGVNYXA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYnVtcE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnJvdWdobmVzc01hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnJvdWdobmVzc01hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1ldGFsbmVzc01hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1dlNjYWxlTWFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRpZiAoIHV2U2NhbGVNYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHR1dlNjYWxlTWFwID0gdXZTY2FsZU1hcC50ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHV2U2NhbGVNYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggdXZTY2FsZU1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTGluZSggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZSA9IG1hdGVyaWFsLmNvbG9yO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEYXNoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kYXNoU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplO1xuXHRcdHVuaWZvcm1zLnRvdGFsU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplICsgbWF0ZXJpYWwuZ2FwU2l6ZTtcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IG1hdGVyaWFsLnNjYWxlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSBtYXRlcmlhbC5jb2xvcjtcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblx0XHR1bmlmb3Jtcy5zaXplLnZhbHVlID0gbWF0ZXJpYWwuc2l6ZSAqIF9waXhlbFJhdGlvO1xuXHRcdHVuaWZvcm1zLnNjYWxlLnZhbHVlID0gX2hlaWdodCAqIDAuNTtcblxuXHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLm1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLm1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5tYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSBtYXRlcmlhbC5jb2xvcjtcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblx0XHR1bmlmb3Jtcy5yb3RhdGlvbi52YWx1ZSA9IG1hdGVyaWFsLnJvdGF0aW9uO1xuXHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLm1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLm1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5tYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0ZvZyggdW5pZm9ybXMsIGZvZyApIHtcblxuXHRcdHVuaWZvcm1zLmZvZ0NvbG9yLnZhbHVlID0gZm9nLmNvbG9yO1xuXG5cdFx0aWYgKCBmb2cuaXNGb2cgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmZvZ05lYXIudmFsdWUgPSBmb2cubmVhcjtcblx0XHRcdHVuaWZvcm1zLmZvZ0Zhci52YWx1ZSA9IGZvZy5mYXI7XG5cblx0XHR9IGVsc2UgaWYgKCBmb2cuaXNGb2dFeHAyICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dEZW5zaXR5LnZhbHVlID0gZm9nLmRlbnNpdHk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyO1xuXHRcdHVuaWZvcm1zLnNoaW5pbmVzcy52YWx1ZSA9IE1hdGgubWF4KCBtYXRlcmlhbC5zaGluaW5lc3MsIDFlLTQgKTsgLy8gdG8gcHJldmVudCBwb3coIDAuMCwgMC4wIClcblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Rvb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdGlmICggbWF0ZXJpYWwuZ3JhZGllbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmdyYWRpZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZ3JhZGllbnRNYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5yb3VnaG5lc3MudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3M7XG5cdFx0dW5pZm9ybXMubWV0YWxuZXNzLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnJvdWdobmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzc01hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubWV0YWxuZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tZXRhbG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbnZNYXAgKSB7XG5cblx0XHRcdC8vdW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwOyAvLyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0cmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5OyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXG5cblx0XHR1bmlmb3Jtcy5jbGVhckNvYXQudmFsdWUgPSBtYXRlcmlhbC5jbGVhckNvYXQ7XG5cdFx0dW5pZm9ybXMuY2xlYXJDb2F0Um91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwubWF0Y2FwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0RlcHRoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdHVuaWZvcm1zLnJlZmVyZW5jZVBvc2l0aW9uLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnJlZmVyZW5jZVBvc2l0aW9uICk7XG5cdFx0dW5pZm9ybXMubmVhckRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwubmVhckRpc3RhbmNlO1xuXHRcdHVuaWZvcm1zLmZhckRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuZmFyRGlzdGFuY2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc05vcm1hbCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBJZiB1bmlmb3JtcyBhcmUgbWFya2VkIGFzIGNsZWFuLCB0aGV5IGRvbid0IG5lZWQgdG8gYmUgbG9hZGVkIHRvIHRoZSBHUFUuXG5cblx0ZnVuY3Rpb24gbWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIHVuaWZvcm1zLCB2YWx1ZSApIHtcblxuXHRcdHVuaWZvcm1zLmFtYmllbnRMaWdodENvbG9yLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMuc3BvdExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnJlY3RBcmVhTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXG5cdH1cblxuXHQvLyBUZXh0dXJlc1xuXG5cdGZ1bmN0aW9uIGFsbG9jVGV4dHVyZVVuaXQoKSB7XG5cblx0XHR2YXIgdGV4dHVyZVVuaXQgPSBfdXNlZFRleHR1cmVVbml0cztcblxuXHRcdGlmICggdGV4dHVyZVVuaXQgPj0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVzICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUcnlpbmcgdG8gdXNlICcgKyB0ZXh0dXJlVW5pdCArICcgdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5ICcgKyBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHRcdF91c2VkVGV4dHVyZVVuaXRzICs9IDE7XG5cblx0XHRyZXR1cm4gdGV4dHVyZVVuaXQ7XG5cblx0fVxuXG5cdHRoaXMuYWxsb2NUZXh0dXJlVW5pdCA9IGFsbG9jVGV4dHVyZVVuaXQ7XG5cblx0Ly8gdGhpcy5zZXRUZXh0dXJlMkQgPSBzZXRUZXh0dXJlMkQ7XG5cdHRoaXMuc2V0VGV4dHVyZTJEID0gKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgd2FybmVkID0gZmFsc2U7XG5cblx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eTogcGVlbCB0ZXh0dXJlLnRleHR1cmVcblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdGlmICggISB3YXJuZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXRUZXh0dXJlMkQ6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIgKTtcblx0XHRcdFx0XHR3YXJuZWQgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlID0gdGV4dHVyZS50ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApO1xuXG5cdFx0fTtcblxuXHR9KCkgKTtcblxuXHR0aGlzLnNldFRleHR1cmUzRCA9ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHk6IHBlZWwgdGV4dHVyZS50ZXh0dXJlXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldFRleHR1cmUzRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0XHR9O1xuXG5cdH0oKSApO1xuXG5cdHRoaXMuc2V0VGV4dHVyZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdhcm5lZCA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldFRleHR1cmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRcdGlmICggISB3YXJuZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlIGlzIGRlcHJlY2F0ZWQsIHVzZSBzZXRUZXh0dXJlMkQgaW5zdGVhZC5cIiApO1xuXHRcdFx0XHR3YXJuZWQgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApO1xuXG5cdFx0fTtcblxuXHR9KCkgKTtcblxuXHR0aGlzLnNldFRleHR1cmVDdWJlID0gKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgd2FybmVkID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBwZWVsIHRleHR1cmUudGV4dHVyZVxuXHRcdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHdhcm5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnNldFRleHR1cmVDdWJlOiBkb24ndCB1c2UgY3ViZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIgKTtcblx0XHRcdFx0XHR3YXJuZWQgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlID0gdGV4dHVyZS50ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGN1cnJlbnRseSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgaXMgYSBUZXh0dXJlIGFuZCBOT1QgYSBDdWJlVGV4dHVyZVxuXHRcdFx0Ly8gVE9ETzogdW5pZnkgdGhlc2UgY29kZSBwYXRoc1xuXHRcdFx0aWYgKCAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc0N1YmVUZXh0dXJlICkgfHxcblx0XHRcdFx0KCBBcnJheS5pc0FycmF5KCB0ZXh0dXJlLmltYWdlICkgJiYgdGV4dHVyZS5pbWFnZS5sZW5ndGggPT09IDYgKSApIHtcblxuXHRcdFx0XHQvLyBDb21wcmVzc2VkVGV4dHVyZSBjYW4gaGF2ZSBBcnJheSBpbiBpbWFnZSA6L1xuXG5cdFx0XHRcdC8vIHRoaXMgZnVuY3Rpb24gYWxvbmUgc2hvdWxkIHRha2UgY2FyZSBvZiBjdWJlIHRleHR1cmVzXG5cdFx0XHRcdHRleHR1cmVzLnNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gYXNzdW1lZDogdGV4dHVyZSBwcm9wZXJ0eSBvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmVcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZUR5bmFtaWMoIHRleHR1cmUsIHNsb3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9KCkgKTtcblxuXHQvL1xuXG5cdHRoaXMuc2V0RnJhbWVidWZmZXIgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0X2ZyYW1lYnVmZmVyID0gdmFsdWU7XG5cblx0fTtcblxuXHR0aGlzLmdldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRfY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICYmIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGZyYW1lYnVmZmVyID0gX2ZyYW1lYnVmZmVyO1xuXHRcdHZhciBpc0N1YmUgPSBmYWxzZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHR2YXIgX193ZWJnbEZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSBdO1xuXHRcdFx0XHRpc0N1YmUgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50Vmlld3BvcnQuY29weSggcmVuZGVyVGFyZ2V0LnZpZXdwb3J0ICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTtcblx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gX3NjaXNzb3JUZXN0O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfY3VycmVudEZyYW1lYnVmZmVyICE9PSBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cdFx0XHRfY3VycmVudEZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXI7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydCApO1xuXHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3NvciApO1xuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfY3VycmVudFNjaXNzb3JUZXN0ICk7XG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIDM2MTYwLCAzNjA2NCwgMzQwNjkgKyByZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCByZW5kZXJUYXJnZXQuYWN0aXZlTWlwTWFwTGV2ZWwgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMucmVhZFJlbmRlclRhcmdldFBpeGVscyA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBidWZmZXIgKSB7XG5cblx0XHRpZiAoICEgKCByZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBUSFJFRS5XZWJHTFJlbmRlclRhcmdldC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR2YXIgZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0aWYgKCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0dmFyIHJlc3RvcmUgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBmcmFtZWJ1ZmZlciAhPT0gX2N1cnJlbnRGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRyZXN0b3JlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0XHRcdHZhciB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdHZhciB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmVGb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApICE9PSBfZ2wuZ2V0UGFyYW1ldGVyKCAzNTczOSApICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LicgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGV4dHVyZVR5cGUgIT09IFVuc2lnbmVkQnl0ZVR5cGUgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSAhPT0gX2dsLmdldFBhcmFtZXRlciggMzU3MzggKSAmJiAvLyBJRTExLCBFZGdlIGFuZCBDaHJvbWUgTWFjIDwgNTIgKCM5NTEzKVxuXHRcdFx0XHRcdCEgKCB0ZXh0dXJlVHlwZSA9PT0gRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApICYmIC8vIENocm9tZSBNYWMgPj0gNTIgYW5kIEZpcmVmb3hcblx0XHRcdFx0XHQhICggdGV4dHVyZVR5cGUgPT09IEhhbGZGbG9hdFR5cGUgJiYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyBleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICkgOiBleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKSApICkgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFVuc2lnbmVkQnl0ZVR5cGUgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCB0eXBlLicgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggX2dsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoIDM2MTYwICkgPT09IDM2MDUzICkge1xuXG5cdFx0XHRcdFx0Ly8gdGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnQgZW5zdXJlcyB2YWxpZCByZWFkIHJlcXVlc3RzIChubyBvdXQtb2YtYm91bmRzIHBpeGVscywgc2VlICM4NjA0KVxuXG5cdFx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdFx0X2dsLnJlYWRQaXhlbHMoIHgsIHksIHdpZHRoLCBoZWlnaHQsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSwgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlYWRQaXhlbHMgZnJvbSByZW5kZXJUYXJnZXQgZmFpbGVkLiBGcmFtZWJ1ZmZlciBub3QgY29tcGxldGUuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHRpZiAoIHJlc3RvcmUgKSB7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgX2N1cnJlbnRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5jb3B5RnJhbWVidWZmZXJUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHBvc2l0aW9uLCB0ZXh0dXJlLCBsZXZlbCApIHtcblxuXHRcdHZhciB3aWR0aCA9IHRleHR1cmUuaW1hZ2Uud2lkdGg7XG5cdFx0dmFyIGhlaWdodCA9IHRleHR1cmUuaW1hZ2UuaGVpZ2h0O1xuXHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0ICk7XG5cblx0XHR0aGlzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgMCApO1xuXG5cdFx0X2dsLmNvcHlUZXhJbWFnZTJEKCAzNTUzLCBsZXZlbCB8fCAwLCBnbEZvcm1hdCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgMCApO1xuXG5cdH07XG5cblx0dGhpcy5jb3B5VGV4dHVyZVRvVGV4dHVyZSA9IGZ1bmN0aW9uICggcG9zaXRpb24sIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIGxldmVsICkge1xuXG5cdFx0dmFyIHdpZHRoID0gc3JjVGV4dHVyZS5pbWFnZS53aWR0aDtcblx0XHR2YXIgaGVpZ2h0ID0gc3JjVGV4dHVyZS5pbWFnZS5oZWlnaHQ7XG5cdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS5mb3JtYXQgKTtcblx0XHR2YXIgZ2xUeXBlID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS50eXBlICk7XG5cblx0XHR0aGlzLnNldFRleHR1cmUyRCggZHN0VGV4dHVyZSwgMCApO1xuXG5cdFx0aWYgKCBzcmNUZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdF9nbC50ZXhTdWJJbWFnZTJEKCAzNTUzLCBsZXZlbCB8fCAwLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBzcmNUZXh0dXJlLmltYWdlLmRhdGEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC50ZXhTdWJJbWFnZTJEKCAzNTUzLCBsZXZlbCB8fCAwLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBnbEZvcm1hdCwgZ2xUeXBlLCBzcmNUZXh0dXJlLmltYWdlICk7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZvZ0V4cDIoIGNvbG9yLCBkZW5zaXR5ICkge1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cdHRoaXMuZGVuc2l0eSA9ICggZGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgPyBkZW5zaXR5IDogMC4wMDAyNTtcblxufVxuXG5Gb2dFeHAyLnByb3RvdHlwZS5pc0ZvZ0V4cDIgPSB0cnVlO1xuXG5Gb2dFeHAyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRyZXR1cm4gbmV3IEZvZ0V4cDIoIHRoaXMuY29sb3IsIHRoaXMuZGVuc2l0eSApO1xuXG59O1xuXG5Gb2dFeHAyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoIC8qIG1ldGEgKi8gKSB7XG5cblx0cmV0dXJuIHtcblx0XHR0eXBlOiAnRm9nRXhwMicsXG5cdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0ZGVuc2l0eTogdGhpcy5kZW5zaXR5XG5cdH07XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRm9nKCBjb2xvciwgbmVhciwgZmFyICkge1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cblx0dGhpcy5uZWFyID0gKCBuZWFyICE9PSB1bmRlZmluZWQgKSA/IG5lYXIgOiAxO1xuXHR0aGlzLmZhciA9ICggZmFyICE9PSB1bmRlZmluZWQgKSA/IGZhciA6IDEwMDA7XG5cbn1cblxuRm9nLnByb3RvdHlwZS5pc0ZvZyA9IHRydWU7XG5cbkZvZy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyBGb2coIHRoaXMuY29sb3IsIHRoaXMubmVhciwgdGhpcy5mYXIgKTtcblxufTtcblxuRm9nLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoIC8qIG1ldGEgKi8gKSB7XG5cblx0cmV0dXJuIHtcblx0XHR0eXBlOiAnRm9nJyxcblx0XHRjb2xvcjogdGhpcy5jb2xvci5nZXRIZXgoKSxcblx0XHRuZWFyOiB0aGlzLm5lYXIsXG5cdFx0ZmFyOiB0aGlzLmZhclxuXHR9O1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gU2NlbmUoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTY2VuZSc7XG5cblx0dGhpcy5iYWNrZ3JvdW5kID0gbnVsbDtcblx0dGhpcy5mb2cgPSBudWxsO1xuXHR0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgPSBudWxsO1xuXG5cdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7IC8vIGNoZWNrZWQgYnkgdGhlIHJlbmRlcmVyXG5cbn1cblxuU2NlbmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU2NlbmUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5iYWNrZ3JvdW5kICE9PSBudWxsICkgdGhpcy5iYWNrZ3JvdW5kID0gc291cmNlLmJhY2tncm91bmQuY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5mb2cgIT09IG51bGwgKSB0aGlzLmZvZyA9IHNvdXJjZS5mb2cuY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5vdmVycmlkZU1hdGVyaWFsID0gc291cmNlLm92ZXJyaWRlTWF0ZXJpYWwuY2xvbmUoKTtcblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRpZiAoIHRoaXMuYmFja2dyb3VuZCAhPT0gbnVsbCApIGRhdGEub2JqZWN0LmJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQudG9KU09OKCBtZXRhICk7XG5cdFx0aWYgKCB0aGlzLmZvZyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LmZvZyA9IHRoaXMuZm9nLnRvSlNPTigpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW50ZXJsZWF2ZWRCdWZmZXIoIGFycmF5LCBzdHJpZGUgKSB7XG5cblx0dGhpcy5hcnJheSA9IGFycmF5O1xuXHR0aGlzLnN0cmlkZSA9IHN0cmlkZTtcblx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBzdHJpZGUgOiAwO1xuXG5cdHRoaXMuZHluYW1pYyA9IGZhbHNlO1xuXHR0aGlzLnVwZGF0ZVJhbmdlID0geyBvZmZzZXQ6IDAsIGNvdW50OiAtIDEgfTtcblxuXHR0aGlzLnZlcnNpb24gPSAwO1xuXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLCAnbmVlZHNVcGRhdGUnLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLCB7XG5cblx0aXNJbnRlcmxlYXZlZEJ1ZmZlcjogdHJ1ZSxcblxuXHRvblVwbG9hZENhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRzZXRBcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggYXJyYXkgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyB0aGlzLnN0cmlkZSA6IDA7XG5cdFx0dGhpcy5hcnJheSA9IGFycmF5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXREeW5hbWljOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5keW5hbWljID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApO1xuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cdFx0dGhpcy5zdHJpZGUgPSBzb3VyY2Uuc3RyaWRlO1xuXHRcdHRoaXMuZHluYW1pYyA9IHNvdXJjZS5keW5hbWljO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5QXQ6IGZ1bmN0aW9uICggaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4MiApIHtcblxuXHRcdGluZGV4MSAqPSB0aGlzLnN0cmlkZTtcblx0XHRpbmRleDIgKj0gYXR0cmlidXRlLnN0cmlkZTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuc3RyaWRlOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5hcnJheVsgaW5kZXgxICsgaSBdID0gYXR0cmlidXRlLmFycmF5WyBpbmRleDIgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLmFycmF5LnNldCggdmFsdWUsIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0b25VcGxvYWQ6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uVXBsb2FkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICovXG5cbmZ1bmN0aW9uIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgaXRlbVNpemUsIG9mZnNldCwgbm9ybWFsaXplZCApIHtcblxuXHR0aGlzLmRhdGEgPSBpbnRlcmxlYXZlZEJ1ZmZlcjtcblx0dGhpcy5pdGVtU2l6ZSA9IGl0ZW1TaXplO1xuXHR0aGlzLm9mZnNldCA9IG9mZnNldDtcblxuXHR0aGlzLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkID09PSB0cnVlO1xuXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcblxuXHRjb3VudDoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmRhdGEuY291bnQ7XG5cblx0XHR9XG5cblx0fSxcblxuXHRhcnJheToge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXk7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xuXG5cdGlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cblx0c2V0WDogZnVuY3Rpb24gKCBpbmRleCwgeCApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgXSA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggaW5kZXgsIHkgKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WjogZnVuY3Rpb24gKCBpbmRleCwgeiApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRXOiBmdW5jdGlvbiAoIGluZGV4LCB3ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFg6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCBdO1xuXG5cdH0sXG5cblx0Z2V0WTogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMSBdO1xuXG5cdH0sXG5cblx0Z2V0WjogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMiBdO1xuXG5cdH0sXG5cblx0Z2V0VzogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMyBdO1xuXG5cdH0sXG5cblx0c2V0WFk6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHkgKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFhZWjogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSwgeiApIHtcblxuXHRcdGluZGV4ID0gaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFlaVzogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSwgeiwgdyApIHtcblxuXHRcdGluZGV4ID0gaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIHJvdGF0aW9uOiA8ZmxvYXQ+LFxuICogIHNpemVBdHRlbnVhdGlvbjogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gU3ByaXRlTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTcHJpdGVNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMucm90YXRpb24gPSAwO1xuXG5cdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXHR0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ByaXRlTWF0ZXJpYWw7XG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuaXNTcHJpdGVNYXRlcmlhbCA9IHRydWU7XG5cblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XG5cblx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbnZhciBnZW9tZXRyeTtcblxuZnVuY3Rpb24gU3ByaXRlKCBtYXRlcmlhbCApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwcml0ZSc7XG5cblx0aWYgKCBnZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Z2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdHZhciBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBbXG5cdFx0XHQtIDAuNSwgLSAwLjUsIDAsIDAsIDAsXG5cdFx0XHQwLjUsIC0gMC41LCAwLCAxLCAwLFxuXHRcdFx0MC41LCAwLjUsIDAsIDEsIDEsXG5cdFx0XHQtIDAuNSwgMC41LCAwLCAwLCAxXG5cdFx0XSApO1xuXG5cdFx0dmFyIGludGVybGVhdmVkQnVmZmVyID0gbmV3IEludGVybGVhdmVkQnVmZmVyKCBmbG9hdDMyQXJyYXksIDUgKTtcblxuXHRcdGdlb21ldHJ5LnNldEluZGV4KCBbIDAsIDEsIDIsXHQwLCAyLCAzIF0gKTtcblx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIDMsIDAsIGZhbHNlICkgKTtcblx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIDIsIDMsIGZhbHNlICkgKTtcblxuXHR9XG5cblx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHR0aGlzLm1hdGVyaWFsID0gKCBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbCA6IG5ldyBTcHJpdGVNYXRlcmlhbCgpO1xuXG5cdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAuNSwgMC41ICk7XG5cbn1cblxuU3ByaXRlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNwcml0ZSxcblxuXHRpc1Nwcml0ZTogdHJ1ZSxcblxuXHRyYXljYXN0OiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpbnRlcnNlY3RQb2ludCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHdvcmxkU2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtdlBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBhbGlnbmVkUG9zaXRpb24gPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciByb3RhdGVkUG9zaXRpb24gPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB2aWV3V29ybGRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0dmFyIHZBID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdkIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2QyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdXZBID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZCID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdGZ1bmN0aW9uIHRyYW5zZm9ybVZlcnRleCggdmVydGV4UG9zaXRpb24sIG12UG9zaXRpb24sIGNlbnRlciwgc2NhbGUsIHNpbiwgY29zICkge1xuXG5cdFx0XHQvLyBjb21wdXRlIHBvc2l0aW9uIGluIGNhbWVyYSBzcGFjZVxuXHRcdFx0YWxpZ25lZFBvc2l0aW9uLnN1YlZlY3RvcnMoIHZlcnRleFBvc2l0aW9uLCBjZW50ZXIgKS5hZGRTY2FsYXIoIDAuNSApLm11bHRpcGx5KCBzY2FsZSApO1xuXG5cdFx0XHQvLyB0byBjaGVjayBpZiByb3RhdGlvbiBpcyBub3QgemVyb1xuXHRcdFx0aWYgKCBzaW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyb3RhdGVkUG9zaXRpb24ueCA9ICggY29zICogYWxpZ25lZFBvc2l0aW9uLnggKSAtICggc2luICogYWxpZ25lZFBvc2l0aW9uLnkgKTtcblx0XHRcdFx0cm90YXRlZFBvc2l0aW9uLnkgPSAoIHNpbiAqIGFsaWduZWRQb3NpdGlvbi54ICkgKyAoIGNvcyAqIGFsaWduZWRQb3NpdGlvbi55ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cm90YXRlZFBvc2l0aW9uLmNvcHkoIGFsaWduZWRQb3NpdGlvbiApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0dmVydGV4UG9zaXRpb24uY29weSggbXZQb3NpdGlvbiApO1xuXHRcdFx0dmVydGV4UG9zaXRpb24ueCArPSByb3RhdGVkUG9zaXRpb24ueDtcblx0XHRcdHZlcnRleFBvc2l0aW9uLnkgKz0gcm90YXRlZFBvc2l0aW9uLnk7XG5cblx0XHRcdC8vIHRyYW5zZm9ybSB0byB3b3JsZCBzcGFjZVxuXHRcdFx0dmVydGV4UG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3V29ybGRNYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiByYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRcdHdvcmxkU2NhbGUuc2V0RnJvbU1hdHJpeFNjYWxlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR2aWV3V29ybGRNYXRyaXguZ2V0SW52ZXJzZSggdGhpcy5tb2RlbFZpZXdNYXRyaXggKS5wcmVtdWx0aXBseSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXHRcdFx0bXZQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubW9kZWxWaWV3TWF0cml4ICk7XG5cblx0XHRcdHZhciByb3RhdGlvbiA9IHRoaXMubWF0ZXJpYWwucm90YXRpb247XG5cdFx0XHR2YXIgc2luLCBjb3M7XG5cdFx0XHRpZiAoIHJvdGF0aW9uICE9PSAwICkge1xuXG5cdFx0XHRcdGNvcyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xuXHRcdFx0XHRzaW4gPSBNYXRoLnNpbiggcm90YXRpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cblx0XHRcdHRyYW5zZm9ybVZlcnRleCggdkEuc2V0KCAtIDAuNSwgLSAwLjUsIDAgKSwgbXZQb3NpdGlvbiwgY2VudGVyLCB3b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXHRcdFx0dHJhbnNmb3JtVmVydGV4KCB2Qi5zZXQoIDAuNSwgLSAwLjUsIDAgKSwgbXZQb3NpdGlvbiwgY2VudGVyLCB3b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXHRcdFx0dHJhbnNmb3JtVmVydGV4KCB2Qy5zZXQoIDAuNSwgMC41LCAwICksIG12UG9zaXRpb24sIGNlbnRlciwgd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblxuXHRcdFx0dXZBLnNldCggMCwgMCApO1xuXHRcdFx0dXZCLnNldCggMSwgMCApO1xuXHRcdFx0dXZDLnNldCggMSwgMSApO1xuXG5cdFx0XHQvLyBjaGVjayBmaXJzdCB0cmlhbmdsZVxuXHRcdFx0dmFyIGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHZBLCB2QiwgdkMsIGZhbHNlLCBpbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBjaGVjayBzZWNvbmQgdHJpYW5nbGVcblx0XHRcdFx0dHJhbnNmb3JtVmVydGV4KCB2Qi5zZXQoIC0gMC41LCAwLjUsIDAgKSwgbXZQb3NpdGlvbiwgY2VudGVyLCB3b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXHRcdFx0XHR1dkIuc2V0KCAwLCAxICk7XG5cblx0XHRcdFx0aW50ZXJzZWN0ID0gcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RUcmlhbmdsZSggdkEsIHZDLCB2QiwgZmFsc2UsIGludGVyc2VjdFBvaW50ICk7XG5cdFx0XHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuO1xuXG5cdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdHBvaW50OiBpbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxuXHRcdFx0XHR1djogVHJpYW5nbGUuZ2V0VVYoIGludGVyc2VjdFBvaW50LCB2QSwgdkIsIHZDLCB1dkEsIHV2QiwgdXZDLCBuZXcgVmVjdG9yMigpICksXG5cdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuY2VudGVyICE9PSB1bmRlZmluZWQgKSB0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMT0QoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMT0QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0bGV2ZWxzOiB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IFtdXG5cdFx0fVxuXHR9ICk7XG5cbn1cblxuTE9ELnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExPRCxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgZmFsc2UgKTtcblxuXHRcdHZhciBsZXZlbHMgPSBzb3VyY2UubGV2ZWxzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmFkZExldmVsKCBsZXZlbC5vYmplY3QuY2xvbmUoKSwgbGV2ZWwuZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkTGV2ZWw6IGZ1bmN0aW9uICggb2JqZWN0LCBkaXN0YW5jZSApIHtcblxuXHRcdGlmICggZGlzdGFuY2UgPT09IHVuZGVmaW5lZCApIGRpc3RhbmNlID0gMDtcblxuXHRcdGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG5cblx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBsIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldmVscy5zcGxpY2UoIGwsIDAsIHsgZGlzdGFuY2U6IGRpc3RhbmNlLCBvYmplY3Q6IG9iamVjdCB9ICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0fSxcblxuXHRnZXRPYmplY3RGb3JEaXN0YW5jZTogZnVuY3Rpb24gKCBkaXN0YW5jZSApIHtcblxuXHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGZvciAoIHZhciBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBpIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBsZXZlbHNbIGkgLSAxIF0ub2JqZWN0O1xuXG5cdH0sXG5cblx0cmF5Y2FzdDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWF0cml4UG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0bWF0cml4UG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIG1hdHJpeFBvc2l0aW9uICk7XG5cblx0XHRcdHRoaXMuZ2V0T2JqZWN0Rm9yRGlzdGFuY2UoIGRpc3RhbmNlICkucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSggY2FtZXJhICkge1xuXG5cdFx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdFx0djEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblx0XHRcdFx0djIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0dmFyIGRpc3RhbmNlID0gdjEuZGlzdGFuY2VUbyggdjIgKTtcblxuXHRcdFx0XHRsZXZlbHNbIDAgXS5vYmplY3QudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlID49IGxldmVsc1sgaSBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdFx0XHRsZXZlbHNbIGkgLSAxIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LmxldmVscyA9IFtdO1xuXG5cdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHRkYXRhLm9iamVjdC5sZXZlbHMucHVzaCgge1xuXHRcdFx0XHRvYmplY3Q6IGxldmVsLm9iamVjdC51dWlkLFxuXHRcdFx0XHRkaXN0YW5jZTogbGV2ZWwuZGlzdGFuY2Vcblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXG4gKi9cblxuZnVuY3Rpb24gU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2tpbm5lZE1lc2ggbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG5cdE1lc2guY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0dGhpcy50eXBlID0gJ1NraW5uZWRNZXNoJztcblxuXHR0aGlzLmJpbmRNb2RlID0gJ2F0dGFjaGVkJztcblx0dGhpcy5iaW5kTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cbn1cblxuU2tpbm5lZE1lc2gucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTWVzaC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTa2lubmVkTWVzaCxcblxuXHRpc1NraW5uZWRNZXNoOiB0cnVlLFxuXG5cdGJpbmQ6IGZ1bmN0aW9uICggc2tlbGV0b24sIGJpbmRNYXRyaXggKSB7XG5cblx0XHR0aGlzLnNrZWxldG9uID0gc2tlbGV0b247XG5cblx0XHRpZiAoIGJpbmRNYXRyaXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHR0aGlzLnNrZWxldG9uLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0XHRcdGJpbmRNYXRyaXggPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5iaW5kTWF0cml4LmNvcHkoIGJpbmRNYXRyaXggKTtcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIGJpbmRNYXRyaXggKTtcblxuXHR9LFxuXG5cdHBvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuc2tlbGV0b24ucG9zZSgpO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplU2tpbldlaWdodHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0dmFyIHNraW5XZWlnaHQgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuc2tpbldlaWdodDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNraW5XZWlnaHQuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2ZWN0b3IueCA9IHNraW5XZWlnaHQuZ2V0WCggaSApO1xuXHRcdFx0dmVjdG9yLnkgPSBza2luV2VpZ2h0LmdldFkoIGkgKTtcblx0XHRcdHZlY3Rvci56ID0gc2tpbldlaWdodC5nZXRaKCBpICk7XG5cdFx0XHR2ZWN0b3IudyA9IHNraW5XZWlnaHQuZ2V0VyggaSApO1xuXG5cdFx0XHR2YXIgc2NhbGUgPSAxLjAgLyB2ZWN0b3IubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0XHRcdGlmICggc2NhbGUgIT09IEluZmluaXR5ICkge1xuXG5cdFx0XHRcdHZlY3Rvci5tdWx0aXBseVNjYWxhciggc2NhbGUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2ZWN0b3Iuc2V0KCAxLCAwLCAwLCAwICk7IC8vIGRvIHNvbWV0aGluZyByZWFzb25hYmxlXG5cblx0XHRcdH1cblxuXHRcdFx0c2tpbldlaWdodC5zZXRYWVpXKCBpLCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56LCB2ZWN0b3IudyApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0XHRNZXNoLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0aWYgKCB0aGlzLmJpbmRNb2RlID09PSAnYXR0YWNoZWQnICkge1xuXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuYmluZE1vZGUgPT09ICdkZXRhY2hlZCcgKSB7XG5cblx0XHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5iaW5kTWF0cml4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2lubmVkTWVzaDogVW5yZWNvZ25pemVkIGJpbmRNb2RlOiAnICsgdGhpcy5iaW5kTW9kZSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbWljaGFlbCBndWVycmVybyAvIGh0dHA6Ly9yZWFsaXR5bWVsdGRvd24uY29tXG4gKiBAYXV0aG9yIGlrZXJyIC8gaHR0cDovL3Zlcm9sZC5jb21cbiAqL1xuXG5mdW5jdGlvbiBTa2VsZXRvbiggYm9uZXMsIGJvbmVJbnZlcnNlcyApIHtcblxuXHQvLyBjb3B5IHRoZSBib25lIGFycmF5XG5cblx0Ym9uZXMgPSBib25lcyB8fCBbXTtcblxuXHR0aGlzLmJvbmVzID0gYm9uZXMuc2xpY2UoIDAgKTtcblx0dGhpcy5ib25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCB0aGlzLmJvbmVzLmxlbmd0aCAqIDE2ICk7XG5cblx0Ly8gdXNlIHRoZSBzdXBwbGllZCBib25lIGludmVyc2VzIG9yIGNhbGN1bGF0ZSB0aGUgaW52ZXJzZXNcblxuXHRpZiAoIGJvbmVJbnZlcnNlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0dGhpcy5jYWxjdWxhdGVJbnZlcnNlcygpO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIHRoaXMuYm9uZXMubGVuZ3RoID09PSBib25lSW52ZXJzZXMubGVuZ3RoICkge1xuXG5cdFx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IGJvbmVJbnZlcnNlcy5zbGljZSggMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b24gYm9uZUludmVyc2VzIGlzIHRoZSB3cm9uZyBsZW5ndGguJyApO1xuXG5cdFx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKCBuZXcgTWF0cml4NCgpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU2tlbGV0b24ucHJvdG90eXBlLCB7XG5cblx0Y2FsY3VsYXRlSW52ZXJzZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuYm9uZUludmVyc2VzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0XHRpZiAoIHRoaXMuYm9uZXNbIGkgXSApIHtcblxuXHRcdFx0XHRpbnZlcnNlLmdldEludmVyc2UoIHRoaXMuYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIGludmVyc2UgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHBvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBib25lLCBpLCBpbDtcblxuXHRcdC8vIHJlY292ZXIgdGhlIGJpbmQtdGltZSB3b3JsZCBtYXRyaWNlc1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ym9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lICkge1xuXG5cdFx0XHRcdGJvbmUubWF0cml4V29ybGQuZ2V0SW52ZXJzZSggdGhpcy5ib25lSW52ZXJzZXNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIHRoZSBsb2NhbCBtYXRyaWNlcywgcG9zaXRpb25zLCByb3RhdGlvbnMgYW5kIHNjYWxlc1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ym9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lICkge1xuXG5cdFx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHRcdFx0Ym9uZS5tYXRyaXguZ2V0SW52ZXJzZSggYm9uZS5wYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0XHRib25lLm1hdHJpeC5tdWx0aXBseSggYm9uZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRib25lLm1hdHJpeC5jb3B5KCBib25lLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJvbmUubWF0cml4LmRlY29tcG9zZSggYm9uZS5wb3NpdGlvbiwgYm9uZS5xdWF0ZXJuaW9uLCBib25lLnNjYWxlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZTogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2Zmc2V0TWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgaWRlbnRpdHlNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdFx0dmFyIGJvbmVzID0gdGhpcy5ib25lcztcblx0XHRcdHZhciBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcblx0XHRcdHZhciBib25lTWF0cmljZXMgPSB0aGlzLmJvbmVNYXRyaWNlcztcblx0XHRcdHZhciBib25lVGV4dHVyZSA9IHRoaXMuYm9uZVRleHR1cmU7XG5cblx0XHRcdC8vIGZsYXR0ZW4gYm9uZSBtYXRyaWNlcyB0byBhcnJheVxuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gY29tcHV0ZSB0aGUgb2Zmc2V0IGJldHdlZW4gdGhlIGN1cnJlbnQgYW5kIHRoZSBvcmlnaW5hbCB0cmFuc2Zvcm1cblxuXHRcdFx0XHR2YXIgbWF0cml4ID0gYm9uZXNbIGkgXSA/IGJvbmVzWyBpIF0ubWF0cml4V29ybGQgOiBpZGVudGl0eU1hdHJpeDtcblxuXHRcdFx0XHRvZmZzZXRNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggbWF0cml4LCBib25lSW52ZXJzZXNbIGkgXSApO1xuXHRcdFx0XHRvZmZzZXRNYXRyaXgudG9BcnJheSggYm9uZU1hdHJpY2VzLCBpICogMTYgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJvbmVUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ym9uZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0gKSgpLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNrZWxldG9uKCB0aGlzLmJvbmVzLCB0aGlzLmJvbmVJbnZlcnNlcyApO1xuXG5cdH0sXG5cblx0Z2V0Qm9uZUJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICovXG5cbmZ1bmN0aW9uIEJvbmUoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb25lJztcblxufVxuXG5Cb25lLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEJvbmUsXG5cblx0aXNCb25lOiB0cnVlXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBsaW5ld2lkdGg6IDxmbG9hdD4sXG4gKiAgbGluZWNhcDogXCJyb3VuZFwiLFxuICogIGxpbmVqb2luOiBcInJvdW5kXCJcbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBMaW5lQmFzaWNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xpbmVCYXNpY01hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdHRoaXMubGluZXdpZHRoID0gMTtcblx0dGhpcy5saW5lY2FwID0gJ3JvdW5kJztcblx0dGhpcy5saW5lam9pbiA9ICdyb3VuZCc7XG5cblx0dGhpcy5saWdodHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZUJhc2ljTWF0ZXJpYWw7XG5cbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5pc0xpbmVCYXNpY01hdGVyaWFsID0gdHJ1ZTtcblxuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubGluZXdpZHRoID0gc291cmNlLmxpbmV3aWR0aDtcblx0dGhpcy5saW5lY2FwID0gc291cmNlLmxpbmVjYXA7XG5cdHRoaXMubGluZWpvaW4gPSBzb3VyY2UubGluZWpvaW47XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG1vZGUgKSB7XG5cblx0aWYgKCBtb2RlID09PSAxICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxpbmU6IHBhcmFtZXRlciBUSFJFRS5MaW5lUGllY2VzIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFVzZSBUSFJFRS5MaW5lU2VnbWVudHMgaW5zdGVhZC4nICk7XG5cblx0fVxuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZSc7XG5cblx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5ICE9PSB1bmRlZmluZWQgPyBnZW9tZXRyeSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWwgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsIDogbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmYgfSApO1xuXG59XG5cbkxpbmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGluZSxcblxuXHRpc0xpbmU6IHRydWUsXG5cblx0Y29tcHV0ZUxpbmVEaXN0YW5jZXM6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHN0YXJ0ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZW5kID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb21wdXRlTGluZURpc3RhbmNlcygpIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdC8vIHdlIGFzc3VtZSBub24taW5kZXhlZCBnZW9tZXRyeVxuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR2YXIgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0XHRcdHZhciBsaW5lRGlzdGFuY2VzID0gWyAwIF07XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpIC0gMSApO1xuXHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7XG5cblx0XHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gKz0gc3RhcnQuZGlzdGFuY2VUbyggZW5kICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdsaW5lRGlzdGFuY2UnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbGluZURpc3RhbmNlcywgMSApICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKTogQ29tcHV0YXRpb24gb25seSBwb3NzaWJsZSB3aXRoIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5LicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cdFx0XHRcdHZhciBsaW5lRGlzdGFuY2VzID0gZ2VvbWV0cnkubGluZURpc3RhbmNlcztcblxuXHRcdFx0XHRsaW5lRGlzdGFuY2VzWyAwIF0gPSAwO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gPSBsaW5lRGlzdGFuY2VzWyBpIC0gMSBdO1xuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSArPSB2ZXJ0aWNlc1sgaSAtIDEgXS5kaXN0YW5jZVRvKCB2ZXJ0aWNlc1sgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCkgKSxcblxuXHRyYXljYXN0OiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpbnZlcnNlTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgcmF5ID0gbmV3IFJheSgpO1xuXHRcdHZhciBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0XHR2YXIgcHJlY2lzaW9uID0gcmF5Y2FzdGVyLmxpbmVQcmVjaXNpb247XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0XHQvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXlcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0XHRzcGhlcmUuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcblx0XHRcdHNwaGVyZS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRzcGhlcmUucmFkaXVzICs9IHByZWNpc2lvbjtcblxuXHRcdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aW52ZXJzZU1hdHJpeC5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApO1xuXHRcdFx0cmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIGludmVyc2VNYXRyaXggKTtcblxuXHRcdFx0dmFyIGxvY2FsUHJlY2lzaW9uID0gcHJlY2lzaW9uIC8gKCAoIHRoaXMuc2NhbGUueCArIHRoaXMuc2NhbGUueSArIHRoaXMuc2NhbGUueiApIC8gMyApO1xuXHRcdFx0dmFyIGxvY2FsUHJlY2lzaW9uU3EgPSBsb2NhbFByZWNpc2lvbiAqIGxvY2FsUHJlY2lzaW9uO1xuXG5cdFx0XHR2YXIgdlN0YXJ0ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHZhciB2RW5kID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHZhciBpbnRlclNlZ21lbnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIGludGVyUmF5ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHZhciBzdGVwID0gKCB0aGlzICYmIHRoaXMuaXNMaW5lU2VnbWVudHMgKSA/IDIgOiAxO1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cblx0XHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBpbmRpY2VzID0gaW5kZXguYXJyYXk7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aCAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBhID0gaW5kaWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0dmFyIGIgPSBpbmRpY2VzWyBpICsgMSBdO1xuXG5cdFx0XHRcdFx0XHR2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGEgKiAzICk7XG5cdFx0XHRcdFx0XHR2RW5kLmZyb21BcnJheSggcG9zaXRpb25zLCBiICogMyApO1xuXG5cdFx0XHRcdFx0XHR2YXIgZGlzdFNxID0gcmF5LmRpc3RhbmNlU3FUb1NlZ21lbnQoIHZTdGFydCwgdkVuZCwgaW50ZXJSYXksIGludGVyU2VnbWVudCApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGRpc3RTcSA+IGxvY2FsUHJlY2lzaW9uU3EgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdFx0aW50ZXJSYXkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7IC8vTW92ZSBiYWNrIHRvIHdvcmxkIHNwYWNlIGZvciBkaXN0YW5jZSBjYWxjdWxhdGlvblxuXG5cdFx0XHRcdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlclJheSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgY29udGludWU7XG5cblx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRcdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0XHRcdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XG5cdFx0XHRcdFx0XHRcdC8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLFxuXHRcdFx0XHRcdFx0XHRwb2ludDogaW50ZXJTZWdtZW50LmNsb25lKCkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICksXG5cdFx0XHRcdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRcdFx0XHRmYWNlSW5kZXg6IG51bGwsXG5cdFx0XHRcdFx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRcdFx0dlN0YXJ0LmZyb21BcnJheSggcG9zaXRpb25zLCAzICogaSApO1xuXHRcdFx0XHRcdFx0dkVuZC5mcm9tQXJyYXkoIHBvc2l0aW9ucywgMyAqIGkgKyAzICk7XG5cblx0XHRcdFx0XHRcdHZhciBkaXN0U3EgPSByYXkuZGlzdGFuY2VTcVRvU2VnbWVudCggdlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cdFx0XHRcdHZhciBuYlZlcnRpY2VzID0gdmVydGljZXMubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG5iVmVydGljZXMgLSAxOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0XHR2YXIgZGlzdFNxID0gcmF5LmRpc3RhbmNlU3FUb1NlZ21lbnQoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzWyBpICsgMSBdLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RTcSA+IGxvY2FsUHJlY2lzaW9uU3EgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XG5cdFx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcblx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9KCkgKSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5jb3B5KCBzb3VyY2UuZ2VvbWV0cnkgKTtcblx0XHR0aGlzLm1hdGVyaWFsLmNvcHkoIHNvdXJjZS5tYXRlcmlhbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0TGluZS5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZVNlZ21lbnRzJztcblxufVxuXG5MaW5lU2VnbWVudHMucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGluZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lU2VnbWVudHMsXG5cblx0aXNMaW5lU2VnbWVudHM6IHRydWUsXG5cblx0Y29tcHV0ZUxpbmVEaXN0YW5jZXM6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHN0YXJ0ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZW5kID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb21wdXRlTGluZURpc3RhbmNlcygpIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdC8vIHdlIGFzc3VtZSBub24taW5kZXhlZCBnZW9tZXRyeVxuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR2YXIgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0XHRcdHZhciBsaW5lRGlzdGFuY2VzID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKz0gMiApIHtcblxuXHRcdFx0XHRcdFx0c3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblx0XHRcdFx0XHRcdGVuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDEgKTtcblxuXHRcdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gKCBpID09PSAwICkgPyAwIDogbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgKyAxIF0gPSBsaW5lRGlzdGFuY2VzWyBpIF0gKyBzdGFydC5kaXN0YW5jZVRvKCBlbmQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZVNlZ21lbnRzLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdFx0XHR2YXIgbGluZURpc3RhbmNlcyA9IGdlb21ldHJ5LmxpbmVEaXN0YW5jZXM7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdFx0c3RhcnQuY29weSggdmVydGljZXNbIGkgXSApO1xuXHRcdFx0XHRcdGVuZC5jb3B5KCB2ZXJ0aWNlc1sgaSArIDEgXSApO1xuXG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gKCBpID09PSAwICkgPyAwIDogbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpICsgMSBdID0gbGluZURpc3RhbmNlc1sgaSBdICsgc3RhcnQuZGlzdGFuY2VUbyggZW5kICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCkgKVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtZ3JldGVyIC8gaHR0cDovL2dpdGh1Yi5jb20vbWdyZXRlclxuICovXG5cbmZ1bmN0aW9uIExpbmVMb29wKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0TGluZS5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUxvb3AnO1xuXG59XG5cbkxpbmVMb29wLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGluZUxvb3AsXG5cblx0aXNMaW5lTG9vcDogdHJ1ZSxcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBzaXplOiA8ZmxvYXQ+LFxuICogIHNpemVBdHRlbnVhdGlvbjogPGJvb2w+XG4gKlxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludHNNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5zaXplID0gMTtcblx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSB0cnVlO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cblx0dGhpcy5saWdodHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cblBvaW50c01hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9pbnRzTWF0ZXJpYWw7XG5cblBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5pc1BvaW50c01hdGVyaWFsID0gdHJ1ZTtcblxuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLnNpemUgPSBzb3VyY2Uuc2l6ZTtcblx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIFBvaW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUG9pbnRzJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cbn1cblxuUG9pbnRzLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBvaW50cyxcblxuXHRpc1BvaW50czogdHJ1ZSxcblxuXHRyYXljYXN0OiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpbnZlcnNlTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgcmF5ID0gbmV3IFJheSgpO1xuXHRcdHZhciBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gdGhpcztcblx0XHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXHRcdFx0dmFyIHRocmVzaG9sZCA9IHJheWNhc3Rlci5wYXJhbXMuUG9pbnRzLnRocmVzaG9sZDtcblxuXHRcdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdFx0c3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0XHRzcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXHRcdFx0c3BoZXJlLnJhZGl1cyArPSB0aHJlc2hvbGQ7XG5cblx0XHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdC8vXG5cblx0XHRcdGludmVyc2VNYXRyaXguZ2V0SW52ZXJzZSggbWF0cml4V29ybGQgKTtcblx0XHRcdHJheS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBpbnZlcnNlTWF0cml4ICk7XG5cblx0XHRcdHZhciBsb2NhbFRocmVzaG9sZCA9IHRocmVzaG9sZCAvICggKCB0aGlzLnNjYWxlLnggKyB0aGlzLnNjYWxlLnkgKyB0aGlzLnNjYWxlLnogKSAvIDMgKTtcblx0XHRcdHZhciBsb2NhbFRocmVzaG9sZFNxID0gbG9jYWxUaHJlc2hvbGQgKiBsb2NhbFRocmVzaG9sZDtcblx0XHRcdHZhciBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgaW50ZXJzZWN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRmdW5jdGlvbiB0ZXN0UG9pbnQoIHBvaW50LCBpbmRleCApIHtcblxuXHRcdFx0XHR2YXIgcmF5UG9pbnREaXN0YW5jZVNxID0gcmF5LmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApO1xuXG5cdFx0XHRcdGlmICggcmF5UG9pbnREaXN0YW5jZVNxIDwgbG9jYWxUaHJlc2hvbGRTcSApIHtcblxuXHRcdFx0XHRcdHJheS5jbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgaW50ZXJzZWN0UG9pbnQgKTtcblx0XHRcdFx0XHRpbnRlcnNlY3RQb2ludC5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0XHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdFx0XHRkaXN0YW5jZVRvUmF5OiBNYXRoLnNxcnQoIHJheVBvaW50RGlzdGFuY2VTcSApLFxuXHRcdFx0XHRcdFx0cG9pbnQ6IGludGVyc2VjdFBvaW50LmNsb25lKCksXG5cdFx0XHRcdFx0XHRpbmRleDogaW5kZXgsXG5cdFx0XHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRcdFx0b2JqZWN0OiBvYmplY3RcblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0XHR2YXIgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0XHRcdHZhciBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuXG5cdFx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBhID0gaW5kaWNlc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRwb3NpdGlvbi5mcm9tQXJyYXkoIHBvc2l0aW9ucywgYSAqIDMgKTtcblxuXHRcdFx0XHRcdFx0dGVzdFBvaW50KCBwb3NpdGlvbiwgYSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbnMubGVuZ3RoIC8gMzsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHBvc2l0aW9uLmZyb21BcnJheSggcG9zaXRpb25zLCBpICogMyApO1xuXG5cdFx0XHRcdFx0XHR0ZXN0UG9pbnQoIHBvc2l0aW9uLCBpICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR0ZXN0UG9pbnQoIHZlcnRpY2VzWyBpIF0sIGkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpICksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFZpZGVvVGV4dHVyZSggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIHZpZGVvLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdCAhPT0gdW5kZWZpbmVkID8gZm9ybWF0IDogUkdCRm9ybWF0O1xuXG5cdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxufVxuXG5WaWRlb1RleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBWaWRlb1RleHR1cmUsXG5cblx0aXNWaWRlb1RleHR1cmU6IHRydWUsXG5cblx0dXBkYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmlkZW8gPSB0aGlzLmltYWdlO1xuXG5cdFx0aWYgKCB2aWRlby5yZWFkeVN0YXRlID49IHZpZGVvLkhBVkVfQ1VSUkVOVF9EQVRBICkge1xuXG5cdFx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIENvbXByZXNzZWRUZXh0dXJlKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblx0dGhpcy5taXBtYXBzID0gbWlwbWFwcztcblxuXHQvLyBubyBmbGlwcGluZyBmb3IgY3ViZSB0ZXh0dXJlc1xuXHQvLyAoYWxzbyBmbGlwcGluZyBkb2Vzbid0IHdvcmsgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXMgKVxuXG5cdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxuXHQvLyBjYW4ndCBnZW5lcmF0ZSBtaXBtYXBzIGZvciBjb21wcmVzc2VkIHRleHR1cmVzXG5cdC8vIG1pcHMgbXVzdCBiZSBlbWJlZGRlZCBpbiBERFMgZmlsZXNcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG59XG5cbkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb21wcmVzc2VkVGV4dHVyZTtcblxuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlLmlzQ29tcHJlc3NlZFRleHR1cmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQ2FudmFzVGV4dHVyZSggY2FudmFzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKSB7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG59XG5cbkNhbnZhc1RleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkNhbnZhc1RleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2FudmFzVGV4dHVyZTtcbkNhbnZhc1RleHR1cmUucHJvdG90eXBlLmlzQ2FudmFzVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBNYXR0IERlc0xhdXJpZXJzIC8gQG1hdHRkZXNsXG4gKiBAYXV0aG9yIGF0aXggLyBhcnRodXJzaWxiZXIuZGVcbiAqL1xuXG5mdW5jdGlvbiBEZXB0aFRleHR1cmUoIHdpZHRoLCBoZWlnaHQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGZvcm1hdCApIHtcblxuXHRmb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IERlcHRoRm9ybWF0O1xuXG5cdGlmICggZm9ybWF0ICE9PSBEZXB0aEZvcm1hdCAmJiBmb3JtYXQgIT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHtcblxuXHRcdHRocm93IG5ldyBFcnJvciggJ0RlcHRoVGV4dHVyZSBmb3JtYXQgbXVzdCBiZSBlaXRoZXIgVEhSRUUuRGVwdGhGb3JtYXQgb3IgVEhSRUUuRGVwdGhTdGVuY2lsRm9ybWF0JyApO1xuXG5cdH1cblxuXHRpZiAoIHR5cGUgPT09IHVuZGVmaW5lZCAmJiBmb3JtYXQgPT09IERlcHRoRm9ybWF0ICkgdHlwZSA9IFVuc2lnbmVkU2hvcnRUeXBlO1xuXHRpZiAoIHR5cGUgPT09IHVuZGVmaW5lZCAmJiBmb3JtYXQgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHR5cGUgPSBVbnNpZ25lZEludDI0OFR5cGU7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHR0aGlzLmltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG5cblx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xuXG5cdHRoaXMuZmxpcFkgPSBmYWxzZTtcblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHNcdD0gZmFsc2U7XG5cbn1cblxuRGVwdGhUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5EZXB0aFRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGVwdGhUZXh0dXJlO1xuRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5pc0RlcHRoVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gV2lyZWZyYW1lR2VvbWV0cnkoIGdlb21ldHJ5ICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnV2lyZWZyYW1lR2VvbWV0cnknO1xuXG5cdC8vIGJ1ZmZlclxuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgaSwgaiwgbCwgbywgb2w7XG5cdHZhciBlZGdlID0gWyAwLCAwIF0sIGVkZ2VzID0ge30sIGUsIGVkZ2UxLCBlZGdlMjtcblx0dmFyIGtleSwga2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdO1xuXHR2YXIgdmVydGV4O1xuXG5cdC8vIGRpZmZlcmVudCBsb2dpYyBmb3IgR2VvbWV0cnkgYW5kIEJ1ZmZlckdlb21ldHJ5XG5cblx0aWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0Ly8gY3JlYXRlIGEgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBhbGwgZWRnZXMgd2l0aG91dCBkdXBsaWNhdGVzXG5cblx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBsID0gZmFjZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHRmb3IgKCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0ZWRnZTEgPSBmYWNlWyBrZXlzWyBqIF0gXTtcblx0XHRcdFx0ZWRnZTIgPSBmYWNlWyBrZXlzWyAoIGogKyAxICkgJSAzIF0gXTtcblx0XHRcdFx0ZWRnZVsgMCBdID0gTWF0aC5taW4oIGVkZ2UxLCBlZGdlMiApOyAvLyBzb3J0aW5nIHByZXZlbnRzIGR1cGxpY2F0ZXNcblx0XHRcdFx0ZWRnZVsgMSBdID0gTWF0aC5tYXgoIGVkZ2UxLCBlZGdlMiApO1xuXG5cdFx0XHRcdGtleSA9IGVkZ2VbIDAgXSArICcsJyArIGVkZ2VbIDEgXTtcblxuXHRcdFx0XHRpZiAoIGVkZ2VzWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0ZWRnZXNbIGtleSBdID0geyBpbmRleDE6IGVkZ2VbIDAgXSwgaW5kZXgyOiBlZGdlWyAxIF0gfTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzXG5cblx0XHRmb3IgKCBrZXkgaW4gZWRnZXMgKSB7XG5cblx0XHRcdGUgPSBlZGdlc1sga2V5IF07XG5cblx0XHRcdHZlcnRleCA9IGdlb21ldHJ5LnZlcnRpY2VzWyBlLmluZGV4MSBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHR2ZXJ0ZXggPSBnZW9tZXRyeS52ZXJ0aWNlc1sgZS5pbmRleDIgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdH1cblxuXHR9IGVsc2UgaWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIHBvc2l0aW9uLCBpbmRpY2VzLCBncm91cHM7XG5cdFx0dmFyIGdyb3VwLCBzdGFydCwgY291bnQ7XG5cdFx0dmFyIGluZGV4MSwgaW5kZXgyO1xuXG5cdFx0dmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdC8vIGluZGV4ZWQgQnVmZmVyR2VvbWV0cnlcblxuXHRcdFx0cG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0aW5kaWNlcyA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0Z3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdFx0Z3JvdXBzID0gWyB7IHN0YXJ0OiAwLCBjb3VudDogaW5kaWNlcy5jb3VudCwgbWF0ZXJpYWxJbmRleDogMCB9IF07XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY3JlYXRlIGEgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBhbGwgZWdlcyB3aXRob3V0IGR1cGxpY2F0ZXNcblxuXHRcdFx0Zm9yICggbyA9IDAsIG9sID0gZ3JvdXBzLmxlbmd0aDsgbyA8IG9sOyArKyBvICkge1xuXG5cdFx0XHRcdGdyb3VwID0gZ3JvdXBzWyBvIF07XG5cblx0XHRcdFx0c3RhcnQgPSBncm91cC5zdGFydDtcblx0XHRcdFx0Y291bnQgPSBncm91cC5jb3VudDtcblxuXHRcdFx0XHRmb3IgKCBpID0gc3RhcnQsIGwgPSAoIHN0YXJ0ICsgY291bnQgKTsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGZvciAoIGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0ZWRnZTEgPSBpbmRpY2VzLmdldFgoIGkgKyBqICk7XG5cdFx0XHRcdFx0XHRlZGdlMiA9IGluZGljZXMuZ2V0WCggaSArICggaiArIDEgKSAlIDMgKTtcblx0XHRcdFx0XHRcdGVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTsgLy8gc29ydGluZyBwcmV2ZW50cyBkdXBsaWNhdGVzXG5cdFx0XHRcdFx0XHRlZGdlWyAxIF0gPSBNYXRoLm1heCggZWRnZTEsIGVkZ2UyICk7XG5cblx0XHRcdFx0XHRcdGtleSA9IGVkZ2VbIDAgXSArICcsJyArIGVkZ2VbIDEgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBlZGdlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRlZGdlc1sga2V5IF0gPSB7IGluZGV4MTogZWRnZVsgMCBdLCBpbmRleDI6IGVkZ2VbIDEgXSB9O1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzXG5cblx0XHRcdGZvciAoIGtleSBpbiBlZGdlcyApIHtcblxuXHRcdFx0XHRlID0gZWRnZXNbIGtleSBdO1xuXG5cdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgZS5pbmRleDEgKTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgZS5pbmRleDIgKTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeVxuXG5cdFx0XHRwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gKCBwb3NpdGlvbi5jb3VudCAvIDMgKTsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Zm9yICggaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdFx0Ly8gdGhyZWUgZWRnZXMgcGVyIHRyaWFuZ2xlLCBhbiBlZGdlIGlzIHJlcHJlc2VudGVkIGFzIChpbmRleDEsIGluZGV4Milcblx0XHRcdFx0XHQvLyBlLmcuIHRoZSBmaXJzdCB0cmlhbmdsZSBoYXMgdGhlIGZvbGxvd2luZyBlZGdlczogKDAsMSksKDEsMiksKDIsMClcblxuXHRcdFx0XHRcdGluZGV4MSA9IDMgKiBpICsgajtcblx0XHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MSApO1xuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHRcdGluZGV4MiA9IDMgKiBpICsgKCAoIGogKyAxICkgJSAzICk7XG5cdFx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDIgKTtcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cbn1cblxuV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5XaXJlZnJhbWVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBXaXJlZnJhbWVHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKiBQYXJhbWV0cmljIFN1cmZhY2VzIEdlb21ldHJ5XG4gKiBiYXNlZCBvbiB0aGUgYnJpbGxpYW50IGFydGljbGUgYnkgQHByaWRlb3V0IGh0dHA6Ly9wcmlkZW91dC5uZXQvYmxvZy8/cD00NFxuICovXG5cbi8vIFBhcmFtZXRyaWNHZW9tZXRyeVxuXG5mdW5jdGlvbiBQYXJhbWV0cmljR2VvbWV0cnkoIGZ1bmMsIHNsaWNlcywgc3RhY2tzICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUGFyYW1ldHJpY0dlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0ZnVuYzogZnVuYyxcblx0XHRzbGljZXM6IHNsaWNlcyxcblx0XHRzdGFja3M6IHN0YWNrc1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5KCBmdW5jLCBzbGljZXMsIHN0YWNrcyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblBhcmFtZXRyaWNHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBhcmFtZXRyaWNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQYXJhbWV0cmljR2VvbWV0cnk7XG5cbi8vIFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkoIGZ1bmMsIHNsaWNlcywgc3RhY2tzICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0ZnVuYzogZnVuYyxcblx0XHRzbGljZXM6IHNsaWNlcyxcblx0XHRzdGFja3M6IHN0YWNrc1xuXHR9O1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdHZhciBFUFMgPSAwLjAwMDAxO1xuXG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBwMCA9IG5ldyBWZWN0b3IzKCksIHAxID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHB1ID0gbmV3IFZlY3RvcjMoKSwgcHYgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBpLCBqO1xuXG5cdGlmICggZnVuYy5sZW5ndGggPCAzICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeTogRnVuY3Rpb24gbXVzdCBub3cgbW9kaWZ5IGEgVmVjdG9yMyBhcyB0aGlyZCBwYXJhbWV0ZXIuJyApO1xuXG5cdH1cblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0dmFyIHNsaWNlQ291bnQgPSBzbGljZXMgKyAxO1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IHN0YWNrczsgaSArKyApIHtcblxuXHRcdHZhciB2ID0gaSAvIHN0YWNrcztcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9IHNsaWNlczsgaiArKyApIHtcblxuXHRcdFx0dmFyIHUgPSBqIC8gc2xpY2VzO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0ZnVuYyggdSwgdiwgcDAgKTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHAwLngsIHAwLnksIHAwLnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdC8vIGFwcHJveGltYXRlIHRhbmdlbnQgdmVjdG9ycyB2aWEgZmluaXRlIGRpZmZlcmVuY2VzXG5cblx0XHRcdGlmICggdSAtIEVQUyA+PSAwICkge1xuXG5cdFx0XHRcdGZ1bmMoIHUgLSBFUFMsIHYsIHAxICk7XG5cdFx0XHRcdHB1LnN1YlZlY3RvcnMoIHAwLCBwMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZ1bmMoIHUgKyBFUFMsIHYsIHAxICk7XG5cdFx0XHRcdHB1LnN1YlZlY3RvcnMoIHAxLCBwMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdiAtIEVQUyA+PSAwICkge1xuXG5cdFx0XHRcdGZ1bmMoIHUsIHYgLSBFUFMsIHAxICk7XG5cdFx0XHRcdHB2LnN1YlZlY3RvcnMoIHAwLCBwMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZ1bmMoIHUsIHYgKyBFUFMsIHAxICk7XG5cdFx0XHRcdHB2LnN1YlZlY3RvcnMoIHAxLCBwMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNyb3NzIHByb2R1Y3Qgb2YgdGFuZ2VudCB2ZWN0b3JzIHJldHVybnMgc3VyZmFjZSBub3JtYWxcblxuXHRcdFx0bm9ybWFsLmNyb3NzVmVjdG9ycyggcHUsIHB2ICkubm9ybWFsaXplKCk7XG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIHUsIHYgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdGZvciAoIGkgPSAwOyBpIDwgc3RhY2tzOyBpICsrICkge1xuXG5cdFx0Zm9yICggaiA9IDA7IGogPCBzbGljZXM7IGogKysgKSB7XG5cblx0XHRcdHZhciBhID0gaSAqIHNsaWNlQ291bnQgKyBqO1xuXHRcdFx0dmFyIGIgPSBpICogc2xpY2VDb3VudCArIGogKyAxO1xuXHRcdFx0dmFyIGMgPSAoIGkgKyAxICkgKiBzbGljZUNvdW50ICsgaiArIDE7XG5cdFx0XHR2YXIgZCA9ICggaSArIDEgKSAqIHNsaWNlQ291bnQgKyBqO1xuXG5cdFx0XHQvLyBmYWNlcyBvbmUgYW5kIHR3b1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIGNsb2Nrd29ya2dlZWsgLyBodHRwczovL2dpdGh1Yi5jb20vY2xvY2t3b3JrZ2Vla1xuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFBvbHloZWRyb25HZW9tZXRyeVxuXG5mdW5jdGlvbiBQb2x5aGVkcm9uR2VvbWV0cnkoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BvbHloZWRyb25HZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHZlcnRpY2VzOiB2ZXJ0aWNlcyxcblx0XHRpbmRpY2VzOiBpbmRpY2VzLFxuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblBvbHloZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBvbHloZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2x5aGVkcm9uR2VvbWV0cnk7XG5cbi8vIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BvbHloZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHZlcnRpY2VzOiB2ZXJ0aWNlcyxcblx0XHRpbmRpY2VzOiBpbmRpY2VzLFxuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0cmFkaXVzID0gcmFkaXVzIHx8IDE7XG5cdGRldGFpbCA9IGRldGFpbCB8fCAwO1xuXG5cdC8vIGRlZmF1bHQgYnVmZmVyIGRhdGFcblxuXHR2YXIgdmVydGV4QnVmZmVyID0gW107XG5cdHZhciB1dkJ1ZmZlciA9IFtdO1xuXG5cdC8vIHRoZSBzdWJkaXZpc2lvbiBjcmVhdGVzIHRoZSB2ZXJ0ZXggYnVmZmVyIGRhdGFcblxuXHRzdWJkaXZpZGUoIGRldGFpbCApO1xuXG5cdC8vIGFsbCB2ZXJ0aWNlcyBzaG91bGQgbGllIG9uIGEgY29uY2VwdHVhbCBzcGhlcmUgd2l0aCBhIGdpdmVuIHJhZGl1c1xuXG5cdGFwcHBseVJhZGl1cyggcmFkaXVzICk7XG5cblx0Ly8gZmluYWxseSwgY3JlYXRlIHRoZSB1diBkYXRhXG5cblx0Z2VuZXJhdGVVVnMoKTtcblxuXHQvLyBidWlsZCBub24taW5kZXhlZCBnZW9tZXRyeVxuXG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4QnVmZmVyLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4QnVmZmVyLnNsaWNlKCksIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QnVmZmVyLCAyICkgKTtcblxuXHRpZiAoIGRldGFpbCA9PT0gMCApIHtcblxuXHRcdHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTsgLy8gZmxhdCBub3JtYWxzXG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMubm9ybWFsaXplTm9ybWFscygpOyAvLyBzbW9vdGggbm9ybWFsc1xuXG5cdH1cblxuXHQvLyBoZWxwZXIgZnVuY3Rpb25zXG5cblx0ZnVuY3Rpb24gc3ViZGl2aWRlKCBkZXRhaWwgKSB7XG5cblx0XHR2YXIgYSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBjID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGl0ZXJhdGUgb3ZlciBhbGwgZmFjZXMgYW5kIGFwcGx5IGEgc3ViZGl2aXNvbiB3aXRoIHRoZSBnaXZlbiBkZXRhaWwgdmFsdWVcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdC8vIGdldCB0aGUgdmVydGljZXMgb2YgdGhlIGZhY2VcblxuXHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDAgXSwgYSApO1xuXHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDEgXSwgYiApO1xuXHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDIgXSwgYyApO1xuXG5cdFx0XHQvLyBwZXJmb3JtIHN1YmRpdmlzaW9uXG5cblx0XHRcdHN1YmRpdmlkZUZhY2UoIGEsIGIsIGMsIGRldGFpbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKSB7XG5cblx0XHR2YXIgY29scyA9IE1hdGgucG93KCAyLCBkZXRhaWwgKTtcblxuXHRcdC8vIHdlIHVzZSB0aGlzIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgYXMgYSBkYXRhIHN0cnVjdHVyZSBmb3IgY3JlYXRpbmcgdGhlIHN1YmRpdmlzaW9uXG5cblx0XHR2YXIgdiA9IFtdO1xuXG5cdFx0dmFyIGksIGo7XG5cblx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSB2ZXJ0aWNlcyBmb3IgdGhpcyBzdWJkaXZpc2lvblxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPD0gY29sczsgaSArKyApIHtcblxuXHRcdFx0dlsgaSBdID0gW107XG5cblx0XHRcdHZhciBhaiA9IGEuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXHRcdFx0dmFyIGJqID0gYi5jbG9uZSgpLmxlcnAoIGMsIGkgLyBjb2xzICk7XG5cblx0XHRcdHZhciByb3dzID0gY29scyAtIGk7XG5cblx0XHRcdGZvciAoIGogPSAwOyBqIDw9IHJvd3M7IGogKysgKSB7XG5cblx0XHRcdFx0aWYgKCBqID09PSAwICYmIGkgPT09IGNvbHMgKSB7XG5cblx0XHRcdFx0XHR2WyBpIF1bIGogXSA9IGFqO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR2WyBpIF1bIGogXSA9IGFqLmNsb25lKCkubGVycCggYmosIGogLyByb3dzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSBmYWNlc1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBjb2xzOyBpICsrICkge1xuXG5cdFx0XHRmb3IgKCBqID0gMDsgaiA8IDIgKiAoIGNvbHMgLSBpICkgLSAxOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBrID0gTWF0aC5mbG9vciggaiAvIDIgKTtcblxuXHRcdFx0XHRpZiAoIGogJSAyID09PSAwICkge1xuXG5cdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrICsgMSBdICk7XG5cdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayBdICk7XG5cdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrICsgMSBdICk7XG5cdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBhcHBwbHlSYWRpdXMoIHJhZGl1cyApIHtcblxuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgYnVmZmVyIGFuZCBhcHBseSB0aGUgcmFkaXVzIHRvIGVhY2ggdmVydGV4XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0dmVydGV4LnkgPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF07XG5cdFx0XHR2ZXJ0ZXgueiA9IHZlcnRleEJ1ZmZlclsgaSArIDIgXTtcblxuXHRcdFx0dmVydGV4Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCByYWRpdXMgKTtcblxuXHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMCBdID0gdmVydGV4Lng7XG5cdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0gPSB2ZXJ0ZXgueTtcblx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDIgXSA9IHZlcnRleC56O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZlcnRleC55ID0gdmVydGV4QnVmZmVyWyBpICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdHZhciB1ID0gYXppbXV0aCggdmVydGV4ICkgLyAyIC8gTWF0aC5QSSArIDAuNTtcblx0XHRcdHZhciB2ID0gaW5jbGluYXRpb24oIHZlcnRleCApIC8gTWF0aC5QSSArIDAuNTtcblx0XHRcdHV2QnVmZmVyLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHR9XG5cblx0XHRjb3JyZWN0VVZzKCk7XG5cblx0XHRjb3JyZWN0U2VhbSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjb3JyZWN0U2VhbSgpIHtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIHdoZW4gZmFjZSBzdHJhZGRsZXMgdGhlIHNlYW0sIHNlZSAjMzI2OVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdXZCdWZmZXIubGVuZ3RoOyBpICs9IDYgKSB7XG5cblx0XHRcdC8vIHV2IGRhdGEgb2YgYSBzaW5nbGUgZmFjZVxuXG5cdFx0XHR2YXIgeDAgPSB1dkJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZhciB4MSA9IHV2QnVmZmVyWyBpICsgMiBdO1xuXHRcdFx0dmFyIHgyID0gdXZCdWZmZXJbIGkgKyA0IF07XG5cblx0XHRcdHZhciBtYXggPSBNYXRoLm1heCggeDAsIHgxLCB4MiApO1xuXHRcdFx0dmFyIG1pbiA9IE1hdGgubWluKCB4MCwgeDEsIHgyICk7XG5cblx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcblxuXHRcdFx0aWYgKCBtYXggPiAwLjkgJiYgbWluIDwgMC4xICkge1xuXG5cdFx0XHRcdGlmICggeDAgPCAwLjIgKSB1dkJ1ZmZlclsgaSArIDAgXSArPSAxO1xuXHRcdFx0XHRpZiAoIHgxIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAyIF0gKz0gMTtcblx0XHRcdFx0aWYgKCB4MiA8IDAuMiApIHV2QnVmZmVyWyBpICsgNCBdICs9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFZlcnRleCggdmVydGV4ICkge1xuXG5cdFx0dmVydGV4QnVmZmVyLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VmVydGV4QnlJbmRleCggaW5kZXgsIHZlcnRleCApIHtcblxuXHRcdHZhciBzdHJpZGUgPSBpbmRleCAqIDM7XG5cblx0XHR2ZXJ0ZXgueCA9IHZlcnRpY2VzWyBzdHJpZGUgKyAwIF07XG5cdFx0dmVydGV4LnkgPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMSBdO1xuXHRcdHZlcnRleC56ID0gdmVydGljZXNbIHN0cmlkZSArIDIgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY29ycmVjdFVWcygpIHtcblxuXHRcdHZhciBhID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgYiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIGNlbnRyb2lkID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB1dkEgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkMgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2ICkge1xuXG5cdFx0XHRhLnNldCggdmVydGV4QnVmZmVyWyBpICsgMCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0sIHZlcnRleEJ1ZmZlclsgaSArIDIgXSApO1xuXHRcdFx0Yi5zZXQoIHZlcnRleEJ1ZmZlclsgaSArIDMgXSwgdmVydGV4QnVmZmVyWyBpICsgNCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA1IF0gKTtcblx0XHRcdGMuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyA2IF0sIHZlcnRleEJ1ZmZlclsgaSArIDcgXSwgdmVydGV4QnVmZmVyWyBpICsgOCBdICk7XG5cblx0XHRcdHV2QS5zZXQoIHV2QnVmZmVyWyBqICsgMCBdLCB1dkJ1ZmZlclsgaiArIDEgXSApO1xuXHRcdFx0dXZCLnNldCggdXZCdWZmZXJbIGogKyAyIF0sIHV2QnVmZmVyWyBqICsgMyBdICk7XG5cdFx0XHR1dkMuc2V0KCB1dkJ1ZmZlclsgaiArIDQgXSwgdXZCdWZmZXJbIGogKyA1IF0gKTtcblxuXHRcdFx0Y2VudHJvaWQuY29weSggYSApLmFkZCggYiApLmFkZCggYyApLmRpdmlkZVNjYWxhciggMyApO1xuXG5cdFx0XHR2YXIgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTtcblxuXHRcdFx0Y29ycmVjdFVWKCB1dkEsIGogKyAwLCBhLCBhemkgKTtcblx0XHRcdGNvcnJlY3RVViggdXZCLCBqICsgMiwgYiwgYXppICk7XG5cdFx0XHRjb3JyZWN0VVYoIHV2QywgaiArIDQsIGMsIGF6aSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb3JyZWN0VVYoIHV2LCBzdHJpZGUsIHZlY3RvciwgYXppbXV0aCApIHtcblxuXHRcdGlmICggKCBhemltdXRoIDwgMCApICYmICggdXYueCA9PT0gMSApICkge1xuXG5cdFx0XHR1dkJ1ZmZlclsgc3RyaWRlIF0gPSB1di54IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggKCB2ZWN0b3IueCA9PT0gMCApICYmICggdmVjdG9yLnogPT09IDAgKSApIHtcblxuXHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gYXppbXV0aCAvIDIgLyBNYXRoLlBJICsgMC41O1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBBbmdsZSBhcm91bmQgdGhlIFkgYXhpcywgY291bnRlci1jbG9ja3dpc2Ugd2hlbiBsb29raW5nIGZyb20gYWJvdmUuXG5cblx0ZnVuY3Rpb24gYXppbXV0aCggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoIHZlY3Rvci56LCAtIHZlY3Rvci54ICk7XG5cblx0fVxuXG5cblx0Ly8gQW5nbGUgYWJvdmUgdGhlIFhaIHBsYW5lLlxuXG5cdGZ1bmN0aW9uIGluY2xpbmF0aW9uKCB2ZWN0b3IgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hdGFuMiggLSB2ZWN0b3IueSwgTWF0aC5zcXJ0KCAoIHZlY3Rvci54ICogdmVjdG9yLnggKSArICggdmVjdG9yLnogKiB2ZWN0b3IueiApICkgKTtcblxuXHR9XG5cbn1cblxuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFRldHJhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gVGV0cmFoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRldHJhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV0cmFoZWRyb25HZW9tZXRyeTtcblxuLy8gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MSwgMSwgMSwgXHQtIDEsIC0gMSwgMSwgXHQtIDEsIDEsIC0gMSwgXHQxLCAtIDEsIC0gMVxuXHRdO1xuXG5cdHZhciBpbmRpY2VzID0gW1xuXHRcdDIsIDEsIDAsIFx0MCwgMywgMixcdDEsIDMsIDAsXHQyLCAzLCAxXG5cdF07XG5cblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxufVxuXG5UZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIE9jdGFoZWRyb25HZW9tZXRyeVxuXG5mdW5jdGlvbiBPY3RhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT2N0YWhlZHJvbkdlb21ldHJ5O1xuXG4vLyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MSwgMCwgMCwgXHQtIDEsIDAsIDAsXHQwLCAxLCAwLFxuXHRcdDAsIC0gMSwgMCwgXHQwLCAwLCAxLFx0MCwgMCwgLSAxXG5cdF07XG5cblx0dmFyIGluZGljZXMgPSBbXG5cdFx0MCwgMiwgNCxcdDAsIDQsIDMsXHQwLCAzLCA1LFxuXHRcdDAsIDUsIDIsXHQxLCAyLCA1LFx0MSwgNSwgMyxcblx0XHQxLCAzLCA0LFx0MSwgNCwgMlxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxufVxuXG5PY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEljb3NhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gSWNvc2FoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdJY29zYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuSWNvc2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSWNvc2FoZWRyb25HZW9tZXRyeTtcblxuLy8gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtcblx0XHQtIDEsIHQsIDAsIFx0MSwgdCwgMCwgXHQtIDEsIC0gdCwgMCwgXHQxLCAtIHQsIDAsXG5cdFx0IDAsIC0gMSwgdCwgXHQwLCAxLCB0LFx0MCwgLSAxLCAtIHQsIFx0MCwgMSwgLSB0LFxuXHRcdCB0LCAwLCAtIDEsIFx0dCwgMCwgMSwgXHQtIHQsIDAsIC0gMSwgXHQtIHQsIDAsIDFcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQgMCwgMTEsIDUsIFx0MCwgNSwgMSwgXHQwLCAxLCA3LCBcdDAsIDcsIDEwLCBcdDAsIDEwLCAxMSxcblx0XHQgMSwgNSwgOSwgXHQ1LCAxMSwgNCxcdDExLCAxMCwgMixcdDEwLCA3LCA2LFx0NywgMSwgOCxcblx0XHQgMywgOSwgNCwgXHQzLCA0LCAyLFx0MywgMiwgNixcdDMsIDYsIDgsXHQzLCA4LCA5LFxuXHRcdCA0LCA5LCA1LCBcdDIsIDQsIDExLFx0NiwgMiwgMTAsXHQ4LCA2LCA3LFx0OSwgOCwgMVxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBBYmUgUGF6b3MgLyBodHRwczovL2hhbW9pZC5jb21cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gRG9kZWNhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gRG9kZWNhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEb2RlY2FoZWRyb25HZW9tZXRyeTtcblxuLy8gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdHZhciB0ID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG5cdHZhciByID0gMSAvIHQ7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXG5cdFx0Ly8gKMKxMSwgwrExLCDCsTEpXG5cdFx0LSAxLCAtIDEsIC0gMSxcdC0gMSwgLSAxLCAxLFxuXHRcdC0gMSwgMSwgLSAxLCAtIDEsIDEsIDEsXG5cdFx0MSwgLSAxLCAtIDEsIDEsIC0gMSwgMSxcblx0XHQxLCAxLCAtIDEsIDEsIDEsIDEsXG5cblx0XHQvLyAoMCwgwrExL8+GLCDCsc+GKVxuXHRcdCAwLCAtIHIsIC0gdCwgMCwgLSByLCB0LFxuXHRcdCAwLCByLCAtIHQsIDAsIHIsIHQsXG5cblx0XHQvLyAowrExL8+GLCDCsc+GLCAwKVxuXHRcdC0gciwgLSB0LCAwLCAtIHIsIHQsIDAsXG5cdFx0IHIsIC0gdCwgMCwgciwgdCwgMCxcblxuXHRcdC8vICjCsc+GLCAwLCDCsTEvz4YpXG5cdFx0LSB0LCAwLCAtIHIsIHQsIDAsIC0gcixcblx0XHQtIHQsIDAsIHIsIHQsIDAsIHJcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQzLCAxMSwgNywgXHQzLCA3LCAxNSwgXHQzLCAxNSwgMTMsXG5cdFx0NywgMTksIDE3LCBcdDcsIDE3LCA2LCBcdDcsIDYsIDE1LFxuXHRcdDE3LCA0LCA4LCBcdDE3LCA4LCAxMCwgXHQxNywgMTAsIDYsXG5cdFx0OCwgMCwgMTYsIFx0OCwgMTYsIDIsIFx0OCwgMiwgMTAsXG5cdFx0MCwgMTIsIDEsIFx0MCwgMSwgMTgsIFx0MCwgMTgsIDE2LFxuXHRcdDYsIDEwLCAyLCBcdDYsIDIsIDEzLCBcdDYsIDEzLCAxNSxcblx0XHQyLCAxNiwgMTgsIFx0MiwgMTgsIDMsIFx0MiwgMywgMTMsXG5cdFx0MTgsIDEsIDksIFx0MTgsIDksIDExLCBcdDE4LCAxMSwgMyxcblx0XHQ0LCAxNCwgMTIsIFx0NCwgMTIsIDAsIFx0NCwgMCwgOCxcblx0XHQxMSwgOSwgNSwgXHQxMSwgNSwgMTksIFx0MTEsIDE5LCA3LFxuXHRcdDE5LCA1LCAxNCwgXHQxOSwgMTQsIDQsIFx0MTksIDQsIDE3LFxuXHRcdDEsIDEyLCAxNCwgXHQxLCAxNCwgNSwgXHQxLCA1LCA5XG5cdF07XG5cblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdHRoaXMudHlwZSA9ICdEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBvb3Ntb3hpZWNvZGUgLyBodHRwczovL2dpdGh1Yi5jb20vb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICogQGF1dGhvciBtaW5pbmdvbGQgLyBodHRwczovL2dpdGh1Yi5jb20vbWluaW5nb2xkXG4gKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwczovL2dpdGh1Yi5jb20vam9ub2JyMVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKi9cblxuLy8gVHViZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIFR1YmVHZW9tZXRyeSggcGF0aCwgdHVidWxhclNlZ21lbnRzLCByYWRpdXMsIHJhZGlhbFNlZ21lbnRzLCBjbG9zZWQsIHRhcGVyICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVHViZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cGF0aDogcGF0aCxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0Y2xvc2VkOiBjbG9zZWRcblx0fTtcblxuXHRpZiAoIHRhcGVyICE9PSB1bmRlZmluZWQgKSBjb25zb2xlLndhcm4oICdUSFJFRS5UdWJlR2VvbWV0cnk6IHRhcGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdHZhciBidWZmZXJHZW9tZXRyeSA9IG5ldyBUdWJlQnVmZmVyR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkICk7XG5cblx0Ly8gZXhwb3NlIGludGVybmFsc1xuXG5cdHRoaXMudGFuZ2VudHMgPSBidWZmZXJHZW9tZXRyeS50YW5nZW50cztcblx0dGhpcy5ub3JtYWxzID0gYnVmZmVyR2VvbWV0cnkubm9ybWFscztcblx0dGhpcy5iaW5vcm1hbHMgPSBidWZmZXJHZW9tZXRyeS5iaW5vcm1hbHM7XG5cblx0Ly8gY3JlYXRlIGdlb21ldHJ5XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIGJ1ZmZlckdlb21ldHJ5ICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblR1YmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblR1YmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUdWJlR2VvbWV0cnk7XG5cbi8vIFR1YmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUdWJlQnVmZmVyR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVHViZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cGF0aDogcGF0aCxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0Y2xvc2VkOiBjbG9zZWRcblx0fTtcblxuXHR0dWJ1bGFyU2VnbWVudHMgPSB0dWJ1bGFyU2VnbWVudHMgfHwgNjQ7XG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHRyYWRpYWxTZWdtZW50cyA9IHJhZGlhbFNlZ21lbnRzIHx8IDg7XG5cdGNsb3NlZCA9IGNsb3NlZCB8fCBmYWxzZTtcblxuXHR2YXIgZnJhbWVzID0gcGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKCB0dWJ1bGFyU2VnbWVudHMsIGNsb3NlZCApO1xuXG5cdC8vIGV4cG9zZSBpbnRlcm5hbHNcblxuXHR0aGlzLnRhbmdlbnRzID0gZnJhbWVzLnRhbmdlbnRzO1xuXHR0aGlzLm5vcm1hbHMgPSBmcmFtZXMubm9ybWFscztcblx0dGhpcy5iaW5vcm1hbHMgPSBmcmFtZXMuYmlub3JtYWxzO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBQID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgaSwgajtcblxuXHQvLyBidWZmZXJcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXG5cdC8vIGNyZWF0ZSBidWZmZXIgZGF0YVxuXG5cdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHQvLyBmdW5jdGlvbnNcblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUJ1ZmZlckRhdGEoKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Z2VuZXJhdGVTZWdtZW50KCBpICk7XG5cblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgbm90IGNsb3NlZCwgZ2VuZXJhdGUgdGhlIGxhc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzXG5cdFx0Ly8gYXQgdGhlIHJlZ3VsYXIgcG9zaXRpb24gb24gdGhlIGdpdmVuIHBhdGhcblx0XHQvL1xuXHRcdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBjbG9zZWQsIGR1cGxpY2F0ZSB0aGUgZmlyc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzICh1dnMgd2lsbCBkaWZmZXIpXG5cblx0XHRnZW5lcmF0ZVNlZ21lbnQoICggY2xvc2VkID09PSBmYWxzZSApID8gdHVidWxhclNlZ21lbnRzIDogMCApO1xuXG5cdFx0Ly8gdXZzIGFyZSBnZW5lcmF0ZWQgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbi5cblx0XHQvLyB0aGlzIG1ha2VzIGl0IGVhc3kgY29tcHV0ZSBjb3JyZWN0IHZhbHVlcyBmb3IgY2xvc2VkIGdlb21ldHJpZXNcblxuXHRcdGdlbmVyYXRlVVZzKCk7XG5cblx0XHQvLyBmaW5hbGx5IGNyZWF0ZSBmYWNlc1xuXG5cdFx0Z2VuZXJhdGVJbmRpY2VzKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggaSApIHtcblxuXHRcdC8vIHdlIHVzZSBnZXRQb2ludEF0IHRvIHNhbXBsZSBldmVubHkgZGlzdHJpYnV0ZWQgcG9pbnRzIGZyb20gdGhlIGdpdmVuIHBhdGhcblxuXHRcdFAgPSBwYXRoLmdldFBvaW50QXQoIGkgLyB0dWJ1bGFyU2VnbWVudHMsIFAgKTtcblxuXHRcdC8vIHJldHJpZXZlIGNvcnJlc3BvbmRpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbFxuXG5cdFx0dmFyIE4gPSBmcmFtZXMubm9ybWFsc1sgaSBdO1xuXHRcdHZhciBCID0gZnJhbWVzLmJpbm9ybWFsc1sgaSBdO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgbm9ybWFscyBhbmQgdmVydGljZXMgZm9yIHRoZSBjdXJyZW50IHNlZ21lbnRcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHYgKTtcblx0XHRcdHZhciBjb3MgPSAtIE1hdGguY29zKCB2ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWwueCA9ICggY29zICogTi54ICsgc2luICogQi54ICk7XG5cdFx0XHRub3JtYWwueSA9ICggY29zICogTi55ICsgc2luICogQi55ICk7XG5cdFx0XHRub3JtYWwueiA9ICggY29zICogTi56ICsgc2luICogQi56ICk7XG5cdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSBQLnggKyByYWRpdXMgKiBub3JtYWwueDtcblx0XHRcdHZlcnRleC55ID0gUC55ICsgcmFkaXVzICogbm9ybWFsLnk7XG5cdFx0XHR2ZXJ0ZXgueiA9IFAueiArIHJhZGl1cyAqIG5vcm1hbC56O1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlSW5kaWNlcygpIHtcblxuXHRcdGZvciAoIGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHR2YXIgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApO1xuXHRcdFx0XHR2YXIgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdFx0dmFyIGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdFx0dXYueCA9IGkgLyB0dWJ1bGFyU2VnbWVudHM7XG5cdFx0XHRcdHV2LnkgPSBqIC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqIGJhc2VkIG9uIGh0dHA6Ly93d3cuYmxhY2twYXduLmNvbS90ZXh0cy9wcXRvcnVzL1xuICovXG5cbi8vIFRvcnVzS25vdEdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzS25vdEdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEsIGhlaWdodFNjYWxlICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90R2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRwOiBwLFxuXHRcdHE6IHFcblx0fTtcblxuXHRpZiAoIGhlaWdodFNjYWxlICE9PSB1bmRlZmluZWQgKSBjb25zb2xlLndhcm4oICdUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeTogaGVpZ2h0U2NhbGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5zY2FsZSggeCwgeSwgeiApIGluc3RlYWQuJyApO1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgdHVidWxhclNlZ21lbnRzLCByYWRpYWxTZWdtZW50cywgcCwgcSApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuVG9ydXNLbm90R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNLbm90R2VvbWV0cnk7XG5cbi8vIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHR1YmU6IHR1YmUsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdHA6IHAsXG5cdFx0cTogcVxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHR0dWJlID0gdHViZSB8fCAwLjQ7XG5cdHR1YnVsYXJTZWdtZW50cyA9IE1hdGguZmxvb3IoIHR1YnVsYXJTZWdtZW50cyApIHx8IDY0O1xuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0cCA9IHAgfHwgMjtcblx0cSA9IHEgfHwgMztcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIGo7XG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBQMSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBQMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIEIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgVCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBOID0gbmV3IFZlY3RvcjMoKTtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyArKyBpICkge1xuXG5cdFx0Ly8gdGhlIHJhZGlhbiBcInVcIiBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlIG9mIHRoZSBjdXJyZW50IHR1YnVsYXIgc2VnZW1lbnRcblxuXHRcdHZhciB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjtcblxuXHRcdC8vIG5vdyB3ZSBjYWxjdWxhdGUgdHdvIHBvaW50cy4gUDEgaXMgb3VyIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlLCBQMiBpcyBhIGxpdHRsZSBmYXJ0aGVyIGFoZWFkLlxuXHRcdC8vIHRoZXNlIHBvaW50cyBhcmUgdXNlZCB0byBjcmVhdGUgYSBzcGVjaWFsIFwiY29vcmRpbmF0ZSBzcGFjZVwiLCB3aGljaCBpcyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHZlcnRleCBwb3NpdGlvbnNcblxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBQMSApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSArIDAuMDEsIHAsIHEsIHJhZGl1cywgUDIgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBvcnRob25vcm1hbCBiYXNpc1xuXG5cdFx0VC5zdWJWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHROLmFkZFZlY3RvcnMoIFAyLCBQMSApO1xuXHRcdEIuY3Jvc3NWZWN0b3JzKCBULCBOICk7XG5cdFx0Ti5jcm9zc1ZlY3RvcnMoIEIsIFQgKTtcblxuXHRcdC8vIG5vcm1hbGl6ZSBCLCBOLiBUIGNhbiBiZSBpZ25vcmVkLCB3ZSBkb24ndCB1c2UgaXRcblxuXHRcdEIubm9ybWFsaXplKCk7XG5cdFx0Ti5ub3JtYWxpemUoKTtcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArKyBqICkge1xuXG5cdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSB2ZXJ0aWNlcy4gdGhleSBhcmUgbm90aGluZyBtb3JlIHRoYW4gYW4gZXh0cnVzaW9uIG9mIHRoZSB0b3J1cyBjdXJ2ZS5cblx0XHRcdC8vIGJlY2F1c2Ugd2UgZXh0cnVkZSBhIHNoYXBlIGluIHRoZSB4eS1wbGFuZSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxjdWxhdGUgYSB6LXZhbHVlLlxuXG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXHRcdFx0dmFyIGN4ID0gLSB0dWJlICogTWF0aC5jb3MoIHYgKTtcblx0XHRcdHZhciBjeSA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xuXG5cdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXG5cdFx0XHQvLyBmaXJzdCB3ZSBvcmllbnQgdGhlIGV4dHJ1c2lvbiB3aXRoIG91ciBiYXNpcyB2ZWN0b3MsIHRoZW4gd2UgYWRkIGl0IHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZVxuXG5cdFx0XHR2ZXJ0ZXgueCA9IFAxLnggKyAoIGN4ICogTi54ICsgY3kgKiBCLnggKTtcblx0XHRcdHZlcnRleC55ID0gUDEueSArICggY3ggKiBOLnkgKyBjeSAqIEIueSApO1xuXHRcdFx0dmVydGV4LnogPSBQMS56ICsgKCBjeCAqIE4ueiArIGN5ICogQi56ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsIChQMSBpcyBhbHdheXMgdGhlIGNlbnRlci9vcmlnaW4gb2YgdGhlIGV4dHJ1c2lvbiwgdGh1cyB3ZSBjYW4gdXNlIGl0IHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsKVxuXG5cdFx0XHRub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBQMSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdHV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdGZvciAoIGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdHZhciBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTtcblx0XHRcdHZhciBiID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyAoIGkgLSAxICk7XG5cdFx0XHR2YXIgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdHZhciBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHQvLyB0aGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlXG5cblx0ZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1LCBwLCBxLCByYWRpdXMsIHBvc2l0aW9uICkge1xuXG5cdFx0dmFyIGN1ID0gTWF0aC5jb3MoIHUgKTtcblx0XHR2YXIgc3UgPSBNYXRoLnNpbiggdSApO1xuXHRcdHZhciBxdU92ZXJQID0gcSAvIHAgKiB1O1xuXHRcdHZhciBjcyA9IE1hdGguY29zKCBxdU92ZXJQICk7XG5cblx0XHRwb3NpdGlvbi54ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIDAuNSAqIGN1O1xuXHRcdHBvc2l0aW9uLnkgPSByYWRpdXMgKiAoIDIgKyBjcyApICogc3UgKiAwLjU7XG5cdFx0cG9zaXRpb24ueiA9IHJhZGl1cyAqIE1hdGguc2luKCBxdU92ZXJQICkgKiAwLjU7XG5cblx0fVxuXG59XG5cblRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNLbm90QnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBvb3Ntb3hpZWNvZGVcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFRvcnVzR2VvbWV0cnlcblxuZnVuY3Rpb24gVG9ydXNHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCByYWRpYWxTZWdtZW50cywgdHVidWxhclNlZ21lbnRzLCBhcmMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0dlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0dHViZTogdHViZSxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0YXJjOiBhcmNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRvcnVzQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgcmFkaWFsU2VnbWVudHMsIHR1YnVsYXJTZWdtZW50cywgYXJjICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNHZW9tZXRyeTtcblxuLy8gVG9ydXNCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUb3J1c0J1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1RvcnVzQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRhcmM6IGFyY1xuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHR0dWJlID0gdHViZSB8fCAwLjQ7XG5cdHJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vciggcmFkaWFsU2VnbWVudHMgKSB8fCA4O1xuXHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKSB8fCA2O1xuXHRhcmMgPSBhcmMgfHwgTWF0aC5QSSAqIDI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGosIGk7XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdSA9IGkgLyB0dWJ1bGFyU2VnbWVudHMgKiBhcmM7XG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0dmVydGV4LnkgPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0dmVydGV4LnogPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0Y2VudGVyLnggPSByYWRpdXMgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0Y2VudGVyLnkgPSByYWRpdXMgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgY2VudGVyICkubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xuXHRcdFx0dXZzLnB1c2goIGogLyByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0Zm9yICggaiA9IDE7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdC8vIGluZGljZXNcblxuXHRcdFx0dmFyIGEgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpIC0gMTtcblx0XHRcdHZhciBiID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpIC0gMTtcblx0XHRcdHZhciBjID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXHRcdFx0dmFyIGQgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuVG9ydXNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogUG9ydCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvZWFyY3V0ICh2Mi4xLjIpXG4gKi9cblxudmFyIEVhcmN1dCA9IHtcblxuXHR0cmlhbmd1bGF0ZTogZnVuY3Rpb24gKCBkYXRhLCBob2xlSW5kaWNlcywgZGltICkge1xuXG5cdFx0ZGltID0gZGltIHx8IDI7XG5cblx0XHR2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGgsXG5cdFx0XHRvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbIDAgXSAqIGRpbSA6IGRhdGEubGVuZ3RoLFxuXHRcdFx0b3V0ZXJOb2RlID0gbGlua2VkTGlzdCggZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSApLFxuXHRcdFx0dHJpYW5nbGVzID0gW107XG5cblx0XHRpZiAoICEgb3V0ZXJOb2RlICkgcmV0dXJuIHRyaWFuZ2xlcztcblxuXHRcdHZhciBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCB4LCB5LCBpbnZTaXplO1xuXG5cdFx0aWYgKCBoYXNIb2xlcyApIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGVzKCBkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0gKTtcblxuXHRcdC8vIGlmIHRoZSBzaGFwZSBpcyBub3QgdG9vIHNpbXBsZSwgd2UnbGwgdXNlIHotb3JkZXIgY3VydmUgaGFzaCBsYXRlcjsgY2FsY3VsYXRlIHBvbHlnb24gYmJveFxuXG5cdFx0aWYgKCBkYXRhLmxlbmd0aCA+IDgwICogZGltICkge1xuXG5cdFx0XHRtaW5YID0gbWF4WCA9IGRhdGFbIDAgXTtcblx0XHRcdG1pblkgPSBtYXhZID0gZGF0YVsgMSBdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IGRpbTsgaSA8IG91dGVyTGVuOyBpICs9IGRpbSApIHtcblxuXHRcdFx0XHR4ID0gZGF0YVsgaSBdO1xuXHRcdFx0XHR5ID0gZGF0YVsgaSArIDEgXTtcblx0XHRcdFx0aWYgKCB4IDwgbWluWCApIG1pblggPSB4O1xuXHRcdFx0XHRpZiAoIHkgPCBtaW5ZICkgbWluWSA9IHk7XG5cdFx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcblx0XHRcdFx0aWYgKCB5ID4gbWF4WSApIG1heFkgPSB5O1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIG1pblgsIG1pblkgYW5kIGludlNpemUgYXJlIGxhdGVyIHVzZWQgdG8gdHJhbnNmb3JtIGNvb3JkcyBpbnRvIGludGVnZXJzIGZvciB6LW9yZGVyIGNhbGN1bGF0aW9uXG5cblx0XHRcdGludlNpemUgPSBNYXRoLm1heCggbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZICk7XG5cdFx0XHRpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDEgLyBpbnZTaXplIDogMDtcblxuXHRcdH1cblxuXHRcdGVhcmN1dExpbmtlZCggb3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlcztcblxuXHR9XG5cbn07XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuXG5mdW5jdGlvbiBsaW5rZWRMaXN0KCBkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGNsb2Nrd2lzZSApIHtcblxuXHR2YXIgaSwgbGFzdDtcblxuXHRpZiAoIGNsb2Nrd2lzZSA9PT0gKCBzaWduZWRBcmVhKCBkYXRhLCBzdGFydCwgZW5kLCBkaW0gKSA+IDAgKSApIHtcblxuXHRcdGZvciAoIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBkaW0gKSBsYXN0ID0gaW5zZXJ0Tm9kZSggaSwgZGF0YVsgaSBdLCBkYXRhWyBpICsgMSBdLCBsYXN0ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGZvciAoIGkgPSBlbmQgLSBkaW07IGkgPj0gc3RhcnQ7IGkgLT0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xuXG5cdH1cblxuXHRpZiAoIGxhc3QgJiYgZXF1YWxzKCBsYXN0LCBsYXN0Lm5leHQgKSApIHtcblxuXHRcdHJlbW92ZU5vZGUoIGxhc3QgKTtcblx0XHRsYXN0ID0gbGFzdC5uZXh0O1xuXG5cdH1cblxuXHRyZXR1cm4gbGFzdDtcblxufVxuXG4vLyBlbGltaW5hdGUgY29saW5lYXIgb3IgZHVwbGljYXRlIHBvaW50c1xuXG5mdW5jdGlvbiBmaWx0ZXJQb2ludHMoIHN0YXJ0LCBlbmQgKSB7XG5cblx0aWYgKCAhIHN0YXJ0ICkgcmV0dXJuIHN0YXJ0O1xuXHRpZiAoICEgZW5kICkgZW5kID0gc3RhcnQ7XG5cblx0dmFyIHAgPSBzdGFydCwgYWdhaW47XG5cblx0ZG8ge1xuXG5cdFx0YWdhaW4gPSBmYWxzZTtcblxuXHRcdGlmICggISBwLnN0ZWluZXIgJiYgKCBlcXVhbHMoIHAsIHAubmV4dCApIHx8IGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPT09IDAgKSApIHtcblxuXHRcdFx0cmVtb3ZlTm9kZSggcCApO1xuXHRcdFx0cCA9IGVuZCA9IHAucHJldjtcblx0XHRcdGlmICggcCA9PT0gcC5uZXh0ICkgYnJlYWs7XG5cdFx0XHRhZ2FpbiA9IHRydWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwID0gcC5uZXh0O1xuXG5cdFx0fVxuXG5cdH0gd2hpbGUgKCBhZ2FpbiB8fCBwICE9PSBlbmQgKTtcblxuXHRyZXR1cm4gZW5kO1xuXG59XG5cbi8vIG1haW4gZWFyIHNsaWNpbmcgbG9vcCB3aGljaCB0cmlhbmd1bGF0ZXMgYSBwb2x5Z29uIChnaXZlbiBhcyBhIGxpbmtlZCBsaXN0KVxuXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MgKSB7XG5cblx0aWYgKCAhIGVhciApIHJldHVybjtcblxuXHQvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5cblx0aWYgKCAhIHBhc3MgJiYgaW52U2l6ZSApIGluZGV4Q3VydmUoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdHZhciBzdG9wID0gZWFyLCBwcmV2LCBuZXh0O1xuXG5cdC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuXG5cdHdoaWxlICggZWFyLnByZXYgIT09IGVhci5uZXh0ICkge1xuXG5cdFx0cHJldiA9IGVhci5wcmV2O1xuXHRcdG5leHQgPSBlYXIubmV4dDtcblxuXHRcdGlmICggaW52U2l6ZSA/IGlzRWFySGFzaGVkKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKSA6IGlzRWFyKCBlYXIgKSApIHtcblxuXHRcdFx0Ly8gY3V0IG9mZiB0aGUgdHJpYW5nbGVcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBwcmV2LmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBlYXIuaSAvIGRpbSApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIG5leHQuaSAvIGRpbSApO1xuXG5cdFx0XHRyZW1vdmVOb2RlKCBlYXIgKTtcblxuXHRcdFx0Ly8gc2tpcHBpbmcgdGhlIG5leHQgdmVydGljZSBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcblx0XHRcdGVhciA9IG5leHQubmV4dDtcblx0XHRcdHN0b3AgPSBuZXh0Lm5leHQ7XG5cblx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0fVxuXG5cdFx0ZWFyID0gbmV4dDtcblxuXHRcdC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG5cblx0XHRpZiAoIGVhciA9PT0gc3RvcCApIHtcblxuXHRcdFx0Ly8gdHJ5IGZpbHRlcmluZyBwb2ludHMgYW5kIHNsaWNpbmcgYWdhaW5cblxuXHRcdFx0aWYgKCAhIHBhc3MgKSB7XG5cblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBmaWx0ZXJQb2ludHMoIGVhciApLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMSApO1xuXG5cdFx0XHRcdC8vIGlmIHRoaXMgZGlkbid0IHdvcmssIHRyeSBjdXJpbmcgYWxsIHNtYWxsIHNlbGYtaW50ZXJzZWN0aW9ucyBsb2NhbGx5XG5cblx0XHRcdH0gZWxzZSBpZiAoIHBhc3MgPT09IDEgKSB7XG5cblx0XHRcdFx0ZWFyID0gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggZWFyLCB0cmlhbmdsZXMsIGRpbSApO1xuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIgKTtcblxuXHRcdFx0XHQvLyBhcyBhIGxhc3QgcmVzb3J0LCB0cnkgc3BsaXR0aW5nIHRoZSByZW1haW5pbmcgcG9seWdvbiBpbnRvIHR3b1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBwYXNzID09PSAyICkge1xuXG5cdFx0XHRcdHNwbGl0RWFyY3V0KCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2Rlc1xuXG5mdW5jdGlvbiBpc0VhciggZWFyICkge1xuXG5cdHZhciBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxuXHR2YXIgcCA9IGVhci5uZXh0Lm5leHQ7XG5cblx0d2hpbGUgKCBwICE9PSBlYXIucHJldiApIHtcblxuXHRcdGlmICggcG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmIGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPj0gMCApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cCA9IHAubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHR2YXIgYSA9IGVhci5wcmV2LFxuXHRcdGIgPSBlYXIsXG5cdFx0YyA9IGVhci5uZXh0O1xuXG5cdGlmICggYXJlYSggYSwgYiwgYyApID49IDAgKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cblx0Ly8gdHJpYW5nbGUgYmJveDsgbWluICYgbWF4IGFyZSBjYWxjdWxhdGVkIGxpa2UgdGhpcyBmb3Igc3BlZWRcblxuXHR2YXIgbWluVFggPSBhLnggPCBiLnggPyAoIGEueCA8IGMueCA/IGEueCA6IGMueCApIDogKCBiLnggPCBjLnggPyBiLnggOiBjLnggKSxcblx0XHRtaW5UWSA9IGEueSA8IGIueSA/ICggYS55IDwgYy55ID8gYS55IDogYy55ICkgOiAoIGIueSA8IGMueSA/IGIueSA6IGMueSApLFxuXHRcdG1heFRYID0gYS54ID4gYi54ID8gKCBhLnggPiBjLnggPyBhLnggOiBjLnggKSA6ICggYi54ID4gYy54ID8gYi54IDogYy54ICksXG5cdFx0bWF4VFkgPSBhLnkgPiBiLnkgPyAoIGEueSA+IGMueSA/IGEueSA6IGMueSApIDogKCBiLnkgPiBjLnkgPyBiLnkgOiBjLnkgKTtcblxuXHQvLyB6LW9yZGVyIHJhbmdlIGZvciB0aGUgY3VycmVudCB0cmlhbmdsZSBiYm94O1xuXG5cdHZhciBtaW5aID0gek9yZGVyKCBtaW5UWCwgbWluVFksIG1pblgsIG1pblksIGludlNpemUgKSxcblx0XHRtYXhaID0gek9yZGVyKCBtYXhUWCwgbWF4VFksIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHQvLyBmaXJzdCBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBpbiBpbmNyZWFzaW5nIHotb3JkZXJcblxuXHR2YXIgcCA9IGVhci5uZXh0WjtcblxuXHR3aGlsZSAoIHAgJiYgcC56IDw9IG1heFogKSB7XG5cblx0XHRpZiAoIHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXG5cdFx0XHRcdHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkgKSAmJlxuXHRcdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAubmV4dFo7XG5cblx0fVxuXG5cdC8vIHRoZW4gbG9vayBmb3IgcG9pbnRzIGluIGRlY3JlYXNpbmcgei1vcmRlclxuXG5cdHAgPSBlYXIucHJldlo7XG5cblx0d2hpbGUgKCBwICYmIHAueiA+PSBtaW5aICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0XHRwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55ICkgJiZcblx0XHRcdFx0YXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0cCA9IHAucHJldlo7XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbi8vIGdvIHRocm91Z2ggYWxsIHBvbHlnb24gbm9kZXMgYW5kIGN1cmUgc21hbGwgbG9jYWwgc2VsZi1pbnRlcnNlY3Rpb25zXG5cbmZ1bmN0aW9uIGN1cmVMb2NhbEludGVyc2VjdGlvbnMoIHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSApIHtcblxuXHR2YXIgcCA9IHN0YXJ0O1xuXG5cdGRvIHtcblxuXHRcdHZhciBhID0gcC5wcmV2LCBiID0gcC5uZXh0Lm5leHQ7XG5cblx0XHRpZiAoICEgZXF1YWxzKCBhLCBiICkgJiYgaW50ZXJzZWN0cyggYSwgcCwgcC5uZXh0LCBiICkgJiYgbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSApIHtcblxuXHRcdFx0dHJpYW5nbGVzLnB1c2goIGEuaSAvIGRpbSApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIHAuaSAvIGRpbSApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIGIuaSAvIGRpbSApO1xuXG5cdFx0XHQvLyByZW1vdmUgdHdvIG5vZGVzIGludm9sdmVkXG5cblx0XHRcdHJlbW92ZU5vZGUoIHAgKTtcblx0XHRcdHJlbW92ZU5vZGUoIHAubmV4dCApO1xuXG5cdFx0XHRwID0gc3RhcnQgPSBiO1xuXG5cdFx0fVxuXG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gc3RhcnQgKTtcblxuXHRyZXR1cm4gcDtcblxufVxuXG4vLyB0cnkgc3BsaXR0aW5nIHBvbHlnb24gaW50byB0d28gYW5kIHRyaWFuZ3VsYXRlIHRoZW0gaW5kZXBlbmRlbnRseVxuXG5mdW5jdGlvbiBzcGxpdEVhcmN1dCggc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGxvb2sgZm9yIGEgdmFsaWQgZGlhZ29uYWwgdGhhdCBkaXZpZGVzIHRoZSBwb2x5Z29uIGludG8gdHdvXG5cblx0dmFyIGEgPSBzdGFydDtcblxuXHRkbyB7XG5cblx0XHR2YXIgYiA9IGEubmV4dC5uZXh0O1xuXG5cdFx0d2hpbGUgKCBiICE9PSBhLnByZXYgKSB7XG5cblx0XHRcdGlmICggYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKCBhLCBiICkgKSB7XG5cblx0XHRcdFx0Ly8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuXG5cdFx0XHRcdHZhciBjID0gc3BsaXRQb2x5Z29uKCBhLCBiICk7XG5cblx0XHRcdFx0Ly8gZmlsdGVyIGNvbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcblxuXHRcdFx0XHRhID0gZmlsdGVyUG9pbnRzKCBhLCBhLm5leHQgKTtcblx0XHRcdFx0YyA9IGZpbHRlclBvaW50cyggYywgYy5uZXh0ICk7XG5cblx0XHRcdFx0Ly8gcnVuIGVhcmN1dCBvbiBlYWNoIGhhbGZcblxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0XHRcdGVhcmN1dExpbmtlZCggYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGIgPSBiLm5leHQ7XG5cblx0XHR9XG5cblx0XHRhID0gYS5uZXh0O1xuXG5cdH0gd2hpbGUgKCBhICE9PSBzdGFydCApO1xuXG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcblxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZXMoIGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSApIHtcblxuXHR2YXIgcXVldWUgPSBbXSwgaSwgbGVuLCBzdGFydCwgZW5kLCBsaXN0O1xuXG5cdGZvciAoIGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKysgKSB7XG5cblx0XHRzdGFydCA9IGhvbGVJbmRpY2VzWyBpIF0gKiBkaW07XG5cdFx0ZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1sgaSArIDEgXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXHRcdGxpc3QgPSBsaW5rZWRMaXN0KCBkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGZhbHNlICk7XG5cdFx0aWYgKCBsaXN0ID09PSBsaXN0Lm5leHQgKSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xuXHRcdHF1ZXVlLnB1c2goIGdldExlZnRtb3N0KCBsaXN0ICkgKTtcblxuXHR9XG5cblx0cXVldWUuc29ydCggY29tcGFyZVggKTtcblxuXHQvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxuXG5cdGZvciAoIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0ZWxpbWluYXRlSG9sZSggcXVldWVbIGkgXSwgb3V0ZXJOb2RlICk7XG5cdFx0b3V0ZXJOb2RlID0gZmlsdGVyUG9pbnRzKCBvdXRlck5vZGUsIG91dGVyTm9kZS5uZXh0ICk7XG5cblx0fVxuXG5cdHJldHVybiBvdXRlck5vZGU7XG5cbn1cblxuZnVuY3Rpb24gY29tcGFyZVgoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEueCAtIGIueDtcblxufVxuXG4vLyBmaW5kIGEgYnJpZGdlIGJldHdlZW4gdmVydGljZXMgdGhhdCBjb25uZWN0cyBob2xlIHdpdGggYW4gb3V0ZXIgcmluZyBhbmQgYW5kIGxpbmsgaXRcblxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZSggaG9sZSwgb3V0ZXJOb2RlICkge1xuXG5cdG91dGVyTm9kZSA9IGZpbmRIb2xlQnJpZGdlKCBob2xlLCBvdXRlck5vZGUgKTtcblxuXHRpZiAoIG91dGVyTm9kZSApIHtcblxuXHRcdHZhciBiID0gc3BsaXRQb2x5Z29uKCBvdXRlck5vZGUsIGhvbGUgKTtcblxuXHRcdGZpbHRlclBvaW50cyggYiwgYi5uZXh0ICk7XG5cblx0fVxuXG59XG5cbi8vIERhdmlkIEViZXJseSdzIGFsZ29yaXRobSBmb3IgZmluZGluZyBhIGJyaWRnZSBiZXR3ZWVuIGhvbGUgYW5kIG91dGVyIHBvbHlnb25cblxuZnVuY3Rpb24gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApIHtcblxuXHR2YXIgcCA9IG91dGVyTm9kZSxcblx0XHRoeCA9IGhvbGUueCxcblx0XHRoeSA9IGhvbGUueSxcblx0XHRxeCA9IC0gSW5maW5pdHksXG5cdFx0bTtcblxuXHQvLyBmaW5kIGEgc2VnbWVudCBpbnRlcnNlY3RlZCBieSBhIHJheSBmcm9tIHRoZSBob2xlJ3MgbGVmdG1vc3QgcG9pbnQgdG8gdGhlIGxlZnQ7XG5cdC8vIHNlZ21lbnQncyBlbmRwb2ludCB3aXRoIGxlc3NlciB4IHdpbGwgYmUgcG90ZW50aWFsIGNvbm5lY3Rpb24gcG9pbnRcblxuXHRkbyB7XG5cblx0XHRpZiAoIGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55ICkge1xuXG5cdFx0XHR2YXIgeCA9IHAueCArICggaHkgLSBwLnkgKSAqICggcC5uZXh0LnggLSBwLnggKSAvICggcC5uZXh0LnkgLSBwLnkgKTtcblxuXHRcdFx0aWYgKCB4IDw9IGh4ICYmIHggPiBxeCApIHtcblxuXHRcdFx0XHRxeCA9IHg7XG5cblx0XHRcdFx0aWYgKCB4ID09PSBoeCApIHtcblxuXHRcdFx0XHRcdGlmICggaHkgPT09IHAueSApIHJldHVybiBwO1xuXHRcdFx0XHRcdGlmICggaHkgPT09IHAubmV4dC55ICkgcmV0dXJuIHAubmV4dDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bSA9IHAueCA8IHAubmV4dC54ID8gcCA6IHAubmV4dDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gb3V0ZXJOb2RlICk7XG5cblx0aWYgKCAhIG0gKSByZXR1cm4gbnVsbDtcblxuXHRpZiAoIGh4ID09PSBxeCApIHJldHVybiBtLnByZXY7IC8vIGhvbGUgdG91Y2hlcyBvdXRlciBzZWdtZW50OyBwaWNrIGxvd2VyIGVuZHBvaW50XG5cblx0Ly8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50O1xuXHQvLyBpZiB0aGVyZSBhcmUgbm8gcG9pbnRzIGZvdW5kLCB3ZSBoYXZlIGEgdmFsaWQgY29ubmVjdGlvbjtcblx0Ly8gb3RoZXJ3aXNlIGNob29zZSB0aGUgcG9pbnQgb2YgdGhlIG1pbmltdW0gYW5nbGUgd2l0aCB0aGUgcmF5IGFzIGNvbm5lY3Rpb24gcG9pbnRcblxuXHR2YXIgc3RvcCA9IG0sXG5cdFx0bXggPSBtLngsXG5cdFx0bXkgPSBtLnksXG5cdFx0dGFuTWluID0gSW5maW5pdHksXG5cdFx0dGFuO1xuXG5cdHAgPSBtLm5leHQ7XG5cblx0d2hpbGUgKCBwICE9PSBzdG9wICkge1xuXG5cdFx0aWYgKCBoeCA+PSBwLnggJiYgcC54ID49IG14ICYmIGh4ICE9PSBwLnggJiZcblx0XHRcdFx0XHRcdHBvaW50SW5UcmlhbmdsZSggaHkgPCBteSA/IGh4IDogcXgsIGh5LCBteCwgbXksIGh5IDwgbXkgPyBxeCA6IGh4LCBoeSwgcC54LCBwLnkgKSApIHtcblxuXHRcdFx0dGFuID0gTWF0aC5hYnMoIGh5IC0gcC55ICkgLyAoIGh4IC0gcC54ICk7IC8vIHRhbmdlbnRpYWxcblxuXHRcdFx0aWYgKCAoIHRhbiA8IHRhbk1pbiB8fCAoIHRhbiA9PT0gdGFuTWluICYmIHAueCA+IG0ueCApICkgJiYgbG9jYWxseUluc2lkZSggcCwgaG9sZSApICkge1xuXG5cdFx0XHRcdG0gPSBwO1xuXHRcdFx0XHR0YW5NaW4gPSB0YW47XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fVxuXG5cdHJldHVybiBtO1xuXG59XG5cbi8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcblxuZnVuY3Rpb24gaW5kZXhDdXJ2ZSggc3RhcnQsIG1pblgsIG1pblksIGludlNpemUgKSB7XG5cblx0dmFyIHAgPSBzdGFydDtcblxuXHRkbyB7XG5cblx0XHRpZiAoIHAueiA9PT0gbnVsbCApIHAueiA9IHpPcmRlciggcC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRwLnByZXZaID0gcC5wcmV2O1xuXHRcdHAubmV4dFogPSBwLm5leHQ7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gc3RhcnQgKTtcblxuXHRwLnByZXZaLm5leHRaID0gbnVsbDtcblx0cC5wcmV2WiA9IG51bGw7XG5cblx0c29ydExpbmtlZCggcCApO1xuXG59XG5cbi8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtXG4vLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbFxuXG5mdW5jdGlvbiBzb3J0TGlua2VkKCBsaXN0ICkge1xuXG5cdHZhciBpLCBwLCBxLCBlLCB0YWlsLCBudW1NZXJnZXMsIHBTaXplLCBxU2l6ZSwgaW5TaXplID0gMTtcblxuXHRkbyB7XG5cblx0XHRwID0gbGlzdDtcblx0XHRsaXN0ID0gbnVsbDtcblx0XHR0YWlsID0gbnVsbDtcblx0XHRudW1NZXJnZXMgPSAwO1xuXG5cdFx0d2hpbGUgKCBwICkge1xuXG5cdFx0XHRudW1NZXJnZXMgKys7XG5cdFx0XHRxID0gcDtcblx0XHRcdHBTaXplID0gMDtcblxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBpblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0cFNpemUgKys7XG5cdFx0XHRcdHEgPSBxLm5leHRaO1xuXHRcdFx0XHRpZiAoICEgcSApIGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdHFTaXplID0gaW5TaXplO1xuXG5cdFx0XHR3aGlsZSAoIHBTaXplID4gMCB8fCAoIHFTaXplID4gMCAmJiBxICkgKSB7XG5cblx0XHRcdFx0aWYgKCBwU2l6ZSAhPT0gMCAmJiAoIHFTaXplID09PSAwIHx8ICEgcSB8fCBwLnogPD0gcS56ICkgKSB7XG5cblx0XHRcdFx0XHRlID0gcDtcblx0XHRcdFx0XHRwID0gcC5uZXh0Wjtcblx0XHRcdFx0XHRwU2l6ZSAtLTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZSA9IHE7XG5cdFx0XHRcdFx0cSA9IHEubmV4dFo7XG5cdFx0XHRcdFx0cVNpemUgLS07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGFpbCApIHRhaWwubmV4dFogPSBlO1xuXHRcdFx0XHRlbHNlIGxpc3QgPSBlO1xuXG5cdFx0XHRcdGUucHJldlogPSB0YWlsO1xuXHRcdFx0XHR0YWlsID0gZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwID0gcTtcblxuXHRcdH1cblxuXHRcdHRhaWwubmV4dFogPSBudWxsO1xuXHRcdGluU2l6ZSAqPSAyO1xuXG5cdH0gd2hpbGUgKCBudW1NZXJnZXMgPiAxICk7XG5cblx0cmV0dXJuIGxpc3Q7XG5cbn1cblxuLy8gei1vcmRlciBvZiBhIHBvaW50IGdpdmVuIGNvb3JkcyBhbmQgaW52ZXJzZSBvZiB0aGUgbG9uZ2VyIHNpZGUgb2YgZGF0YSBiYm94XG5cbmZ1bmN0aW9uIHpPcmRlciggeCwgeSwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHQvLyBjb29yZHMgYXJlIHRyYW5zZm9ybWVkIGludG8gbm9uLW5lZ2F0aXZlIDE1LWJpdCBpbnRlZ2VyIHJhbmdlXG5cblx0eCA9IDMyNzY3ICogKCB4IC0gbWluWCApICogaW52U2l6ZTtcblx0eSA9IDMyNzY3ICogKCB5IC0gbWluWSApICogaW52U2l6ZTtcblxuXHR4ID0gKCB4IHwgKCB4IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eCA9ICggeCB8ICggeCA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHggPSAoIHggfCAoIHggPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHR5ID0gKCB5IHwgKCB5IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eSA9ICggeSB8ICggeSA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHkgPSAoIHkgfCAoIHkgPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHRyZXR1cm4geCB8ICggeSA8PCAxICk7XG5cbn1cblxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xuXG5mdW5jdGlvbiBnZXRMZWZ0bW9zdCggc3RhcnQgKSB7XG5cblx0dmFyIHAgPSBzdGFydCwgbGVmdG1vc3QgPSBzdGFydDtcblxuXHRkbyB7XG5cblx0XHRpZiAoIHAueCA8IGxlZnRtb3N0LnggKSBsZWZ0bW9zdCA9IHA7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gc3RhcnQgKTtcblxuXHRyZXR1cm4gbGVmdG1vc3Q7XG5cbn1cblxuLy8gY2hlY2sgaWYgYSBwb2ludCBsaWVzIHdpdGhpbiBhIGNvbnZleCB0cmlhbmdsZVxuXG5mdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSApIHtcblxuXHRyZXR1cm4gKCBjeCAtIHB4ICkgKiAoIGF5IC0gcHkgKSAtICggYXggLSBweCApICogKCBjeSAtIHB5ICkgPj0gMCAmJlxuXHQgKCBheCAtIHB4ICkgKiAoIGJ5IC0gcHkgKSAtICggYnggLSBweCApICogKCBheSAtIHB5ICkgPj0gMCAmJlxuXHQgKCBieCAtIHB4ICkgKiAoIGN5IC0gcHkgKSAtICggY3ggLSBweCApICogKCBieSAtIHB5ICkgPj0gMDtcblxufVxuXG4vLyBjaGVjayBpZiBhIGRpYWdvbmFsIGJldHdlZW4gdHdvIHBvbHlnb24gbm9kZXMgaXMgdmFsaWQgKGxpZXMgaW4gcG9seWdvbiBpbnRlcmlvcilcblxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKCBhLCBiICkge1xuXG5cdHJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgISBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApICYmXG5cdFx0bG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSAmJiBtaWRkbGVJbnNpZGUoIGEsIGIgKTtcblxufVxuXG4vLyBzaWduZWQgYXJlYSBvZiBhIHRyaWFuZ2xlXG5cbmZ1bmN0aW9uIGFyZWEoIHAsIHEsIHIgKSB7XG5cblx0cmV0dXJuICggcS55IC0gcC55ICkgKiAoIHIueCAtIHEueCApIC0gKCBxLnggLSBwLnggKSAqICggci55IC0gcS55ICk7XG5cbn1cblxuLy8gY2hlY2sgaWYgdHdvIHBvaW50cyBhcmUgZXF1YWxcblxuZnVuY3Rpb24gZXF1YWxzKCBwMSwgcDIgKSB7XG5cblx0cmV0dXJuIHAxLnggPT09IHAyLnggJiYgcDEueSA9PT0gcDIueTtcblxufVxuXG4vLyBjaGVjayBpZiB0d28gc2VnbWVudHMgaW50ZXJzZWN0XG5cbmZ1bmN0aW9uIGludGVyc2VjdHMoIHAxLCBxMSwgcDIsIHEyICkge1xuXG5cdGlmICggKCBlcXVhbHMoIHAxLCBxMSApICYmIGVxdWFscyggcDIsIHEyICkgKSB8fFxuXHRcdFx0KCBlcXVhbHMoIHAxLCBxMiApICYmIGVxdWFscyggcDIsIHExICkgKSApIHJldHVybiB0cnVlO1xuXG5cdHJldHVybiBhcmVhKCBwMSwgcTEsIHAyICkgPiAwICE9PSBhcmVhKCBwMSwgcTEsIHEyICkgPiAwICYmXG5cdFx0XHRcdCBhcmVhKCBwMiwgcTIsIHAxICkgPiAwICE9PSBhcmVhKCBwMiwgcTIsIHExICkgPiAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5cbmZ1bmN0aW9uIGludGVyc2VjdHNQb2x5Z29uKCBhLCBiICkge1xuXG5cdHZhciBwID0gYTtcblxuXHRkbyB7XG5cblx0XHRpZiAoIHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cyggcCwgcC5uZXh0LCBhLCBiICkgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gYSApO1xuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cblxuZnVuY3Rpb24gbG9jYWxseUluc2lkZSggYSwgYiApIHtcblxuXHRyZXR1cm4gYXJlYSggYS5wcmV2LCBhLCBhLm5leHQgKSA8IDAgP1xuXHRcdGFyZWEoIGEsIGIsIGEubmV4dCApID49IDAgJiYgYXJlYSggYSwgYS5wcmV2LCBiICkgPj0gMCA6XG5cdFx0YXJlYSggYSwgYiwgYS5wcmV2ICkgPCAwIHx8IGFyZWEoIGEsIGEubmV4dCwgYiApIDwgMDtcblxufVxuXG4vLyBjaGVjayBpZiB0aGUgbWlkZGxlIHBvaW50IG9mIGEgcG9seWdvbiBkaWFnb25hbCBpcyBpbnNpZGUgdGhlIHBvbHlnb25cblxuZnVuY3Rpb24gbWlkZGxlSW5zaWRlKCBhLCBiICkge1xuXG5cdHZhciBwID0gYSxcblx0XHRpbnNpZGUgPSBmYWxzZSxcblx0XHRweCA9ICggYS54ICsgYi54ICkgLyAyLFxuXHRcdHB5ID0gKCBhLnkgKyBiLnkgKSAvIDI7XG5cblx0ZG8ge1xuXG5cdFx0aWYgKCAoICggcC55ID4gcHkgKSAhPT0gKCBwLm5leHQueSA+IHB5ICkgKSAmJiBwLm5leHQueSAhPT0gcC55ICYmXG5cdFx0XHRcdFx0XHQoIHB4IDwgKCBwLm5leHQueCAtIHAueCApICogKCBweSAtIHAueSApIC8gKCBwLm5leHQueSAtIHAueSApICsgcC54ICkgKSB7XG5cblx0XHRcdGluc2lkZSA9ICEgaW5zaWRlO1xuXG5cdFx0fVxuXG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gYSApO1xuXG5cdHJldHVybiBpbnNpZGU7XG5cbn1cblxuLy8gbGluayB0d28gcG9seWdvbiB2ZXJ0aWNlcyB3aXRoIGEgYnJpZGdlOyBpZiB0aGUgdmVydGljZXMgYmVsb25nIHRvIHRoZSBzYW1lIHJpbmcsIGl0IHNwbGl0cyBwb2x5Z29uIGludG8gdHdvO1xuLy8gaWYgb25lIGJlbG9uZ3MgdG8gdGhlIG91dGVyIHJpbmcgYW5kIGFub3RoZXIgdG8gYSBob2xlLCBpdCBtZXJnZXMgaXQgaW50byBhIHNpbmdsZSByaW5nXG5cbmZ1bmN0aW9uIHNwbGl0UG9seWdvbiggYSwgYiApIHtcblxuXHR2YXIgYTIgPSBuZXcgTm9kZSggYS5pLCBhLngsIGEueSApLFxuXHRcdGIyID0gbmV3IE5vZGUoIGIuaSwgYi54LCBiLnkgKSxcblx0XHRhbiA9IGEubmV4dCxcblx0XHRicCA9IGIucHJldjtcblxuXHRhLm5leHQgPSBiO1xuXHRiLnByZXYgPSBhO1xuXG5cdGEyLm5leHQgPSBhbjtcblx0YW4ucHJldiA9IGEyO1xuXG5cdGIyLm5leHQgPSBhMjtcblx0YTIucHJldiA9IGIyO1xuXG5cdGJwLm5leHQgPSBiMjtcblx0YjIucHJldiA9IGJwO1xuXG5cdHJldHVybiBiMjtcblxufVxuXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxuXG5mdW5jdGlvbiBpbnNlcnROb2RlKCBpLCB4LCB5LCBsYXN0ICkge1xuXG5cdHZhciBwID0gbmV3IE5vZGUoIGksIHgsIHkgKTtcblxuXHRpZiAoICEgbGFzdCApIHtcblxuXHRcdHAucHJldiA9IHA7XG5cdFx0cC5uZXh0ID0gcDtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cC5uZXh0ID0gbGFzdC5uZXh0O1xuXHRcdHAucHJldiA9IGxhc3Q7XG5cdFx0bGFzdC5uZXh0LnByZXYgPSBwO1xuXHRcdGxhc3QubmV4dCA9IHA7XG5cblx0fVxuXG5cdHJldHVybiBwO1xuXG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUoIHAgKSB7XG5cblx0cC5uZXh0LnByZXYgPSBwLnByZXY7XG5cdHAucHJldi5uZXh0ID0gcC5uZXh0O1xuXG5cdGlmICggcC5wcmV2WiApIHAucHJldloubmV4dFogPSBwLm5leHRaO1xuXHRpZiAoIHAubmV4dFogKSBwLm5leHRaLnByZXZaID0gcC5wcmV2WjtcblxufVxuXG5mdW5jdGlvbiBOb2RlKCBpLCB4LCB5ICkge1xuXG5cdC8vIHZlcnRpY2UgaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcblx0dGhpcy5pID0gaTtcblxuXHQvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcblx0dGhpcy54ID0geDtcblx0dGhpcy55ID0geTtcblxuXHQvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0aWNlIG5vZGVzIGluIGEgcG9seWdvbiByaW5nXG5cdHRoaXMucHJldiA9IG51bGw7XG5cdHRoaXMubmV4dCA9IG51bGw7XG5cblx0Ly8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxuXHR0aGlzLnogPSBudWxsO1xuXG5cdC8vIHByZXZpb3VzIGFuZCBuZXh0IG5vZGVzIGluIHotb3JkZXJcblx0dGhpcy5wcmV2WiA9IG51bGw7XG5cdHRoaXMubmV4dFogPSBudWxsO1xuXG5cdC8vIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgaXMgYSBzdGVpbmVyIHBvaW50XG5cdHRoaXMuc3RlaW5lciA9IGZhbHNlO1xuXG59XG5cbmZ1bmN0aW9uIHNpZ25lZEFyZWEoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSApIHtcblxuXHR2YXIgc3VtID0gMDtcblxuXHRmb3IgKCB2YXIgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSApIHtcblxuXHRcdHN1bSArPSAoIGRhdGFbIGogXSAtIGRhdGFbIGkgXSApICogKCBkYXRhWyBpICsgMSBdICsgZGF0YVsgaiArIDEgXSApO1xuXHRcdGogPSBpO1xuXG5cdH1cblxuXHRyZXR1cm4gc3VtO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICovXG5cbnZhciBTaGFwZVV0aWxzID0ge1xuXG5cdC8vIGNhbGN1bGF0ZSBhcmVhIG9mIHRoZSBjb250b3VyIHBvbHlnb25cblxuXHRhcmVhOiBmdW5jdGlvbiAoIGNvbnRvdXIgKSB7XG5cblx0XHR2YXIgbiA9IGNvbnRvdXIubGVuZ3RoO1xuXHRcdHZhciBhID0gMC4wO1xuXG5cdFx0Zm9yICggdmFyIHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSArKyApIHtcblxuXHRcdFx0YSArPSBjb250b3VyWyBwIF0ueCAqIGNvbnRvdXJbIHEgXS55IC0gY29udG91clsgcSBdLnggKiBjb250b3VyWyBwIF0ueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhICogMC41O1xuXG5cdH0sXG5cblx0aXNDbG9ja1dpc2U6IGZ1bmN0aW9uICggcHRzICkge1xuXG5cdFx0cmV0dXJuIFNoYXBlVXRpbHMuYXJlYSggcHRzICkgPCAwO1xuXG5cdH0sXG5cblx0dHJpYW5ndWxhdGVTaGFwZTogZnVuY3Rpb24gKCBjb250b3VyLCBob2xlcyApIHtcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IFtdOyAvLyBmbGF0IGFycmF5IG9mIHZlcnRpY2VzIGxpa2UgWyB4MCx5MCwgeDEseTEsIHgyLHkyLCAuLi4gXVxuXHRcdHZhciBob2xlSW5kaWNlcyA9IFtdOyAvLyBhcnJheSBvZiBob2xlIGluZGljZXNcblx0XHR2YXIgZmFjZXMgPSBbXTsgLy8gZmluYWwgYXJyYXkgb2YgdmVydGV4IGluZGljZXMgbGlrZSBbIFsgYSxiLGQgXSwgWyBiLGMsZCBdIF1cblxuXHRcdHJlbW92ZUR1cEVuZFB0cyggY29udG91ciApO1xuXHRcdGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICk7XG5cblx0XHQvL1xuXG5cdFx0dmFyIGhvbGVJbmRleCA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0aG9sZXMuZm9yRWFjaCggcmVtb3ZlRHVwRW5kUHRzICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGhvbGVJbmRpY2VzLnB1c2goIGhvbGVJbmRleCApO1xuXHRcdFx0aG9sZUluZGV4ICs9IGhvbGVzWyBpIF0ubGVuZ3RoO1xuXHRcdFx0YWRkQ29udG91ciggdmVydGljZXMsIGhvbGVzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgdHJpYW5nbGVzID0gRWFyY3V0LnRyaWFuZ3VsYXRlKCB2ZXJ0aWNlcywgaG9sZUluZGljZXMgKTtcblxuXHRcdC8vXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdGZhY2VzLnB1c2goIHRyaWFuZ2xlcy5zbGljZSggaSwgaSArIDMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhY2VzO1xuXG5cdH1cblxufTtcblxuZnVuY3Rpb24gcmVtb3ZlRHVwRW5kUHRzKCBwb2ludHMgKSB7XG5cblx0dmFyIGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdGlmICggbCA+IDIgJiYgcG9pbnRzWyBsIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcblxuXHRcdHBvaW50cy5wb3AoKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gYWRkQ29udG91ciggdmVydGljZXMsIGNvbnRvdXIgKSB7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udG91ci5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCBjb250b3VyWyBpIF0ueCApO1xuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS55ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICpcbiAqIENyZWF0ZXMgZXh0cnVkZWQgZ2VvbWV0cnkgZnJvbSBhIHBhdGggc2hhcGUuXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqXG4gKiAgY3VydmVTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgb24gdGhlIGN1cnZlc1xuICogIHN0ZXBzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBmb3Igei1zaWRlIGV4dHJ1c2lvbnMgLyB1c2VkIGZvciBzdWJkaXZpZGluZyBzZWdtZW50cyBvZiBleHRydWRlIHNwbGluZSB0b29cbiAqICBkZXB0aDogPGZsb2F0PiwgLy8gRGVwdGggdG8gZXh0cnVkZSB0aGUgc2hhcGVcbiAqXG4gKiAgYmV2ZWxFbmFibGVkOiA8Ym9vbD4sIC8vIHR1cm4gb24gYmV2ZWxcbiAqICBiZXZlbFRoaWNrbmVzczogPGZsb2F0PiwgLy8gaG93IGRlZXAgaW50byB0aGUgb3JpZ2luYWwgc2hhcGUgYmV2ZWwgZ29lc1xuICogIGJldmVsU2l6ZTogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHNoYXBlIG91dGxpbmUgaXMgYmV2ZWxcbiAqICBiZXZlbFNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIGJldmVsIGxheWVyc1xuICpcbiAqICBleHRydWRlUGF0aDogPFRIUkVFLkN1cnZlPiAvLyBjdXJ2ZSB0byBleHRydWRlIHNoYXBlIGFsb25nXG4gKlxuICogIFVWR2VuZXJhdG9yOiA8T2JqZWN0PiAvLyBvYmplY3QgdGhhdCBwcm92aWRlcyBVViBnZW5lcmF0b3IgZnVuY3Rpb25zXG4gKlxuICogfVxuICovXG5cbi8vIEV4dHJ1ZGVHZW9tZXRyeVxuXG5mdW5jdGlvbiBFeHRydWRlR2VvbWV0cnkoIHNoYXBlcywgb3B0aW9ucyApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0V4dHJ1ZGVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHNoYXBlczogc2hhcGVzLFxuXHRcdG9wdGlvbnM6IG9wdGlvbnNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSggc2hhcGVzLCBvcHRpb25zICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEV4dHJ1ZGVHZW9tZXRyeTtcblxuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHR2YXIgc2hhcGVzID0gdGhpcy5wYXJhbWV0ZXJzLnNoYXBlcztcblx0dmFyIG9wdGlvbnMgPSB0aGlzLnBhcmFtZXRlcnMub3B0aW9ucztcblxuXHRyZXR1cm4gdG9KU09OKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKTtcblxufTtcblxuLy8gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSggc2hhcGVzLCBvcHRpb25zICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRXh0cnVkZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0b3B0aW9uczogb3B0aW9uc1xuXHR9O1xuXG5cdHNoYXBlcyA9IEFycmF5LmlzQXJyYXkoIHNoYXBlcyApID8gc2hhcGVzIDogWyBzaGFwZXMgXTtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHZhciB2ZXJ0aWNlc0FycmF5ID0gW107XG5cdHZhciB1dkFycmF5ID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblx0XHRhZGRTaGFwZSggc2hhcGUgKTtcblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzQXJyYXksIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QXJyYXksIDIgKSApO1xuXG5cdHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcblxuXHQvLyBmdW5jdGlvbnNcblxuXHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XG5cblx0XHR2YXIgcGxhY2Vob2xkZXIgPSBbXTtcblxuXHRcdC8vIG9wdGlvbnNcblxuXHRcdHZhciBjdXJ2ZVNlZ21lbnRzID0gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmN1cnZlU2VnbWVudHMgOiAxMjtcblx0XHR2YXIgc3RlcHMgPSBvcHRpb25zLnN0ZXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnN0ZXBzIDogMTtcblx0XHR2YXIgZGVwdGggPSBvcHRpb25zLmRlcHRoICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoIDogMTAwO1xuXG5cdFx0dmFyIGJldmVsRW5hYmxlZCA9IG9wdGlvbnMuYmV2ZWxFbmFibGVkICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsRW5hYmxlZCA6IHRydWU7XG5cdFx0dmFyIGJldmVsVGhpY2tuZXNzID0gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyA6IDY7XG5cdFx0dmFyIGJldmVsU2l6ZSA9IG9wdGlvbnMuYmV2ZWxTaXplICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2l6ZSA6IGJldmVsVGhpY2tuZXNzIC0gMjtcblx0XHR2YXIgYmV2ZWxTZWdtZW50cyA9IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFNlZ21lbnRzIDogMztcblxuXHRcdHZhciBleHRydWRlUGF0aCA9IG9wdGlvbnMuZXh0cnVkZVBhdGg7XG5cblx0XHR2YXIgdXZnZW4gPSBvcHRpb25zLlVWR2VuZXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLlVWR2VuZXJhdG9yIDogV29ybGRVVkdlbmVyYXRvcjtcblxuXHRcdC8vIGRlcHJlY2F0ZWQgb3B0aW9uc1xuXG5cdFx0aWYgKCBvcHRpb25zLmFtb3VudCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IGFtb3VudCBoYXMgYmVlbiByZW5hbWVkIHRvIGRlcHRoLicgKTtcblx0XHRcdGRlcHRoID0gb3B0aW9ucy5hbW91bnQ7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dmFyIGV4dHJ1ZGVQdHMsIGV4dHJ1ZGVCeVBhdGggPSBmYWxzZTtcblx0XHR2YXIgc3BsaW5lVHViZSwgYmlub3JtYWwsIG5vcm1hbCwgcG9zaXRpb24yO1xuXG5cdFx0aWYgKCBleHRydWRlUGF0aCApIHtcblxuXHRcdFx0ZXh0cnVkZVB0cyA9IGV4dHJ1ZGVQYXRoLmdldFNwYWNlZFBvaW50cyggc3RlcHMgKTtcblxuXHRcdFx0ZXh0cnVkZUJ5UGF0aCA9IHRydWU7XG5cdFx0XHRiZXZlbEVuYWJsZWQgPSBmYWxzZTsgLy8gYmV2ZWxzIG5vdCBzdXBwb3J0ZWQgZm9yIHBhdGggZXh0cnVzaW9uXG5cblx0XHRcdC8vIFNFVFVQIFROQiB2YXJpYWJsZXNcblxuXHRcdFx0Ly8gVE9ETzEgLSBoYXZlIGEgLmlzQ2xvc2VkIGluIHNwbGluZT9cblxuXHRcdFx0c3BsaW5lVHViZSA9IGV4dHJ1ZGVQYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHN0ZXBzLCBmYWxzZSApO1xuXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhzcGxpbmVUdWJlLCAnc3BsaW5lVHViZScsIHNwbGluZVR1YmUubm9ybWFscy5sZW5ndGgsICdzdGVwcycsIHN0ZXBzLCAnZXh0cnVkZVB0cycsIGV4dHJ1ZGVQdHMubGVuZ3RoKTtcblxuXHRcdFx0Ymlub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0bm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHBvc2l0aW9uMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHQvLyBTYWZlZ3VhcmRzIGlmIGJldmVscyBhcmUgbm90IGVuYWJsZWRcblxuXHRcdGlmICggISBiZXZlbEVuYWJsZWQgKSB7XG5cblx0XHRcdGJldmVsU2VnbWVudHMgPSAwO1xuXHRcdFx0YmV2ZWxUaGlja25lc3MgPSAwO1xuXHRcdFx0YmV2ZWxTaXplID0gMDtcblxuXHRcdH1cblxuXHRcdC8vIFZhcmlhYmxlcyBpbml0aWFsaXphdGlvblxuXG5cdFx0dmFyIGFob2xlLCBoLCBobDsgLy8gbG9vcGluZyBvZiBob2xlc1xuXG5cdFx0dmFyIHNoYXBlUG9pbnRzID0gc2hhcGUuZXh0cmFjdFBvaW50cyggY3VydmVTZWdtZW50cyApO1xuXG5cdFx0dmFyIHZlcnRpY2VzID0gc2hhcGVQb2ludHMuc2hhcGU7XG5cdFx0dmFyIGhvbGVzID0gc2hhcGVQb2ludHMuaG9sZXM7XG5cblx0XHR2YXIgcmV2ZXJzZSA9ICEgU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggdmVydGljZXMgKTtcblxuXHRcdGlmICggcmV2ZXJzZSApIHtcblxuXHRcdFx0dmVydGljZXMgPSB2ZXJ0aWNlcy5yZXZlcnNlKCk7XG5cblx0XHRcdC8vIE1heWJlIHdlIHNob3VsZCBhbHNvIGNoZWNrIGlmIGhvbGVzIGFyZSBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLCBqdXN0IHRvIGJlIHNhZmUgLi4uXG5cblx0XHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHRpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIGFob2xlICkgKSB7XG5cblx0XHRcdFx0XHRob2xlc1sgaCBdID0gYWhvbGUucmV2ZXJzZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHR2YXIgZmFjZXMgPSBTaGFwZVV0aWxzLnRyaWFuZ3VsYXRlU2hhcGUoIHZlcnRpY2VzLCBob2xlcyApO1xuXG5cdFx0LyogVmVydGljZXMgKi9cblxuXHRcdHZhciBjb250b3VyID0gdmVydGljZXM7IC8vIHZlcnRpY2VzIGhhcyBhbGwgcG9pbnRzIGJ1dCBjb250b3VyIGhhcyBvbmx5IHBvaW50cyBvZiBjaXJjdW1mZXJlbmNlXG5cblx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXG5cdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLmNvbmNhdCggYWhvbGUgKTtcblxuXHRcdH1cblxuXG5cdFx0ZnVuY3Rpb24gc2NhbGVQdDIoIHB0LCB2ZWMsIHNpemUgKSB7XG5cblx0XHRcdGlmICggISB2ZWMgKSBjb25zb2xlLmVycm9yKCBcIlRIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogdmVjIGRvZXMgbm90IGV4aXN0XCIgKTtcblxuXHRcdFx0cmV0dXJuIHZlYy5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKCBzaXplICkuYWRkKCBwdCApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGIsIGJzLCB0LCB6LFxuXHRcdFx0dmVydCwgdmxlbiA9IHZlcnRpY2VzLmxlbmd0aCxcblx0XHRcdGZhY2UsIGZsZW4gPSBmYWNlcy5sZW5ndGg7XG5cblxuXHRcdC8vIEZpbmQgZGlyZWN0aW9ucyBmb3IgcG9pbnQgbW92ZW1lbnRcblxuXG5cdFx0ZnVuY3Rpb24gZ2V0QmV2ZWxWZWMoIGluUHQsIGluUHJldiwgaW5OZXh0ICkge1xuXG5cdFx0XHQvLyBjb21wdXRlcyBmb3IgaW5QdCB0aGUgY29ycmVzcG9uZGluZyBwb2ludCBpblB0JyBvbiBhIG5ldyBjb250b3VyXG5cdFx0XHQvLyAgIHNoaWZ0ZWQgYnkgMSB1bml0IChsZW5ndGggb2Ygbm9ybWFsaXplZCB2ZWN0b3IpIHRvIHRoZSBsZWZ0XG5cdFx0XHQvLyBpZiB3ZSB3YWxrIGFsb25nIGNvbnRvdXIgY2xvY2t3aXNlLCB0aGlzIG5ldyBjb250b3VyIGlzIG91dHNpZGUgdGhlIG9sZCBvbmVcblx0XHRcdC8vXG5cdFx0XHQvLyBpblB0JyBpcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gbGluZXMgcGFyYWxsZWwgdG8gdGhlIHR3b1xuXHRcdFx0Ly8gIGFkamFjZW50IGVkZ2VzIG9mIGluUHQgYXQgYSBkaXN0YW5jZSBvZiAxIHVuaXQgb24gdGhlIGxlZnQgc2lkZS5cblxuXHRcdFx0dmFyIHZfdHJhbnNfeCwgdl90cmFuc195LCBzaHJpbmtfYnk7IC8vIHJlc3VsdGluZyB0cmFuc2xhdGlvbiB2ZWN0b3IgZm9yIGluUHRcblxuXHRcdFx0Ly8gZ29vZCByZWFkaW5nIGZvciBnZW9tZXRyeSBhbGdvcml0aG1zIChoZXJlOiBsaW5lLWxpbmUgaW50ZXJzZWN0aW9uKVxuXHRcdFx0Ly8gaHR0cDovL2dlb21hbGdvcml0aG1zLmNvbS9hMDUtX2ludGVyc2VjdC0xLmh0bWxcblxuXHRcdFx0dmFyIHZfcHJldl94ID0gaW5QdC54IC0gaW5QcmV2LngsXG5cdFx0XHRcdHZfcHJldl95ID0gaW5QdC55IC0gaW5QcmV2Lnk7XG5cdFx0XHR2YXIgdl9uZXh0X3ggPSBpbk5leHQueCAtIGluUHQueCxcblx0XHRcdFx0dl9uZXh0X3kgPSBpbk5leHQueSAtIGluUHQueTtcblxuXHRcdFx0dmFyIHZfcHJldl9sZW5zcSA9ICggdl9wcmV2X3ggKiB2X3ByZXZfeCArIHZfcHJldl95ICogdl9wcmV2X3kgKTtcblxuXHRcdFx0Ly8gY2hlY2sgZm9yIGNvbGxpbmVhciBlZGdlc1xuXHRcdFx0dmFyIGNvbGxpbmVhcjAgPSAoIHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94ICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIGNvbGxpbmVhcjAgKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdC8vIG5vdCBjb2xsaW5lYXJcblxuXHRcdFx0XHQvLyBsZW5ndGggb2YgdmVjdG9ycyBmb3Igbm9ybWFsaXppbmdcblxuXHRcdFx0XHR2YXIgdl9wcmV2X2xlbiA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cdFx0XHRcdHZhciB2X25leHRfbGVuID0gTWF0aC5zcXJ0KCB2X25leHRfeCAqIHZfbmV4dF94ICsgdl9uZXh0X3kgKiB2X25leHRfeSApO1xuXG5cdFx0XHRcdC8vIHNoaWZ0IGFkamFjZW50IHBvaW50cyBieSB1bml0IHZlY3RvcnMgdG8gdGhlIGxlZnRcblxuXHRcdFx0XHR2YXIgcHRQcmV2U2hpZnRfeCA9ICggaW5QcmV2LnggLSB2X3ByZXZfeSAvIHZfcHJldl9sZW4gKTtcblx0XHRcdFx0dmFyIHB0UHJldlNoaWZ0X3kgPSAoIGluUHJldi55ICsgdl9wcmV2X3ggLyB2X3ByZXZfbGVuICk7XG5cblx0XHRcdFx0dmFyIHB0TmV4dFNoaWZ0X3ggPSAoIGluTmV4dC54IC0gdl9uZXh0X3kgLyB2X25leHRfbGVuICk7XG5cdFx0XHRcdHZhciBwdE5leHRTaGlmdF95ID0gKCBpbk5leHQueSArIHZfbmV4dF94IC8gdl9uZXh0X2xlbiApO1xuXG5cdFx0XHRcdC8vIHNjYWxpbmcgZmFjdG9yIGZvciB2X3ByZXYgdG8gaW50ZXJzZWN0aW9uIHBvaW50XG5cblx0XHRcdFx0dmFyIHNmID0gKCAoIHB0TmV4dFNoaWZ0X3ggLSBwdFByZXZTaGlmdF94ICkgKiB2X25leHRfeSAtXG5cdFx0XHRcdFx0XHQoIHB0TmV4dFNoaWZ0X3kgLSBwdFByZXZTaGlmdF95ICkgKiB2X25leHRfeCApIC9cblx0XHRcdFx0XHQoIHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94ICk7XG5cblx0XHRcdFx0Ly8gdmVjdG9yIGZyb20gaW5QdCB0byBpbnRlcnNlY3Rpb24gcG9pbnRcblxuXHRcdFx0XHR2X3RyYW5zX3ggPSAoIHB0UHJldlNoaWZ0X3ggKyB2X3ByZXZfeCAqIHNmIC0gaW5QdC54ICk7XG5cdFx0XHRcdHZfdHJhbnNfeSA9ICggcHRQcmV2U2hpZnRfeSArIHZfcHJldl95ICogc2YgLSBpblB0LnkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBub3JtYWxpemUhLCBvdGhlcndpc2Ugc2hhcnAgY29ybmVycyBiZWNvbWUgdWdseVxuXHRcdFx0XHQvLyAgYnV0IHByZXZlbnQgY3Jhenkgc3Bpa2VzXG5cdFx0XHRcdHZhciB2X3RyYW5zX2xlbnNxID0gKCB2X3RyYW5zX3ggKiB2X3RyYW5zX3ggKyB2X3RyYW5zX3kgKiB2X3RyYW5zX3kgKTtcblx0XHRcdFx0aWYgKCB2X3RyYW5zX2xlbnNxIDw9IDIgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCwgdl90cmFuc195ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl90cmFuc19sZW5zcSAvIDIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gaGFuZGxlIHNwZWNpYWwgY2FzZSBvZiBjb2xsaW5lYXIgZWRnZXNcblxuXHRcdFx0XHR2YXIgZGlyZWN0aW9uX2VxID0gZmFsc2U7IC8vIGFzc3VtZXM6IG9wcG9zaXRlXG5cdFx0XHRcdGlmICggdl9wcmV2X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB2X3ByZXZfeCA8IC0gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPCAtIE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGlmICggTWF0aC5zaWduKCB2X3ByZXZfeSApID09PSBNYXRoLnNpZ24oIHZfbmV4dF95ICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRpcmVjdGlvbl9lcSApIHtcblxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiV2FybmluZzogbGluZXMgYXJlIGEgc3RyYWlnaHQgc2VxdWVuY2VcIik7XG5cdFx0XHRcdFx0dl90cmFuc194ID0gLSB2X3ByZXZfeTtcblx0XHRcdFx0XHR2X3RyYW5zX3kgPSB2X3ByZXZfeDtcblx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNwaWtlXCIpO1xuXHRcdFx0XHRcdHZfdHJhbnNfeCA9IHZfcHJldl94O1xuXHRcdFx0XHRcdHZfdHJhbnNfeSA9IHZfcHJldl95O1xuXHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxIC8gMiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCAvIHNocmlua19ieSwgdl90cmFuc195IC8gc2hyaW5rX2J5ICk7XG5cblx0XHR9XG5cblxuXHRcdHZhciBjb250b3VyTW92ZW1lbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGgsIGogPSBpbCAtIDEsIGsgPSBpICsgMTsgaSA8IGlsOyBpICsrLCBqICsrLCBrICsrICkge1xuXG5cdFx0XHRpZiAoIGogPT09IGlsICkgaiA9IDA7XG5cdFx0XHRpZiAoIGsgPT09IGlsICkgayA9IDA7XG5cblx0XHRcdC8vICAoaiktLS0oaSktLS0oaylcblx0XHRcdC8vIGNvbnNvbGUubG9nKCdpLGosaycsIGksIGogLCBrKVxuXG5cdFx0XHRjb250b3VyTW92ZW1lbnRzWyBpIF0gPSBnZXRCZXZlbFZlYyggY29udG91clsgaSBdLCBjb250b3VyWyBqIF0sIGNvbnRvdXJbIGsgXSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGhvbGVzTW92ZW1lbnRzID0gW10sXG5cdFx0XHRvbmVIb2xlTW92ZW1lbnRzLCB2ZXJ0aWNlc01vdmVtZW50cyA9IGNvbnRvdXJNb3ZlbWVudHMuY29uY2F0KCk7XG5cblx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXG5cdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gW107XG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBqID09PSBpbCApIGogPSAwO1xuXHRcdFx0XHRpZiAoIGsgPT09IGlsICkgayA9IDA7XG5cblx0XHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzWyBpIF0gPSBnZXRCZXZlbFZlYyggYWhvbGVbIGkgXSwgYWhvbGVbIGogXSwgYWhvbGVbIGsgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGhvbGVzTW92ZW1lbnRzLnB1c2goIG9uZUhvbGVNb3ZlbWVudHMgKTtcblx0XHRcdHZlcnRpY2VzTW92ZW1lbnRzID0gdmVydGljZXNNb3ZlbWVudHMuY29uY2F0KCBvbmVIb2xlTW92ZW1lbnRzICk7XG5cblx0XHR9XG5cblxuXHRcdC8vIExvb3AgYmV2ZWxTZWdtZW50cywgMSBmb3IgdGhlIGZyb250LCAxIGZvciB0aGUgYmFja1xuXG5cdFx0Zm9yICggYiA9IDA7IGIgPCBiZXZlbFNlZ21lbnRzOyBiICsrICkge1xuXG5cdFx0XHQvL2ZvciAoIGIgPSBiZXZlbFNlZ21lbnRzOyBiID4gMDsgYiAtLSApIHtcblxuXHRcdFx0dCA9IGIgLyBiZXZlbFNlZ21lbnRzO1xuXHRcdFx0eiA9IGJldmVsVGhpY2tuZXNzICogTWF0aC5jb3MoIHQgKiBNYXRoLlBJIC8gMiApO1xuXHRcdFx0YnMgPSBiZXZlbFNpemUgKiBNYXRoLnNpbiggdCAqIE1hdGguUEkgLyAyICk7XG5cblx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblxuXHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZXhwYW5kIGhvbGVzXG5cblx0XHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IGhvbGVzTW92ZW1lbnRzWyBoIF07XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2ZXJ0ID0gc2NhbGVQdDIoIGFob2xlWyBpIF0sIG9uZUhvbGVNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblxuXHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAtIHogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGJzID0gYmV2ZWxTaXplO1xuXG5cdFx0Ly8gQmFjayBmYWNpbmcgdmVydGljZXNcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0dmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcblxuXHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIDAgXS55LCBleHRydWRlUHRzWyAwIF0ueCApO1xuXG5cdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0Ymlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTtcblxuXHRcdFx0XHRwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgMCBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7XG5cblx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBBZGQgc3RlcHBlZCB2ZXJ0aWNlcy4uLlxuXHRcdC8vIEluY2x1ZGluZyBmcm9udCBmYWNpbmcgdmVydGljZXNcblxuXHRcdHZhciBzO1xuXG5cdFx0Zm9yICggcyA9IDE7IHMgPD0gc3RlcHM7IHMgKysgKSB7XG5cblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHR2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoIC8gc3RlcHMgKiBzICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgcyAtIDEgXS55LCBleHRydWRlUHRzWyBzIC0gMSBdLnggKTtcblxuXHRcdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIHMgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdFx0cG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIHMgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApO1xuXG5cdFx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHQvLyBBZGQgYmV2ZWwgc2VnbWVudHMgcGxhbmVzXG5cblx0XHQvL2ZvciAoIGIgPSAxOyBiIDw9IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cdFx0Zm9yICggYiA9IGJldmVsU2VnbWVudHMgLSAxOyBiID49IDA7IGIgLS0gKSB7XG5cblx0XHRcdHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcblx0XHRcdHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKCB0ICogTWF0aC5QSSAvIDIgKTtcblx0XHRcdGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4oIHQgKiBNYXRoLlBJIC8gMiApO1xuXG5cdFx0XHQvLyBjb250cmFjdCBzaGFwZVxuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZlcnQgPSBzY2FsZVB0MiggY29udG91clsgaSBdLCBjb250b3VyTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCArIHogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBleHBhbmQgaG9sZXNcblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZlcnQgPSBzY2FsZVB0MiggYWhvbGVbIGkgXSwgb25lSG9sZU1vdmVtZW50c1sgaSBdLCBicyApO1xuXG5cdFx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCArIHogKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgc3RlcHMgLSAxIF0ueSwgZXh0cnVkZVB0c1sgc3RlcHMgLSAxIF0ueCArIHogKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8qIEZhY2VzICovXG5cblx0XHQvLyBUb3AgYW5kIGJvdHRvbSBmYWNlc1xuXG5cdFx0YnVpbGRMaWRGYWNlcygpO1xuXG5cdFx0Ly8gU2lkZXMgZmFjZXNcblxuXHRcdGJ1aWxkU2lkZUZhY2VzKCk7XG5cblxuXHRcdC8vLy8vICBJbnRlcm5hbCBmdW5jdGlvbnNcblxuXHRcdGZ1bmN0aW9uIGJ1aWxkTGlkRmFjZXMoKSB7XG5cblx0XHRcdHZhciBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblxuXHRcdFx0aWYgKCBiZXZlbEVuYWJsZWQgKSB7XG5cblx0XHRcdFx0dmFyIGxheWVyID0gMDsgLy8gc3RlcHMgKyAxXG5cdFx0XHRcdHZhciBvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0Ly8gQm90dG9tIGZhY2VzXG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdFx0ZmFjZSA9IGZhY2VzWyBpIF07XG5cdFx0XHRcdFx0ZjMoIGZhY2VbIDIgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAwIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGF5ZXIgPSBzdGVwcyArIGJldmVsU2VnbWVudHMgKiAyO1xuXHRcdFx0XHRvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0Ly8gVG9wIGZhY2VzXG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdFx0ZmFjZSA9IGZhY2VzWyBpIF07XG5cdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAyIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gQm90dG9tIGZhY2VzXG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdFx0ZmFjZSA9IGZhY2VzWyBpIF07XG5cdFx0XHRcdFx0ZjMoIGZhY2VbIDIgXSwgZmFjZVsgMSBdLCBmYWNlWyAwIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVG9wIGZhY2VzXG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdFx0ZmFjZSA9IGZhY2VzWyBpIF07XG5cdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIHZsZW4gKiBzdGVwcywgZmFjZVsgMSBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAyIF0gKyB2bGVuICogc3RlcHMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGZhY2VzIGZvciB0aGUgei1zaWRlcyBvZiB0aGUgc2hhcGVcblxuXHRcdGZ1bmN0aW9uIGJ1aWxkU2lkZUZhY2VzKCkge1xuXG5cdFx0XHR2YXIgc3RhcnQgPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHR2YXIgbGF5ZXJvZmZzZXQgPSAwO1xuXHRcdFx0c2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApO1xuXHRcdFx0bGF5ZXJvZmZzZXQgKz0gY29udG91ci5sZW5ndGg7XG5cblx0XHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0c2lkZXdhbGxzKCBhaG9sZSwgbGF5ZXJvZmZzZXQgKTtcblxuXHRcdFx0XHQvLywgdHJ1ZVxuXHRcdFx0XHRsYXllcm9mZnNldCArPSBhaG9sZS5sZW5ndGg7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAxICk7XG5cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNpZGV3YWxscyggY29udG91ciwgbGF5ZXJvZmZzZXQgKSB7XG5cblx0XHRcdHZhciBqLCBrO1xuXHRcdFx0aSA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIC0tIGkgPj0gMCApIHtcblxuXHRcdFx0XHRqID0gaTtcblx0XHRcdFx0ayA9IGkgLSAxO1xuXHRcdFx0XHRpZiAoIGsgPCAwICkgayA9IGNvbnRvdXIubGVuZ3RoIC0gMTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdiJywgaSxqLCBpLTEsIGssdmVydGljZXMubGVuZ3RoKTtcblxuXHRcdFx0XHR2YXIgcyA9IDAsXG5cdFx0XHRcdFx0c2wgPSBzdGVwcyArIGJldmVsU2VnbWVudHMgKiAyO1xuXG5cdFx0XHRcdGZvciAoIHMgPSAwOyBzIDwgc2w7IHMgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2xlbjEgPSB2bGVuICogcztcblx0XHRcdFx0XHR2YXIgc2xlbjIgPSB2bGVuICogKCBzICsgMSApO1xuXG5cdFx0XHRcdFx0dmFyIGEgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMSxcblx0XHRcdFx0XHRcdGIgPSBsYXllcm9mZnNldCArIGsgKyBzbGVuMSxcblx0XHRcdFx0XHRcdGMgPSBsYXllcm9mZnNldCArIGsgKyBzbGVuMixcblx0XHRcdFx0XHRcdGQgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMjtcblxuXHRcdFx0XHRcdGY0KCBhLCBiLCBjLCBkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiB2KCB4LCB5LCB6ICkge1xuXG5cdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB4ICk7XG5cdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB5ICk7XG5cdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB6ICk7XG5cblx0XHR9XG5cblxuXHRcdGZ1bmN0aW9uIGYzKCBhLCBiLCBjICkge1xuXG5cdFx0XHRhZGRWZXJ0ZXgoIGEgKTtcblx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0YWRkVmVydGV4KCBjICk7XG5cblx0XHRcdHZhciBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHR2YXIgdXZzID0gdXZnZW4uZ2VuZXJhdGVUb3BVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTtcblxuXHRcdFx0YWRkVVYoIHV2c1sgMCBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAxIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDIgXSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZjQoIGEsIGIsIGMsIGQgKSB7XG5cblx0XHRcdGFkZFZlcnRleCggYSApO1xuXHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGQgKTtcblxuXHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblx0XHRcdGFkZFZlcnRleCggZCApO1xuXG5cblx0XHRcdHZhciBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHR2YXIgdXZzID0gdXZnZW4uZ2VuZXJhdGVTaWRlV2FsbFVWKCBzY29wZSwgdmVydGljZXNBcnJheSwgbmV4dEluZGV4IC0gNiwgbmV4dEluZGV4IC0gMywgbmV4dEluZGV4IC0gMiwgbmV4dEluZGV4IC0gMSApO1xuXG5cdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMyBdICk7XG5cblx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMiBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAzIF0gKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZFZlcnRleCggaW5kZXggKSB7XG5cblx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDAgXSApO1xuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMSBdICk7XG5cdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAyIF0gKTtcblxuXHRcdH1cblxuXG5cdFx0ZnVuY3Rpb24gYWRkVVYoIHZlY3RvcjIgKSB7XG5cblx0XHRcdHV2QXJyYXkucHVzaCggdmVjdG9yMi54ICk7XG5cdFx0XHR1dkFycmF5LnB1c2goIHZlY3RvcjIueSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5FeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5FeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5O1xuXG5FeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXHR2YXIgb3B0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5vcHRpb25zO1xuXG5cdHJldHVybiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApO1xuXG59O1xuXG4vL1xuXG52YXIgV29ybGRVVkdlbmVyYXRvciA9IHtcblxuXHRnZW5lcmF0ZVRvcFVWOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCB2ZXJ0aWNlcywgaW5kZXhBLCBpbmRleEIsIGluZGV4QyApIHtcblxuXHRcdHZhciBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdHZhciBhX3kgPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDEgXTtcblx0XHR2YXIgYl94ID0gdmVydGljZXNbIGluZGV4QiAqIDMgXTtcblx0XHR2YXIgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07XG5cdFx0dmFyIGNfeCA9IHZlcnRpY2VzWyBpbmRleEMgKiAzIF07XG5cdFx0dmFyIGNfeSA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMSBdO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIGFfeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgYl95ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggY194LCBjX3kgKVxuXHRcdF07XG5cblx0fSxcblxuXHRnZW5lcmF0ZVNpZGVXYWxsVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDLCBpbmRleEQgKSB7XG5cblx0XHR2YXIgYV94ID0gdmVydGljZXNbIGluZGV4QSAqIDMgXTtcblx0XHR2YXIgYV95ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAxIF07XG5cdFx0dmFyIGFfeiA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMiBdO1xuXHRcdHZhciBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdO1xuXHRcdHZhciBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTtcblx0XHR2YXIgYl96ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAyIF07XG5cdFx0dmFyIGNfeCA9IHZlcnRpY2VzWyBpbmRleEMgKiAzIF07XG5cdFx0dmFyIGNfeSA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMSBdO1xuXHRcdHZhciBjX3ogPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDIgXTtcblx0XHR2YXIgZF94ID0gdmVydGljZXNbIGluZGV4RCAqIDMgXTtcblx0XHR2YXIgZF95ID0gdmVydGljZXNbIGluZGV4RCAqIDMgKyAxIF07XG5cdFx0dmFyIGRfeiA9IHZlcnRpY2VzWyBpbmRleEQgKiAzICsgMiBdO1xuXG5cdFx0aWYgKCBNYXRoLmFicyggYV95IC0gYl95ICkgPCAwLjAxICkge1xuXG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRuZXcgVmVjdG9yMiggYV94LCAxIC0gYV96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBiX3gsIDEgLSBiX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeCwgMSAtIGNfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggZF94LCAxIC0gZF96IClcblx0XHRcdF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRuZXcgVmVjdG9yMiggYV95LCAxIC0gYV96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBiX3ksIDEgLSBiX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeSwgMSAtIGNfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggZF95LCAxIC0gZF96IClcblx0XHRcdF07XG5cblx0XHR9XG5cblx0fVxufTtcblxuZnVuY3Rpb24gdG9KU09OKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKSB7XG5cblx0Ly9cblxuXHRkYXRhLnNoYXBlcyA9IFtdO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRpZiAoIG9wdGlvbnMuZXh0cnVkZVBhdGggIT09IHVuZGVmaW5lZCApIGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG9wdGlvbnMuZXh0cnVkZVBhdGgudG9KU09OKCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIFRleHQgPSAzRCBUZXh0XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBmb250OiA8VEhSRUUuRm9udD4sIC8vIGZvbnRcbiAqXG4gKiAgc2l6ZTogPGZsb2F0PiwgLy8gc2l6ZSBvZiB0aGUgdGV4dFxuICogIGhlaWdodDogPGZsb2F0PiwgLy8gdGhpY2tuZXNzIHRvIGV4dHJ1ZGUgdGV4dFxuICogIGN1cnZlU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIG9uIHRoZSBjdXJ2ZXNcbiAqXG4gKiAgYmV2ZWxFbmFibGVkOiA8Ym9vbD4sIC8vIHR1cm4gb24gYmV2ZWxcbiAqICBiZXZlbFRoaWNrbmVzczogPGZsb2F0PiwgLy8gaG93IGRlZXAgaW50byB0ZXh0IGJldmVsIGdvZXNcbiAqICBiZXZlbFNpemU6IDxmbG9hdD4gLy8gaG93IGZhciBmcm9tIHRleHQgb3V0bGluZSBpcyBiZXZlbFxuICogfVxuICovXG5cbi8vIFRleHRHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXh0R2VvbWV0cnkoIHRleHQsIHBhcmFtZXRlcnMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXh0R2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR0ZXh0OiB0ZXh0LFxuXHRcdHBhcmFtZXRlcnM6IHBhcmFtZXRlcnNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRleHRCdWZmZXJHZW9tZXRyeSggdGV4dCwgcGFyYW1ldGVycyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRleHRHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRleHRHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0R2VvbWV0cnk7XG5cbi8vIFRleHRCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXh0QnVmZmVyR2VvbWV0cnkoIHRleHQsIHBhcmFtZXRlcnMgKSB7XG5cblx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XG5cblx0dmFyIGZvbnQgPSBwYXJhbWV0ZXJzLmZvbnQ7XG5cblx0aWYgKCAhICggZm9udCAmJiBmb250LmlzRm9udCApICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlRleHRHZW9tZXRyeTogZm9udCBwYXJhbWV0ZXIgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkZvbnQuJyApO1xuXHRcdHJldHVybiBuZXcgR2VvbWV0cnkoKTtcblxuXHR9XG5cblx0dmFyIHNoYXBlcyA9IGZvbnQuZ2VuZXJhdGVTaGFwZXMoIHRleHQsIHBhcmFtZXRlcnMuc2l6ZSApO1xuXG5cdC8vIHRyYW5zbGF0ZSBwYXJhbWV0ZXJzIHRvIEV4dHJ1ZGVHZW9tZXRyeSBBUElcblxuXHRwYXJhbWV0ZXJzLmRlcHRoID0gcGFyYW1ldGVycy5oZWlnaHQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuaGVpZ2h0IDogNTA7XG5cblx0Ly8gZGVmYXVsdHNcblxuXHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxUaGlja25lc3MgPT09IHVuZGVmaW5lZCApIHBhcmFtZXRlcnMuYmV2ZWxUaGlja25lc3MgPSAxMDtcblx0aWYgKCBwYXJhbWV0ZXJzLmJldmVsU2l6ZSA9PT0gdW5kZWZpbmVkICkgcGFyYW1ldGVycy5iZXZlbFNpemUgPSA4O1xuXHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxFbmFibGVkID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsRW5hYmxlZCA9IGZhbHNlO1xuXG5cdEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCBzaGFwZXMsIHBhcmFtZXRlcnMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV4dEJ1ZmZlckdlb21ldHJ5JztcblxufVxuXG5UZXh0QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVGV4dEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFNwaGVyZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNwaGVyZUdlb21ldHJ5KCByYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NwaGVyZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBTcGhlcmVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5TcGhlcmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNwaGVyZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZUdlb21ldHJ5O1xuXG4vLyBTcGhlcmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBTcGhlcmVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTcGhlcmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXG5cdHdpZHRoU2VnbWVudHMgPSBNYXRoLm1heCggMywgTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApIHx8IDggKTtcblx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLm1heCggMiwgTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCA2ICk7XG5cblx0cGhpU3RhcnQgPSBwaGlTdGFydCAhPT0gdW5kZWZpbmVkID8gcGhpU3RhcnQgOiAwO1xuXHRwaGlMZW5ndGggPSBwaGlMZW5ndGggIT09IHVuZGVmaW5lZCA/IHBoaUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJO1xuXG5cdHZhciB0aGV0YUVuZCA9IHRoZXRhU3RhcnQgKyB0aGV0YUxlbmd0aDtcblxuXHR2YXIgaXgsIGl5O1xuXG5cdHZhciBpbmRleCA9IDA7XG5cdHZhciBncmlkID0gW107XG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDw9IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdHZhciB2ZXJ0aWNlc1JvdyA9IFtdO1xuXG5cdFx0dmFyIHYgPSBpeSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8PSB3aWR0aFNlZ21lbnRzOyBpeCArKyApIHtcblxuXHRcdFx0dmFyIHUgPSBpeCAvIHdpZHRoU2VnbWVudHM7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IC0gcmFkaXVzICogTWF0aC5jb3MoIHBoaVN0YXJ0ICsgdSAqIHBoaUxlbmd0aCApICogTWF0aC5zaW4oIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcblx0XHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcblx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogTWF0aC5zaW4oIHBoaVN0YXJ0ICsgdSAqIHBoaUxlbmd0aCApICogTWF0aC5zaW4oIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0bm9ybWFsLnNldCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2cy5wdXNoKCB1LCAxIC0gdiApO1xuXG5cdFx0XHR2ZXJ0aWNlc1Jvdy5wdXNoKCBpbmRleCArKyApO1xuXG5cdFx0fVxuXG5cdFx0Z3JpZC5wdXNoKCB2ZXJ0aWNlc1JvdyApO1xuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaXkgPSAwOyBpeSA8IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPCB3aWR0aFNlZ21lbnRzOyBpeCArKyApIHtcblxuXHRcdFx0dmFyIGEgPSBncmlkWyBpeSBdWyBpeCArIDEgXTtcblx0XHRcdHZhciBiID0gZ3JpZFsgaXkgXVsgaXggXTtcblx0XHRcdHZhciBjID0gZ3JpZFsgaXkgKyAxIF1bIGl4IF07XG5cdFx0XHR2YXIgZCA9IGdyaWRbIGl5ICsgMSBdWyBpeCArIDEgXTtcblxuXHRcdFx0aWYgKCBpeSAhPT0gMCB8fCB0aGV0YVN0YXJ0ID4gMCApIGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aWYgKCBpeSAhPT0gaGVpZ2h0U2VnbWVudHMgLSAxIHx8IHRoZXRhRW5kIDwgTWF0aC5QSSApIGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuU3BoZXJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5TcGhlcmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcGhlcmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIEthbGViIE11cnBoeVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBSaW5nR2VvbWV0cnlcblxuZnVuY3Rpb24gUmluZ0dlb21ldHJ5KCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHRoZXRhU2VnbWVudHMsIHBoaVNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1JpbmdHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyxcblx0XHRvdXRlclJhZGl1czogb3V0ZXJSYWRpdXMsXG5cdFx0dGhldGFTZWdtZW50czogdGhldGFTZWdtZW50cyxcblx0XHRwaGlTZWdtZW50czogcGhpU2VnbWVudHMsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFJpbmdCdWZmZXJHZW9tZXRyeSggaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCB0aGV0YVNlZ21lbnRzLCBwaGlTZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5SaW5nR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5SaW5nR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmluZ0dlb21ldHJ5O1xuXG4vLyBSaW5nQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUmluZ0J1ZmZlckdlb21ldHJ5KCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHRoZXRhU2VnbWVudHMsIHBoaVNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1JpbmdCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyxcblx0XHRvdXRlclJhZGl1czogb3V0ZXJSYWRpdXMsXG5cdFx0dGhldGFTZWdtZW50czogdGhldGFTZWdtZW50cyxcblx0XHRwaGlTZWdtZW50czogcGhpU2VnbWVudHMsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHRpbm5lclJhZGl1cyA9IGlubmVyUmFkaXVzIHx8IDAuNTtcblx0b3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyB8fCAxO1xuXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJICogMjtcblxuXHR0aGV0YVNlZ21lbnRzID0gdGhldGFTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoIDMsIHRoZXRhU2VnbWVudHMgKSA6IDg7XG5cdHBoaVNlZ21lbnRzID0gcGhpU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IE1hdGgubWF4KCAxLCBwaGlTZWdtZW50cyApIDogMTtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBzb21lIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgc2VnbWVudDtcblx0dmFyIHJhZGl1cyA9IGlubmVyUmFkaXVzO1xuXHR2YXIgcmFkaXVzU3RlcCA9ICggKCBvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzICkgLyBwaGlTZWdtZW50cyApO1xuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0dmFyIGosIGk7XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGogPSAwOyBqIDw9IHBoaVNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPD0gdGhldGFTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Ly8gdmFsdWVzIGFyZSBnZW5lcmF0ZSBmcm9tIHRoZSBpbnNpZGUgb2YgdGhlIHJpbmcgdG8gdGhlIG91dHNpZGVcblxuXHRcdFx0c2VnbWVudCA9IHRoZXRhU3RhcnQgKyBpIC8gdGhldGFTZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBNYXRoLmNvcyggc2VnbWVudCApO1xuXHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbiggc2VnbWVudCApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXYueCA9ICggdmVydGV4LnggLyBvdXRlclJhZGl1cyArIDEgKSAvIDI7XG5cdFx0XHR1di55ID0gKCB2ZXJ0ZXgueSAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcblxuXHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGluY3JlYXNlIHRoZSByYWRpdXMgZm9yIG5leHQgcm93IG9mIHZlcnRpY2VzXG5cblx0XHRyYWRpdXMgKz0gcmFkaXVzU3RlcDtcblxuXHR9XG5cblx0Ly8gaW5kaWNlc1xuXG5cdGZvciAoIGogPSAwOyBqIDwgcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHR2YXIgdGhldGFTZWdtZW50TGV2ZWwgPSBqICogKCB0aGV0YVNlZ21lbnRzICsgMSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCB0aGV0YVNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRzZWdtZW50ID0gaSArIHRoZXRhU2VnbWVudExldmVsO1xuXG5cdFx0XHR2YXIgYSA9IHNlZ21lbnQ7XG5cdFx0XHR2YXIgYiA9IHNlZ21lbnQgKyB0aGV0YVNlZ21lbnRzICsgMTtcblx0XHRcdHZhciBjID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAyO1xuXHRcdFx0dmFyIGQgPSBzZWdtZW50ICsgMTtcblxuXHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG59XG5cblJpbmdCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblJpbmdCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSaW5nQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gTGF0aGVHZW9tZXRyeVxuXG5mdW5jdGlvbiBMYXRoZUdlb21ldHJ5KCBwb2ludHMsIHNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGF0aGVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHBvaW50czogcG9pbnRzLFxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IExhdGhlQnVmZmVyR2VvbWV0cnkoIHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuTGF0aGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXRoZUdlb21ldHJ5O1xuXG4vLyBMYXRoZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIExhdGhlQnVmZmVyR2VvbWV0cnkoIHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMYXRoZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cG9pbnRzOiBwb2ludHMsXG5cdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aFxuXHR9O1xuXG5cdHNlZ21lbnRzID0gTWF0aC5mbG9vciggc2VnbWVudHMgKSB8fCAxMjtcblx0cGhpU3RhcnQgPSBwaGlTdGFydCB8fCAwO1xuXHRwaGlMZW5ndGggPSBwaGlMZW5ndGggfHwgTWF0aC5QSSAqIDI7XG5cblx0Ly8gY2xhbXAgcGhpTGVuZ3RoIHNvIGl0J3MgaW4gcmFuZ2Ugb2YgWyAwLCAyUEkgXVxuXG5cdHBoaUxlbmd0aCA9IF9NYXRoLmNsYW1wKCBwaGlMZW5ndGgsIDAsIE1hdGguUEkgKiAyICk7XG5cblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGJhc2U7XG5cdHZhciBpbnZlcnNlU2VnbWVudHMgPSAxLjAgLyBzZWdtZW50cztcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBpLCBqO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzIGFuZCB1dnNcblxuXHRmb3IgKCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdHZhciBwaGkgPSBwaGlTdGFydCArIGkgKiBpbnZlcnNlU2VnbWVudHMgKiBwaGlMZW5ndGg7XG5cblx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHBoaSApO1xuXHRcdHZhciBjb3MgPSBNYXRoLmNvcyggcGhpICk7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IHBvaW50c1sgaiBdLnggKiBzaW47XG5cdFx0XHR2ZXJ0ZXgueSA9IHBvaW50c1sgaiBdLnk7XG5cdFx0XHR2ZXJ0ZXgueiA9IHBvaW50c1sgaiBdLnggKiBjb3M7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXYueCA9IGkgLyBzZWdtZW50cztcblx0XHRcdHV2LnkgPSBqIC8gKCBwb2ludHMubGVuZ3RoIC0gMSApO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0Zm9yICggaiA9IDA7IGogPCAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdGJhc2UgPSBqICsgaSAqIHBvaW50cy5sZW5ndGg7XG5cblx0XHRcdHZhciBhID0gYmFzZTtcblx0XHRcdHZhciBiID0gYmFzZSArIHBvaW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgYyA9IGJhc2UgKyBwb2ludHMubGVuZ3RoICsgMTtcblx0XHRcdHZhciBkID0gYmFzZSArIDE7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdC8vIGdlbmVyYXRlIG5vcm1hbHNcblxuXHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cblx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZCwgd2UgbmVlZCB0byBhdmVyYWdlIHRoZSBub3JtYWxzIGFsb25nIHRoZSBzZWFtLlxuXHQvLyBiZWNhdXNlIHRoZSBjb3JyZXNwb25kaW5nIHZlcnRpY2VzIGFyZSBpZGVudGljYWwgKGJ1dCBzdGlsbCBoYXZlIGRpZmZlcmVudCBVVnMpLlxuXG5cdGlmICggcGhpTGVuZ3RoID09PSBNYXRoLlBJICogMiApIHtcblxuXHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTtcblx0XHR2YXIgbjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBuMiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG4gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gdGhpcyBpcyB0aGUgYnVmZmVyIG9mZnNldCBmb3IgdGhlIGxhc3QgbGluZSBvZiB2ZXJ0aWNlc1xuXG5cdFx0YmFzZSA9IHNlZ21lbnRzICogcG9pbnRzLmxlbmd0aCAqIDM7XG5cblx0XHRmb3IgKCBpID0gMCwgaiA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICsrLCBqICs9IDMgKSB7XG5cblx0XHRcdC8vIHNlbGVjdCB0aGUgbm9ybWFsIG9mIHRoZSB2ZXJ0ZXggaW4gdGhlIGZpcnN0IGxpbmVcblxuXHRcdFx0bjEueCA9IG5vcm1hbHNbIGogKyAwIF07XG5cdFx0XHRuMS55ID0gbm9ybWFsc1sgaiArIDEgXTtcblx0XHRcdG4xLnogPSBub3JtYWxzWyBqICsgMiBdO1xuXG5cdFx0XHQvLyBzZWxlY3QgdGhlIG5vcm1hbCBvZiB0aGUgdmVydGV4IGluIHRoZSBsYXN0IGxpbmVcblxuXHRcdFx0bjIueCA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMCBdO1xuXHRcdFx0bjIueSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMSBdO1xuXHRcdFx0bjIueiA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMiBdO1xuXG5cdFx0XHQvLyBhdmVyYWdlIG5vcm1hbHNcblxuXHRcdFx0bi5hZGRWZWN0b3JzKCBuMSwgbjIgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Ly8gYXNzaWduIHRoZSBuZXcgdmFsdWVzIHRvIGJvdGggbm9ybWFsc1xuXG5cdFx0XHRub3JtYWxzWyBqICsgMCBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAwIF0gPSBuLng7XG5cdFx0XHRub3JtYWxzWyBqICsgMSBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAxIF0gPSBuLnk7XG5cdFx0XHRub3JtYWxzWyBqICsgMiBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAyIF0gPSBuLno7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkxhdGhlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5MYXRoZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBqb25vYnIxIC8gaHR0cDovL2pvbm9icjEuY29tXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFNoYXBlR2VvbWV0cnlcblxuZnVuY3Rpb24gU2hhcGVHZW9tZXRyeSggc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGVHZW9tZXRyeSc7XG5cblx0aWYgKCB0eXBlb2YgY3VydmVTZWdtZW50cyA9PT0gJ29iamVjdCcgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZUdlb21ldHJ5OiBPcHRpb25zIHBhcmFtZXRlciBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdGN1cnZlU2VnbWVudHMgPSBjdXJ2ZVNlZ21lbnRzLmN1cnZlU2VnbWVudHM7XG5cblx0fVxuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRjdXJ2ZVNlZ21lbnRzOiBjdXJ2ZVNlZ21lbnRzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBTaGFwZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIGN1cnZlU2VnbWVudHMgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFwZUdlb21ldHJ5O1xuXG5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHR2YXIgc2hhcGVzID0gdGhpcy5wYXJhbWV0ZXJzLnNoYXBlcztcblxuXHRyZXR1cm4gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApO1xuXG59O1xuXG4vLyBTaGFwZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNoYXBlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgY3VydmVTZWdtZW50cyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NoYXBlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRjdXJ2ZVNlZ21lbnRzOiBjdXJ2ZVNlZ21lbnRzXG5cdH07XG5cblx0Y3VydmVTZWdtZW50cyA9IGN1cnZlU2VnbWVudHMgfHwgMTI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblx0dmFyIGdyb3VwQ291bnQgPSAwO1xuXG5cdC8vIGFsbG93IHNpbmdsZSBhbmQgYXJyYXkgdmFsdWVzIGZvciBcInNoYXBlc1wiIHBhcmFtZXRlclxuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPT09IGZhbHNlICkge1xuXG5cdFx0YWRkU2hhcGUoIHNoYXBlcyApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaGFwZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRhZGRTaGFwZSggc2hhcGVzWyBpIF0gKTtcblxuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgaSApOyAvLyBlbmFibGVzIE11bHRpTWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cdFx0XHRncm91cENvdW50ID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIGFkZFNoYXBlKCBzaGFwZSApIHtcblxuXHRcdHZhciBpLCBsLCBzaGFwZUhvbGU7XG5cblx0XHR2YXIgaW5kZXhPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAzO1xuXHRcdHZhciBwb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XG5cblx0XHR2YXIgc2hhcGVWZXJ0aWNlcyA9IHBvaW50cy5zaGFwZTtcblx0XHR2YXIgc2hhcGVIb2xlcyA9IHBvaW50cy5ob2xlcztcblxuXHRcdC8vIGNoZWNrIGRpcmVjdGlvbiBvZiB2ZXJ0aWNlc1xuXG5cdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZVZlcnRpY2VzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5yZXZlcnNlKCk7XG5cblx0XHRcdC8vIGFsc28gY2hlY2sgaWYgaG9sZXMgYXJlIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb25cblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0c2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggc2hhcGVIb2xlICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzaGFwZUhvbGVzWyBpIF0gPSBzaGFwZUhvbGUucmV2ZXJzZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGZhY2VzID0gU2hhcGVVdGlscy50cmlhbmd1bGF0ZVNoYXBlKCBzaGFwZVZlcnRpY2VzLCBzaGFwZUhvbGVzICk7XG5cblx0XHQvLyBqb2luIHZlcnRpY2VzIG9mIGlubmVyIGFuZCBvdXRlciBwYXRocyB0byBhIHNpbmdsZSBhcnJheVxuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTtcblx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLmNvbmNhdCggc2hhcGVIb2xlICk7XG5cblx0XHR9XG5cblx0XHQvLyB2ZXJ0aWNlcywgbm9ybWFscywgdXZzXG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IHNoYXBlVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHNoYXBlVmVydGljZXNbIGkgXTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCAwICk7XG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblx0XHRcdHV2cy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnkgKTsgLy8gd29ybGQgdXZzXG5cblx0XHR9XG5cblx0XHQvLyBpbmNpZGVzXG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0dmFyIGEgPSBmYWNlWyAwIF0gKyBpbmRleE9mZnNldDtcblx0XHRcdHZhciBiID0gZmFjZVsgMSBdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHR2YXIgYyA9IGZhY2VbIDIgXSArIGluZGV4T2Zmc2V0O1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGMgKTtcblx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhcGVCdWZmZXJHZW9tZXRyeTtcblxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cblx0cmV0dXJuIHRvSlNPTiQxKCBzaGFwZXMsIGRhdGEgKTtcblxufTtcblxuLy9cblxuZnVuY3Rpb24gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApIHtcblxuXHRkYXRhLnNoYXBlcyA9IFtdO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcblxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gRWRnZXNHZW9tZXRyeSggZ2VvbWV0cnksIHRocmVzaG9sZEFuZ2xlICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRWRnZXNHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHRocmVzaG9sZEFuZ2xlOiB0aHJlc2hvbGRBbmdsZVxuXHR9O1xuXG5cdHRocmVzaG9sZEFuZ2xlID0gKCB0aHJlc2hvbGRBbmdsZSAhPT0gdW5kZWZpbmVkICkgPyB0aHJlc2hvbGRBbmdsZSA6IDE7XG5cblx0Ly8gYnVmZmVyXG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciB0aHJlc2hvbGREb3QgPSBNYXRoLmNvcyggX01hdGguREVHMlJBRCAqIHRocmVzaG9sZEFuZ2xlICk7XG5cdHZhciBlZGdlID0gWyAwLCAwIF0sIGVkZ2VzID0ge30sIGVkZ2UxLCBlZGdlMjtcblx0dmFyIGtleSwga2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdO1xuXG5cdC8vIHByZXBhcmUgc291cmNlIGdlb21ldHJ5XG5cblx0dmFyIGdlb21ldHJ5MjtcblxuXHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRnZW9tZXRyeTIgPSBuZXcgR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeTIuZnJvbUJ1ZmZlckdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRnZW9tZXRyeTIgPSBnZW9tZXRyeS5jbG9uZSgpO1xuXG5cdH1cblxuXHRnZW9tZXRyeTIubWVyZ2VWZXJ0aWNlcygpO1xuXHRnZW9tZXRyeTIuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0dmFyIHNvdXJjZVZlcnRpY2VzID0gZ2VvbWV0cnkyLnZlcnRpY2VzO1xuXHR2YXIgZmFjZXMgPSBnZW9tZXRyeTIuZmFjZXM7XG5cblx0Ly8gbm93IGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHdoZXJlIGVhY2ggZW50cnkgcmVwcmVzZW50cyBhbiBlZGdlIHdpdGggaXRzIGFkam9pbmluZyBmYWNlc1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRlZGdlMSA9IGZhY2VbIGtleXNbIGogXSBdO1xuXHRcdFx0ZWRnZTIgPSBmYWNlWyBrZXlzWyAoIGogKyAxICkgJSAzIF0gXTtcblx0XHRcdGVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTtcblx0XHRcdGVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0a2V5ID0gZWRnZVsgMCBdICsgJywnICsgZWRnZVsgMSBdO1xuXG5cdFx0XHRpZiAoIGVkZ2VzWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGVkZ2VzWyBrZXkgXSA9IHsgaW5kZXgxOiBlZGdlWyAwIF0sIGluZGV4MjogZWRnZVsgMSBdLCBmYWNlMTogaSwgZmFjZTI6IHVuZGVmaW5lZCB9O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGVkZ2VzWyBrZXkgXS5mYWNlMiA9IGk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXNcblxuXHRmb3IgKCBrZXkgaW4gZWRnZXMgKSB7XG5cblx0XHR2YXIgZSA9IGVkZ2VzWyBrZXkgXTtcblxuXHRcdC8vIGFuIGVkZ2UgaXMgb25seSByZW5kZXJlZCBpZiB0aGUgYW5nbGUgKGluIGRlZ3JlZXMpIGJldHdlZW4gdGhlIGZhY2Ugbm9ybWFscyBvZiB0aGUgYWRqb2luaW5nIGZhY2VzIGV4Y2VlZHMgdGhpcyB2YWx1ZS4gZGVmYXVsdCA9IDEgZGVncmVlLlxuXG5cdFx0aWYgKCBlLmZhY2UyID09PSB1bmRlZmluZWQgfHwgZmFjZXNbIGUuZmFjZTEgXS5ub3JtYWwuZG90KCBmYWNlc1sgZS5mYWNlMiBdLm5vcm1hbCApIDw9IHRocmVzaG9sZERvdCApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHNvdXJjZVZlcnRpY2VzWyBlLmluZGV4MSBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHR2ZXJ0ZXggPSBzb3VyY2VWZXJ0aWNlc1sgZS5pbmRleDIgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxufVxuXG5FZGdlc0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuRWRnZXNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFZGdlc0dlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEN5bGluZGVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ3lsaW5kZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxuXHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEN5bGluZGVyQnVmZmVyR2VvbWV0cnkoIHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyR2VvbWV0cnk7XG5cbi8vIEN5bGluZGVyQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxuXHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHJhZGl1c1RvcCA9IHJhZGl1c1RvcCAhPT0gdW5kZWZpbmVkID8gcmFkaXVzVG9wIDogMTtcblx0cmFkaXVzQm90dG9tID0gcmFkaXVzQm90dG9tICE9PSB1bmRlZmluZWQgPyByYWRpdXNCb3R0b20gOiAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblxuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApIHx8IDE7XG5cblx0b3BlbkVuZGVkID0gb3BlbkVuZGVkICE9PSB1bmRlZmluZWQgPyBvcGVuRW5kZWQgOiBmYWxzZTtcblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwLjA7XG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBpbmRleCA9IDA7XG5cdHZhciBpbmRleEFycmF5ID0gW107XG5cdHZhciBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcblx0dmFyIGdyb3VwU3RhcnQgPSAwO1xuXG5cdC8vIGdlbmVyYXRlIGdlb21ldHJ5XG5cblx0Z2VuZXJhdGVUb3JzbygpO1xuXG5cdGlmICggb3BlbkVuZGVkID09PSBmYWxzZSApIHtcblxuXHRcdGlmICggcmFkaXVzVG9wID4gMCApIGdlbmVyYXRlQ2FwKCB0cnVlICk7XG5cdFx0aWYgKCByYWRpdXNCb3R0b20gPiAwICkgZ2VuZXJhdGVDYXAoIGZhbHNlICk7XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVRvcnNvKCkge1xuXG5cdFx0dmFyIHgsIHk7XG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHQvLyB0aGlzIHdpbGwgYmUgdXNlZCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbFxuXHRcdHZhciBzbG9wZSA9ICggcmFkaXVzQm90dG9tIC0gcmFkaXVzVG9wICkgLyBoZWlnaHQ7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCB5ID0gMDsgeSA8PSBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0dmFyIGluZGV4Um93ID0gW107XG5cblx0XHRcdHZhciB2ID0geSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHJhZGl1cyBvZiB0aGUgY3VycmVudCByb3dcblxuXHRcdFx0dmFyIHJhZGl1cyA9IHYgKiAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApICsgcmFkaXVzVG9wO1xuXG5cdFx0XHRmb3IgKCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHR2YXIgdSA9IHggLyByYWRpYWxTZWdtZW50cztcblxuXHRcdFx0XHR2YXIgdGhldGEgPSB1ICogdGhldGFMZW5ndGggKyB0aGV0YVN0YXJ0O1xuXG5cdFx0XHRcdHZhciBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXHRcdFx0XHR2YXIgY29zVGhldGEgPSBNYXRoLmNvcyggdGhldGEgKTtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IC0gdiAqIGhlaWdodCArIGhhbGZIZWlnaHQ7XG5cdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHRcdFx0Ly8gc2F2ZSBpbmRleCBvZiB2ZXJ0ZXggaW4gcmVzcGVjdGl2ZSByb3dcblxuXHRcdFx0XHRpbmRleFJvdy5wdXNoKCBpbmRleCArKyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIG5vdyBzYXZlIHZlcnRpY2VzIG9mIHRoZSByb3cgaW4gb3VyIGluZGV4IGFycmF5XG5cblx0XHRcdGluZGV4QXJyYXkucHVzaCggaW5kZXhSb3cgKTtcblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdGZvciAoIHkgPSAwOyB5IDwgaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XG5cblx0XHRcdFx0Ly8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlc1xuXG5cdFx0XHRcdHZhciBhID0gaW5kZXhBcnJheVsgeSBdWyB4IF07XG5cdFx0XHRcdHZhciBiID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCBdO1xuXHRcdFx0XHR2YXIgYyA9IGluZGV4QXJyYXlbIHkgKyAxIF1bIHggKyAxIF07XG5cdFx0XHRcdHZhciBkID0gaW5kZXhBcnJheVsgeSBdWyB4ICsgMSBdO1xuXG5cdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHRcdC8vIHVwZGF0ZSBncm91cCBjb3VudGVyXG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIDAgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUNhcCggdG9wICkge1xuXG5cdFx0dmFyIHgsIGNlbnRlckluZGV4U3RhcnQsIGNlbnRlckluZGV4RW5kO1xuXG5cdFx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBncm91cENvdW50ID0gMDtcblxuXHRcdHZhciByYWRpdXMgPSAoIHRvcCA9PT0gdHJ1ZSApID8gcmFkaXVzVG9wIDogcmFkaXVzQm90dG9tO1xuXHRcdHZhciBzaWduID0gKCB0b3AgPT09IHRydWUgKSA/IDEgOiAtIDE7XG5cblx0XHQvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2VudGVyIHZlcnRleFxuXHRcdGNlbnRlckluZGV4U3RhcnQgPSBpbmRleDtcblxuXHRcdC8vIGZpcnN0IHdlIGdlbmVyYXRlIHRoZSBjZW50ZXIgdmVydGV4IGRhdGEgb2YgdGhlIGNhcC5cblx0XHQvLyBiZWNhdXNlIHRoZSBnZW9tZXRyeSBuZWVkcyBvbmUgc2V0IG9mIHV2cyBwZXIgZmFjZSxcblx0XHQvLyB3ZSBtdXN0IGdlbmVyYXRlIGEgY2VudGVyIHZlcnRleCBwZXIgZmFjZS9zZWdtZW50XG5cblx0XHRmb3IgKCB4ID0gMTsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIGhhbGZIZWlnaHQgKiBzaWduLCAwICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIDAuNSwgMC41ICk7XG5cblx0XHRcdC8vIGluY3JlYXNlIGluZGV4XG5cblx0XHRcdGluZGV4ICsrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY2VudGVyIHZlcnRleFxuXG5cdFx0Y2VudGVySW5kZXhFbmQgPSBpbmRleDtcblxuXHRcdC8vIG5vdyB3ZSBnZW5lcmF0ZSB0aGUgc3Vycm91bmRpbmcgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdHZhciB1ID0geCAvIHJhZGlhbFNlZ21lbnRzO1xuXHRcdFx0dmFyIHRoZXRhID0gdSAqIHRoZXRhTGVuZ3RoICsgdGhldGFTdGFydDtcblxuXHRcdFx0dmFyIGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0XHR2YXIgc2luVGhldGEgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHR2ZXJ0ZXgueSA9IGhhbGZIZWlnaHQgKiBzaWduO1xuXHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgc2lnbiwgMCApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1di54ID0gKCBjb3NUaGV0YSAqIDAuNSApICsgMC41O1xuXHRcdFx0dXYueSA9ICggc2luVGhldGEgKiAwLjUgKiBzaWduICkgKyAwLjU7XG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxuXG5cdFx0XHRpbmRleCArKztcblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdHZhciBjID0gY2VudGVySW5kZXhTdGFydCArIHg7XG5cdFx0XHR2YXIgaSA9IGNlbnRlckluZGV4RW5kICsgeDtcblxuXHRcdFx0aWYgKCB0b3AgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly8gZmFjZSB0b3BcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCBjICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gZmFjZSBib3R0b21cblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGkgKyAxLCBpLCBjICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z3JvdXBDb3VudCArPSAzO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCB0b3AgPT09IHRydWUgPyAxIDogMiApO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXG5cblx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0fVxuXG59XG5cbkN5bGluZGVyQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICovXG5cbi8vIENvbmVHZW9tZXRyeVxuXG5mdW5jdGlvbiBDb25lR2VvbWV0cnkoIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0Q3lsaW5kZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICk7XG5cblx0dGhpcy50eXBlID0gJ0NvbmVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxufVxuXG5Db25lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNvbmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lR2VvbWV0cnk7XG5cbi8vIENvbmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBDb25lQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0Q3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICk7XG5cblx0dGhpcy50eXBlID0gJ0NvbmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxufVxuXG5Db25lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNvbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBodWdoZXNcbiAqL1xuXG4vLyBDaXJjbGVHZW9tZXRyeVxuXG5mdW5jdGlvbiBDaXJjbGVHZW9tZXRyeSggcmFkaXVzLCBzZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDaXJjbGVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQ2lyY2xlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGVHZW9tZXRyeTtcblxuLy8gQ2lyY2xlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ2lyY2xlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ2lyY2xlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0c2VnbWVudHMgPSBzZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoIDMsIHNlZ21lbnRzICkgOiA4O1xuXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJICogMjtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIHM7XG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXG5cdC8vIGNlbnRlciBwb2ludFxuXG5cdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdGZvciAoIHMgPSAwLCBpID0gMzsgcyA8PSBzZWdtZW50czsgcyArKywgaSArPSAzICkge1xuXG5cdFx0dmFyIHNlZ21lbnQgPSB0aGV0YVN0YXJ0ICsgcyAvIHNlZ21lbnRzICogdGhldGFMZW5ndGg7XG5cblx0XHQvLyB2ZXJ0ZXhcblxuXHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcblx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHQvLyBub3JtYWxcblxuXHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0Ly8gdXZzXG5cblx0XHR1di54ID0gKCB2ZXJ0aWNlc1sgaSBdIC8gcmFkaXVzICsgMSApIC8gMjtcblx0XHR1di55ID0gKCB2ZXJ0aWNlc1sgaSArIDEgXSAvIHJhZGl1cyArIDEgKSAvIDI7XG5cblx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCAwICk7XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5DaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNpcmNsZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENpcmNsZUJ1ZmZlckdlb21ldHJ5O1xuXG5cblxudmFyIEdlb21ldHJpZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdFdpcmVmcmFtZUdlb21ldHJ5OiBXaXJlZnJhbWVHZW9tZXRyeSxcblx0UGFyYW1ldHJpY0dlb21ldHJ5OiBQYXJhbWV0cmljR2VvbWV0cnksXG5cdFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeTogUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkdlb21ldHJ5OiBUZXRyYWhlZHJvbkdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRPY3RhaGVkcm9uR2VvbWV0cnk6IE9jdGFoZWRyb25HZW9tZXRyeSxcblx0T2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uR2VvbWV0cnk6IEljb3NhaGVkcm9uR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdERvZGVjYWhlZHJvbkdlb21ldHJ5OiBEb2RlY2FoZWRyb25HZW9tZXRyeSxcblx0RG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRQb2x5aGVkcm9uR2VvbWV0cnk6IFBvbHloZWRyb25HZW9tZXRyeSxcblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdFR1YmVHZW9tZXRyeTogVHViZUdlb21ldHJ5LFxuXHRUdWJlQnVmZmVyR2VvbWV0cnk6IFR1YmVCdWZmZXJHZW9tZXRyeSxcblx0VG9ydXNLbm90R2VvbWV0cnk6IFRvcnVzS25vdEdlb21ldHJ5LFxuXHRUb3J1c0tub3RCdWZmZXJHZW9tZXRyeTogVG9ydXNLbm90QnVmZmVyR2VvbWV0cnksXG5cdFRvcnVzR2VvbWV0cnk6IFRvcnVzR2VvbWV0cnksXG5cdFRvcnVzQnVmZmVyR2VvbWV0cnk6IFRvcnVzQnVmZmVyR2VvbWV0cnksXG5cdFRleHRHZW9tZXRyeTogVGV4dEdlb21ldHJ5LFxuXHRUZXh0QnVmZmVyR2VvbWV0cnk6IFRleHRCdWZmZXJHZW9tZXRyeSxcblx0U3BoZXJlR2VvbWV0cnk6IFNwaGVyZUdlb21ldHJ5LFxuXHRTcGhlcmVCdWZmZXJHZW9tZXRyeTogU3BoZXJlQnVmZmVyR2VvbWV0cnksXG5cdFJpbmdHZW9tZXRyeTogUmluZ0dlb21ldHJ5LFxuXHRSaW5nQnVmZmVyR2VvbWV0cnk6IFJpbmdCdWZmZXJHZW9tZXRyeSxcblx0UGxhbmVHZW9tZXRyeTogUGxhbmVHZW9tZXRyeSxcblx0UGxhbmVCdWZmZXJHZW9tZXRyeTogUGxhbmVCdWZmZXJHZW9tZXRyeSxcblx0TGF0aGVHZW9tZXRyeTogTGF0aGVHZW9tZXRyeSxcblx0TGF0aGVCdWZmZXJHZW9tZXRyeTogTGF0aGVCdWZmZXJHZW9tZXRyeSxcblx0U2hhcGVHZW9tZXRyeTogU2hhcGVHZW9tZXRyeSxcblx0U2hhcGVCdWZmZXJHZW9tZXRyeTogU2hhcGVCdWZmZXJHZW9tZXRyeSxcblx0RXh0cnVkZUdlb21ldHJ5OiBFeHRydWRlR2VvbWV0cnksXG5cdEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LFxuXHRFZGdlc0dlb21ldHJ5OiBFZGdlc0dlb21ldHJ5LFxuXHRDb25lR2VvbWV0cnk6IENvbmVHZW9tZXRyeSxcblx0Q29uZUJ1ZmZlckdlb21ldHJ5OiBDb25lQnVmZmVyR2VvbWV0cnksXG5cdEN5bGluZGVyR2VvbWV0cnk6IEN5bGluZGVyR2VvbWV0cnksXG5cdEN5bGluZGVyQnVmZmVyR2VvbWV0cnk6IEN5bGluZGVyQnVmZmVyR2VvbWV0cnksXG5cdENpcmNsZUdlb21ldHJ5OiBDaXJjbGVHZW9tZXRyeSxcblx0Q2lyY2xlQnVmZmVyR2VvbWV0cnk6IENpcmNsZUJ1ZmZlckdlb21ldHJ5LFxuXHRCb3hHZW9tZXRyeTogQm94R2VvbWV0cnksXG5cdEJveEJ1ZmZlckdlb21ldHJ5OiBCb3hCdWZmZXJHZW9tZXRyeVxufSk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8VEhSRUUuQ29sb3I+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gU2hhZG93TWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFkb3dNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYWRvd01hdGVyaWFsO1xuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkb3dNYXRlcmlhbCA9IHRydWU7XG5cblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFJhd1NoYWRlck1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdFNoYWRlck1hdGVyaWFsLmNhbGwoIHRoaXMsIHBhcmFtZXRlcnMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmF3U2hhZGVyTWF0ZXJpYWwnO1xuXG59XG5cblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSApO1xuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmF3U2hhZGVyTWF0ZXJpYWw7XG5cblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1Jhd1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICByb3VnaG5lc3M6IDxmbG9hdD4sXG4gKiAgbWV0YWxuZXNzOiA8ZmxvYXQ+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgZW1pc3NpdmU6IDxoZXg+LFxuICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKiAgZW1pc3NpdmVNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICByb3VnaG5lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIG1ldGFsbmVzc01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBlbnZNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoU3RhbmRhcmRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoU3RhbmRhcmRNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHR0aGlzLnJvdWdobmVzcyA9IDAuNTtcblx0dGhpcy5tZXRhbG5lc3MgPSAwLjU7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuYW9NYXAgPSBudWxsO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLnJvdWdobmVzc01hcCA9IG51bGw7XG5cblx0dGhpcy5tZXRhbG5lc3NNYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZW52TWFwID0gbnVsbDtcblx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoU3RhbmRhcmRNYXRlcmlhbDtcblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHR0aGlzLnJvdWdobmVzcyA9IHNvdXJjZS5yb3VnaG5lc3M7XG5cdHRoaXMubWV0YWxuZXNzID0gc291cmNlLm1ldGFsbmVzcztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0dGhpcy5yb3VnaG5lc3NNYXAgPSBzb3VyY2Uucm91Z2huZXNzTWFwO1xuXG5cdHRoaXMubWV0YWxuZXNzTWFwID0gc291cmNlLm1ldGFsbmVzc01hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSBzb3VyY2UuZW52TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoUGh5c2ljYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnUEhZU0lDQUwnOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGh5c2ljYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAwLjU7IC8vIG1hcHMgdG8gRjAgPSAwLjA0XG5cblx0dGhpcy5jbGVhckNvYXQgPSAwLjA7XG5cdHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzID0gMC4wO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoUGh5c2ljYWxNYXRlcmlhbDtcblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1BIWVNJQ0FMJzogJycgfTtcblxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cblx0dGhpcy5jbGVhckNvYXQgPSBzb3VyY2UuY2xlYXJDb2F0O1xuXHR0aGlzLmNsZWFyQ29hdFJvdWdobmVzcyA9IHNvdXJjZS5jbGVhckNvYXRSb3VnaG5lc3M7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgc3BlY3VsYXI6IDxoZXg+LFxuICogIHNoaW5pbmVzczogPGZsb2F0PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFBob25nTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHR0aGlzLnNwZWN1bGFyID0gbmV3IENvbG9yKCAweDExMTExMSApO1xuXHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hQaG9uZ01hdGVyaWFsO1xuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcblx0dGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgdGFrYWhpcm94IC8gaHR0cDovL2dpdGh1Yi5jb20vdGFrYWhpcm94XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBncmFkaWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKVxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hUb29uTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWVzaFBob25nTWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1RPT04nOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoVG9vbk1hdGVyaWFsJztcblxuXHR0aGlzLmdyYWRpZW50TWFwID0gbnVsbDtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hUb29uTWF0ZXJpYWw7XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFRvb25NYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmdyYWRpZW50TWFwID0gc291cmNlLmdyYWRpZW50TWFwO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD5cbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqICBtb3JwaE5vcm1hbHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hOb3JtYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hOb3JtYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTm9ybWFsTWF0ZXJpYWw7XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTGFtYmVydE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaExhbWJlcnRNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hMYW1iZXJ0TWF0ZXJpYWw7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaExhbWJlcnRNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hdGNhcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTWF0Y2FwTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0dGhpcy50eXBlID0gJ01lc2hNYXRjYXBNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdHRoaXMubWF0Y2FwID0gbnVsbDtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hNYXRjYXBNYXRlcmlhbDtcblxuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hNYXRjYXBNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hdGNhcCA9IHNvdXJjZS5tYXRjYXA7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBsaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNjYWxlOiA8ZmxvYXQ+LFxuICogIGRhc2hTaXplOiA8ZmxvYXQ+LFxuICogIGdhcFNpemU6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBMaW5lRGFzaGVkTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TGluZUJhc2ljTWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lRGFzaGVkTWF0ZXJpYWwnO1xuXG5cdHRoaXMuc2NhbGUgPSAxO1xuXHR0aGlzLmRhc2hTaXplID0gMztcblx0dGhpcy5nYXBTaXplID0gMTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgKTtcbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaW5lRGFzaGVkTWF0ZXJpYWw7XG5cbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lRGFzaGVkTWF0ZXJpYWwgPSB0cnVlO1xuXG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnNjYWxlID0gc291cmNlLnNjYWxlO1xuXHR0aGlzLmRhc2hTaXplID0gc291cmNlLmRhc2hTaXplO1xuXHR0aGlzLmdhcFNpemUgPSBzb3VyY2UuZ2FwU2l6ZTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuXG5cbnZhciBNYXRlcmlhbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdFNoYWRvd01hdGVyaWFsOiBTaGFkb3dNYXRlcmlhbCxcblx0U3ByaXRlTWF0ZXJpYWw6IFNwcml0ZU1hdGVyaWFsLFxuXHRSYXdTaGFkZXJNYXRlcmlhbDogUmF3U2hhZGVyTWF0ZXJpYWwsXG5cdFNoYWRlck1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbCxcblx0UG9pbnRzTWF0ZXJpYWw6IFBvaW50c01hdGVyaWFsLFxuXHRNZXNoUGh5c2ljYWxNYXRlcmlhbDogTWVzaFBoeXNpY2FsTWF0ZXJpYWwsXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiBNZXNoU3RhbmRhcmRNYXRlcmlhbCxcblx0TWVzaFBob25nTWF0ZXJpYWw6IE1lc2hQaG9uZ01hdGVyaWFsLFxuXHRNZXNoVG9vbk1hdGVyaWFsOiBNZXNoVG9vbk1hdGVyaWFsLFxuXHRNZXNoTm9ybWFsTWF0ZXJpYWw6IE1lc2hOb3JtYWxNYXRlcmlhbCxcblx0TWVzaExhbWJlcnRNYXRlcmlhbDogTWVzaExhbWJlcnRNYXRlcmlhbCxcblx0TWVzaERlcHRoTWF0ZXJpYWw6IE1lc2hEZXB0aE1hdGVyaWFsLFxuXHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogTWVzaERpc3RhbmNlTWF0ZXJpYWwsXG5cdE1lc2hCYXNpY01hdGVyaWFsOiBNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaE1hdGNhcE1hdGVyaWFsOiBNZXNoTWF0Y2FwTWF0ZXJpYWwsXG5cdExpbmVEYXNoZWRNYXRlcmlhbDogTGluZURhc2hlZE1hdGVyaWFsLFxuXHRMaW5lQmFzaWNNYXRlcmlhbDogTGluZUJhc2ljTWF0ZXJpYWwsXG5cdE1hdGVyaWFsOiBNYXRlcmlhbFxufSk7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICovXG5cbnZhciBBbmltYXRpb25VdGlscyA9IHtcblxuXHQvLyBzYW1lIGFzIEFycmF5LnByb3RvdHlwZS5zbGljZSwgYnV0IGFsc28gd29ya3Mgb24gdHlwZWQgYXJyYXlzXG5cdGFycmF5U2xpY2U6IGZ1bmN0aW9uICggYXJyYXksIGZyb20sIHRvICkge1xuXG5cdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdC8vIGluIGlvczkgYXJyYXkuc3ViYXJyYXkoZnJvbSwgdW5kZWZpbmVkKSB3aWxsIHJldHVybiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gYnV0IGFycmF5LnN1YmFycmF5KGZyb20pIG9yIGFycmF5LnN1YmFycmF5KGZyb20sIGxlbikgaXMgY29ycmVjdFxuXHRcdFx0cmV0dXJuIG5ldyBhcnJheS5jb25zdHJ1Y3RvciggYXJyYXkuc3ViYXJyYXkoIGZyb20sIHRvICE9PSB1bmRlZmluZWQgPyB0byA6IGFycmF5Lmxlbmd0aCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXkuc2xpY2UoIGZyb20sIHRvICk7XG5cblx0fSxcblxuXHQvLyBjb252ZXJ0cyBhbiBhcnJheSB0byBhIHNwZWNpZmljIHR5cGVcblx0Y29udmVydEFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCB0eXBlLCBmb3JjZUNsb25lICkge1xuXG5cdFx0aWYgKCAhIGFycmF5IHx8IC8vIGxldCAndW5kZWZpbmVkJyBhbmQgJ251bGwnIHBhc3Ncblx0XHRcdCEgZm9yY2VDbG9uZSAmJiBhcnJheS5jb25zdHJ1Y3RvciA9PT0gdHlwZSApIHJldHVybiBhcnJheTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUuQllURVNfUEVSX0VMRU1FTlQgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IHR5cGUoIGFycmF5ICk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcnJheSApOyAvLyBjcmVhdGUgQXJyYXlcblxuXHR9LFxuXG5cdGlzVHlwZWRBcnJheTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRyZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KCBvYmplY3QgKSAmJlxuXHRcdFx0ISAoIG9iamVjdCBpbnN0YW5jZW9mIERhdGFWaWV3ICk7XG5cblx0fSxcblxuXHQvLyByZXR1cm5zIGFuIGFycmF5IGJ5IHdoaWNoIHRpbWVzIGFuZCB2YWx1ZXMgY2FuIGJlIHNvcnRlZFxuXHRnZXRLZXlmcmFtZU9yZGVyOiBmdW5jdGlvbiAoIHRpbWVzICkge1xuXG5cdFx0ZnVuY3Rpb24gY29tcGFyZVRpbWUoIGksIGogKSB7XG5cblx0XHRcdHJldHVybiB0aW1lc1sgaSBdIC0gdGltZXNbIGogXTtcblxuXHRcdH1cblxuXHRcdHZhciBuID0gdGltZXMubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoIG4gKTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG47ICsrIGkgKSByZXN1bHRbIGkgXSA9IGk7XG5cblx0XHRyZXN1bHQuc29ydCggY29tcGFyZVRpbWUgKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyB1c2VzIHRoZSBhcnJheSBwcmV2aW91c2x5IHJldHVybmVkIGJ5ICdnZXRLZXlmcmFtZU9yZGVyJyB0byBzb3J0IGRhdGFcblx0c29ydGVkQXJyYXk6IGZ1bmN0aW9uICggdmFsdWVzLCBzdHJpZGUsIG9yZGVyICkge1xuXG5cdFx0dmFyIG5WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgdmFsdWVzLmNvbnN0cnVjdG9yKCBuVmFsdWVzICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGRzdE9mZnNldCA9IDA7IGRzdE9mZnNldCAhPT0gblZhbHVlczsgKysgaSApIHtcblxuXHRcdFx0dmFyIHNyY09mZnNldCA9IG9yZGVyWyBpIF0gKiBzdHJpZGU7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHJlc3VsdFsgZHN0T2Zmc2V0ICsrIF0gPSB2YWx1ZXNbIHNyY09mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9LFxuXG5cdC8vIGZ1bmN0aW9uIGZvciBwYXJzaW5nIEFPUyBrZXlmcmFtZSBmb3JtYXRzXG5cdGZsYXR0ZW5KU09OOiBmdW5jdGlvbiAoIGpzb25LZXlzLCB0aW1lcywgdmFsdWVzLCB2YWx1ZVByb3BlcnR5TmFtZSApIHtcblxuXHRcdHZhciBpID0gMSwga2V5ID0ganNvbktleXNbIDAgXTtcblxuXHRcdHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgJiYga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHR2YXIgdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoLmFwcGx5KCB2YWx1ZXMsIHZhbHVlICk7IC8vIHB1c2ggYWxsIGVsZW1lbnRzXG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyAuLi5hc3N1bWUgVEhSRUUuTWF0aC1pc2hcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWUudG9BcnJheSggdmFsdWVzLCB2YWx1ZXMubGVuZ3RoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHB1c2ggYXMtaXNcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIG9mIGludGVycG9sYW50cyBvdmVyIHBhcmFtZXRyaWMgc2FtcGxlcy5cbiAqXG4gKiBUaGUgcGFyYW1ldGVyIGRvbWFpbiBpcyBvbmUgZGltZW5zaW9uYWwsIHR5cGljYWxseSB0aGUgdGltZSBvciBhIHBhdGhcbiAqIGFsb25nIGEgY3VydmUgZGVmaW5lZCBieSB0aGUgZGF0YS5cbiAqXG4gKiBUaGUgc2FtcGxlIHZhbHVlcyBjYW4gaGF2ZSBhbnkgZGltZW5zaW9uYWxpdHkgYW5kIGRlcml2ZWQgY2xhc3NlcyBtYXlcbiAqIGFwcGx5IHNwZWNpYWwgaW50ZXJwcmV0YXRpb25zIHRvIHRoZSBkYXRhLlxuICpcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgdGhlIGludGVydmFsIHNlZWsgaW4gYSBUZW1wbGF0ZSBNZXRob2QsIGRlZmVycmluZ1xuICogdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIHRvIGRlcml2ZWQgY2xhc3Nlcy5cbiAqXG4gKiBUaW1lIGNvbXBsZXhpdHkgaXMgTygxKSBmb3IgbGluZWFyIGFjY2VzcyBjcm9zc2luZyBhdCBtb3N0IHR3byBwb2ludHNcbiAqIGFuZCBPKGxvZyBOKSBmb3IgcmFuZG9tIGFjY2Vzcywgd2hlcmUgTiBpcyB0aGUgbnVtYmVyIG9mIHBvc2l0aW9ucy5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICpcbiAqIFx0XHRodHRwOi8vd3d3Lm9vZGVzaWduLmNvbS90ZW1wbGF0ZS1tZXRob2QtcGF0dGVybi5odG1sXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdHRoaXMucGFyYW1ldGVyUG9zaXRpb25zID0gcGFyYW1ldGVyUG9zaXRpb25zO1xuXHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cblx0dGhpcy5yZXN1bHRCdWZmZXIgPSByZXN1bHRCdWZmZXIgIT09IHVuZGVmaW5lZCA/XG5cdFx0cmVzdWx0QnVmZmVyIDogbmV3IHNhbXBsZVZhbHVlcy5jb25zdHJ1Y3Rvciggc2FtcGxlU2l6ZSApO1xuXHR0aGlzLnNhbXBsZVZhbHVlcyA9IHNhbXBsZVZhbHVlcztcblx0dGhpcy52YWx1ZVNpemUgPSBzYW1wbGVTaXplO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEludGVycG9sYW50LnByb3RvdHlwZSwge1xuXG5cdGV2YWx1YXRlOiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHR2YXIgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdGkxID0gdGhpcy5fY2FjaGVkSW5kZXgsXG5cblx0XHRcdHQxID0gcHBbIGkxIF0sXG5cdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdHZhbGlkYXRlX2ludGVydmFsOiB7XG5cblx0XHRcdHNlZWs6IHtcblxuXHRcdFx0XHR2YXIgcmlnaHQ7XG5cblx0XHRcdFx0bGluZWFyX3NjYW46IHtcblxuXHRcdFx0XHRcdC8vLSBTZWUgaHR0cDovL2pzcGVyZi5jb20vY29tcGFyaXNvbi10by11bmRlZmluZWQvM1xuXHRcdFx0XHRcdC8vLSBzbG93ZXIgY29kZTpcblx0XHRcdFx0XHQvLy1cblx0XHRcdFx0XHQvLy0gXHRcdFx0XHRpZiAoIHQgPj0gdDEgfHwgdDEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgZ2l2ZVVwQXQgPSBpMSArIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDAgKSBicmVhayBmb3J3YXJkX3NjYW47XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBhZnRlciBlbmRcblxuXHRcdFx0XHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQsIHQwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XG5cdFx0XHRcdFx0XHRcdHQxID0gcHBbICsrIGkxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXHRcdFx0XHRcdGlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhICggdCA+PSB0MCApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsb29waW5nP1xuXG5cdFx0XHRcdFx0XHR2YXIgdDFnbG9iYWwgPSBwcFsgMSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHQgPCB0MWdsb2JhbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpMSA9IDI7IC8vICsgMSwgdXNpbmcgdGhlIHNjYW4gZm9yIHRoZSBkZXRhaWxzXG5cdFx0XHRcdFx0XHRcdHQwID0gdDFnbG9iYWw7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gbGluZWFyIHJldmVyc2Ugc2NhblxuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgZ2l2ZVVwQXQgPSBpMSAtIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYmVmb3JlIHN0YXJ0XG5cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkxID09PSBnaXZlVXBBdCApIGJyZWFrOyAvLyB0aGlzIGxvb3BcblxuXHRcdFx0XHRcdFx0XHR0MSA9IHQwO1xuXHRcdFx0XHRcdFx0XHR0MCA9IHBwWyAtLSBpMSAtIDEgXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHQgPj0gdDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBpbmRleFxuXHRcdFx0XHRcdFx0cmlnaHQgPSBpMTtcblx0XHRcdFx0XHRcdGkxID0gMDtcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhlIGludGVydmFsIGlzIHZhbGlkXG5cblx0XHRcdFx0XHRicmVhayB2YWxpZGF0ZV9pbnRlcnZhbDtcblxuXHRcdFx0XHR9IC8vIGxpbmVhciBzY2FuXG5cblx0XHRcdFx0Ly8gYmluYXJ5IHNlYXJjaFxuXG5cdFx0XHRcdHdoaWxlICggaTEgPCByaWdodCApIHtcblxuXHRcdFx0XHRcdHZhciBtaWQgPSAoIGkxICsgcmlnaHQgKSA+Pj4gMTtcblxuXHRcdFx0XHRcdGlmICggdCA8IHBwWyBtaWQgXSApIHtcblxuXHRcdFx0XHRcdFx0cmlnaHQgPSBtaWQ7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpMSA9IG1pZCArIDE7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHQxID0gcHBbIGkxIF07XG5cdFx0XHRcdHQwID0gcHBbIGkxIC0gMSBdO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGJvdW5kYXJ5IGNhc2VzLCBhZ2FpblxuXG5cdFx0XHRcdGlmICggdDAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5iZWZvcmVTdGFydF8oIDAsIHQsIHQxICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdDEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQwLCB0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IC8vIHNlZWtcblxuXHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSBpMTtcblxuXHRcdFx0dGhpcy5pbnRlcnZhbENoYW5nZWRfKCBpMSwgdDAsIHQxICk7XG5cblx0XHR9IC8vIHZhbGlkYXRlX2ludGVydmFsXG5cblx0XHRyZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKTtcblxuXHR9LFxuXG5cdHNldHRpbmdzOiBudWxsLCAvLyBvcHRpb25hbCwgc3ViY2xhc3Mtc3BlY2lmaWMgc2V0dGluZ3Mgc3RydWN0dXJlXG5cdC8vIE5vdGU6IFRoZSBpbmRpcmVjdGlvbiBhbGxvd3MgY2VudHJhbCBjb250cm9sIG9mIG1hbnkgaW50ZXJwb2xhbnRzLlxuXG5cdC8vIC0tLSBQcm90ZWN0ZWQgaW50ZXJmYWNlXG5cblx0RGVmYXVsdFNldHRpbmdzXzoge30sXG5cblx0Z2V0U2V0dGluZ3NfOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXR0aW5ncyB8fCB0aGlzLkRlZmF1bHRTZXR0aW5nc187XG5cblx0fSxcblxuXHRjb3B5U2FtcGxlVmFsdWVfOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0Ly8gY29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyXG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gaW5kZXggKiBzdHJpZGU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPSB2YWx1ZXNbIG9mZnNldCArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyBUZW1wbGF0ZSBtZXRob2RzIGZvciBkZXJpdmVkIGNsYXNzZXM6XG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIC8qIGkxLCB0MCwgdCwgdDEgKi8gKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdjYWxsIHRvIGFic3RyYWN0IG1ldGhvZCcgKTtcblx0XHQvLyBpbXBsZW1lbnRhdGlvbnMgc2hhbGwgcmV0dXJuIHRoaXMucmVzdWx0QnVmZmVyXG5cblx0fSxcblxuXHRpbnRlcnZhbENoYW5nZWRfOiBmdW5jdGlvbiAoIC8qIGkxLCB0MCwgdDEgKi8gKSB7XG5cblx0XHQvLyBlbXB0eVxuXG5cdH1cblxufSApO1xuXG4vLyFcXCBERUNMQVJFIEFMSUFTIEFGVEVSIGFzc2lnbiBwcm90b3R5cGUgIVxuT2JqZWN0LmFzc2lnbiggSW50ZXJwb2xhbnQucHJvdG90eXBlLCB7XG5cblx0Ly8oIDAsIHQsIHQwICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXJcblx0YmVmb3JlU3RhcnRfOiBJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXyxcblxuXHQvLyggTi0xLCB0Ti0xLCB0ICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXJcblx0YWZ0ZXJFbmRfOiBJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXyxcblxufSApO1xuXG4vKipcbiAqIEZhc3QgYW5kIHNpbXBsZSBjdWJpYyBzcGxpbmUgaW50ZXJwb2xhbnQuXG4gKlxuICogSXQgd2FzIGRlcml2ZWQgZnJvbSBhIEhlcm1pdGlhbiBjb25zdHJ1Y3Rpb24gc2V0dGluZyB0aGUgZmlyc3QgZGVyaXZhdGl2ZVxuICogYXQgZWFjaCBzYW1wbGUgcG9zaXRpb24gdG8gdGhlIGxpbmVhciBzbG9wZSBiZXR3ZWVuIG5laWdoYm9yaW5nIHBvc2l0aW9uc1xuICogb3ZlciB0aGVpciBwYXJhbWV0ZXIgaW50ZXJ2YWwuXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEN1YmljSW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0SW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdHRoaXMuX3dlaWdodFByZXYgPSAtIDA7XG5cdHRoaXMuX29mZnNldFByZXYgPSAtIDA7XG5cdHRoaXMuX3dlaWdodE5leHQgPSAtIDA7XG5cdHRoaXMuX29mZnNldE5leHQgPSAtIDA7XG5cbn1cblxuQ3ViaWNJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBDdWJpY0ludGVycG9sYW50LFxuXG5cdERlZmF1bHRTZXR0aW5nc186IHtcblxuXHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdGVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdH0sXG5cblx0aW50ZXJ2YWxDaGFuZ2VkXzogZnVuY3Rpb24gKCBpMSwgdDAsIHQxICkge1xuXG5cdFx0dmFyIHBwID0gdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHRpUHJldiA9IGkxIC0gMixcblx0XHRcdGlOZXh0ID0gaTEgKyAxLFxuXG5cdFx0XHR0UHJldiA9IHBwWyBpUHJldiBdLFxuXHRcdFx0dE5leHQgPSBwcFsgaU5leHQgXTtcblxuXHRcdGlmICggdFByZXYgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdTdGFydCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHQwKSA9IDBcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xuXHRcdFx0XHRcdHRQcmV2ID0gMiAqIHQwIC0gdDE7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpUHJldiA9IHBwLmxlbmd0aCAtIDI7XG5cdFx0XHRcdFx0dFByZXYgPSB0MCArIHBwWyBpUHJldiBdIC0gcHBbIGlQcmV2ICsgMSBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHQwKSA9IDAgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IHQxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHROZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nRW5kICkge1xuXG5cdFx0XHRcdGNhc2UgWmVyb1Nsb3BlRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gZicodE4pID0gMFxuXHRcdFx0XHRcdGlOZXh0ID0gaTE7XG5cdFx0XHRcdFx0dE5leHQgPSAyICogdDEgLSB0MDtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgV3JhcEFyb3VuZEVuZGluZzpcblxuXHRcdFx0XHRcdC8vIHVzZSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjdXJ2ZVxuXHRcdFx0XHRcdGlOZXh0ID0gMTtcblx0XHRcdFx0XHR0TmV4dCA9IHQxICsgcHBbIDEgXSAtIHBwWyAwIF07XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cblx0XHRcdFx0XHQvLyBmJycodE4pID0gMCwgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aU5leHQgPSBpMSAtIDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGhhbGZEdCA9ICggdDEgLSB0MCApICogMC41LFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemU7XG5cblx0XHR0aGlzLl93ZWlnaHRQcmV2ID0gaGFsZkR0IC8gKCB0MCAtIHRQcmV2ICk7XG5cdFx0dGhpcy5fd2VpZ2h0TmV4dCA9IGhhbGZEdCAvICggdE5leHQgLSB0MSApO1xuXHRcdHRoaXMuX29mZnNldFByZXYgPSBpUHJldiAqIHN0cmlkZTtcblx0XHR0aGlzLl9vZmZzZXROZXh0ID0gaU5leHQgKiBzdHJpZGU7XG5cblx0fSxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG8xID0gaTEgKiBzdHJpZGUsXHRcdG8wID0gbzEgLSBzdHJpZGUsXG5cdFx0XHRvUCA9IHRoaXMuX29mZnNldFByZXYsIFx0b04gPSB0aGlzLl9vZmZzZXROZXh0LFxuXHRcdFx0d1AgPSB0aGlzLl93ZWlnaHRQcmV2LFx0d04gPSB0aGlzLl93ZWlnaHROZXh0LFxuXG5cdFx0XHRwID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxuXHRcdFx0cHAgPSBwICogcCxcblx0XHRcdHBwcCA9IHBwICogcDtcblxuXHRcdC8vIGV2YWx1YXRlIHBvbHlub21pYWxzXG5cblx0XHR2YXIgc1AgPSAtIHdQICogcHBwICsgMiAqIHdQICogcHAgLSB3UCAqIHA7XG5cdFx0dmFyIHMwID0gKCAxICsgd1AgKSAqIHBwcCArICggLSAxLjUgLSAyICogd1AgKSAqIHBwICsgKCAtIDAuNSArIHdQICkgKiBwICsgMTtcblx0XHR2YXIgczEgPSAoIC0gMSAtIHdOICkgKiBwcHAgKyAoIDEuNSArIHdOICkgKiBwcCArIDAuNSAqIHA7XG5cdFx0dmFyIHNOID0gd04gKiBwcHAgLSB3TiAqIHBwO1xuXG5cdFx0Ly8gY29tYmluZSBkYXRhIGxpbmVhcmx5XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPVxuXHRcdFx0XHRcdHNQICogdmFsdWVzWyBvUCArIGkgXSArXG5cdFx0XHRcdFx0czAgKiB2YWx1ZXNbIG8wICsgaSBdICtcblx0XHRcdFx0XHRzMSAqIHZhbHVlc1sgbzEgKyBpIF0gK1xuXHRcdFx0XHRcdHNOICogdmFsdWVzWyBvTiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIExpbmVhckludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxufVxuXG5MaW5lYXJJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lYXJJbnRlcnBvbGFudCxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9mZnNldDEgPSBpMSAqIHN0cmlkZSxcblx0XHRcdG9mZnNldDAgPSBvZmZzZXQxIC0gc3RyaWRlLFxuXG5cdFx0XHR3ZWlnaHQxID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxuXHRcdFx0d2VpZ2h0MCA9IDEgLSB3ZWlnaHQxO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID1cblx0XHRcdFx0XHR2YWx1ZXNbIG9mZnNldDAgKyBpIF0gKiB3ZWlnaHQwICtcblx0XHRcdFx0XHR2YWx1ZXNbIG9mZnNldDEgKyBpIF0gKiB3ZWlnaHQxO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogSW50ZXJwb2xhbnQgdGhhdCBldmFsdWF0ZXMgdG8gdGhlIHNhbXBsZSB2YWx1ZSBhdCB0aGUgcG9zaXRpb24gcHJlY2VlZGluZ1xuICogdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gRGlzY3JldGVJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRJbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cbn1cblxuRGlzY3JldGVJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcnBvbGFudC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBEaXNjcmV0ZUludGVycG9sYW50LFxuXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKCBpMSAvKiwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgdGltZWQgc2VxdWVuY2Ugb2Yga2V5ZnJhbWVzIGZvciBhIHNwZWNpZmljIHByb3BlcnR5LlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRpZiAoIG5hbWUgPT09IHVuZGVmaW5lZCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIG5hbWUgaXMgdW5kZWZpbmVkJyApO1xuXHRpZiAoIHRpbWVzID09PSB1bmRlZmluZWQgfHwgdGltZXMubGVuZ3RoID09PSAwICkgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogbm8ga2V5ZnJhbWVzIGluIHRyYWNrIG5hbWVkICcgKyBuYW1lICk7XG5cblx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0aW1lcywgdGhpcy5UaW1lQnVmZmVyVHlwZSApO1xuXHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdmFsdWVzLCB0aGlzLlZhbHVlQnVmZmVyVHlwZSApO1xuXG5cdHRoaXMuc2V0SW50ZXJwb2xhdGlvbiggaW50ZXJwb2xhdGlvbiB8fCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuLy8gU3RhdGljIG1ldGhvZHNcblxuT2JqZWN0LmFzc2lnbiggS2V5ZnJhbWVUcmFjaywge1xuXG5cdC8vIFNlcmlhbGl6YXRpb24gKGluIHN0YXRpYyBjb250ZXh0LCBiZWNhdXNlIG9mIGNvbnN0cnVjdG9yIGludm9jYXRpb25cblx0Ly8gYW5kIGF1dG9tYXRpYyBpbnZvY2F0aW9uIG9mIC50b0pTT04pOlxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCB0cmFjayApIHtcblxuXHRcdHZhciB0cmFja1R5cGUgPSB0cmFjay5jb25zdHJ1Y3RvcjtcblxuXHRcdHZhciBqc29uO1xuXG5cdFx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgdG9KU09OIG1ldGhvZFxuXHRcdGlmICggdHJhY2tUeXBlLnRvSlNPTiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRqc29uID0gdHJhY2tUeXBlLnRvSlNPTiggdHJhY2sgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSB0aGUgZGF0YSBjYW4gYmUgc2VyaWFsaXplZCBhcy1pc1xuXHRcdFx0anNvbiA9IHtcblxuXHRcdFx0XHQnbmFtZSc6IHRyYWNrLm5hbWUsXG5cdFx0XHRcdCd0aW1lcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudGltZXMsIEFycmF5ICksXG5cdFx0XHRcdCd2YWx1ZXMnOiBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHRyYWNrLnZhbHVlcywgQXJyYXkgKVxuXG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgaW50ZXJwb2xhdGlvbiA9IHRyYWNrLmdldEludGVycG9sYXRpb24oKTtcblxuXHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0cmFjay5EZWZhdWx0SW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0XHRqc29uLmludGVycG9sYXRpb24gPSBpbnRlcnBvbGF0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRqc29uLnR5cGUgPSB0cmFjay5WYWx1ZVR5cGVOYW1lOyAvLyBtYW5kYXRvcnlcblxuXHRcdHJldHVybiBqc29uO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSwge1xuXG5cdGNvbnN0cnVjdG9yOiBLZXlmcmFtZVRyYWNrLFxuXG5cdFRpbWVCdWZmZXJUeXBlOiBGbG9hdDMyQXJyYXksXG5cblx0VmFsdWVCdWZmZXJUeXBlOiBGbG9hdDMyQXJyYXksXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlTGluZWFyLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOiBmdW5jdGlvbiAoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgRGlzY3JldGVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH0sXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiBmdW5jdGlvbiAoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgTGluZWFySW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IEN1YmljSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdHNldEludGVycG9sYXRpb246IGZ1bmN0aW9uICggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdHZhciBmYWN0b3J5TWV0aG9kO1xuXG5cdFx0c3dpdGNoICggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZURpc2NyZXRlOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEludGVycG9sYXRlTGluZWFyOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZVNtb290aDpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIGZhY3RvcnlNZXRob2QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG1lc3NhZ2UgPSBcInVuc3VwcG9ydGVkIGludGVycG9sYXRpb24gZm9yIFwiICtcblx0XHRcdFx0dGhpcy5WYWx1ZVR5cGVOYW1lICsgXCIga2V5ZnJhbWUgdHJhY2sgbmFtZWQgXCIgKyB0aGlzLm5hbWU7XG5cblx0XHRcdGlmICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGZhbGwgYmFjayB0byBkZWZhdWx0LCB1bmxlc3MgdGhlIGRlZmF1bHQgaXRzZWxmIGlzIG1lc3NlZCB1cFxuXHRcdFx0XHRpZiAoIGludGVycG9sYXRpb24gIT09IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnNldEludGVycG9sYXRpb24oIHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtZXNzYWdlICk7IC8vIGZhdGFsLCBpbiB0aGlzIGNhc2VcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazonLCBtZXNzYWdlICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPSBmYWN0b3J5TWV0aG9kO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRJbnRlcnBvbGF0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRzd2l0Y2ggKCB0aGlzLmNyZWF0ZUludGVycG9sYW50ICkge1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGU6XG5cblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlRGlzY3JldGU7XG5cblx0XHRcdGNhc2UgdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6XG5cblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlTGluZWFyO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZVNtb290aDtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGdldFZhbHVlU2l6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aCAvIHRoaXMudGltZXMubGVuZ3RoO1xuXG5cdH0sXG5cblx0Ly8gbW92ZSBhbGwga2V5ZnJhbWVzIGVpdGhlciBmb3J3YXJkcyBvciBiYWNrd2FyZHMgaW4gdGltZVxuXHRzaGlmdDogZnVuY3Rpb24gKCB0aW1lT2Zmc2V0ICkge1xuXG5cdFx0aWYgKCB0aW1lT2Zmc2V0ICE9PSAwLjAgKSB7XG5cblx0XHRcdHZhciB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gc2NhbGUgYWxsIGtleWZyYW1lIHRpbWVzIGJ5IGEgZmFjdG9yICh1c2VmdWwgZm9yIGZyYW1lIDwtPiBzZWNvbmRzIGNvbnZlcnNpb25zKVxuXHRzY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7XG5cblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xuXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0aW1lcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dGltZXNbIGkgXSAqPSB0aW1lU2NhbGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlcyBrZXlmcmFtZXMgYmVmb3JlIGFuZCBhZnRlciBhbmltYXRpb24gd2l0aG91dCBjaGFuZ2luZyBhbnkgdmFsdWVzIHdpdGhpbiB0aGUgcmFuZ2UgW3N0YXJ0VGltZSwgZW5kVGltZV0uXG5cdC8vIElNUE9SVEFOVDogV2UgZG8gbm90IHNoaWZ0IGFyb3VuZCBrZXlzIHRvIHRoZSBzdGFydCBvZiB0aGUgdHJhY2sgdGltZSwgYmVjYXVzZSBmb3IgaW50ZXJwb2xhdGVkIGtleXMgdGhpcyB3aWxsIGNoYW5nZSB0aGVpciB2YWx1ZXNcblx0dHJpbTogZnVuY3Rpb24gKCBzdGFydFRpbWUsIGVuZFRpbWUgKSB7XG5cblx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGgsXG5cdFx0XHRmcm9tID0gMCxcblx0XHRcdHRvID0gbktleXMgLSAxO1xuXG5cdFx0d2hpbGUgKCBmcm9tICE9PSBuS2V5cyAmJiB0aW1lc1sgZnJvbSBdIDwgc3RhcnRUaW1lICkge1xuXG5cdFx0XHQrKyBmcm9tO1xuXG5cdFx0fVxuXG5cdFx0d2hpbGUgKCB0byAhPT0gLSAxICYmIHRpbWVzWyB0byBdID4gZW5kVGltZSApIHtcblxuXHRcdFx0LS0gdG87XG5cblx0XHR9XG5cblx0XHQrKyB0bzsgLy8gaW5jbHVzaXZlIC0+IGV4Y2x1c2l2ZSBib3VuZFxuXG5cdFx0aWYgKCBmcm9tICE9PSAwIHx8IHRvICE9PSBuS2V5cyApIHtcblxuXHRcdFx0Ly8gZW1wdHkgdHJhY2tzIGFyZSBmb3JiaWRkZW4sIHNvIGtlZXAgYXQgbGVhc3Qgb25lIGtleWZyYW1lXG5cdFx0XHRpZiAoIGZyb20gPj0gdG8gKSB0byA9IE1hdGgubWF4KCB0bywgMSApLCBmcm9tID0gdG8gLSAxO1xuXG5cdFx0XHR2YXIgc3RyaWRlID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aW1lcywgZnJvbSwgdG8gKTtcblx0XHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy52YWx1ZXMsIGZyb20gKiBzdHJpZGUsIHRvICogc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGVcblx0dmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2YWxpZCA9IHRydWU7XG5cblx0XHR2YXIgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMsXG5cblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBuS2V5cyA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFRyYWNrIGlzIGVtcHR5LicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR2YXIgcHJldlRpbWUgPSBudWxsO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuS2V5czsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnJUaW1lID0gdGltZXNbIGkgXTtcblxuXHRcdFx0aWYgKCB0eXBlb2YgY3VyclRpbWUgPT09ICdudW1iZXInICYmIGlzTmFOKCBjdXJyVGltZSApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBUaW1lIGlzIG5vdCBhIHZhbGlkIG51bWJlci4nLCB0aGlzLCBpLCBjdXJyVGltZSApO1xuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHByZXZUaW1lICE9PSBudWxsICYmIHByZXZUaW1lID4gY3VyclRpbWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IE91dCBvZiBvcmRlciBrZXlzLicsIHRoaXMsIGksIGN1cnJUaW1lLCBwcmV2VGltZSApO1xuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRwcmV2VGltZSA9IGN1cnJUaW1lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIHZhbHVlcyApICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHZhbHVlcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9LFxuXG5cdC8vIHJlbW92ZXMgZXF1aXZhbGVudCBzZXF1ZW50aWFsIGtleXMgYXMgY29tbW9uIGluIG1vcnBoIHRhcmdldCBzZXF1ZW5jZXNcblx0Ly8gKDAsMCwwLDAsMSwxLDEsMCwwLDAsMCwwLDAsMCkgLS0+ICgwLDAsMSwxLDAsMClcblx0b3B0aW1pemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lcyA9IHRoaXMudGltZXMsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCksXG5cblx0XHRcdHNtb290aEludGVycG9sYXRpb24gPSB0aGlzLmdldEludGVycG9sYXRpb24oKSA9PT0gSW50ZXJwb2xhdGVTbW9vdGgsXG5cblx0XHRcdHdyaXRlSW5kZXggPSAxLFxuXHRcdFx0bGFzdEluZGV4ID0gdGltZXMubGVuZ3RoIC0gMTtcblxuXHRcdGZvciAoIHZhciBpID0gMTsgaSA8IGxhc3RJbmRleDsgKysgaSApIHtcblxuXHRcdFx0dmFyIGtlZXAgPSBmYWxzZTtcblxuXHRcdFx0dmFyIHRpbWUgPSB0aW1lc1sgaSBdO1xuXHRcdFx0dmFyIHRpbWVOZXh0ID0gdGltZXNbIGkgKyAxIF07XG5cblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcblxuXHRcdFx0aWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZVsgMCBdICkgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHNtb290aEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHQvLyByZW1vdmUgdW5uZWNlc3Nhcnkga2V5ZnJhbWVzIHNhbWUgYXMgdGhlaXIgbmVpZ2hib3JzXG5cblx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXROID0gb2Zmc2V0ICsgc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9IHZhbHVlc1sgb2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB2YWx1ZXNbIG9mZnNldFAgKyBqIF0gfHxcblx0XHRcdFx0XHRcdFx0dmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0TiArIGogXSApIHtcblxuXHRcdFx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0a2VlcCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluLXBsYWNlIGNvbXBhY3Rpb25cblxuXHRcdFx0aWYgKCBrZWVwICkge1xuXG5cdFx0XHRcdGlmICggaSAhPT0gd3JpdGVJbmRleCApIHtcblxuXHRcdFx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0dmFyIHJlYWRPZmZzZXQgPSBpICogc3RyaWRlLFxuXHRcdFx0XHRcdFx0d3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdCsrIHdyaXRlSW5kZXg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGZsdXNoIGxhc3Qga2V5ZnJhbWUgKGNvbXBhY3Rpb24gbG9va3MgYWhlYWQpXG5cblx0XHRpZiAoIGxhc3RJbmRleCA+IDAgKSB7XG5cblx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgbGFzdEluZGV4IF07XG5cblx0XHRcdGZvciAoIHZhciByZWFkT2Zmc2V0ID0gbGFzdEluZGV4ICogc3RyaWRlLCB3cml0ZU9mZnNldCA9IHdyaXRlSW5kZXggKiBzdHJpZGUsIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0dmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3cml0ZUluZGV4ICE9PSB0aW1lcy5sZW5ndGggKSB7XG5cblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aW1lcywgMCwgd3JpdGVJbmRleCApO1xuXHRcdFx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB2YWx1ZXMsIDAsIHdyaXRlSW5kZXggKiBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIEJvb2xlYW4ga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gQm9vbGVhbktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMgKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cbn1cblxuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBCb29sZWFuS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAnYm9vbCcsXG5cdFZhbHVlQnVmZmVyVHlwZTogQXJyYXksXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlRGlzY3JldGUsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiB1bmRlZmluZWQsXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogdW5kZWZpbmVkXG5cblx0Ly8gTm90ZTogQWN0dWFsbHkgdGhpcyB0cmFjayBjb3VsZCBoYXZlIGEgb3B0aW1pemVkIC8gY29tcHJlc3NlZFxuXHQvLyByZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSB2YWx1ZSBhbmQgYSBjdXN0b20gaW50ZXJwb2xhbnQgdGhhdFxuXHQvLyBjb21wdXRlcyBcImZpcnN0VmFsdWUgXiBpc09kZCggaW5kZXggKVwiLlxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgb2Yga2V5ZnJhbWUgdmFsdWVzIHRoYXQgcmVwcmVzZW50IGNvbG9yLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gQ29sb3JLZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG59XG5cbkNvbG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IENvbG9yS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAnY29sb3InXG5cblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuXG5cdC8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxuXG5cdC8vIE5vdGU6IFZlcnkgYmFzaWMgaW1wbGVtZW50YXRpb24gYW5kIG5vdGhpbmcgc3BlY2lhbCB5ZXQuXG5cdC8vIEhvd2V2ZXIsIHRoaXMgaXMgdGhlIHBsYWNlIGZvciBjb2xvciBzcGFjZSBwYXJhbWV0ZXJpemF0aW9uLlxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgb2YgbnVtZXJpYyBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIE51bWJlcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuTnVtYmVyS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IE51bWJlcktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ251bWJlcidcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0Ly8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cbn0gKTtcblxuLyoqXG4gKiBTcGhlcmljYWwgbGluZWFyIHVuaXQgcXVhdGVybmlvbiBpbnRlcnBvbGFudC5cbiAqXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxufVxuXG5RdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LFxuXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKCBpMSwgdDAsIHQsIHQxICkge1xuXG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0b2Zmc2V0ID0gaTEgKiBzdHJpZGUsXG5cblx0XHRcdGFscGhhID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApO1xuXG5cdFx0Zm9yICggdmFyIGVuZCA9IG9mZnNldCArIHN0cmlkZTsgb2Zmc2V0ICE9PSBlbmQ7IG9mZnNldCArPSA0ICkge1xuXG5cdFx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggcmVzdWx0LCAwLCB2YWx1ZXMsIG9mZnNldCAtIHN0cmlkZSwgdmFsdWVzLCBvZmZzZXQsIGFscGhhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIHF1YXRlcm5pb24ga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxufVxuXG5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICdxdWF0ZXJuaW9uJyxcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlTGluZWFyLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH0sXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWQgLy8gbm90IHlldCBpbXBsZW1lbnRlZFxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgdGhhdCBpbnRlcnBvbGF0ZXMgU3RyaW5nc1xuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gU3RyaW5nS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxufVxuXG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU3RyaW5nS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAnc3RyaW5nJyxcblx0VmFsdWVCdWZmZXJUeXBlOiBBcnJheSxcblxuXHREZWZhdWx0SW50ZXJwb2xhdGlvbjogSW50ZXJwb2xhdGVEaXNjcmV0ZSxcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IHVuZGVmaW5lZCxcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IHVuZGVmaW5lZFxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgb2YgdmVjdG9yZWQga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxufVxuXG5WZWN0b3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogVmVjdG9yS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAndmVjdG9yJ1xuXG5cdC8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcblxuXHQvLyBEZWZhdWx0SW50ZXJwb2xhdGlvbiBpcyBpbmhlcml0ZWRcblxufSApO1xuXG4vKipcbiAqXG4gKiBSZXVzYWJsZSBzZXQgb2YgVHJhY2tzIHRoYXQgcmVwcmVzZW50IGFuIGFuaW1hdGlvbi5cbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKi9cblxuZnVuY3Rpb24gQW5pbWF0aW9uQ2xpcCggbmFtZSwgZHVyYXRpb24sIHRyYWNrcyApIHtcblxuXHR0aGlzLm5hbWUgPSBuYW1lO1xuXHR0aGlzLnRyYWNrcyA9IHRyYWNrcztcblx0dGhpcy5kdXJhdGlvbiA9ICggZHVyYXRpb24gIT09IHVuZGVmaW5lZCApID8gZHVyYXRpb24gOiAtIDE7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0Ly8gdGhpcyBtZWFucyBpdCBzaG91bGQgZmlndXJlIG91dCBpdHMgZHVyYXRpb24gYnkgc2Nhbm5pbmcgdGhlIHRyYWNrc1xuXHRpZiAoIHRoaXMuZHVyYXRpb24gPCAwICkge1xuXG5cdFx0dGhpcy5yZXNldER1cmF0aW9uKCk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIHR5cGVOYW1lICkge1xuXG5cdHN3aXRjaCAoIHR5cGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cblx0XHRjYXNlICdzY2FsYXInOlxuXHRcdGNhc2UgJ2RvdWJsZSc6XG5cdFx0Y2FzZSAnZmxvYXQnOlxuXHRcdGNhc2UgJ251bWJlcic6XG5cdFx0Y2FzZSAnaW50ZWdlcic6XG5cblx0XHRcdHJldHVybiBOdW1iZXJLZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAndmVjdG9yJzpcblx0XHRjYXNlICd2ZWN0b3IyJzpcblx0XHRjYXNlICd2ZWN0b3IzJzpcblx0XHRjYXNlICd2ZWN0b3I0JzpcblxuXHRcdFx0cmV0dXJuIFZlY3RvcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdjb2xvcic6XG5cblx0XHRcdHJldHVybiBDb2xvcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcblxuXHRcdFx0cmV0dXJuIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnYm9vbCc6XG5cdFx0Y2FzZSAnYm9vbGVhbic6XG5cblx0XHRcdHJldHVybiBCb29sZWFuS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3N0cmluZyc6XG5cblx0XHRcdHJldHVybiBTdHJpbmdLZXlmcmFtZVRyYWNrO1xuXG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBVbnN1cHBvcnRlZCB0eXBlTmFtZTogJyArIHR5cGVOYW1lICk7XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uICkge1xuXG5cdGlmICgganNvbi50eXBlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayB0eXBlIHVuZGVmaW5lZCwgY2FuIG5vdCBwYXJzZScgKTtcblxuXHR9XG5cblx0dmFyIHRyYWNrVHlwZSA9IGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIGpzb24udHlwZSApO1xuXG5cdGlmICgganNvbi50aW1lcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0dmFyIHRpbWVzID0gW10sIHZhbHVlcyA9IFtdO1xuXG5cdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGpzb24ua2V5cywgdGltZXMsIHZhbHVlcywgJ3ZhbHVlJyApO1xuXG5cdFx0anNvbi50aW1lcyA9IHRpbWVzO1xuXHRcdGpzb24udmFsdWVzID0gdmFsdWVzO1xuXG5cdH1cblxuXHQvLyBkZXJpdmVkIGNsYXNzZXMgY2FuIGRlZmluZSBhIHN0YXRpYyBwYXJzZSBtZXRob2Rcblx0aWYgKCB0cmFja1R5cGUucGFyc2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHJldHVybiB0cmFja1R5cGUucGFyc2UoIGpzb24gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIGEgY29uc3RydWN0b3IgY29tcGF0aWJsZSB3aXRoIHRoZSBiYXNlXG5cdFx0cmV0dXJuIG5ldyB0cmFja1R5cGUoIGpzb24ubmFtZSwganNvbi50aW1lcywganNvbi52YWx1ZXMsIGpzb24uaW50ZXJwb2xhdGlvbiApO1xuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBBbmltYXRpb25DbGlwLCB7XG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciB0cmFja3MgPSBbXSxcblx0XHRcdGpzb25UcmFja3MgPSBqc29uLnRyYWNrcyxcblx0XHRcdGZyYW1lVGltZSA9IDEuMCAvICgganNvbi5mcHMgfHwgMS4wICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBqc29uVHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIHBhcnNlS2V5ZnJhbWVUcmFjaygganNvblRyYWNrc1sgaSBdICkuc2NhbGUoIGZyYW1lVGltZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IEFuaW1hdGlvbkNsaXAoIGpzb24ubmFtZSwganNvbi5kdXJhdGlvbiwgdHJhY2tzICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggY2xpcCApIHtcblxuXHRcdHZhciB0cmFja3MgPSBbXSxcblx0XHRcdGNsaXBUcmFja3MgPSBjbGlwLnRyYWNrcztcblxuXHRcdHZhciBqc29uID0ge1xuXG5cdFx0XHQnbmFtZSc6IGNsaXAubmFtZSxcblx0XHRcdCdkdXJhdGlvbic6IGNsaXAuZHVyYXRpb24sXG5cdFx0XHQndHJhY2tzJzogdHJhY2tzLFxuXHRcdFx0J3V1aWQnOiBjbGlwLnV1aWRcblxuXHRcdH07XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBjbGlwVHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIEtleWZyYW1lVHJhY2sudG9KU09OKCBjbGlwVHJhY2tzWyBpIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpzb247XG5cblx0fSxcblxuXHRDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZTogZnVuY3Rpb24gKCBuYW1lLCBtb3JwaFRhcmdldFNlcXVlbmNlLCBmcHMsIG5vTG9vcCApIHtcblxuXHRcdHZhciBudW1Nb3JwaFRhcmdldHMgPSBtb3JwaFRhcmdldFNlcXVlbmNlLmxlbmd0aDtcblx0XHR2YXIgdHJhY2tzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBudW1Nb3JwaFRhcmdldHM7IGkgKysgKSB7XG5cblx0XHRcdHZhciB0aW1lcyA9IFtdO1xuXHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0XHR0aW1lcy5wdXNoKFxuXHRcdFx0XHQoIGkgKyBudW1Nb3JwaFRhcmdldHMgLSAxICkgJSBudW1Nb3JwaFRhcmdldHMsXG5cdFx0XHRcdGksXG5cdFx0XHRcdCggaSArIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyApO1xuXG5cdFx0XHR2YWx1ZXMucHVzaCggMCwgMSwgMCApO1xuXG5cdFx0XHR2YXIgb3JkZXIgPSBBbmltYXRpb25VdGlscy5nZXRLZXlmcmFtZU9yZGVyKCB0aW1lcyApO1xuXHRcdFx0dGltZXMgPSBBbmltYXRpb25VdGlscy5zb3J0ZWRBcnJheSggdGltZXMsIDEsIG9yZGVyICk7XG5cdFx0XHR2YWx1ZXMgPSBBbmltYXRpb25VdGlscy5zb3J0ZWRBcnJheSggdmFsdWVzLCAxLCBvcmRlciApO1xuXG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBhIGtleSBhdCB0aGUgZmlyc3QgZnJhbWUsIGR1cGxpY2F0ZSBpdCBhcyB0aGVcblx0XHRcdC8vIGxhc3QgZnJhbWUgYXMgd2VsbCBmb3IgcGVyZmVjdCBsb29wLlxuXHRcdFx0aWYgKCAhIG5vTG9vcCAmJiB0aW1lc1sgMCBdID09PSAwICkge1xuXG5cdFx0XHRcdHRpbWVzLnB1c2goIG51bU1vcnBoVGFyZ2V0cyApO1xuXHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWVzWyAwIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0cmFja3MucHVzaChcblx0XHRcdFx0bmV3IE51bWJlcktleWZyYW1lVHJhY2soXG5cdFx0XHRcdFx0Jy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbJyArIG1vcnBoVGFyZ2V0U2VxdWVuY2VbIGkgXS5uYW1lICsgJ10nLFxuXHRcdFx0XHRcdHRpbWVzLCB2YWx1ZXNcblx0XHRcdFx0KS5zY2FsZSggMS4wIC8gZnBzICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCggbmFtZSwgLSAxLCB0cmFja3MgKTtcblxuXHR9LFxuXG5cdGZpbmRCeU5hbWU6IGZ1bmN0aW9uICggb2JqZWN0T3JDbGlwQXJyYXksIG5hbWUgKSB7XG5cblx0XHR2YXIgY2xpcEFycmF5ID0gb2JqZWN0T3JDbGlwQXJyYXk7XG5cblx0XHRpZiAoICEgQXJyYXkuaXNBcnJheSggb2JqZWN0T3JDbGlwQXJyYXkgKSApIHtcblxuXHRcdFx0dmFyIG8gPSBvYmplY3RPckNsaXBBcnJheTtcblx0XHRcdGNsaXBBcnJheSA9IG8uZ2VvbWV0cnkgJiYgby5nZW9tZXRyeS5hbmltYXRpb25zIHx8IG8uYW5pbWF0aW9ucztcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNsaXBBcnJheS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggY2xpcEFycmF5WyBpIF0ubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gY2xpcEFycmF5WyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH0sXG5cblx0Q3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXM6IGZ1bmN0aW9uICggbW9ycGhUYXJnZXRzLCBmcHMsIG5vTG9vcCApIHtcblxuXHRcdHZhciBhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyA9IHt9O1xuXG5cdFx0Ly8gdGVzdGVkIHdpdGggaHR0cHM6Ly9yZWdleDEwMS5jb20vIG9uIHRyaWNrIHNlcXVlbmNlc1xuXHRcdC8vIHN1Y2ggZmxhbWluZ29fZmx5QV8wMDMsIGZsYW1pbmdvX3J1bjFfMDAzLCBjcmRlYXRoMDA1OVxuXHRcdHZhciBwYXR0ZXJuID0gL14oW1xcdy1dKj8pKFtcXGRdKykkLztcblxuXHRcdC8vIHNvcnQgbW9ycGggdGFyZ2V0IG5hbWVzIGludG8gYW5pbWF0aW9uIGdyb3VwcyBiYXNlZFxuXHRcdC8vIHBhdHRlcm5zIGxpa2UgV2Fsa18wMDEsIFdhbGtfMDAyLCBSdW5fMDAxLCBSdW5fMDAyXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cdFx0XHR2YXIgcGFydHMgPSBtb3JwaFRhcmdldC5uYW1lLm1hdGNoKCBwYXR0ZXJuICk7XG5cblx0XHRcdGlmICggcGFydHMgJiYgcGFydHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0XHR2YXIgbmFtZSA9IHBhcnRzWyAxIF07XG5cblx0XHRcdFx0dmFyIGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyA9IGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF07XG5cdFx0XHRcdGlmICggISBhbmltYXRpb25Nb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdID0gYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gW107XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFuaW1hdGlvbk1vcnBoVGFyZ2V0cy5wdXNoKCBtb3JwaFRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgY2xpcHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBuYW1lIGluIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRjbGlwcy5wdXNoKCBBbmltYXRpb25DbGlwLkNyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlKCBuYW1lLCBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdLCBmcHMsIG5vTG9vcCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xpcHM7XG5cblx0fSxcblxuXHQvLyBwYXJzZSB0aGUgYW5pbWF0aW9uLmhpZXJhcmNoeSBmb3JtYXRcblx0cGFyc2VBbmltYXRpb246IGZ1bmN0aW9uICggYW5pbWF0aW9uLCBib25lcyApIHtcblxuXHRcdGlmICggISBhbmltYXRpb24gKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5BbmltYXRpb25DbGlwOiBObyBhbmltYXRpb24gaW4gSlNPTkxvYWRlciBkYXRhLicgKTtcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGFkZE5vbmVtcHR5VHJhY2sgPSBmdW5jdGlvbiAoIHRyYWNrVHlwZSwgdHJhY2tOYW1lLCBhbmltYXRpb25LZXlzLCBwcm9wZXJ0eU5hbWUsIGRlc3RUcmFja3MgKSB7XG5cblx0XHRcdC8vIG9ubHkgcmV0dXJuIHRyYWNrIGlmIHRoZXJlIGFyZSBhY3R1YWxseSBrZXlzLlxuXHRcdFx0aWYgKCBhbmltYXRpb25LZXlzLmxlbmd0aCAhPT0gMCApIHtcblxuXHRcdFx0XHR2YXIgdGltZXMgPSBbXTtcblx0XHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRcdEFuaW1hdGlvblV0aWxzLmZsYXR0ZW5KU09OKCBhbmltYXRpb25LZXlzLCB0aW1lcywgdmFsdWVzLCBwcm9wZXJ0eU5hbWUgKTtcblxuXHRcdFx0XHQvLyBlbXB0eSBrZXlzIGFyZSBmaWx0ZXJlZCBvdXQsIHNvIGNoZWNrIGFnYWluXG5cdFx0XHRcdGlmICggdGltZXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHRcdFx0ZGVzdFRyYWNrcy5wdXNoKCBuZXcgdHJhY2tUeXBlKCB0cmFja05hbWUsIHRpbWVzLCB2YWx1ZXMgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHZhciB0cmFja3MgPSBbXTtcblxuXHRcdHZhciBjbGlwTmFtZSA9IGFuaW1hdGlvbi5uYW1lIHx8ICdkZWZhdWx0Jztcblx0XHQvLyBhdXRvbWF0aWMgbGVuZ3RoIGRldGVybWluYXRpb24gaW4gQW5pbWF0aW9uQ2xpcC5cblx0XHR2YXIgZHVyYXRpb24gPSBhbmltYXRpb24ubGVuZ3RoIHx8IC0gMTtcblx0XHR2YXIgZnBzID0gYW5pbWF0aW9uLmZwcyB8fCAzMDtcblxuXHRcdHZhciBoaWVyYXJjaHlUcmFja3MgPSBhbmltYXRpb24uaGllcmFyY2h5IHx8IFtdO1xuXG5cdFx0Zm9yICggdmFyIGggPSAwOyBoIDwgaGllcmFyY2h5VHJhY2tzLmxlbmd0aDsgaCArKyApIHtcblxuXHRcdFx0dmFyIGFuaW1hdGlvbktleXMgPSBoaWVyYXJjaHlUcmFja3NbIGggXS5rZXlzO1xuXG5cdFx0XHQvLyBza2lwIGVtcHR5IHRyYWNrc1xuXHRcdFx0aWYgKCAhIGFuaW1hdGlvbktleXMgfHwgYW5pbWF0aW9uS2V5cy5sZW5ndGggPT09IDAgKSBjb250aW51ZTtcblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCB0YXJnZXRzXG5cdFx0XHRpZiAoIGFuaW1hdGlvbktleXNbIDAgXS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0Ly8gZmlndXJlIG91dCBhbGwgbW9ycGggdGFyZ2V0cyB1c2VkIGluIHRoaXMgdHJhY2tcblx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0TmFtZXMgPSB7fTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgayA9IDA7IGsgPCBhbmltYXRpb25LZXlzLmxlbmd0aDsgayArKyApIHtcblxuXHRcdFx0XHRcdGlmICggYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIG0gPSAwOyBtIDwgYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7IG0gKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0bW9ycGhUYXJnZXROYW1lc1sgYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0c1sgbSBdIF0gPSAtIDE7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY3JlYXRlIGEgdHJhY2sgZm9yIGVhY2ggbW9ycGggdGFyZ2V0IHdpdGggYWxsIHplcm9cblx0XHRcdFx0Ly8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGV4Y2VwdCBmb3IgdGhlIGtleXMgaW4gd2hpY2hcblx0XHRcdFx0Ly8gdGhlIG1vcnBoVGFyZ2V0IGlzIG5hbWVkLlxuXHRcdFx0XHRmb3IgKCB2YXIgbW9ycGhUYXJnZXROYW1lIGluIG1vcnBoVGFyZ2V0TmFtZXMgKSB7XG5cblx0XHRcdFx0XHR2YXIgdGltZXMgPSBbXTtcblx0XHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgbSA9IDA7IG0gIT09IGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHMubGVuZ3RoOyArKyBtICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgYW5pbWF0aW9uS2V5ID0gYW5pbWF0aW9uS2V5c1sgayBdO1xuXG5cdFx0XHRcdFx0XHR0aW1lcy5wdXNoKCBhbmltYXRpb25LZXkudGltZSApO1xuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goICggYW5pbWF0aW9uS2V5Lm1vcnBoVGFyZ2V0ID09PSBtb3JwaFRhcmdldE5hbWUgKSA/IDEgOiAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0cmFja3MucHVzaCggbmV3IE51bWJlcktleWZyYW1lVHJhY2soICcubW9ycGhUYXJnZXRJbmZsdWVuY2VbJyArIG1vcnBoVGFyZ2V0TmFtZSArICddJywgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGR1cmF0aW9uID0gbW9ycGhUYXJnZXROYW1lcy5sZW5ndGggKiAoIGZwcyB8fCAxLjAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyAuLi5hc3N1bWUgc2tlbGV0YWwgYW5pbWF0aW9uXG5cblx0XHRcdFx0dmFyIGJvbmVOYW1lID0gJy5ib25lc1snICsgYm9uZXNbIGggXS5uYW1lICsgJ10nO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0VmVjdG9yS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnBvc2l0aW9uJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncG9zJywgdHJhY2tzICk7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnF1YXRlcm5pb24nLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdyb3QnLCB0cmFja3MgKTtcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5zY2FsZScsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3NjbCcsIHRyYWNrcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRyYWNrcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGNsaXAgPSBuZXcgQW5pbWF0aW9uQ2xpcCggY2xpcE5hbWUsIGR1cmF0aW9uLCB0cmFja3MgKTtcblxuXHRcdHJldHVybiBjbGlwO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBBbmltYXRpb25DbGlwLnByb3RvdHlwZSwge1xuXG5cdHJlc2V0RHVyYXRpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0cmFja3MgPSB0aGlzLnRyYWNrcywgZHVyYXRpb24gPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gdHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIHRyYWNrID0gdGhpcy50cmFja3NbIGkgXTtcblxuXHRcdFx0ZHVyYXRpb24gPSBNYXRoLm1heCggZHVyYXRpb24sIHRyYWNrLnRpbWVzWyB0cmFjay50aW1lcy5sZW5ndGggLSAxIF0gKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJpbTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRyYWNrc1sgaSBdLnRyaW0oIDAsIHRoaXMuZHVyYXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2YWxpZCA9IHRydWU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhbGlkID0gdmFsaWQgJiYgdGhpcy50cmFja3NbIGkgXS52YWxpZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbGlkO1xuXG5cdH0sXG5cblx0b3B0aW1pemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50cmFja3NbIGkgXS5vcHRpbWl6ZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgQ2FjaGUgPSB7XG5cblx0ZW5hYmxlZDogZmFsc2UsXG5cblx0ZmlsZXM6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCBrZXksIGZpbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLkNhY2hlJywgJ0FkZGluZyBrZXk6Jywga2V5ICk7XG5cblx0XHR0aGlzLmZpbGVzWyBrZXkgXSA9IGZpbGU7XG5cblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdDaGVja2luZyBrZXk6Jywga2V5ICk7XG5cblx0XHRyZXR1cm4gdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0ZGVsZXRlIHRoaXMuZmlsZXNbIGtleSBdO1xuXG5cdH0sXG5cblx0Y2xlYXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZmlsZXMgPSB7fTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMb2FkaW5nTWFuYWdlciggb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIGlzTG9hZGluZyA9IGZhbHNlO1xuXHR2YXIgaXRlbXNMb2FkZWQgPSAwO1xuXHR2YXIgaXRlbXNUb3RhbCA9IDA7XG5cdHZhciB1cmxNb2RpZmllciA9IHVuZGVmaW5lZDtcblxuXHQvLyBSZWZlciB0byAjNTY4OSBmb3IgdGhlIHJlYXNvbiB3aHkgd2UgZG9uJ3Qgc2V0IC5vblN0YXJ0XG5cdC8vIGluIHRoZSBjb25zdHJ1Y3RvclxuXG5cdHRoaXMub25TdGFydCA9IHVuZGVmaW5lZDtcblx0dGhpcy5vbkxvYWQgPSBvbkxvYWQ7XG5cdHRoaXMub25Qcm9ncmVzcyA9IG9uUHJvZ3Jlc3M7XG5cdHRoaXMub25FcnJvciA9IG9uRXJyb3I7XG5cblx0dGhpcy5pdGVtU3RhcnQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdGl0ZW1zVG90YWwgKys7XG5cblx0XHRpZiAoIGlzTG9hZGluZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggc2NvcGUub25TdGFydCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uU3RhcnQoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aXNMb2FkaW5nID0gdHJ1ZTtcblxuXHR9O1xuXG5cdHRoaXMuaXRlbUVuZCA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0aXRlbXNMb2FkZWQgKys7XG5cblx0XHRpZiAoIHNjb3BlLm9uUHJvZ3Jlc3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUub25Qcm9ncmVzcyggdXJsLCBpdGVtc0xvYWRlZCwgaXRlbXNUb3RhbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpdGVtc0xvYWRlZCA9PT0gaXRlbXNUb3RhbCApIHtcblxuXHRcdFx0aXNMb2FkaW5nID0gZmFsc2U7XG5cblx0XHRcdGlmICggc2NvcGUub25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUub25Mb2FkKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuaXRlbUVycm9yID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpZiAoIHNjb3BlLm9uRXJyb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUub25FcnJvciggdXJsICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLnJlc29sdmVVUkwgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdGlmICggdXJsTW9kaWZpZXIgKSB7XG5cblx0XHRcdHJldHVybiB1cmxNb2RpZmllciggdXJsICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdXJsO1xuXG5cdH07XG5cblx0dGhpcy5zZXRVUkxNb2RpZmllciA9IGZ1bmN0aW9uICggdHJhbnNmb3JtICkge1xuXG5cdFx0dXJsTW9kaWZpZXIgPSB0cmFuc2Zvcm07XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxufVxuXG52YXIgRGVmYXVsdExvYWRpbmdNYW5hZ2VyID0gbmV3IExvYWRpbmdNYW5hZ2VyKCk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgbG9hZGluZyA9IHt9O1xuXG5mdW5jdGlvbiBGaWxlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZpbGVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcblxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XG5cblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7XG5cblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgcmVxdWVzdCBpcyBkdXBsaWNhdGVcblxuXHRcdGlmICggbG9hZGluZ1sgdXJsIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bG9hZGluZ1sgdXJsIF0ucHVzaCgge1xuXG5cdFx0XHRcdG9uTG9hZDogb25Mb2FkLFxuXHRcdFx0XHRvblByb2dyZXNzOiBvblByb2dyZXNzLFxuXHRcdFx0XHRvbkVycm9yOiBvbkVycm9yXG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIGRhdGE6IFVSSVxuXHRcdHZhciBkYXRhVXJpUmVnZXggPSAvXmRhdGE6KC4qPykoO2Jhc2U2NCk/LCguKikkLztcblx0XHR2YXIgZGF0YVVyaVJlZ2V4UmVzdWx0ID0gdXJsLm1hdGNoKCBkYXRhVXJpUmVnZXggKTtcblxuXHRcdC8vIFNhZmFyaSBjYW4gbm90IGhhbmRsZSBEYXRhIFVSSXMgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdCBzbyBwcm9jZXNzIG1hbnVhbGx5XG5cdFx0aWYgKCBkYXRhVXJpUmVnZXhSZXN1bHQgKSB7XG5cblx0XHRcdHZhciBtaW1lVHlwZSA9IGRhdGFVcmlSZWdleFJlc3VsdFsgMSBdO1xuXHRcdFx0dmFyIGlzQmFzZTY0ID0gISEgZGF0YVVyaVJlZ2V4UmVzdWx0WyAyIF07XG5cdFx0XHR2YXIgZGF0YSA9IGRhdGFVcmlSZWdleFJlc3VsdFsgMyBdO1xuXG5cdFx0XHRkYXRhID0gZGVjb2RlVVJJQ29tcG9uZW50KCBkYXRhICk7XG5cblx0XHRcdGlmICggaXNCYXNlNjQgKSBkYXRhID0gYXRvYiggZGF0YSApO1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHZhciByZXNwb25zZTtcblx0XHRcdFx0dmFyIHJlc3BvbnNlVHlwZSA9ICggdGhpcy5yZXNwb25zZVR5cGUgfHwgJycgKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRcdHN3aXRjaCAoIHJlc3BvbnNlVHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ2FycmF5YnVmZmVyJzpcblx0XHRcdFx0XHRjYXNlICdibG9iJzpcblxuXHRcdFx0XHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDhBcnJheSggZGF0YS5sZW5ndGggKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmlld1sgaSBdID0gZGF0YS5jaGFyQ29kZUF0KCBpICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCByZXNwb25zZVR5cGUgPT09ICdibG9iJyApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IG5ldyBCbG9iKCBbIHZpZXcuYnVmZmVyIF0sIHsgdHlwZTogbWltZVR5cGUgfSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gdmlldy5idWZmZXI7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdkb2N1bWVudCc6XG5cblx0XHRcdFx0XHRcdHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIG1pbWVUeXBlICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnanNvbic6XG5cblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gSlNPTi5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6IC8vICd0ZXh0JyBvciBvdGhlclxuXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGRhdGE7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXYWl0IGZvciBuZXh0IGJyb3dzZXIgdGljayBsaWtlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IGV2ZW50IGRpc3BhdGNoaW5nIGRvZXNcblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHJlc3BvbnNlICk7XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH0sIDAgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRcdC8vIFdhaXQgZm9yIG5leHQgYnJvd3NlciB0aWNrIGxpa2Ugc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3QgZXZlbnQgZGlzcGF0Y2hpbmcgZG9lc1xuXHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlcnJvciApO1xuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdFx0fSwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJbml0aWFsaXNlIGFycmF5IGZvciBkdXBsaWNhdGUgcmVxdWVzdHNcblxuXHRcdFx0bG9hZGluZ1sgdXJsIF0gPSBbXTtcblxuXHRcdFx0bG9hZGluZ1sgdXJsIF0ucHVzaCgge1xuXG5cdFx0XHRcdG9uTG9hZDogb25Mb2FkLFxuXHRcdFx0XHRvblByb2dyZXNzOiBvblByb2dyZXNzLFxuXHRcdFx0XHRvbkVycm9yOiBvbkVycm9yXG5cblx0XHRcdH0gKTtcblxuXHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuXHRcdFx0cmVxdWVzdC5vcGVuKCAnR0VUJywgdXJsLCB0cnVlICk7XG5cblx0XHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0XHRcdHZhciByZXNwb25zZSA9IHRoaXMucmVzcG9uc2U7XG5cblx0XHRcdFx0Q2FjaGUuYWRkKCB1cmwsIHJlc3BvbnNlICk7XG5cblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRpZiAoIHRoaXMuc3RhdHVzID09PSAyMDAgfHwgdGhpcy5zdGF0dXMgPT09IDAgKSB7XG5cblx0XHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIHJldHVybiBIVFRQIFN0YXR1cyAwIHdoZW4gdXNpbmcgbm9uLWh0dHAgcHJvdG9jb2xcblx0XHRcdFx0XHQvLyBlLmcuICdmaWxlOi8vJyBvciAnZGF0YTovLycuIEhhbmRsZSBhcyBzdWNjZXNzLlxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLnN0YXR1cyA9PT0gMCApIGNvbnNvbGUud2FybiggJ1RIUkVFLkZpbGVMb2FkZXI6IEhUVFAgU3RhdHVzIDAgcmVjZWl2ZWQuJyApO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uTG9hZCApIGNhbGxiYWNrLm9uTG9hZCggcmVzcG9uc2UgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkVycm9yICkgY2FsbGJhY2sub25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgZmFsc2UgKTtcblxuXHRcdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAncHJvZ3Jlc3MnLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0XHRcdHZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vblByb2dyZXNzICkgY2FsbGJhY2sub25Qcm9ncmVzcyggZXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIGZhbHNlICk7XG5cblx0XHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgZnVuY3Rpb24gKCBldmVudCApIHtcblxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0ZGVsZXRlIGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBldmVudCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIGZhbHNlICk7XG5cblx0XHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Fib3J0JywgZnVuY3Rpb24gKCBldmVudCApIHtcblxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0ZGVsZXRlIGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBldmVudCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIGZhbHNlICk7XG5cblx0XHRcdGlmICggdGhpcy5yZXNwb25zZVR5cGUgIT09IHVuZGVmaW5lZCApIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gdGhpcy5yZXNwb25zZVR5cGU7XG5cdFx0XHRpZiAoIHRoaXMud2l0aENyZWRlbnRpYWxzICE9PSB1bmRlZmluZWQgKSByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzO1xuXG5cdFx0XHRpZiAoIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZSApIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZSggdGhpcy5taW1lVHlwZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5taW1lVHlwZSA6ICd0ZXh0L3BsYWluJyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaGVhZGVyIGluIHRoaXMucmVxdWVzdEhlYWRlciApIHtcblxuXHRcdFx0XHRyZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoIGhlYWRlciwgdGhpcy5yZXF1ZXN0SGVhZGVyWyBoZWFkZXIgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlcXVlc3Quc2VuZCggbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0cmV0dXJuIHJlcXVlc3Q7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSZXNwb25zZVR5cGU6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnJlc3BvbnNlVHlwZSA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0V2l0aENyZWRlbnRpYWxzOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy53aXRoQ3JlZGVudGlhbHMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldE1pbWVUeXBlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5taW1lVHlwZSA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucmVxdWVzdEhlYWRlciA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKi9cblxuZnVuY3Rpb24gQW5pbWF0aW9uTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiwgb25Mb2FkICkge1xuXG5cdFx0dmFyIGFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY2xpcCA9IEFuaW1hdGlvbkNsaXAucGFyc2UoIGpzb25bIGkgXSApO1xuXG5cdFx0XHRhbmltYXRpb25zLnB1c2goIGNsaXAgKTtcblxuXHRcdH1cblxuXHRcdG9uTG9hZCggYW5pbWF0aW9ucyApO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKlxuICogQWJzdHJhY3QgQmFzZSBjbGFzcyB0byBibG9jayBiYXNlZCB0ZXh0dXJlcyBsb2FkZXIgKGRkcywgcHZyLCAuLi4pXG4gKi9cblxuZnVuY3Rpb24gQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cblx0Ly8gb3ZlcnJpZGUgaW4gc3ViIGNsYXNzZXNcblx0dGhpcy5fcGFyc2VyID0gbnVsbDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDb21wcmVzc2VkVGV4dHVyZUxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBpbWFnZXMgPSBbXTtcblxuXHRcdHZhciB0ZXh0dXJlID0gbmV3IENvbXByZXNzZWRUZXh0dXJlKCk7XG5cdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblxuXHRcdGZ1bmN0aW9uIGxvYWRUZXh0dXJlKCBpICkge1xuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsWyBpIF0sIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHRcdHZhciB0ZXhEYXRhcyA9IHNjb3BlLl9wYXJzZXIoIGJ1ZmZlciwgdHJ1ZSApO1xuXG5cdFx0XHRcdGltYWdlc1sgaSBdID0ge1xuXHRcdFx0XHRcdHdpZHRoOiB0ZXhEYXRhcy53aWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IHRleERhdGFzLmhlaWdodCxcblx0XHRcdFx0XHRmb3JtYXQ6IHRleERhdGFzLmZvcm1hdCxcblx0XHRcdFx0XHRtaXBtYXBzOiB0ZXhEYXRhcy5taXBtYXBzXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bG9hZGVkICs9IDE7XG5cblx0XHRcdFx0aWYgKCBsb2FkZWQgPT09IDYgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxIClcblx0XHRcdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhcy5mb3JtYXQ7XG5cdFx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0dmFyIGxvYWRlZCA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB1cmwubGVuZ3RoOyBpIDwgaWw7ICsrIGkgKSB7XG5cblx0XHRcdFx0bG9hZFRleHR1cmUoIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gY29tcHJlc3NlZCBjdWJlbWFwIHRleHR1cmUgc3RvcmVkIGluIGEgc2luZ2xlIEREUyBmaWxlXG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHRcdHZhciB0ZXhEYXRhcyA9IHNjb3BlLl9wYXJzZXIoIGJ1ZmZlciwgdHJ1ZSApO1xuXG5cdFx0XHRcdGlmICggdGV4RGF0YXMuaXNDdWJlbWFwICkge1xuXG5cdFx0XHRcdFx0dmFyIGZhY2VzID0gdGV4RGF0YXMubWlwbWFwcy5sZW5ndGggLyB0ZXhEYXRhcy5taXBtYXBDb3VudDtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBmID0gMDsgZiA8IGZhY2VzOyBmICsrICkge1xuXG5cdFx0XHRcdFx0XHRpbWFnZXNbIGYgXSA9IHsgbWlwbWFwczogW10gfTtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGV4RGF0YXMubWlwbWFwQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0ubWlwbWFwcy5wdXNoKCB0ZXhEYXRhcy5taXBtYXBzWyBmICogdGV4RGF0YXMubWlwbWFwQ291bnQgKyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS53aWR0aCA9IHRleERhdGFzLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZS53aWR0aCA9IHRleERhdGFzLndpZHRoO1xuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gdGV4RGF0YXMuaGVpZ2h0O1xuXHRcdFx0XHRcdHRleHR1cmUubWlwbWFwcyA9IHRleERhdGFzLm1pcG1hcHM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGV4RGF0YXMubWlwbWFwQ291bnQgPT09IDEgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhcy5mb3JtYXQ7XG5cdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgTmlrb3MgTS4gLyBodHRwczovL2dpdGh1Yi5jb20vZm9vMTIzL1xuICpcbiAqIEFic3RyYWN0IEJhc2UgY2xhc3MgdG8gbG9hZCBnZW5lcmljIGJpbmFyeSB0ZXh0dXJlcyBmb3JtYXRzIChyZ2JlLCBoZHIsIC4uLilcbiAqL1xuXG5mdW5jdGlvbiBEYXRhVGV4dHVyZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuXHQvLyBvdmVycmlkZSBpbiBzdWIgY2xhc3Nlc1xuXHR0aGlzLl9wYXJzZXIgPSBudWxsO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIERhdGFUZXh0dXJlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoKTtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0dmFyIHRleERhdGEgPSBzY29wZS5fcGFyc2VyKCBidWZmZXIgKTtcblxuXHRcdFx0aWYgKCAhIHRleERhdGEgKSByZXR1cm47XG5cblx0XHRcdGlmICggdGV4RGF0YS5pbWFnZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2UgPSB0ZXhEYXRhLmltYWdlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXhEYXRhLmRhdGEgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLndpZHRoID0gdGV4RGF0YS53aWR0aDtcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5oZWlnaHQgPSB0ZXhEYXRhLmhlaWdodDtcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5kYXRhID0gdGV4RGF0YS5kYXRhO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUud3JhcFMgPSB0ZXhEYXRhLndyYXBTICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLndyYXBTIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblx0XHRcdHRleHR1cmUud3JhcFQgPSB0ZXhEYXRhLndyYXBUICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLndyYXBUIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHRcdFx0dGV4dHVyZS5tYWdGaWx0ZXIgPSB0ZXhEYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5tYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IHRleERhdGEubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1pbkZpbHRlciA6IExpbmVhck1pcE1hcExpbmVhckZpbHRlcjtcblxuXHRcdFx0dGV4dHVyZS5hbmlzb3Ryb3B5ID0gdGV4RGF0YS5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLmFuaXNvdHJvcHkgOiAxO1xuXG5cdFx0XHRpZiAoIHRleERhdGEuZm9ybWF0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhLmZvcm1hdDtcblxuXHRcdFx0fVxuXHRcdFx0aWYgKCB0ZXhEYXRhLnR5cGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSB0ZXhEYXRhLnR5cGU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLm1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhLm1pcG1hcHM7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSwgdGV4RGF0YSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblxuZnVuY3Rpb24gSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggSW1hZ2VMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnaW1nJyApO1xuXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUxvYWQoKSB7XG5cblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7XG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRcdENhY2hlLmFkZCggdXJsLCB0aGlzICk7XG5cblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0aGlzICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkltYWdlRXJyb3IoIGV2ZW50ICkge1xuXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBldmVudCApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRpZiAoIHVybC5zdWJzdHIoIDAsIDUgKSAhPT0gJ2RhdGE6JyApIHtcblxuXHRcdFx0aWYgKCB0aGlzLmNyb3NzT3JpZ2luICE9PSB1bmRlZmluZWQgKSBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuY3Jvc3NPcmlnaW47XG5cblx0XHR9XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRpbWFnZS5zcmMgPSB1cmw7XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblxuZnVuY3Rpb24gQ3ViZVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQ3ViZVRleHR1cmVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJscywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblxuXHRcdHZhciBsb2FkZWQgPSAwO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmxzWyBpIF0sIGZ1bmN0aW9uICggaW1hZ2UgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZXNbIGkgXSA9IGltYWdlO1xuXG5cdFx0XHRcdGxvYWRlZCArKztcblxuXHRcdFx0XHRpZiAoIGxvYWRlZCA9PT0gNiApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFRleHR1cmVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2U7XG5cblx0XHRcdC8vIEpQRUdzIGNhbid0IGhhdmUgYW4gYWxwaGEgY2hhbm5lbCwgc28gbWVtb3J5IGNhbiBiZSBzYXZlZCBieSBzdG9yaW5nIHRoZW0gYXMgUkdCLlxuXHRcdFx0dmFyIGlzSlBFRyA9IHVybC5zZWFyY2goIC9cXC5qcGU/ZygkfFxcPykvaSApID4gMCB8fCB1cmwuc2VhcmNoKCAvXmRhdGFcXDppbWFnZVxcL2pwZWcvICkgPT09IDA7XG5cblx0XHRcdHRleHR1cmUuZm9ybWF0ID0gaXNKUEVHID8gUkdCRm9ybWF0IDogUkdCQUZvcm1hdDtcblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEV4dGVuc2libGUgY3VydmUgb2JqZWN0XG4gKlxuICogU29tZSBjb21tb24gb2YgY3VydmUgbWV0aG9kczpcbiAqIC5nZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKSwgLmdldFRhbmdlbnQoIHQgKVxuICogLmdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50QXQoIHUgKVxuICogLmdldFBvaW50cygpLCAuZ2V0U3BhY2VkUG9pbnRzKClcbiAqIC5nZXRMZW5ndGgoKVxuICogLnVwZGF0ZUFyY0xlbmd0aHMoKVxuICpcbiAqIFRoaXMgZm9sbG93aW5nIGN1cnZlcyBpbmhlcml0IGZyb20gVEhSRUUuQ3VydmU6XG4gKlxuICogLS0gMkQgY3VydmVzIC0tXG4gKiBUSFJFRS5BcmNDdXJ2ZVxuICogVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZVxuICogVEhSRUUuRWxsaXBzZUN1cnZlXG4gKiBUSFJFRS5MaW5lQ3VydmVcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlXG4gKiBUSFJFRS5TcGxpbmVDdXJ2ZVxuICpcbiAqIC0tIDNEIGN1cnZlcyAtLVxuICogVEhSRUUuQ2F0bXVsbFJvbUN1cnZlM1xuICogVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZTNcbiAqIFRIUkVFLkxpbmVDdXJ2ZTNcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlM1xuICpcbiAqIEEgc2VyaWVzIG9mIGN1cnZlcyBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBUSFJFRS5DdXJ2ZVBhdGguXG4gKlxuICoqL1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXHRBYnN0cmFjdCBDdXJ2ZSBiYXNlIGNsYXNzXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIEN1cnZlKCkge1xuXG5cdHRoaXMudHlwZSA9ICdDdXJ2ZSc7XG5cblx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSAyMDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQ3VydmUucHJvdG90eXBlLCB7XG5cblx0Ly8gVmlydHVhbCBiYXNlIGNsYXNzIG1ldGhvZCB0byBvdmVyd3JpdGUgYW5kIGltcGxlbWVudCBpbiBzdWJjbGFzc2VzXG5cdC8vXHQtIHQgWzAgLi4gMV1cblxuXHRnZXRQb2ludDogZnVuY3Rpb24gKCAvKiB0LCBvcHRpb25hbFRhcmdldCAqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlOiAuZ2V0UG9pbnQoKSBub3QgaW1wbGVtZW50ZWQuJyApO1xuXHRcdHJldHVybiBudWxsO1xuXG5cdH0sXG5cblx0Ly8gR2V0IHBvaW50IGF0IHJlbGF0aXZlIHBvc2l0aW9uIGluIGN1cnZlIGFjY29yZGluZyB0byBhcmMgbGVuZ3RoXG5cdC8vIC0gdSBbMCAuLiAxXVxuXG5cdGdldFBvaW50QXQ6IGZ1bmN0aW9uICggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHR2YXIgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcoIHUgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9LFxuXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnQoIHQgKVxuXG5cdGdldFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRpZiAoIGRpdmlzaW9ucyA9PT0gdW5kZWZpbmVkICkgZGl2aXNpb25zID0gNTtcblxuXHRcdHZhciBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50KCBkIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fSxcblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50QXQoIHUgKVxuXG5cdGdldFNwYWNlZFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRpZiAoIGRpdmlzaW9ucyA9PT0gdW5kZWZpbmVkICkgZGl2aXNpb25zID0gNTtcblxuXHRcdHZhciBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50QXQoIGQgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9LFxuXG5cdC8vIEdldCB0b3RhbCBjdXJ2ZSBhcmMgbGVuZ3RoXG5cblx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xuXHRcdHJldHVybiBsZW5ndGhzWyBsZW5ndGhzLmxlbmd0aCAtIDEgXTtcblxuXHR9LFxuXG5cdC8vIEdldCBsaXN0IG9mIGN1bXVsYXRpdmUgc2VnbWVudCBsZW5ndGhzXG5cblx0Z2V0TGVuZ3RoczogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRpZiAoIGRpdmlzaW9ucyA9PT0gdW5kZWZpbmVkICkgZGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRpZiAoIHRoaXMuY2FjaGVBcmNMZW5ndGhzICYmXG5cdFx0XHQoIHRoaXMuY2FjaGVBcmNMZW5ndGhzLmxlbmd0aCA9PT0gZGl2aXNpb25zICsgMSApICYmXG5cdFx0XHQhIHRoaXMubmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3RocztcblxuXHRcdH1cblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdHZhciBjYWNoZSA9IFtdO1xuXHRcdHZhciBjdXJyZW50LCBsYXN0ID0gdGhpcy5nZXRQb2ludCggMCApO1xuXHRcdHZhciBwLCBzdW0gPSAwO1xuXG5cdFx0Y2FjaGUucHVzaCggMCApO1xuXG5cdFx0Zm9yICggcCA9IDE7IHAgPD0gZGl2aXNpb25zOyBwICsrICkge1xuXG5cdFx0XHRjdXJyZW50ID0gdGhpcy5nZXRQb2ludCggcCAvIGRpdmlzaW9ucyApO1xuXHRcdFx0c3VtICs9IGN1cnJlbnQuZGlzdGFuY2VUbyggbGFzdCApO1xuXHRcdFx0Y2FjaGUucHVzaCggc3VtICk7XG5cdFx0XHRsYXN0ID0gY3VycmVudDtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2FjaGVBcmNMZW5ndGhzID0gY2FjaGU7XG5cblx0XHRyZXR1cm4gY2FjaGU7IC8vIHsgc3VtczogY2FjaGUsIHN1bTogc3VtIH07IFN1bSBpcyBpbiB0aGUgbGFzdCBlbGVtZW50LlxuXG5cdH0sXG5cblx0dXBkYXRlQXJjTGVuZ3RoczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5nZXRMZW5ndGhzKCk7XG5cblx0fSxcblxuXHQvLyBHaXZlbiB1ICggMCAuLiAxICksIGdldCBhIHQgdG8gZmluZCBwLiBUaGlzIGdpdmVzIHlvdSBwb2ludHMgd2hpY2ggYXJlIGVxdWlkaXN0YW50XG5cblx0Z2V0VXRvVG1hcHBpbmc6IGZ1bmN0aW9uICggdSwgZGlzdGFuY2UgKSB7XG5cblx0XHR2YXIgYXJjTGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdFx0dmFyIGkgPSAwLCBpbCA9IGFyY0xlbmd0aHMubGVuZ3RoO1xuXG5cdFx0dmFyIHRhcmdldEFyY0xlbmd0aDsgLy8gVGhlIHRhcmdldGVkIHUgZGlzdGFuY2UgdmFsdWUgdG8gZ2V0XG5cblx0XHRpZiAoIGRpc3RhbmNlICkge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSBkaXN0YW5jZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IHUgKiBhcmNMZW5ndGhzWyBpbCAtIDEgXTtcblxuXHRcdH1cblxuXHRcdC8vIGJpbmFyeSBzZWFyY2ggZm9yIHRoZSBpbmRleCB3aXRoIGxhcmdlc3QgdmFsdWUgc21hbGxlciB0aGFuIHRhcmdldCB1IGRpc3RhbmNlXG5cblx0XHR2YXIgbG93ID0gMCwgaGlnaCA9IGlsIC0gMSwgY29tcGFyaXNvbjtcblxuXHRcdHdoaWxlICggbG93IDw9IGhpZ2ggKSB7XG5cblx0XHRcdGkgPSBNYXRoLmZsb29yKCBsb3cgKyAoIGhpZ2ggLSBsb3cgKSAvIDIgKTsgLy8gbGVzcyBsaWtlbHkgdG8gb3ZlcmZsb3csIHRob3VnaCBwcm9iYWJseSBub3QgaXNzdWUgaGVyZSwgSlMgZG9lc24ndCByZWFsbHkgaGF2ZSBpbnRlZ2VycywgYWxsIG51bWJlcnMgYXJlIGZsb2F0c1xuXG5cdFx0XHRjb21wYXJpc29uID0gYXJjTGVuZ3Roc1sgaSBdIC0gdGFyZ2V0QXJjTGVuZ3RoO1xuXG5cdFx0XHRpZiAoIGNvbXBhcmlzb24gPCAwICkge1xuXG5cdFx0XHRcdGxvdyA9IGkgKyAxO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21wYXJpc29uID4gMCApIHtcblxuXHRcdFx0XHRoaWdoID0gaSAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aGlnaCA9IGk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8vIERPTkVcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aSA9IGhpZ2g7XG5cblx0XHRpZiAoIGFyY0xlbmd0aHNbIGkgXSA9PT0gdGFyZ2V0QXJjTGVuZ3RoICkge1xuXG5cdFx0XHRyZXR1cm4gaSAvICggaWwgLSAxICk7XG5cblx0XHR9XG5cblx0XHQvLyB3ZSBjb3VsZCBnZXQgZmluZXIgZ3JhaW4gYXQgbGVuZ3Rocywgb3IgdXNlIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuXG5cdFx0dmFyIGxlbmd0aEJlZm9yZSA9IGFyY0xlbmd0aHNbIGkgXTtcblx0XHR2YXIgbGVuZ3RoQWZ0ZXIgPSBhcmNMZW5ndGhzWyBpICsgMSBdO1xuXG5cdFx0dmFyIHNlZ21lbnRMZW5ndGggPSBsZW5ndGhBZnRlciAtIGxlbmd0aEJlZm9yZTtcblxuXHRcdC8vIGRldGVybWluZSB3aGVyZSB3ZSBhcmUgYmV0d2VlbiB0aGUgJ2JlZm9yZScgYW5kICdhZnRlcicgcG9pbnRzXG5cblx0XHR2YXIgc2VnbWVudEZyYWN0aW9uID0gKCB0YXJnZXRBcmNMZW5ndGggLSBsZW5ndGhCZWZvcmUgKSAvIHNlZ21lbnRMZW5ndGg7XG5cblx0XHQvLyBhZGQgdGhhdCBmcmFjdGlvbmFsIGFtb3VudCB0byB0XG5cblx0XHR2YXIgdCA9ICggaSArIHNlZ21lbnRGcmFjdGlvbiApIC8gKCBpbCAtIDEgKTtcblxuXHRcdHJldHVybiB0O1xuXG5cdH0sXG5cblx0Ly8gUmV0dXJucyBhIHVuaXQgdmVjdG9yIHRhbmdlbnQgYXQgdFxuXHQvLyBJbiBjYXNlIGFueSBzdWIgY3VydmUgZG9lcyBub3QgaW1wbGVtZW50IGl0cyB0YW5nZW50IGRlcml2YXRpb24sXG5cdC8vIDIgcG9pbnRzIGEgc21hbGwgZGVsdGEgYXBhcnQgd2lsbCBiZSB1c2VkIHRvIGZpbmQgaXRzIGdyYWRpZW50XG5cdC8vIHdoaWNoIHNlZW1zIHRvIGdpdmUgYSByZWFzb25hYmxlIGFwcHJveGltYXRpb25cblxuXHRnZXRUYW5nZW50OiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHR2YXIgZGVsdGEgPSAwLjAwMDE7XG5cdFx0dmFyIHQxID0gdCAtIGRlbHRhO1xuXHRcdHZhciB0MiA9IHQgKyBkZWx0YTtcblxuXHRcdC8vIENhcHBpbmcgaW4gY2FzZSBvZiBkYW5nZXJcblxuXHRcdGlmICggdDEgPCAwICkgdDEgPSAwO1xuXHRcdGlmICggdDIgPiAxICkgdDIgPSAxO1xuXG5cdFx0dmFyIHB0MSA9IHRoaXMuZ2V0UG9pbnQoIHQxICk7XG5cdFx0dmFyIHB0MiA9IHRoaXMuZ2V0UG9pbnQoIHQyICk7XG5cblx0XHR2YXIgdmVjID0gcHQyLmNsb25lKCkuc3ViKCBwdDEgKTtcblx0XHRyZXR1cm4gdmVjLm5vcm1hbGl6ZSgpO1xuXG5cdH0sXG5cblx0Z2V0VGFuZ2VudEF0OiBmdW5jdGlvbiAoIHUgKSB7XG5cblx0XHR2YXIgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcoIHUgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRUYW5nZW50KCB0ICk7XG5cblx0fSxcblxuXHRjb21wdXRlRnJlbmV0RnJhbWVzOiBmdW5jdGlvbiAoIHNlZ21lbnRzLCBjbG9zZWQgKSB7XG5cblx0XHQvLyBzZWUgaHR0cDovL3d3dy5jcy5pbmRpYW5hLmVkdS9wdWIvdGVjaHJlcG9ydHMvVFI0MjUucGRmXG5cblx0XHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB0YW5nZW50cyA9IFtdO1xuXHRcdHZhciBub3JtYWxzID0gW107XG5cdFx0dmFyIGJpbm9ybWFscyA9IFtdO1xuXG5cdFx0dmFyIHZlYyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG1hdCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHR2YXIgaSwgdSwgdGhldGE7XG5cblx0XHQvLyBjb21wdXRlIHRoZSB0YW5nZW50IHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHR1ID0gaSAvIHNlZ21lbnRzO1xuXG5cdFx0XHR0YW5nZW50c1sgaSBdID0gdGhpcy5nZXRUYW5nZW50QXQoIHUgKTtcblx0XHRcdHRhbmdlbnRzWyBpIF0ubm9ybWFsaXplKCk7XG5cblx0XHR9XG5cblx0XHQvLyBzZWxlY3QgYW4gaW5pdGlhbCBub3JtYWwgdmVjdG9yIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGZpcnN0IHRhbmdlbnQgdmVjdG9yLFxuXHRcdC8vIGFuZCBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBtaW5pbXVtIHRhbmdlbnQgeHl6IGNvbXBvbmVudFxuXG5cdFx0bm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRiaW5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG5cdFx0dmFyIHR4ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueCApO1xuXHRcdHZhciB0eSA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnkgKTtcblx0XHR2YXIgdHogPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS56ICk7XG5cblx0XHRpZiAoIHR4IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHg7XG5cdFx0XHRub3JtYWwuc2V0KCAxLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHk7XG5cdFx0XHRub3JtYWwuc2V0KCAwLCAxLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR6IDw9IG1pbiApIHtcblxuXHRcdFx0bm9ybWFsLnNldCggMCwgMCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0dmVjLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsICkubm9ybWFsaXplKCk7XG5cblx0XHRub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCB2ZWMgKTtcblx0XHRiaW5vcm1hbHNbIDAgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbHNbIDAgXSApO1xuXG5cblx0XHQvLyBjb21wdXRlIHRoZSBzbG93bHktdmFyeWluZyBub3JtYWwgYW5kIGJpbm9ybWFsIHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRub3JtYWxzWyBpIF0gPSBub3JtYWxzWyBpIC0gMSBdLmNsb25lKCk7XG5cblx0XHRcdGJpbm9ybWFsc1sgaSBdID0gYmlub3JtYWxzWyBpIC0gMSBdLmNsb25lKCk7XG5cblx0XHRcdHZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIC0gMSBdLCB0YW5nZW50c1sgaSBdICk7XG5cblx0XHRcdGlmICggdmVjLmxlbmd0aCgpID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0dmVjLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdHRoZXRhID0gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggdGFuZ2VudHNbIGkgLSAxIF0uZG90KCB0YW5nZW50c1sgaSBdICksIC0gMSwgMSApICk7IC8vIGNsYW1wIGZvciBmbG9hdGluZyBwdCBlcnJvcnNcblxuXHRcdFx0XHRub3JtYWxzWyBpIF0uYXBwbHlNYXRyaXg0KCBtYXQubWFrZVJvdGF0aW9uQXhpcyggdmVjLCB0aGV0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ymlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIGlmIHRoZSBjdXJ2ZSBpcyBjbG9zZWQsIHBvc3Rwcm9jZXNzIHRoZSB2ZWN0b3JzIHNvIHRoZSBmaXJzdCBhbmQgbGFzdCBub3JtYWwgdmVjdG9ycyBhcmUgdGhlIHNhbWVcblxuXHRcdGlmICggY2xvc2VkID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGV0YSA9IE1hdGguYWNvcyggX01hdGguY2xhbXAoIG5vcm1hbHNbIDAgXS5kb3QoIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSwgLSAxLCAxICkgKTtcblx0XHRcdHRoZXRhIC89IHNlZ21lbnRzO1xuXG5cdFx0XHRpZiAoIHRhbmdlbnRzWyAwIF0uZG90KCB2ZWMuY3Jvc3NWZWN0b3JzKCBub3JtYWxzWyAwIF0sIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSApID4gMCApIHtcblxuXHRcdFx0XHR0aGV0YSA9IC0gdGhldGE7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gdHdpc3QgYSBsaXR0bGUuLi5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHRhbmdlbnRzWyBpIF0sIHRoZXRhICogaSApICk7XG5cdFx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0YW5nZW50czogdGFuZ2VudHMsXG5cdFx0XHRub3JtYWxzOiBub3JtYWxzLFxuXHRcdFx0Ymlub3JtYWxzOiBiaW5vcm1hbHNcblx0XHR9O1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBzb3VyY2UuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnQ3VydmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdDdXJ2ZS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGRhdGEuYXJjTGVuZ3RoRGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBqc29uLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBFbGxpcHNlQ3VydmUoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRWxsaXBzZUN1cnZlJztcblxuXHR0aGlzLmFYID0gYVggfHwgMDtcblx0dGhpcy5hWSA9IGFZIHx8IDA7XG5cblx0dGhpcy54UmFkaXVzID0geFJhZGl1cyB8fCAxO1xuXHR0aGlzLnlSYWRpdXMgPSB5UmFkaXVzIHx8IDE7XG5cblx0dGhpcy5hU3RhcnRBbmdsZSA9IGFTdGFydEFuZ2xlIHx8IDA7XG5cdHRoaXMuYUVuZEFuZ2xlID0gYUVuZEFuZ2xlIHx8IDIgKiBNYXRoLlBJO1xuXG5cdHRoaXMuYUNsb2Nrd2lzZSA9IGFDbG9ja3dpc2UgfHwgZmFsc2U7XG5cblx0dGhpcy5hUm90YXRpb24gPSBhUm90YXRpb24gfHwgMDtcblxufVxuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRWxsaXBzZUN1cnZlO1xuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmlzRWxsaXBzZUN1cnZlID0gdHJ1ZTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgdHdvUGkgPSBNYXRoLlBJICogMjtcblx0dmFyIGRlbHRhQW5nbGUgPSB0aGlzLmFFbmRBbmdsZSAtIHRoaXMuYVN0YXJ0QW5nbGU7XG5cdHZhciBzYW1lUG9pbnRzID0gTWF0aC5hYnMoIGRlbHRhQW5nbGUgKSA8IE51bWJlci5FUFNJTE9OO1xuXG5cdC8vIGVuc3VyZXMgdGhhdCBkZWx0YUFuZ2xlIGlzIDAgLi4gMiBQSVxuXHR3aGlsZSAoIGRlbHRhQW5nbGUgPCAwICkgZGVsdGFBbmdsZSArPSB0d29QaTtcblx0d2hpbGUgKCBkZWx0YUFuZ2xlID4gdHdvUGkgKSBkZWx0YUFuZ2xlIC09IHR3b1BpO1xuXG5cdGlmICggZGVsdGFBbmdsZSA8IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0aWYgKCBzYW1lUG9pbnRzICkge1xuXG5cdFx0XHRkZWx0YUFuZ2xlID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRlbHRhQW5nbGUgPSB0d29QaTtcblxuXHRcdH1cblxuXHR9XG5cblx0aWYgKCB0aGlzLmFDbG9ja3dpc2UgPT09IHRydWUgJiYgISBzYW1lUG9pbnRzICkge1xuXG5cdFx0aWYgKCBkZWx0YUFuZ2xlID09PSB0d29QaSApIHtcblxuXHRcdFx0ZGVsdGFBbmdsZSA9IC0gdHdvUGk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkZWx0YUFuZ2xlID0gZGVsdGFBbmdsZSAtIHR3b1BpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR2YXIgYW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlICsgdCAqIGRlbHRhQW5nbGU7XG5cdHZhciB4ID0gdGhpcy5hWCArIHRoaXMueFJhZGl1cyAqIE1hdGguY29zKCBhbmdsZSApO1xuXHR2YXIgeSA9IHRoaXMuYVkgKyB0aGlzLnlSYWRpdXMgKiBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRpZiAoIHRoaXMuYVJvdGF0aW9uICE9PSAwICkge1xuXG5cdFx0dmFyIGNvcyA9IE1hdGguY29zKCB0aGlzLmFSb3RhdGlvbiApO1xuXHRcdHZhciBzaW4gPSBNYXRoLnNpbiggdGhpcy5hUm90YXRpb24gKTtcblxuXHRcdHZhciB0eCA9IHggLSB0aGlzLmFYO1xuXHRcdHZhciB0eSA9IHkgLSB0aGlzLmFZO1xuXG5cdFx0Ly8gUm90YXRlIHRoZSBwb2ludCBhYm91dCB0aGUgY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxuXHRcdHggPSB0eCAqIGNvcyAtIHR5ICogc2luICsgdGhpcy5hWDtcblx0XHR5ID0gdHggKiBzaW4gKyB0eSAqIGNvcyArIHRoaXMuYVk7XG5cblx0fVxuXG5cdHJldHVybiBwb2ludC5zZXQoIHgsIHkgKTtcblxufTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5hWCA9IHNvdXJjZS5hWDtcblx0dGhpcy5hWSA9IHNvdXJjZS5hWTtcblxuXHR0aGlzLnhSYWRpdXMgPSBzb3VyY2UueFJhZGl1cztcblx0dGhpcy55UmFkaXVzID0gc291cmNlLnlSYWRpdXM7XG5cblx0dGhpcy5hU3RhcnRBbmdsZSA9IHNvdXJjZS5hU3RhcnRBbmdsZTtcblx0dGhpcy5hRW5kQW5nbGUgPSBzb3VyY2UuYUVuZEFuZ2xlO1xuXG5cdHRoaXMuYUNsb2Nrd2lzZSA9IHNvdXJjZS5hQ2xvY2t3aXNlO1xuXG5cdHRoaXMuYVJvdGF0aW9uID0gc291cmNlLmFSb3RhdGlvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEuYVggPSB0aGlzLmFYO1xuXHRkYXRhLmFZID0gdGhpcy5hWTtcblxuXHRkYXRhLnhSYWRpdXMgPSB0aGlzLnhSYWRpdXM7XG5cdGRhdGEueVJhZGl1cyA9IHRoaXMueVJhZGl1cztcblxuXHRkYXRhLmFTdGFydEFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZTtcblx0ZGF0YS5hRW5kQW5nbGUgPSB0aGlzLmFFbmRBbmdsZTtcblxuXHRkYXRhLmFDbG9ja3dpc2UgPSB0aGlzLmFDbG9ja3dpc2U7XG5cblx0ZGF0YS5hUm90YXRpb24gPSB0aGlzLmFSb3RhdGlvbjtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMuYVggPSBqc29uLmFYO1xuXHR0aGlzLmFZID0ganNvbi5hWTtcblxuXHR0aGlzLnhSYWRpdXMgPSBqc29uLnhSYWRpdXM7XG5cdHRoaXMueVJhZGl1cyA9IGpzb24ueVJhZGl1cztcblxuXHR0aGlzLmFTdGFydEFuZ2xlID0ganNvbi5hU3RhcnRBbmdsZTtcblx0dGhpcy5hRW5kQW5nbGUgPSBqc29uLmFFbmRBbmdsZTtcblxuXHR0aGlzLmFDbG9ja3dpc2UgPSBqc29uLmFDbG9ja3dpc2U7XG5cblx0dGhpcy5hUm90YXRpb24gPSBqc29uLmFSb3RhdGlvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gQXJjQ3VydmUoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRFbGxpcHNlQ3VydmUuY2FsbCggdGhpcywgYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0dGhpcy50eXBlID0gJ0FyY0N1cnZlJztcblxufVxuXG5BcmNDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFbGxpcHNlQ3VydmUucHJvdG90eXBlICk7XG5BcmNDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBcmNDdXJ2ZTtcblxuQXJjQ3VydmUucHJvdG90eXBlLmlzQXJjQ3VydmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICpcbiAqIENlbnRyaXBldGFsIENhdG11bGxSb20gQ3VydmUgLSB3aGljaCBpcyB1c2VmdWwgZm9yIGF2b2lkaW5nXG4gKiBjdXNwcyBhbmQgc2VsZi1pbnRlcnNlY3Rpb25zIGluIG5vbi11bmlmb3JtIGNhdG11bGwgcm9tIGN1cnZlcy5cbiAqIGh0dHA6Ly93d3cuY2VteXVrc2VsLmNvbS9yZXNlYXJjaC9jYXRtdWxscm9tX3BhcmFtL2NhdG11bGxyb20ucGRmXG4gKlxuICogY3VydmUudHlwZSBhY2NlcHRzIGNlbnRyaXBldGFsKGRlZmF1bHQpLCBjaG9yZGFsIGFuZCBjYXRtdWxscm9tXG4gKiBjdXJ2ZS50ZW5zaW9uIGlzIHVzZWQgZm9yIGNhdG11bGxyb20gd2hpY2ggZGVmYXVsdHMgdG8gMC41XG4gKi9cblxuXG4vKlxuQmFzZWQgb24gYW4gb3B0aW1pemVkIGMrKyBzb2x1dGlvbiBpblxuIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NDg5NzM2L2NhdG11bGwtcm9tLWN1cnZlLXdpdGgtbm8tY3VzcHMtYW5kLW5vLXNlbGYtaW50ZXJzZWN0aW9ucy9cbiAtIGh0dHA6Ly9pZGVvbmUuY29tL05vRWJWTVxuXG5UaGlzIEN1YmljUG9seSBjbGFzcyBjb3VsZCBiZSB1c2VkIGZvciByZXVzaW5nIHNvbWUgdmFyaWFibGVzIGFuZCBjYWxjdWxhdGlvbnMsXG5idXQgZm9yIHRocmVlLmpzIGN1cnZlIHVzZSwgaXQgY291bGQgYmUgcG9zc2libGUgaW5saW5lZCBhbmQgZmxhdHRlbiBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxcbndoaWNoIGNhbiBiZSBwbGFjZWQgaW4gQ3VydmVVdGlscy5cbiovXG5cbmZ1bmN0aW9uIEN1YmljUG9seSgpIHtcblxuXHR2YXIgYzAgPSAwLCBjMSA9IDAsIGMyID0gMCwgYzMgPSAwO1xuXG5cdC8qXG5cdCAqIENvbXB1dGUgY29lZmZpY2llbnRzIGZvciBhIGN1YmljIHBvbHlub21pYWxcblx0ICogICBwKHMpID0gYzAgKyBjMSpzICsgYzIqc14yICsgYzMqc14zXG5cdCAqIHN1Y2ggdGhhdFxuXHQgKiAgIHAoMCkgPSB4MCwgcCgxKSA9IHgxXG5cdCAqICBhbmRcblx0ICogICBwJygwKSA9IHQwLCBwJygxKSA9IHQxLlxuXHQgKi9cblx0ZnVuY3Rpb24gaW5pdCggeDAsIHgxLCB0MCwgdDEgKSB7XG5cblx0XHRjMCA9IHgwO1xuXHRcdGMxID0gdDA7XG5cdFx0YzIgPSAtIDMgKiB4MCArIDMgKiB4MSAtIDIgKiB0MCAtIHQxO1xuXHRcdGMzID0gMiAqIHgwIC0gMiAqIHgxICsgdDAgKyB0MTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGluaXRDYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCB0ZW5zaW9uICkge1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHRlbnNpb24gKiAoIHgyIC0geDAgKSwgdGVuc2lvbiAqICggeDMgLSB4MSApICk7XG5cblx0XHR9LFxuXG5cdFx0aW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCBkdDAsIGR0MSwgZHQyICkge1xuXG5cdFx0XHQvLyBjb21wdXRlIHRhbmdlbnRzIHdoZW4gcGFyYW1ldGVyaXplZCBpbiBbdDEsdDJdXG5cdFx0XHR2YXIgdDEgPSAoIHgxIC0geDAgKSAvIGR0MCAtICggeDIgLSB4MCApIC8gKCBkdDAgKyBkdDEgKSArICggeDIgLSB4MSApIC8gZHQxO1xuXHRcdFx0dmFyIHQyID0gKCB4MiAtIHgxICkgLyBkdDEgLSAoIHgzIC0geDEgKSAvICggZHQxICsgZHQyICkgKyAoIHgzIC0geDIgKSAvIGR0MjtcblxuXHRcdFx0Ly8gcmVzY2FsZSB0YW5nZW50cyBmb3IgcGFyYW1ldHJpemF0aW9uIGluIFswLDFdXG5cdFx0XHR0MSAqPSBkdDE7XG5cdFx0XHR0MiAqPSBkdDE7XG5cblx0XHRcdGluaXQoIHgxLCB4MiwgdDEsIHQyICk7XG5cblx0XHR9LFxuXG5cdFx0Y2FsYzogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0XHR2YXIgdDIgPSB0ICogdDtcblx0XHRcdHZhciB0MyA9IHQyICogdDtcblx0XHRcdHJldHVybiBjMCArIGMxICogdCArIGMyICogdDIgKyBjMyAqIHQzO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuLy9cblxudmFyIHRtcCA9IG5ldyBWZWN0b3IzKCk7XG52YXIgcHggPSBuZXcgQ3ViaWNQb2x5KCksIHB5ID0gbmV3IEN1YmljUG9seSgpLCBweiA9IG5ldyBDdWJpY1BvbHkoKTtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbUN1cnZlMyggcG9pbnRzLCBjbG9zZWQsIGN1cnZlVHlwZSwgdGVuc2lvbiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0NhdG11bGxSb21DdXJ2ZTMnO1xuXG5cdHRoaXMucG9pbnRzID0gcG9pbnRzIHx8IFtdO1xuXHR0aGlzLmNsb3NlZCA9IGNsb3NlZCB8fCBmYWxzZTtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBjdXJ2ZVR5cGUgfHwgJ2NlbnRyaXBldGFsJztcblx0dGhpcy50ZW5zaW9uID0gdGVuc2lvbiB8fCAwLjU7XG5cbn1cblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2F0bXVsbFJvbUN1cnZlMztcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuaXNDYXRtdWxsUm9tQ3VydmUzID0gdHJ1ZTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIHBvaW50cyA9IHRoaXMucG9pbnRzO1xuXHR2YXIgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0dmFyIHAgPSAoIGwgLSAoIHRoaXMuY2xvc2VkID8gMCA6IDEgKSApICogdDtcblx0dmFyIGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHR2YXIgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xuXG5cdGlmICggdGhpcy5jbG9zZWQgKSB7XG5cblx0XHRpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKCBNYXRoLmZsb29yKCBNYXRoLmFicyggaW50UG9pbnQgKSAvIGwgKSArIDEgKSAqIGw7XG5cblx0fSBlbHNlIGlmICggd2VpZ2h0ID09PSAwICYmIGludFBvaW50ID09PSBsIC0gMSApIHtcblxuXHRcdGludFBvaW50ID0gbCAtIDI7XG5cdFx0d2VpZ2h0ID0gMTtcblxuXHR9XG5cblx0dmFyIHAwLCBwMSwgcDIsIHAzOyAvLyA0IHBvaW50c1xuXG5cdGlmICggdGhpcy5jbG9zZWQgfHwgaW50UG9pbnQgPiAwICkge1xuXG5cdFx0cDAgPSBwb2ludHNbICggaW50UG9pbnQgLSAxICkgJSBsIF07XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGV4dHJhcG9sYXRlIGZpcnN0IHBvaW50XG5cdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgMCBdLCBwb2ludHNbIDEgXSApLmFkZCggcG9pbnRzWyAwIF0gKTtcblx0XHRwMCA9IHRtcDtcblxuXHR9XG5cblx0cDEgPSBwb2ludHNbIGludFBvaW50ICUgbCBdO1xuXHRwMiA9IHBvaW50c1sgKCBpbnRQb2ludCArIDEgKSAlIGwgXTtcblxuXHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ICsgMiA8IGwgKSB7XG5cblx0XHRwMyA9IHBvaW50c1sgKCBpbnRQb2ludCArIDIgKSAlIGwgXTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gZXh0cmFwb2xhdGUgbGFzdCBwb2ludFxuXHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIGwgLSAxIF0sIHBvaW50c1sgbCAtIDIgXSApLmFkZCggcG9pbnRzWyBsIC0gMSBdICk7XG5cdFx0cDMgPSB0bXA7XG5cblx0fVxuXG5cdGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjZW50cmlwZXRhbCcgfHwgdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyApIHtcblxuXHRcdC8vIGluaXQgQ2VudHJpcGV0YWwgLyBDaG9yZGFsIENhdG11bGwtUm9tXG5cdFx0dmFyIHBvdyA9IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgPyAwLjUgOiAwLjI1O1xuXHRcdHZhciBkdDAgPSBNYXRoLnBvdyggcDAuZGlzdGFuY2VUb1NxdWFyZWQoIHAxICksIHBvdyApO1xuXHRcdHZhciBkdDEgPSBNYXRoLnBvdyggcDEuZGlzdGFuY2VUb1NxdWFyZWQoIHAyICksIHBvdyApO1xuXHRcdHZhciBkdDIgPSBNYXRoLnBvdyggcDIuZGlzdGFuY2VUb1NxdWFyZWQoIHAzICksIHBvdyApO1xuXG5cdFx0Ly8gc2FmZXR5IGNoZWNrIGZvciByZXBlYXRlZCBwb2ludHNcblx0XHRpZiAoIGR0MSA8IDFlLTQgKSBkdDEgPSAxLjA7XG5cdFx0aWYgKCBkdDAgPCAxZS00ICkgZHQwID0gZHQxO1xuXHRcdGlmICggZHQyIDwgMWUtNCApIGR0MiA9IGR0MTtcblxuXHRcdHB4LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdHB5LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdHB6LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgZHQwLCBkdDEsIGR0MiApO1xuXG5cdH0gZWxzZSBpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2F0bXVsbHJvbScgKSB7XG5cblx0XHRweC5pbml0Q2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgdGhpcy50ZW5zaW9uICk7XG5cdFx0cHkuaW5pdENhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIHRoaXMudGVuc2lvbiApO1xuXHRcdHB6LmluaXRDYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCB0aGlzLnRlbnNpb24gKTtcblxuXHR9XG5cblx0cG9pbnQuc2V0KFxuXHRcdHB4LmNhbGMoIHdlaWdodCApLFxuXHRcdHB5LmNhbGMoIHdlaWdodCApLFxuXHRcdHB6LmNhbGMoIHdlaWdodCApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07XG5cblx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0fVxuXG5cdHRoaXMuY2xvc2VkID0gc291cmNlLmNsb3NlZDtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBzb3VyY2UuY3VydmVUeXBlO1xuXHR0aGlzLnRlbnNpb24gPSBzb3VyY2UudGVuc2lvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHR9XG5cblx0ZGF0YS5jbG9zZWQgPSB0aGlzLmNsb3NlZDtcblx0ZGF0YS5jdXJ2ZVR5cGUgPSB0aGlzLmN1cnZlVHlwZTtcblx0ZGF0YS50ZW5zaW9uID0gdGhpcy50ZW5zaW9uO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0dGhpcy5wb2ludHMucHVzaCggbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0dGhpcy5jbG9zZWQgPSBqc29uLmNsb3NlZDtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBqc29uLmN1cnZlVHlwZTtcblx0dGhpcy50ZW5zaW9uID0ganNvbi50ZW5zaW9uO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqXG4gKiBCZXppZXIgQ3VydmVzIGZvcm11bGFzIG9idGFpbmVkIGZyb21cbiAqIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQsOpemllcl9jdXJ2ZVxuICovXG5cbmZ1bmN0aW9uIENhdG11bGxSb20oIHQsIHAwLCBwMSwgcDIsIHAzICkge1xuXG5cdHZhciB2MCA9ICggcDIgLSBwMCApICogMC41O1xuXHR2YXIgdjEgPSAoIHAzIC0gcDEgKSAqIDAuNTtcblx0dmFyIHQyID0gdCAqIHQ7XG5cdHZhciB0MyA9IHQgKiB0Mjtcblx0cmV0dXJuICggMiAqIHAxIC0gMiAqIHAyICsgdjAgKyB2MSApICogdDMgKyAoIC0gMyAqIHAxICsgMyAqIHAyIC0gMiAqIHYwIC0gdjEgKSAqIHQyICsgdjAgKiB0ICsgcDE7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDAoIHQsIHAgKSB7XG5cblx0dmFyIGsgPSAxIC0gdDtcblx0cmV0dXJuIGsgKiBrICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMSggdCwgcCApIHtcblxuXHRyZXR1cm4gMiAqICggMSAtIHQgKSAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyKCB0LCBwMCwgcDEsIHAyICkge1xuXG5cdHJldHVybiBRdWFkcmF0aWNCZXppZXJQMCggdCwgcDAgKSArIFF1YWRyYXRpY0JlemllclAxKCB0LCBwMSApICtcblx0XHRRdWFkcmF0aWNCZXppZXJQMiggdCwgcDIgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBDdWJpY0JlemllclAwKCB0LCBwICkge1xuXG5cdHZhciBrID0gMSAtIHQ7XG5cdHJldHVybiBrICogayAqIGsgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDEoIHQsIHAgKSB7XG5cblx0dmFyIGsgPSAxIC0gdDtcblx0cmV0dXJuIDMgKiBrICogayAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDIoIHQsIHAgKSB7XG5cblx0cmV0dXJuIDMgKiAoIDEgLSB0ICkgKiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMyggdCwgcCApIHtcblxuXHRyZXR1cm4gdCAqIHQgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllciggdCwgcDAsIHAxLCBwMiwgcDMgKSB7XG5cblx0cmV0dXJuIEN1YmljQmV6aWVyUDAoIHQsIHAwICkgKyBDdWJpY0JlemllclAxKCB0LCBwMSApICsgQ3ViaWNCZXppZXJQMiggdCwgcDIgKSArXG5cdFx0Q3ViaWNCZXppZXJQMyggdCwgcDMgKTtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllckN1cnZlKCB2MCwgdjEsIHYyLCB2MyApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N1YmljQmV6aWVyQ3VydmUnO1xuXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjMgPSB2MyB8fCBuZXcgVmVjdG9yMigpO1xuXG59XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmljQmV6aWVyQ3VydmU7XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmlzQ3ViaWNCZXppZXJDdXJ2ZSA9IHRydWU7XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7XG5cblx0cG9pbnQuc2V0KFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnksIHYzLnkgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdHRoaXMudjMuY29weSggc291cmNlLnYzICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXHR0aGlzLnYzLmZyb21BcnJheSgganNvbi52MyApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBDdWJpY0JlemllckN1cnZlMyggdjAsIHYxLCB2MiwgdjMgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlMyc7XG5cblx0dGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MyA9IHYzIHx8IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJpY0JlemllckN1cnZlMztcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmlzQ3ViaWNCZXppZXJDdXJ2ZTMgPSB0cnVlO1xuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcblxuXHRwb2ludC5zZXQoXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLngsIHYzLnggKSxcblx0XHRDdWJpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSwgdjMueSApLFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56LCB2My56IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gTGluZUN1cnZlKCB2MSwgdjIgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lQ3VydmUnO1xuXG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjIoKTtcblxufVxuXG5MaW5lQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5MaW5lQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZUN1cnZlO1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmlzTGluZUN1cnZlID0gdHJ1ZTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHRpZiAoIHQgPT09IDEgKSB7XG5cblx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKS5zdWIoIHRoaXMudjEgKTtcblx0XHRwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApO1xuXG5cdH1cblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbi8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdFxuXG5MaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50QXQgPSBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmdldFRhbmdlbnQgPSBmdW5jdGlvbiAoIC8qIHQgKi8gKSB7XG5cblx0dmFyIHRhbmdlbnQgPSB0aGlzLnYyLmNsb25lKCkuc3ViKCB0aGlzLnYxICk7XG5cblx0cmV0dXJuIHRhbmdlbnQubm9ybWFsaXplKCk7XG5cbn07XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBMaW5lQ3VydmUzKCB2MSwgdjIgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lQ3VydmUzJztcblxuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuTGluZUN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZUN1cnZlMztcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuaXNMaW5lQ3VydmUzID0gdHJ1ZTtcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7XG5cblx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcblxuXHR9XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG4vLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnRBdCA9IGZ1bmN0aW9uICggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJDdXJ2ZSggdjAsIHYxLCB2MiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlJztcblxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMigpO1xuXG59XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUXVhZHJhdGljQmV6aWVyQ3VydmU7XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlID0gdHJ1ZTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdHBvaW50LnNldChcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLnggKSxcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyQ3VydmUzKCB2MCwgdjEsIHYyICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUXVhZHJhdGljQmV6aWVyQ3VydmUzJztcblxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMygpO1xuXG59XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBRdWFkcmF0aWNCZXppZXJDdXJ2ZTM7XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZTMgPSB0cnVlO1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdHBvaW50LnNldChcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLnggKSxcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKSxcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnosIHYxLnosIHYyLnogKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gU3BsaW5lQ3VydmUoIHBvaW50cyAvKiBhcnJheSBvZiBWZWN0b3IyICovICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU3BsaW5lQ3VydmUnO1xuXG5cdHRoaXMucG9pbnRzID0gcG9pbnRzIHx8IFtdO1xuXG59XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuU3BsaW5lQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BsaW5lQ3VydmU7XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5pc1NwbGluZUN1cnZlID0gdHJ1ZTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdHZhciBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0dmFyIHAgPSAoIHBvaW50cy5sZW5ndGggLSAxICkgKiB0O1xuXG5cdHZhciBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTtcblx0dmFyIHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHR2YXIgcDAgPSBwb2ludHNbIGludFBvaW50ID09PSAwID8gaW50UG9pbnQgOiBpbnRQb2ludCAtIDEgXTtcblx0dmFyIHAxID0gcG9pbnRzWyBpbnRQb2ludCBdO1xuXHR2YXIgcDIgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDIgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMSBdO1xuXHR2YXIgcDMgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDMgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMiBdO1xuXG5cdHBvaW50LnNldChcblx0XHRDYXRtdWxsUm9tKCB3ZWlnaHQsIHAwLngsIHAxLngsIHAyLngsIHAzLnggKSxcblx0XHRDYXRtdWxsUm9tKCB3ZWlnaHQsIHAwLnksIHAxLnksIHAyLnksIHAzLnkgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IHNvdXJjZS5wb2ludHNbIGkgXTtcblxuXHRcdHRoaXMucG9pbnRzLnB1c2goIHBvaW50LmNsb25lKCkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSB0aGlzLnBvaW50c1sgaSBdO1xuXHRcdGRhdGEucG9pbnRzLnB1c2goIHBvaW50LnRvQXJyYXkoKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0ganNvbi5wb2ludHNbIGkgXTtcblx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuXG5cbnZhciBDdXJ2ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdEFyY0N1cnZlOiBBcmNDdXJ2ZSxcblx0Q2F0bXVsbFJvbUN1cnZlMzogQ2F0bXVsbFJvbUN1cnZlMyxcblx0Q3ViaWNCZXppZXJDdXJ2ZTogQ3ViaWNCZXppZXJDdXJ2ZSxcblx0Q3ViaWNCZXppZXJDdXJ2ZTM6IEN1YmljQmV6aWVyQ3VydmUzLFxuXHRFbGxpcHNlQ3VydmU6IEVsbGlwc2VDdXJ2ZSxcblx0TGluZUN1cnZlOiBMaW5lQ3VydmUsXG5cdExpbmVDdXJ2ZTM6IExpbmVDdXJ2ZTMsXG5cdFF1YWRyYXRpY0JlemllckN1cnZlOiBRdWFkcmF0aWNCZXppZXJDdXJ2ZSxcblx0UXVhZHJhdGljQmV6aWVyQ3VydmUzOiBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMsXG5cdFNwbGluZUN1cnZlOiBTcGxpbmVDdXJ2ZVxufSk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICpcbiAqKi9cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlx0Q3VydmVkIFBhdGggLSBhIGN1cnZlIHBhdGggaXMgc2ltcGx5IGEgYXJyYXkgb2YgY29ubmVjdGVkXG4gKiAgY3VydmVzLCBidXQgcmV0YWlucyB0aGUgYXBpIG9mIGEgY3VydmVcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZnVuY3Rpb24gQ3VydmVQYXRoKCkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3VydmVQYXRoJztcblxuXHR0aGlzLmN1cnZlcyA9IFtdO1xuXHR0aGlzLmF1dG9DbG9zZSA9IGZhbHNlOyAvLyBBdXRvbWF0aWNhbGx5IGNsb3NlcyB0aGUgcGF0aFxuXG59XG5cbkN1cnZlUGF0aC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBDdXJ2ZVBhdGgsXG5cblx0YWRkOiBmdW5jdGlvbiAoIGN1cnZlICkge1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHR9LFxuXG5cdGNsb3NlUGF0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gQWRkIGEgbGluZSBjdXJ2ZSBpZiBzdGFydCBhbmQgZW5kIG9mIGxpbmVzIGFyZSBub3QgY29ubmVjdGVkXG5cdFx0dmFyIHN0YXJ0UG9pbnQgPSB0aGlzLmN1cnZlc1sgMCBdLmdldFBvaW50KCAwICk7XG5cdFx0dmFyIGVuZFBvaW50ID0gdGhpcy5jdXJ2ZXNbIHRoaXMuY3VydmVzLmxlbmd0aCAtIDEgXS5nZXRQb2ludCggMSApO1xuXG5cdFx0aWYgKCAhIHN0YXJ0UG9pbnQuZXF1YWxzKCBlbmRQb2ludCApICkge1xuXG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBuZXcgTGluZUN1cnZlKCBlbmRQb2ludCwgc3RhcnRQb2ludCApICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvLyBUbyBnZXQgYWNjdXJhdGUgcG9pbnQgd2l0aCByZWZlcmVuY2UgdG9cblx0Ly8gZW50aXJlIHBhdGggZGlzdGFuY2UgYXQgdGltZSB0LFxuXHQvLyBmb2xsb3dpbmcgaGFzIHRvIGJlIGRvbmU6XG5cblx0Ly8gMS4gTGVuZ3RoIG9mIGVhY2ggc3ViIHBhdGggaGF2ZSB0byBiZSBrbm93blxuXHQvLyAyLiBMb2NhdGUgYW5kIGlkZW50aWZ5IHR5cGUgb2YgY3VydmVcblx0Ly8gMy4gR2V0IHQgZm9yIHRoZSBjdXJ2ZVxuXHQvLyA0LiBSZXR1cm4gY3VydmUuZ2V0UG9pbnRBdCh0JylcblxuXHRnZXRQb2ludDogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0dmFyIGQgPSB0ICogdGhpcy5nZXRMZW5ndGgoKTtcblx0XHR2YXIgY3VydmVMZW5ndGhzID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblx0XHR2YXIgaSA9IDA7XG5cblx0XHQvLyBUbyB0aGluayBhYm91dCBib3VuZGFyaWVzIHBvaW50cy5cblxuXHRcdHdoaWxlICggaSA8IGN1cnZlTGVuZ3Rocy5sZW5ndGggKSB7XG5cblx0XHRcdGlmICggY3VydmVMZW5ndGhzWyBpIF0gPj0gZCApIHtcblxuXHRcdFx0XHR2YXIgZGlmZiA9IGN1cnZlTGVuZ3Roc1sgaSBdIC0gZDtcblx0XHRcdFx0dmFyIGN1cnZlID0gdGhpcy5jdXJ2ZXNbIGkgXTtcblxuXHRcdFx0XHR2YXIgc2VnbWVudExlbmd0aCA9IGN1cnZlLmdldExlbmd0aCgpO1xuXHRcdFx0XHR2YXIgdSA9IHNlZ21lbnRMZW5ndGggPT09IDAgPyAwIDogMSAtIGRpZmYgLyBzZWdtZW50TGVuZ3RoO1xuXG5cdFx0XHRcdHJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KCB1ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aSArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdFx0Ly8gbG9vcCB3aGVyZSBzdW0gIT0gMCwgc3VtID4gZCAsIHN1bSsxIDxkXG5cblx0fSxcblxuXHQvLyBXZSBjYW5ub3QgdXNlIHRoZSBkZWZhdWx0IFRIUkVFLkN1cnZlIGdldFBvaW50KCkgd2l0aCBnZXRMZW5ndGgoKSBiZWNhdXNlIGluXG5cdC8vIFRIUkVFLkN1cnZlLCBnZXRMZW5ndGgoKSBkZXBlbmRzIG9uIGdldFBvaW50KCkgYnV0IGluIFRIUkVFLkN1cnZlUGF0aFxuXHQvLyBnZXRQb2ludCgpIGRlcGVuZHMgb24gZ2V0TGVuZ3RoXG5cblx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbGVucyA9IHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XG5cdFx0cmV0dXJuIGxlbnNbIGxlbnMubGVuZ3RoIC0gMSBdO1xuXG5cdH0sXG5cblx0Ly8gY2FjaGVMZW5ndGhzIG11c3QgYmUgcmVjYWxjdWxhdGVkLlxuXHR1cGRhdGVBcmNMZW5ndGhzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLmNhY2hlTGVuZ3RocyA9IG51bGw7XG5cdFx0dGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblxuXHR9LFxuXG5cdC8vIENvbXB1dGUgbGVuZ3RocyBhbmQgY2FjaGUgdGhlbVxuXHQvLyBXZSBjYW5ub3Qgb3ZlcndyaXRlIGdldExlbmd0aHMoKSBiZWNhdXNlIFV0b1QgbWFwcGluZyB1c2VzIGl0LlxuXG5cdGdldEN1cnZlTGVuZ3RoczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gV2UgdXNlIGNhY2hlIHZhbHVlcyBpZiBjdXJ2ZXMgYW5kIGNhY2hlIGFycmF5IGFyZSBzYW1lIGxlbmd0aFxuXG5cdFx0aWYgKCB0aGlzLmNhY2hlTGVuZ3RocyAmJiB0aGlzLmNhY2hlTGVuZ3Rocy5sZW5ndGggPT09IHRoaXMuY3VydmVzLmxlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGVMZW5ndGhzO1xuXG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGxlbmd0aCBvZiBzdWItY3VydmVcblx0XHQvLyBQdXNoIHN1bXMgaW50byBjYWNoZWQgYXJyYXlcblxuXHRcdHZhciBsZW5ndGhzID0gW10sIHN1bXMgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0c3VtcyArPSB0aGlzLmN1cnZlc1sgaSBdLmdldExlbmd0aCgpO1xuXHRcdFx0bGVuZ3Rocy5wdXNoKCBzdW1zICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlTGVuZ3RocyA9IGxlbmd0aHM7XG5cblx0XHRyZXR1cm4gbGVuZ3RocztcblxuXHR9LFxuXG5cdGdldFNwYWNlZFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRpZiAoIGRpdmlzaW9ucyA9PT0gdW5kZWZpbmVkICkgZGl2aXNpb25zID0gNDA7XG5cblx0XHR2YXIgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPD0gZGl2aXNpb25zOyBpICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggaSAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYXV0b0Nsb3NlICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggcG9pbnRzWyAwIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fSxcblxuXHRnZXRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0ZGl2aXNpb25zID0gZGl2aXNpb25zIHx8IDEyO1xuXG5cdFx0dmFyIHBvaW50cyA9IFtdLCBsYXN0O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBjdXJ2ZXMgPSB0aGlzLmN1cnZlczsgaSA8IGN1cnZlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZSA9IGN1cnZlc1sgaSBdO1xuXHRcdFx0dmFyIHJlc29sdXRpb24gPSAoIGN1cnZlICYmIGN1cnZlLmlzRWxsaXBzZUN1cnZlICkgPyBkaXZpc2lvbnMgKiAyXG5cdFx0XHRcdDogKCBjdXJ2ZSAmJiAoIGN1cnZlLmlzTGluZUN1cnZlIHx8IGN1cnZlLmlzTGluZUN1cnZlMyApICkgPyAxXG5cdFx0XHRcdFx0OiAoIGN1cnZlICYmIGN1cnZlLmlzU3BsaW5lQ3VydmUgKSA/IGRpdmlzaW9ucyAqIGN1cnZlLnBvaW50cy5sZW5ndGhcblx0XHRcdFx0XHRcdDogZGl2aXNpb25zO1xuXG5cdFx0XHR2YXIgcHRzID0gY3VydmUuZ2V0UG9pbnRzKCByZXNvbHV0aW9uICk7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IHB0cy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0dmFyIHBvaW50ID0gcHRzWyBqIF07XG5cblx0XHRcdFx0aWYgKCBsYXN0ICYmIGxhc3QuZXF1YWxzKCBwb2ludCApICkgY29udGludWU7IC8vIGVuc3VyZXMgbm8gY29uc2VjdXRpdmUgcG9pbnRzIGFyZSBkdXBsaWNhdGVzXG5cblx0XHRcdFx0cG9pbnRzLnB1c2goIHBvaW50ICk7XG5cdFx0XHRcdGxhc3QgPSBwb2ludDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmF1dG9DbG9zZSAmJiBwb2ludHMubGVuZ3RoID4gMSAmJiAhIHBvaW50c1sgcG9pbnRzLmxlbmd0aCAtIDEgXS5lcXVhbHMoIHBvaW50c1sgMCBdICkgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc291cmNlLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY3VydmUgPSBzb3VyY2UuY3VydmVzWyBpIF07XG5cblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXV0b0Nsb3NlID0gc291cmNlLmF1dG9DbG9zZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdFx0ZGF0YS5hdXRvQ2xvc2UgPSB0aGlzLmF1dG9DbG9zZTtcblx0XHRkYXRhLmN1cnZlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnZlID0gdGhpcy5jdXJ2ZXNbIGkgXTtcblx0XHRcdGRhdGEuY3VydmVzLnB1c2goIGN1cnZlLnRvSlNPTigpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdFx0dGhpcy5hdXRvQ2xvc2UgPSBqc29uLmF1dG9DbG9zZTtcblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnZlID0ganNvbi5jdXJ2ZXNbIGkgXTtcblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIG5ldyBDdXJ2ZXNbIGN1cnZlLnR5cGUgXSgpLmZyb21KU09OKCBjdXJ2ZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBDcmVhdGVzIGZyZWUgZm9ybSAyZCBwYXRoIHVzaW5nIHNlcmllcyBvZiBwb2ludHMsIGxpbmVzIG9yIGN1cnZlcy5cbiAqKi9cblxuZnVuY3Rpb24gUGF0aCggcG9pbnRzICkge1xuXG5cdEN1cnZlUGF0aC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BhdGgnO1xuXG5cdHRoaXMuY3VycmVudFBvaW50ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRpZiAoIHBvaW50cyApIHtcblxuXHRcdHRoaXMuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG5cblx0fVxuXG59XG5cblBhdGgucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQ3VydmVQYXRoLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBhdGgsXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLm1vdmVUbyggcG9pbnRzWyAwIF0ueCwgcG9pbnRzWyAwIF0ueSApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMubGluZVRvKCBwb2ludHNbIGkgXS54LCBwb2ludHNbIGkgXS55ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRtb3ZlVG86IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggeCwgeSApOyAvLyBUT0RPIGNvbnNpZGVyIHJlZmVyZW5jaW5nIHZlY3RvcnMgaW5zdGVhZCBvZiBjb3B5aW5nP1xuXG5cdH0sXG5cblx0bGluZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgTGluZUN1cnZlKCB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLCBuZXcgVmVjdG9yMiggeCwgeSApICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggeCwgeSApO1xuXG5cdH0sXG5cblx0cXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgUXVhZHJhdGljQmV6aWVyQ3VydmUoXG5cdFx0XHR0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUHgsIGFDUHkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhWCwgYVkgKVxuXHRcdCk7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTtcblxuXHR9LFxuXG5cdGJlemllckN1cnZlVG86IGZ1bmN0aW9uICggYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSApIHtcblxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBDdWJpY0JlemllckN1cnZlKFxuXHRcdFx0dGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1AxeCwgYUNQMXkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1AyeCwgYUNQMnkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhWCwgYVkgKVxuXHRcdCk7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTtcblxuXHR9LFxuXG5cdHNwbGluZVRocnU6IGZ1bmN0aW9uICggcHRzIC8qQXJyYXkgb2YgVmVjdG9yKi8gKSB7XG5cblx0XHR2YXIgbnB0cyA9IFsgdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSBdLmNvbmNhdCggcHRzICk7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgU3BsaW5lQ3VydmUoIG5wdHMgKTtcblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggcHRzWyBwdHMubGVuZ3RoIC0gMSBdICk7XG5cblx0fSxcblxuXHRhcmM6IGZ1bmN0aW9uICggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0dmFyIHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcblx0XHR2YXIgeTAgPSB0aGlzLmN1cnJlbnRQb2ludC55O1xuXG5cdFx0dGhpcy5hYnNhcmMoIGFYICsgeDAsIGFZICsgeTAsIGFSYWRpdXMsXG5cdFx0XHRhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0fSxcblxuXHRhYnNhcmM6IGZ1bmN0aW9uICggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0dGhpcy5hYnNlbGxpcHNlKCBhWCwgYVksIGFSYWRpdXMsIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHR9LFxuXG5cdGVsbGlwc2U6IGZ1bmN0aW9uICggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XG5cblx0XHR2YXIgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdHZhciB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XG5cblx0XHR0aGlzLmFic2VsbGlwc2UoIGFYICsgeDAsIGFZICsgeTAsIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdH0sXG5cblx0YWJzZWxsaXBzZTogZnVuY3Rpb24gKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApIHtcblxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBFbGxpcHNlQ3VydmUoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICk7XG5cblx0XHRpZiAoIHRoaXMuY3VydmVzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdC8vIGlmIGEgcHJldmlvdXMgY3VydmUgaXMgcHJlc2VudCwgYXR0ZW1wdCB0byBqb2luXG5cdFx0XHR2YXIgZmlyc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAwICk7XG5cblx0XHRcdGlmICggISBmaXJzdFBvaW50LmVxdWFscyggdGhpcy5jdXJyZW50UG9pbnQgKSApIHtcblxuXHRcdFx0XHR0aGlzLmxpbmVUbyggZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHZhciBsYXN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMSApO1xuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIGxhc3RQb2ludCApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRDdXJ2ZVBhdGgucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBzb3VyY2UuY3VycmVudFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSBDdXJ2ZVBhdGgucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0XHRkYXRhLmN1cnJlbnRQb2ludCA9IHRoaXMuY3VycmVudFBvaW50LnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0ZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdEN1cnZlUGF0aC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuZnJvbUFycmF5KCBqc29uLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogRGVmaW5lcyBhIDJkIHNoYXBlIHBsYW5lIHVzaW5nIHBhdGhzLlxuICoqL1xuXG4vLyBTVEVQIDEgQ3JlYXRlIGEgcGF0aC5cbi8vIFNURVAgMiBUdXJuIHBhdGggaW50byBzaGFwZS5cbi8vIFNURVAgMyBFeHRydWRlR2VvbWV0cnkgdGFrZXMgaW4gU2hhcGUvU2hhcGVzXG4vLyBTVEVQIDNhIC0gRXh0cmFjdCBwb2ludHMgZnJvbSBlYWNoIHNoYXBlLCB0dXJuIHRvIHZlcnRpY2VzXG4vLyBTVEVQIDNiIC0gVHJpYW5ndWxhdGUgZWFjaCBzaGFwZSwgYWRkIGZhY2VzLlxuXG5mdW5jdGlvbiBTaGFwZSggcG9pbnRzICkge1xuXG5cdFBhdGguY2FsbCggdGhpcywgcG9pbnRzICk7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy50eXBlID0gJ1NoYXBlJztcblxuXHR0aGlzLmhvbGVzID0gW107XG5cbn1cblxuU2hhcGUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggUGF0aC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTaGFwZSxcblxuXHRnZXRQb2ludHNIb2xlczogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHR2YXIgaG9sZXNQdHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aG9sZXNQdHNbIGkgXSA9IHRoaXMuaG9sZXNbIGkgXS5nZXRQb2ludHMoIGRpdmlzaW9ucyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhvbGVzUHRzO1xuXG5cdH0sXG5cblx0Ly8gZ2V0IHBvaW50cyBvZiBzaGFwZSBhbmQgaG9sZXMgKGtleXBvaW50cyBiYXNlZCBvbiBzZWdtZW50cyBwYXJhbWV0ZXIpXG5cblx0ZXh0cmFjdFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzaGFwZTogdGhpcy5nZXRQb2ludHMoIGRpdmlzaW9ucyApLFxuXHRcdFx0aG9sZXM6IHRoaXMuZ2V0UG9pbnRzSG9sZXMoIGRpdmlzaW9ucyApXG5cblx0XHR9O1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRQYXRoLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc291cmNlLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBob2xlID0gc291cmNlLmhvbGVzWyBpIF07XG5cblx0XHRcdHRoaXMuaG9sZXMucHVzaCggaG9sZS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSBQYXRoLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xuXHRcdGRhdGEuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGhvbGUgPSB0aGlzLmhvbGVzWyBpIF07XG5cdFx0XHRkYXRhLmhvbGVzLnB1c2goIGhvbGUudG9KU09OKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0ZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdFBhdGgucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHRcdHRoaXMudXVpZCA9IGpzb24udXVpZDtcblx0XHR0aGlzLmhvbGVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBob2xlID0ganNvbi5ob2xlc1sgaSBdO1xuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBuZXcgUGF0aCgpLmZyb21KU09OKCBob2xlICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGlnaHQnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cdHRoaXMuaW50ZW5zaXR5ID0gaW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgPyBpbnRlbnNpdHkgOiAxO1xuXG5cdHRoaXMucmVjZWl2ZVNoYWRvdyA9IHVuZGVmaW5lZDtcblxufVxuXG5MaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaWdodCxcblxuXHRpc0xpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHRcdHRoaXMuaW50ZW5zaXR5ID0gc291cmNlLmludGVuc2l0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3QuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXHRcdGRhdGEub2JqZWN0LmludGVuc2l0eSA9IHRoaXMuaW50ZW5zaXR5O1xuXG5cdFx0aWYgKCB0aGlzLmdyb3VuZENvbG9yICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5ncm91bmRDb2xvciA9IHRoaXMuZ3JvdW5kQ29sb3IuZ2V0SGV4KCk7XG5cblx0XHRpZiAoIHRoaXMuZGlzdGFuY2UgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LmRpc3RhbmNlID0gdGhpcy5kaXN0YW5jZTtcblx0XHRpZiAoIHRoaXMuYW5nbGUgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LmFuZ2xlID0gdGhpcy5hbmdsZTtcblx0XHRpZiAoIHRoaXMuZGVjYXkgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LmRlY2F5ID0gdGhpcy5kZWNheTtcblx0XHRpZiAoIHRoaXMucGVudW1icmEgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LnBlbnVtYnJhID0gdGhpcy5wZW51bWJyYTtcblxuXHRcdGlmICggdGhpcy5zaGFkb3cgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0LnNoYWRvdyA9IHRoaXMuc2hhZG93LnRvSlNPTigpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBIZW1pc3BoZXJlTGlnaHQoIHNreUNvbG9yLCBncm91bmRDb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIHNreUNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnSGVtaXNwaGVyZUxpZ2h0JztcblxuXHR0aGlzLmNhc3RTaGFkb3cgPSB1bmRlZmluZWQ7XG5cblx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHR0aGlzLmdyb3VuZENvbG9yID0gbmV3IENvbG9yKCBncm91bmRDb2xvciApO1xuXG59XG5cbkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBIZW1pc3BoZXJlTGlnaHQsXG5cblx0aXNIZW1pc3BoZXJlTGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZ3JvdW5kQ29sb3IuY29weSggc291cmNlLmdyb3VuZENvbG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIExpZ2h0U2hhZG93KCBjYW1lcmEgKSB7XG5cblx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cblx0dGhpcy5iaWFzID0gMDtcblx0dGhpcy5yYWRpdXMgPSAxO1xuXG5cdHRoaXMubWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCA1MTIsIDUxMiApO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIExpZ2h0U2hhZG93LnByb3RvdHlwZSwge1xuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5jYW1lcmEgPSBzb3VyY2UuY2FtZXJhLmNsb25lKCk7XG5cblx0XHR0aGlzLmJpYXMgPSBzb3VyY2UuYmlhcztcblx0XHR0aGlzLnJhZGl1cyA9IHNvdXJjZS5yYWRpdXM7XG5cblx0XHR0aGlzLm1hcFNpemUuY29weSggc291cmNlLm1hcFNpemUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9iamVjdCA9IHt9O1xuXG5cdFx0aWYgKCB0aGlzLmJpYXMgIT09IDAgKSBvYmplY3QuYmlhcyA9IHRoaXMuYmlhcztcblx0XHRpZiAoIHRoaXMucmFkaXVzICE9PSAxICkgb2JqZWN0LnJhZGl1cyA9IHRoaXMucmFkaXVzO1xuXHRcdGlmICggdGhpcy5tYXBTaXplLnggIT09IDUxMiB8fCB0aGlzLm1hcFNpemUueSAhPT0gNTEyICkgb2JqZWN0Lm1hcFNpemUgPSB0aGlzLm1hcFNpemUudG9BcnJheSgpO1xuXG5cdFx0b2JqZWN0LmNhbWVyYSA9IHRoaXMuY2FtZXJhLnRvSlNPTiggZmFsc2UgKS5vYmplY3Q7XG5cdFx0ZGVsZXRlIG9iamVjdC5jYW1lcmEubWF0cml4O1xuXG5cdFx0cmV0dXJuIG9iamVjdDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFNwb3RMaWdodFNoYWRvdygpIHtcblxuXHRMaWdodFNoYWRvdy5jYWxsKCB0aGlzLCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDUwLCAxLCAwLjUsIDUwMCApICk7XG5cbn1cblxuU3BvdExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0U2hhZG93LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNwb3RMaWdodFNoYWRvdyxcblxuXHRpc1Nwb3RMaWdodFNoYWRvdzogdHJ1ZSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHR2YXIgY2FtZXJhID0gdGhpcy5jYW1lcmE7XG5cblx0XHR2YXIgZm92ID0gX01hdGguUkFEMkRFRyAqIDIgKiBsaWdodC5hbmdsZTtcblx0XHR2YXIgYXNwZWN0ID0gdGhpcy5tYXBTaXplLndpZHRoIC8gdGhpcy5tYXBTaXplLmhlaWdodDtcblx0XHR2YXIgZmFyID0gbGlnaHQuZGlzdGFuY2UgfHwgY2FtZXJhLmZhcjtcblxuXHRcdGlmICggZm92ICE9PSBjYW1lcmEuZm92IHx8IGFzcGVjdCAhPT0gY2FtZXJhLmFzcGVjdCB8fCBmYXIgIT09IGNhbWVyYS5mYXIgKSB7XG5cblx0XHRcdGNhbWVyYS5mb3YgPSBmb3Y7XG5cdFx0XHRjYW1lcmEuYXNwZWN0ID0gYXNwZWN0O1xuXHRcdFx0Y2FtZXJhLmZhciA9IGZhcjtcblx0XHRcdGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBTcG90TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlLCBhbmdsZSwgcGVudW1icmEsIGRlY2F5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0JztcblxuXHR0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRlZmF1bHRVcCApO1xuXHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdHRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAncG93ZXInLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdC8vIGludGVuc2l0eSA9IHBvd2VyIHBlciBzb2xpZCBhbmdsZS5cblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE3KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0XHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIE1hdGguUEk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCBwb3dlciApIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTcpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvIE1hdGguUEk7XG5cblx0XHR9XG5cdH0gKTtcblxuXHR0aGlzLmRpc3RhbmNlID0gKCBkaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgPyBkaXN0YW5jZSA6IDA7XG5cdHRoaXMuYW5nbGUgPSAoIGFuZ2xlICE9PSB1bmRlZmluZWQgKSA/IGFuZ2xlIDogTWF0aC5QSSAvIDM7XG5cdHRoaXMucGVudW1icmEgPSAoIHBlbnVtYnJhICE9PSB1bmRlZmluZWQgKSA/IHBlbnVtYnJhIDogMDtcblx0dGhpcy5kZWNheSA9ICggZGVjYXkgIT09IHVuZGVmaW5lZCApID8gZGVjYXkgOiAxO1x0Ly8gZm9yIHBoeXNpY2FsbHkgY29ycmVjdCBsaWdodHMsIHNob3VsZCBiZSAyLlxuXG5cdHRoaXMuc2hhZG93ID0gbmV3IFNwb3RMaWdodFNoYWRvdygpO1xuXG59XG5cblNwb3RMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTcG90TGlnaHQsXG5cblx0aXNTcG90TGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XG5cdFx0dGhpcy5hbmdsZSA9IHNvdXJjZS5hbmdsZTtcblx0XHR0aGlzLnBlbnVtYnJhID0gc291cmNlLnBlbnVtYnJhO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIFBvaW50TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlLCBkZWNheSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ1BvaW50TGlnaHQnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ3Bvd2VyJywge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXG5cdFx0XHQvLyByZWY6IGVxdWF0aW9uICgxNSkgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiA0ICogTWF0aC5QSTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHBvd2VyICkge1xuXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXG5cdFx0XHQvLyByZWY6IGVxdWF0aW9uICgxNSkgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmXG5cdFx0XHR0aGlzLmludGVuc2l0eSA9IHBvd2VyIC8gKCA0ICogTWF0aC5QSSApO1xuXG5cdFx0fVxuXHR9ICk7XG5cblx0dGhpcy5kaXN0YW5jZSA9ICggZGlzdGFuY2UgIT09IHVuZGVmaW5lZCApID8gZGlzdGFuY2UgOiAwO1xuXHR0aGlzLmRlY2F5ID0gKCBkZWNheSAhPT0gdW5kZWZpbmVkICkgPyBkZWNheSA6IDE7XHQvLyBmb3IgcGh5c2ljYWxseSBjb3JyZWN0IGxpZ2h0cywgc2hvdWxkIGJlIDIuXG5cblx0dGhpcy5zaGFkb3cgPSBuZXcgTGlnaHRTaGFkb3coIG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggOTAsIDEsIDAuNSwgNTAwICkgKTtcblxufVxuXG5Qb2ludExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBvaW50TGlnaHQsXG5cblx0aXNQb2ludExpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIGFyb3NlIC8gaHR0cDovL2dpdGh1Yi5jb20vYXJvc2VcbiAqL1xuXG5mdW5jdGlvbiBPcnRob2dyYXBoaWNDYW1lcmEoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkge1xuXG5cdENhbWVyYS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ09ydGhvZ3JhcGhpY0NhbWVyYSc7XG5cblx0dGhpcy56b29tID0gMTtcblx0dGhpcy52aWV3ID0gbnVsbDtcblxuXHR0aGlzLmxlZnQgPSAoIGxlZnQgIT09IHVuZGVmaW5lZCApID8gbGVmdCA6IC0gMTtcblx0dGhpcy5yaWdodCA9ICggcmlnaHQgIT09IHVuZGVmaW5lZCApID8gcmlnaHQgOiAxO1xuXHR0aGlzLnRvcCA9ICggdG9wICE9PSB1bmRlZmluZWQgKSA/IHRvcCA6IDE7XG5cdHRoaXMuYm90dG9tID0gKCBib3R0b20gIT09IHVuZGVmaW5lZCApID8gYm90dG9tIDogLSAxO1xuXG5cdHRoaXMubmVhciA9ICggbmVhciAhPT0gdW5kZWZpbmVkICkgPyBuZWFyIDogMC4xO1xuXHR0aGlzLmZhciA9ICggZmFyICE9PSB1bmRlZmluZWQgKSA/IGZhciA6IDIwMDA7XG5cblx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cbn1cblxuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIENhbWVyYS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBPcnRob2dyYXBoaWNDYW1lcmEsXG5cblx0aXNPcnRob2dyYXBoaWNDYW1lcmE6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdENhbWVyYS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5sZWZ0ID0gc291cmNlLmxlZnQ7XG5cdFx0dGhpcy5yaWdodCA9IHNvdXJjZS5yaWdodDtcblx0XHR0aGlzLnRvcCA9IHNvdXJjZS50b3A7XG5cdFx0dGhpcy5ib3R0b20gPSBzb3VyY2UuYm90dG9tO1xuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblxuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRWaWV3T2Zmc2V0OiBmdW5jdGlvbiAoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9LFxuXG5cdGNsZWFyVmlld09mZnNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9LFxuXG5cdHVwZGF0ZVByb2plY3Rpb25NYXRyaXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkeCA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gKCAyICogdGhpcy56b29tICk7XG5cdFx0dmFyIGR5ID0gKCB0aGlzLnRvcCAtIHRoaXMuYm90dG9tICkgLyAoIDIgKiB0aGlzLnpvb20gKTtcblx0XHR2YXIgY3ggPSAoIHRoaXMucmlnaHQgKyB0aGlzLmxlZnQgKSAvIDI7XG5cdFx0dmFyIGN5ID0gKCB0aGlzLnRvcCArIHRoaXMuYm90dG9tICkgLyAyO1xuXG5cdFx0dmFyIGxlZnQgPSBjeCAtIGR4O1xuXHRcdHZhciByaWdodCA9IGN4ICsgZHg7XG5cdFx0dmFyIHRvcCA9IGN5ICsgZHk7XG5cdFx0dmFyIGJvdHRvbSA9IGN5IC0gZHk7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHtcblxuXHRcdFx0dmFyIHpvb21XID0gdGhpcy56b29tIC8gKCB0aGlzLnZpZXcud2lkdGggLyB0aGlzLnZpZXcuZnVsbFdpZHRoICk7XG5cdFx0XHR2YXIgem9vbUggPSB0aGlzLnpvb20gLyAoIHRoaXMudmlldy5oZWlnaHQgLyB0aGlzLnZpZXcuZnVsbEhlaWdodCApO1xuXHRcdFx0dmFyIHNjYWxlVyA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gdGhpcy52aWV3LndpZHRoO1xuXHRcdFx0dmFyIHNjYWxlSCA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gdGhpcy52aWV3LmhlaWdodDtcblxuXHRcdFx0bGVmdCArPSBzY2FsZVcgKiAoIHRoaXMudmlldy5vZmZzZXRYIC8gem9vbVcgKTtcblx0XHRcdHJpZ2h0ID0gbGVmdCArIHNjYWxlVyAqICggdGhpcy52aWV3LndpZHRoIC8gem9vbVcgKTtcblx0XHRcdHRvcCAtPSBzY2FsZUggKiAoIHRoaXMudmlldy5vZmZzZXRZIC8gem9vbUggKTtcblx0XHRcdGJvdHRvbSA9IHRvcCAtIHNjYWxlSCAqICggdGhpcy52aWV3LmhlaWdodCAvIHpvb21IICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZU9ydGhvZ3JhcGhpYyggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCB0aGlzLm5lYXIsIHRoaXMuZmFyICk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIHRoaXMucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblx0XHRkYXRhLm9iamVjdC5sZWZ0ID0gdGhpcy5sZWZ0O1xuXHRcdGRhdGEub2JqZWN0LnJpZ2h0ID0gdGhpcy5yaWdodDtcblx0XHRkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDtcblx0XHRkYXRhLm9iamVjdC5ib3R0b20gPSB0aGlzLmJvdHRvbTtcblx0XHRkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyO1xuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0U2hhZG93KCApIHtcblxuXHRMaWdodFNoYWRvdy5jYWxsKCB0aGlzLCBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCAtIDUsIDUsIDUsIC0gNSwgMC41LCA1MDAgKSApO1xuXG59XG5cbkRpcmVjdGlvbmFsTGlnaHRTaGFkb3cucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHRTaGFkb3cucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogRGlyZWN0aW9uYWxMaWdodFNoYWRvd1xuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRGlyZWN0aW9uYWxMaWdodCggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ0RpcmVjdGlvbmFsTGlnaHQnO1xuXG5cdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuRGVmYXVsdFVwICk7XG5cdHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHR0aGlzLnNoYWRvdyA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93KCk7XG5cbn1cblxuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBEaXJlY3Rpb25hbExpZ2h0LFxuXG5cdGlzRGlyZWN0aW9uYWxMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0LmNsb25lKCk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQW1iaWVudExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnQW1iaWVudExpZ2h0JztcblxuXHR0aGlzLmNhc3RTaGFkb3cgPSB1bmRlZmluZWQ7XG5cbn1cblxuQW1iaWVudExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEFtYmllbnRMaWdodCxcblxuXHRpc0FtYmllbnRMaWdodDogdHJ1ZVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICovXG5cbmZ1bmN0aW9uIFJlY3RBcmVhTGlnaHQoIGNvbG9yLCBpbnRlbnNpdHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdSZWN0QXJlYUxpZ2h0JztcblxuXHR0aGlzLndpZHRoID0gKCB3aWR0aCAhPT0gdW5kZWZpbmVkICkgPyB3aWR0aCA6IDEwO1xuXHR0aGlzLmhlaWdodCA9ICggaGVpZ2h0ICE9PSB1bmRlZmluZWQgKSA/IGhlaWdodCA6IDEwO1xuXG59XG5cblJlY3RBcmVhTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUmVjdEFyZWFMaWdodCxcblxuXHRpc1JlY3RBcmVhTGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gTGlnaHQucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC53aWR0aCA9IHRoaXMud2lkdGg7XG5cdFx0ZGF0YS5vYmplY3QuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIE1hdGVyaWFsTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXHR0aGlzLnRleHR1cmVzID0ge307XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTWF0ZXJpYWxMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggc2NvcGUucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgdGV4dHVyZXMgPSB0aGlzLnRleHR1cmVzO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dHVyZSggbmFtZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWxMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG1hdGVyaWFsID0gbmV3IE1hdGVyaWFsc1sganNvbi50eXBlIF0oKTtcblxuXHRcdGlmICgganNvbi51dWlkICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC51dWlkID0ganNvbi51dWlkO1xuXHRcdGlmICgganNvbi5uYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5uYW1lID0ganNvbi5uYW1lO1xuXHRcdGlmICgganNvbi5jb2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29sb3Iuc2V0SGV4KCBqc29uLmNvbG9yICk7XG5cdFx0aWYgKCBqc29uLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm91Z2huZXNzID0ganNvbi5yb3VnaG5lc3M7XG5cdFx0aWYgKCBqc29uLm1ldGFsbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWV0YWxuZXNzID0ganNvbi5tZXRhbG5lc3M7XG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZS5zZXRIZXgoIGpzb24uZW1pc3NpdmUgKTtcblx0XHRpZiAoIGpzb24uc3BlY3VsYXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyLnNldEhleCgganNvbi5zcGVjdWxhciApO1xuXHRcdGlmICgganNvbi5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoaW5pbmVzcyA9IGpzb24uc2hpbmluZXNzO1xuXHRcdGlmICgganNvbi5jbGVhckNvYXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyQ29hdCA9IGpzb24uY2xlYXJDb2F0O1xuXHRcdGlmICgganNvbi5jbGVhckNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyA9IGpzb24uY2xlYXJDb2F0Um91Z2huZXNzO1xuXHRcdGlmICgganNvbi52ZXJ0ZXhDb2xvcnMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IGpzb24udmVydGV4Q29sb3JzO1xuXHRcdGlmICgganNvbi5mb2cgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZvZyA9IGpzb24uZm9nO1xuXHRcdGlmICgganNvbi5mbGF0U2hhZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLmZsYXRTaGFkaW5nO1xuXHRcdGlmICgganNvbi5ibGVuZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRpbmcgPSBqc29uLmJsZW5kaW5nO1xuXHRcdGlmICgganNvbi5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb21iaW5lID0ganNvbi5jb21iaW5lO1xuXHRcdGlmICgganNvbi5zaWRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaWRlID0ganNvbi5zaWRlO1xuXHRcdGlmICgganNvbi5vcGFjaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5vcGFjaXR5ID0ganNvbi5vcGFjaXR5O1xuXHRcdGlmICgganNvbi50cmFuc3BhcmVudCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBqc29uLnRyYW5zcGFyZW50O1xuXHRcdGlmICgganNvbi5hbHBoYVRlc3QgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFscGhhVGVzdCA9IGpzb24uYWxwaGFUZXN0O1xuXHRcdGlmICgganNvbi5kZXB0aFRlc3QgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlcHRoVGVzdCA9IGpzb24uZGVwdGhUZXN0O1xuXHRcdGlmICgganNvbi5kZXB0aFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFdyaXRlID0ganNvbi5kZXB0aFdyaXRlO1xuXHRcdGlmICgganNvbi5jb2xvcldyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb2xvcldyaXRlID0ganNvbi5jb2xvcldyaXRlO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZSA9IGpzb24ud2lyZWZyYW1lO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5ld2lkdGggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCA9IGpzb24ud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lY2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5lY2FwID0ganNvbi53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lam9pbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWpvaW4gPSBqc29uLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0aWYgKCBqc29uLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3RhdGlvbiA9IGpzb24ucm90YXRpb247XG5cblx0XHRpZiAoIGpzb24ubGluZXdpZHRoICE9PSAxICkgbWF0ZXJpYWwubGluZXdpZHRoID0ganNvbi5saW5ld2lkdGg7XG5cdFx0aWYgKCBqc29uLmRhc2hTaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kYXNoU2l6ZSA9IGpzb24uZGFzaFNpemU7XG5cdFx0aWYgKCBqc29uLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmdhcFNpemUgPSBqc29uLmdhcFNpemU7XG5cdFx0aWYgKCBqc29uLnNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zY2FsZSA9IGpzb24uc2NhbGU7XG5cblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldCA9IGpzb24ucG9seWdvbk9mZnNldDtcblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldEZhY3RvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldEZhY3RvciA9IGpzb24ucG9seWdvbk9mZnNldEZhY3Rvcjtcblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldFVuaXRzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBqc29uLnBvbHlnb25PZmZzZXRVbml0cztcblxuXHRcdGlmICgganNvbi5za2lubmluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2tpbm5pbmcgPSBqc29uLnNraW5uaW5nO1xuXHRcdGlmICgganNvbi5tb3JwaFRhcmdldHMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyA9IGpzb24ubW9ycGhUYXJnZXRzO1xuXHRcdGlmICgganNvbi5kaXRoZXJpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpdGhlcmluZyA9IGpzb24uZGl0aGVyaW5nO1xuXG5cdFx0aWYgKCBqc29uLnZpc2libGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnZpc2libGUgPSBqc29uLnZpc2libGU7XG5cdFx0aWYgKCBqc29uLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7XG5cblx0XHQvLyBTaGFkZXIgTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi51bmlmb3JtcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgbmFtZSBpbiBqc29uLnVuaWZvcm1zICkge1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtID0ganNvbi51bmlmb3Jtc1sgbmFtZSBdO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0gPSB7fTtcblxuXHRcdFx0XHRzd2l0Y2ggKCB1bmlmb3JtLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICd0Jzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBnZXRUZXh0dXJlKCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ2MnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBDb2xvcigpLnNldEhleCggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2Mic6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjMnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3Y0Jzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdtNCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlZmluZXMgPSBqc29uLmRlZmluZXM7XG5cdFx0aWYgKCBqc29uLnZlcnRleFNoYWRlciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmVydGV4U2hhZGVyID0ganNvbi52ZXJ0ZXhTaGFkZXI7XG5cdFx0aWYgKCBqc29uLmZyYWdtZW50U2hhZGVyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciA9IGpzb24uZnJhZ21lbnRTaGFkZXI7XG5cblx0XHQvLyBEZXByZWNhdGVkXG5cblx0XHRpZiAoIGpzb24uc2hhZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLnNoYWRpbmcgPT09IDE7IC8vIFRIUkVFLkZsYXRTaGFkaW5nXG5cblx0XHQvLyBmb3IgUG9pbnRzTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi5zaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplID0ganNvbi5zaXplO1xuXHRcdGlmICgganNvbi5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9IGpzb24uc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0Ly8gbWFwc1xuXG5cdFx0aWYgKCBqc29uLm1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSgganNvbi5tYXAgKTtcblxuXHRcdGlmICgganNvbi5hbHBoYU1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXRlcmlhbC5hbHBoYU1hcCA9IGdldFRleHR1cmUoIGpzb24uYWxwaGFNYXAgKTtcblx0XHRcdG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5idW1wTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5idW1wTWFwID0gZ2V0VGV4dHVyZSgganNvbi5idW1wTWFwICk7XG5cdFx0aWYgKCBqc29uLmJ1bXBTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcFNjYWxlID0ganNvbi5idW1wU2NhbGU7XG5cblx0XHRpZiAoIGpzb24ubm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBqc29uLm5vcm1hbE1hcCApO1xuXHRcdGlmICgganNvbi5ub3JtYWxNYXBUeXBlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID0ganNvbi5ub3JtYWxNYXBUeXBlO1xuXHRcdGlmICgganNvbi5ub3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsU2NhbGUgPSBqc29uLm5vcm1hbFNjYWxlO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5vcm1hbFNjYWxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIEJsZW5kZXIgZXhwb3J0ZXIgdXNlZCB0byBleHBvcnQgYSBzY2FsYXIuIFNlZSAjNzQ1OVxuXG5cdFx0XHRcdG5vcm1hbFNjYWxlID0gWyBub3JtYWxTY2FsZSwgbm9ybWFsU2NhbGUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCBub3JtYWxTY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5kaXNwbGFjZW1lbnRNYXAgKTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50U2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlID0ganNvbi5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50QmlhcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IGpzb24uZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdGlmICgganNvbi5yb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ucm91Z2huZXNzTWFwICk7XG5cdFx0aWYgKCBqc29uLm1ldGFsbmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWV0YWxuZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5tZXRhbG5lc3NNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbWlzc2l2ZU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVtaXNzaXZlTWFwICk7XG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IGpzb24uZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uc3BlY3VsYXJNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhck1hcCApO1xuXG5cdFx0aWYgKCBqc29uLmVudk1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwID0gZ2V0VGV4dHVyZSgganNvbi5lbnZNYXAgKTtcblx0XHRpZiAoIGpzb24uZW52TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHkgPSBqc29uLmVudk1hcEludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5yZWZsZWN0aXZpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJlZmxlY3Rpdml0eSA9IGpzb24ucmVmbGVjdGl2aXR5O1xuXG5cdFx0aWYgKCBqc29uLmxpZ2h0TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saWdodE1hcCA9IGdldFRleHR1cmUoIGpzb24ubGlnaHRNYXAgKTtcblx0XHRpZiAoIGpzb24ubGlnaHRNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5ID0ganNvbi5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5hb01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW9NYXAgPSBnZXRUZXh0dXJlKCBqc29uLmFvTWFwICk7XG5cdFx0aWYgKCBqc29uLmFvTWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hb01hcEludGVuc2l0eSA9IGpzb24uYW9NYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uZ3JhZGllbnRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmdyYWRpZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5ncmFkaWVudE1hcCApO1xuXG5cdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VGV4dHVyZXM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVzID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBEb24gTWNDdXJkeSAvIGh0dHBzOi8vd3d3LmRvbm1jY3VyZHkuY29tXG4gKi9cblxudmFyIExvYWRlclV0aWxzID0ge1xuXG5cdGRlY29kZVRleHQ6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHQvLyBBdm9pZCB0aGUgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheSkgc2hvcnRjdXQsIHdoaWNoXG5cdFx0Ly8gdGhyb3dzIGEgXCJtYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiIGVycm9yIGZvciBsYXJnZSBhcnJheXMuXG5cblx0XHR2YXIgcyA9ICcnO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHQvLyBJbXBsaWNpdGx5IGFzc3VtZXMgbGl0dGxlLWVuZGlhbi5cblx0XHRcdHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggYXJyYXlbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gTWVyZ2VzIG11bHRpLWJ5dGUgdXRmLTggY2hhcmFjdGVycy5cblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KCBlc2NhcGUoIHMgKSApO1xuXG5cdH0sXG5cblx0ZXh0cmFjdFVybEJhc2U6IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0dmFyIGluZGV4ID0gdXJsLmxhc3RJbmRleE9mKCAnLycgKTtcblxuXHRcdGlmICggaW5kZXggPT09IC0gMSApIHJldHVybiAnLi8nO1xuXG5cdFx0cmV0dXJuIHVybC5zdWJzdHIoIDAsIGluZGV4ICsgMSApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlckdlb21ldHJ5TG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEJ1ZmZlckdlb21ldHJ5TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdG9uTG9hZCggc2NvcGUucGFyc2UoIEpTT04ucGFyc2UoIHRleHQgKSApICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fSxcblxuXHRwYXJzZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHR2YXIgaW5kZXggPSBqc29uLmRhdGEuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1sgaW5kZXgudHlwZSBdKCBpbmRleC5hcnJheSApO1xuXHRcdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBqc29uLmRhdGEuYXR0cmlidXRlcztcblxuXHRcdGZvciAoIHZhciBrZXkgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0dmFyIHR5cGVkQXJyYXkgPSBuZXcgVFlQRURfQVJSQVlTWyBhdHRyaWJ1dGUudHlwZSBdKCBhdHRyaWJ1dGUuYXJyYXkgKTtcblxuXHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCBrZXksIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IGpzb24uZGF0YS5ncm91cHMgfHwganNvbi5kYXRhLmRyYXdjYWxscyB8fCBqc29uLmRhdGEub2Zmc2V0cztcblxuXHRcdGlmICggZ3JvdXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGdyb3Vwcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdFx0Z2VvbWV0cnkuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBqc29uLmRhdGEuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNlbnRlci5mcm9tQXJyYXkoIGJvdW5kaW5nU3BoZXJlLmNlbnRlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSggY2VudGVyLCBib3VuZGluZ1NwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5uYW1lICkgZ2VvbWV0cnkubmFtZSA9IGpzb24ubmFtZTtcblx0XHRpZiAoIGpzb24udXNlckRhdGEgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbnZhciBUWVBFRF9BUlJBWVMgPSB7XG5cdEludDhBcnJheTogSW50OEFycmF5LFxuXHRVaW50OEFycmF5OiBVaW50OEFycmF5LFxuXHQvLyBXb3JrYXJvdW5kIGZvciBJRTExIHByZSBLQjI5Mjk0MzcuIFNlZSAjMTE0NDBcblx0VWludDhDbGFtcGVkQXJyYXk6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OENsYW1wZWRBcnJheSA6IFVpbnQ4QXJyYXksXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXG5cdFVpbnQxNkFycmF5OiBVaW50MTZBcnJheSxcblx0SW50MzJBcnJheTogSW50MzJBcnJheSxcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuXHRGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheSxcblx0RmxvYXQ2NEFycmF5OiBGbG9hdDY0QXJyYXlcbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBPYmplY3RMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cdHRoaXMucmVzb3VyY2VQYXRoID0gJyc7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggT2JqZWN0TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBwYXRoID0gKCB0aGlzLnBhdGggPT09IHVuZGVmaW5lZCApID8gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogdGhpcy5wYXRoO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHZhciBqc29uID0gbnVsbDtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICE9PSB1bmRlZmluZWQgKSBvbkVycm9yKCBlcnJvciApO1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRTpPYmplY3RMb2FkZXI6IENhblxcJ3QgcGFyc2UgJyArIHVybCArICcuJywgZXJyb3IubWVzc2FnZSApO1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0XHRpZiAoIG1ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2dlb21ldHJ5JyApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBDYW5cXCd0IGxvYWQgJyArIHVybCApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0c2NvcGUucGFyc2UoIGpzb24sIG9uTG9hZCApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UmVzb3VyY2VQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiwgb25Mb2FkICkge1xuXG5cdFx0dmFyIHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZSgganNvbi5zaGFwZXMgKTtcblx0XHR2YXIgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xuXG5cdFx0dmFyIGltYWdlcyA9IHRoaXMucGFyc2VJbWFnZXMoIGpzb24uaW1hZ2VzLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSBvbkxvYWQoIG9iamVjdCApO1xuXG5cdFx0fSApO1xuXG5cdFx0dmFyIHRleHR1cmVzID0gdGhpcy5wYXJzZVRleHR1cmVzKCBqc29uLnRleHR1cmVzLCBpbWFnZXMgKTtcblx0XHR2YXIgbWF0ZXJpYWxzID0gdGhpcy5wYXJzZU1hdGVyaWFscygganNvbi5tYXRlcmlhbHMsIHRleHR1cmVzICk7XG5cblx0XHR2YXIgb2JqZWN0ID0gdGhpcy5wYXJzZU9iamVjdCgganNvbi5vYmplY3QsIGdlb21ldHJpZXMsIG1hdGVyaWFscyApO1xuXG5cdFx0aWYgKCBqc29uLmFuaW1hdGlvbnMgKSB7XG5cblx0XHRcdG9iamVjdC5hbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmltYWdlcyA9PT0gdW5kZWZpbmVkIHx8IGpzb24uaW1hZ2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIG9uTG9hZCggb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH0sXG5cblx0cGFyc2VTaGFwZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIHNoYXBlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgc2hhcGUgPSBuZXcgU2hhcGUoKS5mcm9tSlNPTigganNvblsgaSBdICk7XG5cblx0XHRcdFx0c2hhcGVzWyBzaGFwZS51dWlkIF0gPSBzaGFwZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNoYXBlcztcblxuXHR9LFxuXG5cdHBhcnNlR2VvbWV0cmllczogZnVuY3Rpb24gKCBqc29uLCBzaGFwZXMgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cmllcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBidWZmZXJHZW9tZXRyeUxvYWRlciA9IG5ldyBCdWZmZXJHZW9tZXRyeUxvYWRlcigpO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGdlb21ldHJ5O1xuXHRcdFx0XHR2YXIgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdQbGFuZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdQbGFuZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQm94R2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0JveEJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDdWJlR2VvbWV0cnknOiAvLyBiYWNrd2FyZHMgY29tcGF0aWJsZVxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEuZGVwdGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGhTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXB0aFNlZ21lbnRzXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0NpcmNsZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDaXJjbGVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5zZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0N5bGluZGVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0N5bGluZGVyQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXNUb3AsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzQm90dG9tLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcGVuRW5kZWQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdDb25lR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0NvbmVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEub3BlbkVuZGVkLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU3BoZXJlR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1NwaGVyZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpTGVuZ3RoLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0RvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdJY29zYWhlZHJvbkdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdPY3RhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ09jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVGV0cmFoZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXRhaWxcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnUmluZ0dlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdSaW5nQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5pbm5lclJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vdXRlclJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJlLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5hcmNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNLbm90R2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1RvcnVzS25vdEJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YmUsXG5cdFx0XHRcdFx0XHRcdGRhdGEudHVidWxhclNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnAsXG5cdFx0XHRcdFx0XHRcdGRhdGEucVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdMYXRoZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdMYXRoZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucG9pbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdQb2x5aGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1BvbHloZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnZlcnRpY2VzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmluZGljZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmRldGFpbHNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU2hhcGVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnU2hhcGVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdHZhciBnZW9tZXRyeVNoYXBlcyA9IFtdO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZGF0YS5zaGFwZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBkYXRhLnNoYXBlc1sgaiBdIF07XG5cblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnlTaGFwZXMucHVzaCggc2hhcGUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnlTaGFwZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuY3VydmVTZWdtZW50c1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblxuXHRcdFx0XHRcdGNhc2UgJ0V4dHJ1ZGVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnRXh0cnVkZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5U2hhcGVzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBleHRydWRlUGF0aCA9IGRhdGEub3B0aW9ucy5leHRydWRlUGF0aDtcblxuXHRcdFx0XHRcdFx0aWYgKCBleHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG5ldyBDdXJ2ZXNbIGV4dHJ1ZGVQYXRoLnR5cGUgXSgpLmZyb21KU09OKCBleHRydWRlUGF0aCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcHRpb25zXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0J1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBidWZmZXJHZW9tZXRyeUxvYWRlci5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0dlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0aWYgKCAnVEhSRUUnIGluIHdpbmRvdyAmJiAnTGVnYWN5SlNPTkxvYWRlcicgaW4gVEhSRUUgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5TG9hZGVyID0gbmV3IFRIUkVFLkxlZ2FjeUpTT05Mb2FkZXIoKTtcblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBnZW9tZXRyeUxvYWRlci5wYXJzZSggZGF0YSwgdGhpcy5yZXNvdXJjZVBhdGggKS5nZW9tZXRyeTtcblxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3RMb2FkZXI6IFlvdSBoYXZlIHRvIGltcG9ydCBMZWdhY3lKU09OTG9hZGVyIGluIG9yZGVyIGxvYWQgZ2VvbWV0cnkgZGF0YSBvZiB0eXBlIFwiR2VvbWV0cnlcIi4nICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuc3VwcG9ydGVkIGdlb21ldHJ5IHR5cGUgXCInICsgZGF0YS50eXBlICsgJ1wiJyApO1xuXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2VvbWV0cnkudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdFx0XHRpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgZ2VvbWV0cnkubmFtZSA9IGRhdGEubmFtZTtcblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ID09PSB0cnVlICYmIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHRnZW9tZXRyaWVzWyBkYXRhLnV1aWQgXSA9IGdlb21ldHJ5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cmllcztcblxuXHR9LFxuXG5cdHBhcnNlTWF0ZXJpYWxzOiBmdW5jdGlvbiAoIGpzb24sIHRleHR1cmVzICkge1xuXG5cdFx0dmFyIGNhY2hlID0ge307IC8vIE11bHRpTWF0ZXJpYWxcblx0XHR2YXIgbWF0ZXJpYWxzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGxvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xuXHRcdFx0bG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdNdWx0aU1hdGVyaWFsJyApIHtcblxuXHRcdFx0XHRcdC8vIERlcHJlY2F0ZWRcblxuXHRcdFx0XHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgZGF0YS5tYXRlcmlhbHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBkYXRhLm1hdGVyaWFsc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGNhY2hlWyBtYXRlcmlhbC51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZVsgbWF0ZXJpYWwudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGFycmF5LnB1c2goIGNhY2hlWyBtYXRlcmlhbC51dWlkIF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1hdGVyaWFsc1sgZGF0YS51dWlkIF0gPSBhcnJheTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggZGF0YSApO1xuXHRcdFx0XHRcdGNhY2hlWyBkYXRhLnV1aWQgXSA9IG1hdGVyaWFsc1sgZGF0YS51dWlkIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG5cdH0sXG5cblx0cGFyc2VBbmltYXRpb25zOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHR2YXIgY2xpcCA9IEFuaW1hdGlvbkNsaXAucGFyc2UoIGRhdGEgKTtcblxuXHRcdFx0aWYgKCBkYXRhLnV1aWQgIT09IHVuZGVmaW5lZCApIGNsaXAudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdFx0YW5pbWF0aW9ucy5wdXNoKCBjbGlwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9LFxuXG5cdHBhcnNlSW1hZ2VzOiBmdW5jdGlvbiAoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cdFx0dmFyIGltYWdlcyA9IHt9O1xuXG5cdFx0ZnVuY3Rpb24gbG9hZEltYWdlKCB1cmwgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0cmV0dXJuIGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICYmIGpzb24ubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIG1hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoIG9uTG9hZCApO1xuXG5cdFx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCBtYW5hZ2VyICk7XG5cdFx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGpzb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGltYWdlID0ganNvblsgaSBdO1xuXHRcdFx0XHR2YXIgdXJsID0gaW1hZ2UudXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIGFycmF5IG9mIGltYWdlcyBlLmcgQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gdXJsLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY3VycmVudFVybCA9IHVybFsgaiBdO1xuXG5cdFx0XHRcdFx0XHR2YXIgcGF0aCA9IC9eKFxcL1xcLyl8KFthLXpdKzooXFwvXFwvKT8pL2kudGVzdCggY3VycmVudFVybCApID8gY3VycmVudFVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIGN1cnJlbnRVcmw7XG5cblx0XHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdLnB1c2goIGxvYWRJbWFnZSggcGF0aCApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgc2luZ2xlIGltYWdlXG5cblx0XHRcdFx0XHR2YXIgcGF0aCA9IC9eKFxcL1xcLyl8KFthLXpdKzooXFwvXFwvKT8pL2kudGVzdCggaW1hZ2UudXJsICkgPyBpbWFnZS51cmwgOiBzY29wZS5yZXNvdXJjZVBhdGggKyBpbWFnZS51cmw7XG5cblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IGxvYWRJbWFnZSggcGF0aCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGltYWdlcztcblxuXHR9LFxuXG5cdHBhcnNlVGV4dHVyZXM6IGZ1bmN0aW9uICgganNvbiwgaW1hZ2VzICkge1xuXG5cdFx0ZnVuY3Rpb24gcGFyc2VDb25zdGFudCggdmFsdWUsIHR5cGUgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyApIHJldHVybiB2YWx1ZTtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyLnBhcnNlVGV4dHVyZTogQ29uc3RhbnQgc2hvdWxkIGJlIGluIG51bWVyaWMgZm9ybS4nLCB2YWx1ZSApO1xuXG5cdFx0XHRyZXR1cm4gdHlwZVsgdmFsdWUgXTtcblxuXHRcdH1cblxuXHRcdHZhciB0ZXh0dXJlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuaW1hZ2UgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogTm8gXCJpbWFnZVwiIHNwZWNpZmllZCBmb3InLCBkYXRhLnV1aWQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgaW1hZ2UnLCBkYXRhLmltYWdlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB0ZXh0dXJlO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggaW1hZ2VzWyBkYXRhLmltYWdlIF0gKSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoIGltYWdlc1sgZGF0YS5pbWFnZSBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmUgPSBuZXcgVGV4dHVyZSggaW1hZ2VzWyBkYXRhLmltYWdlIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0dGV4dHVyZS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm5hbWUgPSBkYXRhLm5hbWU7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFwcGluZyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFwcGluZywgVEVYVFVSRV9NQVBQSU5HICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm9mZnNldCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5vZmZzZXQuZnJvbUFycmF5KCBkYXRhLm9mZnNldCApO1xuXHRcdFx0XHRpZiAoIGRhdGEucmVwZWF0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkoIGRhdGEucmVwZWF0ICk7XG5cdFx0XHRcdGlmICggZGF0YS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY2VudGVyLmZyb21BcnJheSggZGF0YS5jZW50ZXIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJvdGF0aW9uID0gZGF0YS5yb3RhdGlvbjtcblxuXHRcdFx0XHRpZiAoIGRhdGEud3JhcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwUyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMCBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwVCA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMSBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1pbkZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYWdGaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1hZ0ZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuYW5pc290cm9weSA9IGRhdGEuYW5pc290cm9weTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuZmxpcFkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZmxpcFkgPSBkYXRhLmZsaXBZO1xuXG5cdFx0XHRcdHRleHR1cmVzWyBkYXRhLnV1aWQgXSA9IHRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlcztcblxuXHR9LFxuXG5cdHBhcnNlT2JqZWN0OiBmdW5jdGlvbiAoIGRhdGEsIGdlb21ldHJpZXMsIG1hdGVyaWFscyApIHtcblxuXHRcdHZhciBvYmplY3Q7XG5cblx0XHRmdW5jdGlvbiBnZXRHZW9tZXRyeSggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBnZW9tZXRyaWVzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBnZW9tZXRyeScsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZ2VvbWV0cmllc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0TWF0ZXJpYWwoIG5hbWUgKSB7XG5cblx0XHRcdGlmICggbmFtZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0dmFyIGFycmF5ID0gW107XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbmFtZS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHV1aWQgPSBuYW1lWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgdXVpZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWxzWyB1dWlkIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdGNhc2UgJ1NjZW5lJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU2NlbmUoKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuYmFja2dyb3VuZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBOdW1iZXIuaXNJbnRlZ2VyKCBkYXRhLmJhY2tncm91bmQgKSApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmJhY2tncm91bmQgPSBuZXcgQ29sb3IoIGRhdGEuYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZm9nICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2cnICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuZm9nID0gbmV3IEZvZyggZGF0YS5mb2cuY29sb3IsIGRhdGEuZm9nLm5lYXIsIGRhdGEuZm9nLmZhciApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggZGF0YS5mb2cudHlwZSA9PT0gJ0ZvZ0V4cDInICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuZm9nID0gbmV3IEZvZ0V4cDIoIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5kZW5zaXR5ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQZXJzcGVjdGl2ZUNhbWVyYSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBkYXRhLmZvdiwgZGF0YS5hc3BlY3QsIGRhdGEubmVhciwgZGF0YS5mYXIgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuZm9jdXMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5mb2N1cyA9IGRhdGEuZm9jdXM7XG5cdFx0XHRcdGlmICggZGF0YS56b29tICE9PSB1bmRlZmluZWQgKSBvYmplY3Quem9vbSA9IGRhdGEuem9vbTtcblx0XHRcdFx0aWYgKCBkYXRhLmZpbG1HYXVnZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZpbG1HYXVnZSA9IGRhdGEuZmlsbUdhdWdlO1xuXHRcdFx0XHRpZiAoIGRhdGEuZmlsbU9mZnNldCAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZpbG1PZmZzZXQgPSBkYXRhLmZpbG1PZmZzZXQ7XG5cdFx0XHRcdGlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCBkYXRhLnZpZXcgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnT3J0aG9ncmFwaGljQ2FtZXJhJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCBkYXRhLmxlZnQsIGRhdGEucmlnaHQsIGRhdGEudG9wLCBkYXRhLmJvdHRvbSwgZGF0YS5uZWFyLCBkYXRhLmZhciApO1xuXG5cdFx0XHRcdGlmICggZGF0YS56b29tICE9PSB1bmRlZmluZWQgKSBvYmplY3Quem9vbSA9IGRhdGEuem9vbTtcblx0XHRcdFx0aWYgKCBkYXRhLnZpZXcgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIGRhdGEudmlldyApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdBbWJpZW50TGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBBbWJpZW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQb2ludExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUG9pbnRMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEuZGlzdGFuY2UsIGRhdGEuZGVjYXkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUmVjdEFyZWFMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFJlY3RBcmVhTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLndpZHRoLCBkYXRhLmhlaWdodCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdTcG90TGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTcG90TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmFuZ2xlLCBkYXRhLnBlbnVtYnJhLCBkYXRhLmRlY2F5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEhlbWlzcGhlcmVMaWdodCggZGF0YS5jb2xvciwgZGF0YS5ncm91bmRDb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU2tpbm5lZE1lc2gnOlxuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZU9iamVjdCgpIGRvZXMgbm90IHN1cHBvcnQgU2tpbm5lZE1lc2ggeWV0LicgKTtcblxuXHRcdFx0Y2FzZSAnTWVzaCc6XG5cblx0XHRcdFx0dmFyIGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcblx0XHRcdFx0dmFyIG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmJvbmVzICYmIGdlb21ldHJ5LmJvbmVzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRvYmplY3QgPSBuZXcgU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRvYmplY3QgPSBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMT0QnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMT0QoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExpbmUoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICksIGRhdGEubW9kZSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lTG9vcCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExpbmVMb29wKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpbmVTZWdtZW50cyc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExpbmVTZWdtZW50cyggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQb2ludENsb3VkJzpcblx0XHRcdGNhc2UgJ1BvaW50cyc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50cyggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdTcHJpdGUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTcHJpdGUoIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnR3JvdXAnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBHcm91cCgpO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0fVxuXG5cdFx0b2JqZWN0LnV1aWQgPSBkYXRhLnV1aWQ7XG5cblx0XHRpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lm5hbWUgPSBkYXRhLm5hbWU7XG5cblx0XHRpZiAoIGRhdGEubWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG9iamVjdC5tYXRyaXguZnJvbUFycmF5KCBkYXRhLm1hdHJpeCApO1xuXG5cdFx0XHRpZiAoIGRhdGEubWF0cml4QXV0b1VwZGF0ZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgPSBkYXRhLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0XHRpZiAoIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlICkgb2JqZWN0Lm1hdHJpeC5kZWNvbXBvc2UoIG9iamVjdC5wb3NpdGlvbiwgb2JqZWN0LnF1YXRlcm5pb24sIG9iamVjdC5zY2FsZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkYXRhLnBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3QucG9zaXRpb24uZnJvbUFycmF5KCBkYXRhLnBvc2l0aW9uICk7XG5cdFx0XHRpZiAoIGRhdGEucm90YXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5yb3RhdGlvbi5mcm9tQXJyYXkoIGRhdGEucm90YXRpb24gKTtcblx0XHRcdGlmICggZGF0YS5xdWF0ZXJuaW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3QucXVhdGVybmlvbi5mcm9tQXJyYXkoIGRhdGEucXVhdGVybmlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnNjYWxlICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2NhbGUuZnJvbUFycmF5KCBkYXRhLnNjYWxlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEuY2FzdFNoYWRvdyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmNhc3RTaGFkb3cgPSBkYXRhLmNhc3RTaGFkb3c7XG5cdFx0aWYgKCBkYXRhLnJlY2VpdmVTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5yZWNlaXZlU2hhZG93ID0gZGF0YS5yZWNlaXZlU2hhZG93O1xuXG5cdFx0aWYgKCBkYXRhLnNoYWRvdyApIHtcblxuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5iaWFzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LmJpYXMgPSBkYXRhLnNoYWRvdy5iaWFzO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5yYWRpdXMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cucmFkaXVzID0gZGF0YS5zaGFkb3cucmFkaXVzO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5tYXBTaXplICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93Lm1hcFNpemUuZnJvbUFycmF5KCBkYXRhLnNoYWRvdy5tYXBTaXplICk7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LmNhbWVyYSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5jYW1lcmEgPSB0aGlzLnBhcnNlT2JqZWN0KCBkYXRhLnNoYWRvdy5jYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS52aXNpYmxlICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlzaWJsZSA9IGRhdGEudmlzaWJsZTtcblx0XHRpZiAoIGRhdGEuZnJ1c3R1bUN1bGxlZCAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZydXN0dW1DdWxsZWQgPSBkYXRhLmZydXN0dW1DdWxsZWQ7XG5cdFx0aWYgKCBkYXRhLnJlbmRlck9yZGVyICE9PSB1bmRlZmluZWQgKSBvYmplY3QucmVuZGVyT3JkZXIgPSBkYXRhLnJlbmRlck9yZGVyO1xuXHRcdGlmICggZGF0YS51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblx0XHRpZiAoIGRhdGEubGF5ZXJzICE9PSB1bmRlZmluZWQgKSBvYmplY3QubGF5ZXJzLm1hc2sgPSBkYXRhLmxheWVycztcblxuXHRcdGlmICggZGF0YS5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSBkYXRhLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmFkZCggdGhpcy5wYXJzZU9iamVjdCggY2hpbGRyZW5bIGkgXSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdMT0QnICkge1xuXG5cdFx0XHR2YXIgbGV2ZWxzID0gZGF0YS5sZXZlbHM7XG5cblx0XHRcdGZvciAoIHZhciBsID0gMDsgbCA8IGxldmVscy5sZW5ndGg7IGwgKysgKSB7XG5cblx0XHRcdFx0dmFyIGxldmVsID0gbGV2ZWxzWyBsIF07XG5cdFx0XHRcdHZhciBjaGlsZCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCAndXVpZCcsIGxldmVsLm9iamVjdCApO1xuXG5cdFx0XHRcdGlmICggY2hpbGQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5hZGRMZXZlbCggY2hpbGQsIGxldmVsLmRpc3RhbmNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxufSApO1xuXG52YXIgVEVYVFVSRV9NQVBQSU5HID0ge1xuXHRVVk1hcHBpbmc6IFVWTWFwcGluZyxcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyxcblx0U3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc6IFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlVVZSZWZsZWN0aW9uTWFwcGluZzogQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nOiBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZ1xufTtcblxudmFyIFRFWFRVUkVfV1JBUFBJTkcgPSB7XG5cdFJlcGVhdFdyYXBwaW5nOiBSZXBlYXRXcmFwcGluZyxcblx0Q2xhbXBUb0VkZ2VXcmFwcGluZzogQ2xhbXBUb0VkZ2VXcmFwcGluZyxcblx0TWlycm9yZWRSZXBlYXRXcmFwcGluZzogTWlycm9yZWRSZXBlYXRXcmFwcGluZ1xufTtcblxudmFyIFRFWFRVUkVfRklMVEVSID0ge1xuXHROZWFyZXN0RmlsdGVyOiBOZWFyZXN0RmlsdGVyLFxuXHROZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcjogTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI6IE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhckZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyOiBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyLFxuXHRMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI6IExpbmVhck1pcE1hcExpbmVhckZpbHRlclxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHRoZXNwaXRlIC8gaHR0cDovL2NsaWNrdG9yZWxlYXNlLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIEltYWdlQml0bWFwTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdGlmICggdHlwZW9mIGNyZWF0ZUltYWdlQml0bWFwID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlQml0bWFwTG9hZGVyOiBjcmVhdGVJbWFnZUJpdG1hcCgpIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdH1cblxuXHRpZiAoIHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogZmV0Y2goKSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHR9XG5cblx0dGhpcy5tYW5hZ2VyID0gbWFuYWdlciAhPT0gdW5kZWZpbmVkID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblx0dGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuXG59XG5cbkltYWdlQml0bWFwTG9hZGVyLnByb3RvdHlwZSA9IHtcblxuXHRjb25zdHJ1Y3RvcjogSW1hZ2VCaXRtYXBMb2FkZXIsXG5cblx0c2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyggb3B0aW9ucyApIHtcblxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdGZldGNoKCB1cmwgKS50aGVuKCBmdW5jdGlvbiAoIHJlcyApIHtcblxuXHRcdFx0cmV0dXJuIHJlcy5ibG9iKCk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBibG9iICkge1xuXG5cdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IsIHNjb3BlLm9wdGlvbnMgKTtcblxuXHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGltYWdlQml0bWFwICkge1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgaW1hZ2VCaXRtYXAgKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGltYWdlQml0bWFwICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9ICkuY2F0Y2goIGZ1bmN0aW9uICggZSApIHtcblxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZSApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fSApO1xuXG5cdH0sXG5cblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogbWluaW1hbCBjbGFzcyBmb3IgcHJveGluZyBmdW5jdGlvbnMgdG8gUGF0aC4gUmVwbGFjZXMgb2xkIFwiZXh0cmFjdFN1YnBhdGhzKClcIlxuICoqL1xuXG5mdW5jdGlvbiBTaGFwZVBhdGgoKSB7XG5cblx0dGhpcy50eXBlID0gJ1NoYXBlUGF0aCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdHRoaXMuc3ViUGF0aHMgPSBbXTtcblx0dGhpcy5jdXJyZW50UGF0aCA9IG51bGw7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU2hhcGVQYXRoLnByb3RvdHlwZSwge1xuXG5cdG1vdmVUbzogZnVuY3Rpb24gKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aCA9IG5ldyBQYXRoKCk7XG5cdFx0dGhpcy5zdWJQYXRocy5wdXNoKCB0aGlzLmN1cnJlbnRQYXRoICk7XG5cdFx0dGhpcy5jdXJyZW50UGF0aC5tb3ZlVG8oIHgsIHkgKTtcblxuXHR9LFxuXG5cdGxpbmVUbzogZnVuY3Rpb24gKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5saW5lVG8oIHgsIHkgKTtcblxuXHR9LFxuXG5cdHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uICggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKTtcblxuXHR9LFxuXG5cdGJlemllckN1cnZlVG86IGZ1bmN0aW9uICggYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGguYmV6aWVyQ3VydmVUbyggYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSApO1xuXG5cdH0sXG5cblx0c3BsaW5lVGhydTogZnVuY3Rpb24gKCBwdHMgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLnNwbGluZVRocnUoIHB0cyApO1xuXG5cdH0sXG5cblx0dG9TaGFwZXM6IGZ1bmN0aW9uICggaXNDQ1csIG5vSG9sZXMgKSB7XG5cblx0XHRmdW5jdGlvbiB0b1NoYXBlc05vSG9sZXMoIGluU3VicGF0aHMgKSB7XG5cblx0XHRcdHZhciBzaGFwZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5TdWJwYXRocy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciB0bXBQYXRoID0gaW5TdWJwYXRoc1sgaSBdO1xuXG5cdFx0XHRcdHZhciB0bXBTaGFwZSA9IG5ldyBTaGFwZSgpO1xuXHRcdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblxuXHRcdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaXNQb2ludEluc2lkZVBvbHlnb24oIGluUHQsIGluUG9seWdvbiApIHtcblxuXHRcdFx0dmFyIHBvbHlMZW4gPSBpblBvbHlnb24ubGVuZ3RoO1xuXG5cdFx0XHQvLyBpblB0IG9uIHBvbHlnb24gY29udG91ciA9PiBpbW1lZGlhdGUgc3VjY2VzcyAgICBvclxuXHRcdFx0Ly8gdG9nZ2xpbmcgb2YgaW5zaWRlL291dHNpZGUgYXQgZXZlcnkgc2luZ2xlISBpbnRlcnNlY3Rpb24gcG9pbnQgb2YgYW4gZWRnZVxuXHRcdFx0Ly8gIHdpdGggdGhlIGhvcml6b250YWwgbGluZSB0aHJvdWdoIGluUHQsIGxlZnQgb2YgaW5QdFxuXHRcdFx0Ly8gIG5vdCBjb3VudGluZyBsb3dlclkgZW5kcG9pbnRzIG9mIGVkZ2VzIGFuZCB3aG9sZSBlZGdlcyBvbiB0aGF0IGxpbmVcblx0XHRcdHZhciBpbnNpZGUgPSBmYWxzZTtcblx0XHRcdGZvciAoIHZhciBwID0gcG9seUxlbiAtIDEsIHEgPSAwOyBxIDwgcG9seUxlbjsgcCA9IHEgKysgKSB7XG5cblx0XHRcdFx0dmFyIGVkZ2VMb3dQdCA9IGluUG9seWdvblsgcCBdO1xuXHRcdFx0XHR2YXIgZWRnZUhpZ2hQdCA9IGluUG9seWdvblsgcSBdO1xuXG5cdFx0XHRcdHZhciBlZGdlRHggPSBlZGdlSGlnaFB0LnggLSBlZGdlTG93UHQueDtcblx0XHRcdFx0dmFyIGVkZ2VEeSA9IGVkZ2VIaWdoUHQueSAtIGVkZ2VMb3dQdC55O1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIGVkZ2VEeSApID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHQvLyBub3QgcGFyYWxsZWxcblx0XHRcdFx0XHRpZiAoIGVkZ2VEeSA8IDAgKSB7XG5cblx0XHRcdFx0XHRcdGVkZ2VMb3dQdCA9IGluUG9seWdvblsgcSBdOyBlZGdlRHggPSAtIGVkZ2VEeDtcblx0XHRcdFx0XHRcdGVkZ2VIaWdoUHQgPSBpblBvbHlnb25bIHAgXTsgZWRnZUR5ID0gLSBlZGdlRHk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCAoIGluUHQueSA8IGVkZ2VMb3dQdC55ICkgfHwgKCBpblB0LnkgPiBlZGdlSGlnaFB0LnkgKSApIFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHRcdGlmICggaW5QdC55ID09PSBlZGdlTG93UHQueSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpblB0LnggPT09IGVkZ2VMb3dQdC54IClcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xuXHRcdFx0XHRcdFx0Ly8gY29udGludWU7XHRcdFx0XHQvLyBubyBpbnRlcnNlY3Rpb24gb3IgZWRnZUxvd1B0ID0+IGRvZXNuJ3QgY291bnQgISEhXG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR2YXIgcGVycEVkZ2UgPSBlZGdlRHkgKiAoIGluUHQueCAtIGVkZ2VMb3dQdC54ICkgLSBlZGdlRHggKiAoIGluUHQueSAtIGVkZ2VMb3dQdC55ICk7XG5cdFx0XHRcdFx0XHRpZiAoIHBlcnBFZGdlID09PSAwIClcdFx0XHRcdHJldHVyblx0dHJ1ZTtcdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPCAwICkgXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdGluc2lkZSA9ICEgaW5zaWRlO1x0XHQvLyB0cnVlIGludGVyc2VjdGlvbiBsZWZ0IG9mIGluUHRcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gcGFyYWxsZWwgb3IgY29sbGluZWFyXG5cdFx0XHRcdFx0aWYgKCBpblB0LnkgIT09IGVkZ2VMb3dQdC55ICkgXHRcdGNvbnRpbnVlO1x0XHRcdC8vIHBhcmFsbGVsXG5cdFx0XHRcdFx0Ly8gZWRnZSBsaWVzIG9uIHRoZSBzYW1lIGhvcml6b250YWwgbGluZSBhcyBpblB0XG5cdFx0XHRcdFx0aWYgKCAoICggZWRnZUhpZ2hQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VMb3dQdC54ICkgKSB8fFxuXHRcdFx0XHRcdFx0ICggKCBlZGdlTG93UHQueCA8PSBpblB0LnggKSAmJiAoIGluUHQueCA8PSBlZGdlSGlnaFB0LnggKSApIClcdFx0cmV0dXJuXHR0cnVlO1x0Ly8gaW5QdDogUG9pbnQgb24gY29udG91ciAhXG5cdFx0XHRcdFx0Ly8gY29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVyblx0aW5zaWRlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGlzQ2xvY2tXaXNlID0gU2hhcGVVdGlscy5pc0Nsb2NrV2lzZTtcblxuXHRcdHZhciBzdWJQYXRocyA9IHRoaXMuc3ViUGF0aHM7XG5cdFx0aWYgKCBzdWJQYXRocy5sZW5ndGggPT09IDAgKSByZXR1cm4gW107XG5cblx0XHRpZiAoIG5vSG9sZXMgPT09IHRydWUgKVx0cmV0dXJuXHR0b1NoYXBlc05vSG9sZXMoIHN1YlBhdGhzICk7XG5cblxuXHRcdHZhciBzb2xpZCwgdG1wUGF0aCwgdG1wU2hhcGUsIHNoYXBlcyA9IFtdO1xuXG5cdFx0aWYgKCBzdWJQYXRocy5sZW5ndGggPT09IDEgKSB7XG5cblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1sgMCBdO1xuXHRcdFx0dG1wU2hhcGUgPSBuZXcgU2hhcGUoKTtcblx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cdFx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGhvbGVzRmlyc3QgPSAhIGlzQ2xvY2tXaXNlKCBzdWJQYXRoc1sgMCBdLmdldFBvaW50cygpICk7XG5cdFx0aG9sZXNGaXJzdCA9IGlzQ0NXID8gISBob2xlc0ZpcnN0IDogaG9sZXNGaXJzdDtcblxuXHRcdC8vIGNvbnNvbGUubG9nKFwiSG9sZXMgZmlyc3RcIiwgaG9sZXNGaXJzdCk7XG5cblx0XHR2YXIgYmV0dGVyU2hhcGVIb2xlcyA9IFtdO1xuXHRcdHZhciBuZXdTaGFwZXMgPSBbXTtcblx0XHR2YXIgbmV3U2hhcGVIb2xlcyA9IFtdO1xuXHRcdHZhciBtYWluSWR4ID0gMDtcblx0XHR2YXIgdG1wUG9pbnRzO1xuXG5cdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0gPSB1bmRlZmluZWQ7XG5cdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzdWJQYXRocy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0bXBQYXRoID0gc3ViUGF0aHNbIGkgXTtcblx0XHRcdHRtcFBvaW50cyA9IHRtcFBhdGguZ2V0UG9pbnRzKCk7XG5cdFx0XHRzb2xpZCA9IGlzQ2xvY2tXaXNlKCB0bXBQb2ludHMgKTtcblx0XHRcdHNvbGlkID0gaXNDQ1cgPyAhIHNvbGlkIDogc29saWQ7XG5cblx0XHRcdGlmICggc29saWQgKSB7XG5cblx0XHRcdFx0aWYgKCAoICEgaG9sZXNGaXJzdCApICYmICggbmV3U2hhcGVzWyBtYWluSWR4IF0gKSApXHRtYWluSWR4ICsrO1xuXG5cdFx0XHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdID0geyBzOiBuZXcgU2hhcGUoKSwgcDogdG1wUG9pbnRzIH07XG5cdFx0XHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdLnMuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XG5cblx0XHRcdFx0aWYgKCBob2xlc0ZpcnN0IClcdG1haW5JZHggKys7XG5cdFx0XHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXSA9IFtdO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2N3JywgaSk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdLnB1c2goIHsgaDogdG1wUGF0aCwgcDogdG1wUG9pbnRzWyAwIF0gfSApO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2NjdycsIGkpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBvbmx5IEhvbGVzPyAtPiBwcm9iYWJseSBhbGwgU2hhcGVzIHdpdGggd3Jvbmcgb3JpZW50YXRpb25cblx0XHRpZiAoICEgbmV3U2hhcGVzWyAwIF0gKVx0cmV0dXJuXHR0b1NoYXBlc05vSG9sZXMoIHN1YlBhdGhzICk7XG5cblxuXHRcdGlmICggbmV3U2hhcGVzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdHZhciBhbWJpZ3VvdXMgPSBmYWxzZTtcblx0XHRcdHZhciB0b0NoYW5nZSA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcblxuXHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzSWR4IF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcblxuXHRcdFx0XHR2YXIgc2hvID0gbmV3U2hhcGVIb2xlc1sgc0lkeCBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBoSWR4ID0gMDsgaElkeCA8IHNoby5sZW5ndGg7IGhJZHggKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgaG8gPSBzaG9bIGhJZHggXTtcblx0XHRcdFx0XHR2YXIgaG9sZV91bmFzc2lnbmVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBzMklkeCA9IDA7IHMySWR4IDwgbmV3U2hhcGVzLmxlbmd0aDsgczJJZHggKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaXNQb2ludEluc2lkZVBvbHlnb24oIGhvLnAsIG5ld1NoYXBlc1sgczJJZHggXS5wICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBzSWR4ICE9PSBzMklkeCApXHR0b0NoYW5nZS5wdXNoKCB7IGZyb21zOiBzSWR4LCB0b3M6IHMySWR4LCBob2xlOiBoSWR4IH0gKTtcblx0XHRcdFx0XHRcdFx0aWYgKCBob2xlX3VuYXNzaWduZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRob2xlX3VuYXNzaWduZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzMklkeCBdLnB1c2goIGhvICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGFtYmlndW91cyA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBob2xlX3VuYXNzaWduZWQgKSB7XG5cblx0XHRcdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHNJZHggXS5wdXNoKCBobyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdFx0Ly8gY29uc29sZS5sb2coXCJhbWJpZ3VvdXM6IFwiLCBhbWJpZ3VvdXMpO1xuXHRcdFx0aWYgKCB0b0NoYW5nZS5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwidG8gY2hhbmdlOiBcIiwgdG9DaGFuZ2UpO1xuXHRcdFx0XHRpZiAoICEgYW1iaWd1b3VzIClcdG5ld1NoYXBlSG9sZXMgPSBiZXR0ZXJTaGFwZUhvbGVzO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgdG1wSG9sZXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbmV3U2hhcGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0bXBTaGFwZSA9IG5ld1NoYXBlc1sgaSBdLnM7XG5cdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblx0XHRcdHRtcEhvbGVzID0gbmV3U2hhcGVIb2xlc1sgaSBdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gdG1wSG9sZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0dG1wU2hhcGUuaG9sZXMucHVzaCggdG1wSG9sZXNbIGogXS5oICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vY29uc29sZS5sb2coXCJzaGFwZVwiLCBzaGFwZXMpO1xuXG5cdFx0cmV0dXJuIHNoYXBlcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblxuZnVuY3Rpb24gRm9udCggZGF0YSApIHtcblxuXHR0aGlzLnR5cGUgPSAnRm9udCc7XG5cblx0dGhpcy5kYXRhID0gZGF0YTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGb250LnByb3RvdHlwZSwge1xuXG5cdGlzRm9udDogdHJ1ZSxcblxuXHRnZW5lcmF0ZVNoYXBlczogZnVuY3Rpb24gKCB0ZXh0LCBzaXplICkge1xuXG5cdFx0aWYgKCBzaXplID09PSB1bmRlZmluZWQgKSBzaXplID0gMTAwO1xuXG5cdFx0dmFyIHNoYXBlcyA9IFtdO1xuXHRcdHZhciBwYXRocyA9IGNyZWF0ZVBhdGhzKCB0ZXh0LCBzaXplLCB0aGlzLmRhdGEgKTtcblxuXHRcdGZvciAoIHZhciBwID0gMCwgcGwgPSBwYXRocy5sZW5ndGg7IHAgPCBwbDsgcCArKyApIHtcblxuXHRcdFx0QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoIHNoYXBlcywgcGF0aHNbIHAgXS50b1NoYXBlcygpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBjcmVhdGVQYXRocyggdGV4dCwgc2l6ZSwgZGF0YSApIHtcblxuXHR2YXIgY2hhcnMgPSBBcnJheS5mcm9tID8gQXJyYXkuZnJvbSggdGV4dCApIDogU3RyaW5nKCB0ZXh0ICkuc3BsaXQoICcnICk7IC8vIHNlZSAjMTM5ODhcblx0dmFyIHNjYWxlID0gc2l6ZSAvIGRhdGEucmVzb2x1dGlvbjtcblx0dmFyIGxpbmVfaGVpZ2h0ID0gKCBkYXRhLmJvdW5kaW5nQm94LnlNYXggLSBkYXRhLmJvdW5kaW5nQm94LnlNaW4gKyBkYXRhLnVuZGVybGluZVRoaWNrbmVzcyApICogc2NhbGU7XG5cblx0dmFyIHBhdGhzID0gW107XG5cblx0dmFyIG9mZnNldFggPSAwLCBvZmZzZXRZID0gMDtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2YXIgY2hhciA9IGNoYXJzWyBpIF07XG5cblx0XHRpZiAoIGNoYXIgPT09ICdcXG4nICkge1xuXG5cdFx0XHRvZmZzZXRYID0gMDtcblx0XHRcdG9mZnNldFkgLT0gbGluZV9oZWlnaHQ7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgcmV0ID0gY3JlYXRlUGF0aCggY2hhciwgc2NhbGUsIG9mZnNldFgsIG9mZnNldFksIGRhdGEgKTtcblx0XHRcdG9mZnNldFggKz0gcmV0Lm9mZnNldFg7XG5cdFx0XHRwYXRocy5wdXNoKCByZXQucGF0aCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcGF0aHM7XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0aCggY2hhciwgc2NhbGUsIG9mZnNldFgsIG9mZnNldFksIGRhdGEgKSB7XG5cblx0dmFyIGdseXBoID0gZGF0YS5nbHlwaHNbIGNoYXIgXSB8fCBkYXRhLmdseXBoc1sgJz8nIF07XG5cblx0aWYgKCAhIGdseXBoICkgcmV0dXJuO1xuXG5cdHZhciBwYXRoID0gbmV3IFNoYXBlUGF0aCgpO1xuXG5cdHZhciB4LCB5LCBjcHgsIGNweSwgY3B4MSwgY3B5MSwgY3B4MiwgY3B5MjtcblxuXHRpZiAoIGdseXBoLm8gKSB7XG5cblx0XHR2YXIgb3V0bGluZSA9IGdseXBoLl9jYWNoZWRPdXRsaW5lIHx8ICggZ2x5cGguX2NhY2hlZE91dGxpbmUgPSBnbHlwaC5vLnNwbGl0KCAnICcgKSApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gb3V0bGluZS5sZW5ndGg7IGkgPCBsOyApIHtcblxuXHRcdFx0dmFyIGFjdGlvbiA9IG91dGxpbmVbIGkgKysgXTtcblxuXHRcdFx0c3dpdGNoICggYWN0aW9uICkge1xuXG5cdFx0XHRcdGNhc2UgJ20nOiAvLyBtb3ZlVG9cblxuXHRcdFx0XHRcdHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0eSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblxuXHRcdFx0XHRcdHBhdGgubW92ZVRvKCB4LCB5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdsJzogLy8gbGluZVRvXG5cblx0XHRcdFx0XHR4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdHkgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLmxpbmVUbyggeCwgeSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAncSc6IC8vIHF1YWRyYXRpY0N1cnZlVG9cblxuXHRcdFx0XHRcdGNweCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRjcHkgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cdFx0XHRcdFx0Y3B4MSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRjcHkxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKCBjcHgxLCBjcHkxLCBjcHgsIGNweSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnYic6IC8vIGJlemllckN1cnZlVG9cblxuXHRcdFx0XHRcdGNweCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRjcHkgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cdFx0XHRcdFx0Y3B4MSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRjcHkxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXHRcdFx0XHRcdGNweDIgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5MiA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblxuXHRcdFx0XHRcdHBhdGguYmV6aWVyQ3VydmVUbyggY3B4MSwgY3B5MSwgY3B4MiwgY3B5MiwgY3B4LCBjcHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7IG9mZnNldFg6IGdseXBoLmhhICogc2NhbGUsIHBhdGg6IHBhdGggfTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gRm9udExvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGb250TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHR2YXIganNvbjtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Gb250TG9hZGVyOiB0eXBlZmFjZS5qcyBzdXBwb3J0IGlzIGJlaW5nIGRlcHJlY2F0ZWQuIFVzZSB0eXBlZmFjZS5qc29uIGluc3RlYWQuJyApO1xuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dC5zdWJzdHJpbmcoIDY1LCB0ZXh0Lmxlbmd0aCAtIDIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBmb250ID0gc2NvcGUucGFyc2UoIGpzb24gKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGZvbnQgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRyZXR1cm4gbmV3IEZvbnQoIGpzb24gKTtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIExvYWRlcigpIHt9XG5cbkxvYWRlci5IYW5kbGVycyA9IHtcblxuXHRoYW5kbGVyczogW10sXG5cblx0YWRkOiBmdW5jdGlvbiAoIHJlZ2V4LCBsb2FkZXIgKSB7XG5cblx0XHR0aGlzLmhhbmRsZXJzLnB1c2goIHJlZ2V4LCBsb2FkZXIgKTtcblxuXHR9LFxuXG5cdGdldDogZnVuY3Rpb24gKCBmaWxlICkge1xuXG5cdFx0dmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMiApIHtcblxuXHRcdFx0dmFyIHJlZ2V4ID0gaGFuZGxlcnNbIGkgXTtcblx0XHRcdHZhciBsb2FkZXIgPSBoYW5kbGVyc1sgaSArIDEgXTtcblxuXHRcdFx0aWYgKCByZWdleC50ZXN0KCBmaWxlICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxvYWRlcjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG59O1xuXG5PYmplY3QuYXNzaWduKCBMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdG9uTG9hZFN0YXJ0OiBmdW5jdGlvbiAoKSB7fSxcblxuXHRvbkxvYWRQcm9ncmVzczogZnVuY3Rpb24gKCkge30sXG5cblx0b25Mb2FkQ29tcGxldGU6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdGluaXRNYXRlcmlhbHM6IGZ1bmN0aW9uICggbWF0ZXJpYWxzLCB0ZXh0dXJlUGF0aCwgY3Jvc3NPcmlnaW4gKSB7XG5cblx0XHR2YXIgYXJyYXkgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG1hdGVyaWFscy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdGFycmF5WyBpIF0gPSB0aGlzLmNyZWF0ZU1hdGVyaWFsKCBtYXRlcmlhbHNbIGkgXSwgdGV4dHVyZVBhdGgsIGNyb3NzT3JpZ2luICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fSxcblxuXHRjcmVhdGVNYXRlcmlhbDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgQmxlbmRpbmdNb2RlID0ge1xuXHRcdFx0Tm9CbGVuZGluZzogTm9CbGVuZGluZyxcblx0XHRcdE5vcm1hbEJsZW5kaW5nOiBOb3JtYWxCbGVuZGluZyxcblx0XHRcdEFkZGl0aXZlQmxlbmRpbmc6IEFkZGl0aXZlQmxlbmRpbmcsXG5cdFx0XHRTdWJ0cmFjdGl2ZUJsZW5kaW5nOiBTdWJ0cmFjdGl2ZUJsZW5kaW5nLFxuXHRcdFx0TXVsdGlwbHlCbGVuZGluZzogTXVsdGlwbHlCbGVuZGluZyxcblx0XHRcdEN1c3RvbUJsZW5kaW5nOiBDdXN0b21CbGVuZGluZ1xuXHRcdH07XG5cblx0XHR2YXIgY29sb3IgPSBuZXcgQ29sb3IoKTtcblx0XHR2YXIgdGV4dHVyZUxvYWRlciA9IG5ldyBUZXh0dXJlTG9hZGVyKCk7XG5cdFx0dmFyIG1hdGVyaWFsTG9hZGVyID0gbmV3IE1hdGVyaWFsTG9hZGVyKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY3JlYXRlTWF0ZXJpYWwoIG0sIHRleHR1cmVQYXRoLCBjcm9zc09yaWdpbiApIHtcblxuXHRcdFx0Ly8gY29udmVydCBmcm9tIG9sZCBtYXRlcmlhbCBmb3JtYXRcblxuXHRcdFx0dmFyIHRleHR1cmVzID0ge307XG5cblx0XHRcdGZ1bmN0aW9uIGxvYWRUZXh0dXJlKCBwYXRoLCByZXBlYXQsIG9mZnNldCwgd3JhcCwgYW5pc290cm9weSApIHtcblxuXHRcdFx0XHR2YXIgZnVsbFBhdGggPSB0ZXh0dXJlUGF0aCArIHBhdGg7XG5cdFx0XHRcdHZhciBsb2FkZXIgPSBMb2FkZXIuSGFuZGxlcnMuZ2V0KCBmdWxsUGF0aCApO1xuXG5cdFx0XHRcdHZhciB0ZXh0dXJlO1xuXG5cdFx0XHRcdGlmICggbG9hZGVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IGxvYWRlci5sb2FkKCBmdWxsUGF0aCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlTG9hZGVyLnNldENyb3NzT3JpZ2luKCBjcm9zc09yaWdpbiApO1xuXHRcdFx0XHRcdHRleHR1cmUgPSB0ZXh0dXJlTG9hZGVyLmxvYWQoIGZ1bGxQYXRoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcmVwZWF0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkoIHJlcGVhdCApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXBlYXRbIDAgXSAhPT0gMSApIHRleHR1cmUud3JhcFMgPSBSZXBlYXRXcmFwcGluZztcblx0XHRcdFx0XHRpZiAoIHJlcGVhdFsgMSBdICE9PSAxICkgdGV4dHVyZS53cmFwVCA9IFJlcGVhdFdyYXBwaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5vZmZzZXQuZnJvbUFycmF5KCBvZmZzZXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB3cmFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHdyYXBbIDAgXSA9PT0gJ3JlcGVhdCcgKSB0ZXh0dXJlLndyYXBTID0gUmVwZWF0V3JhcHBpbmc7XG5cdFx0XHRcdFx0aWYgKCB3cmFwWyAwIF0gPT09ICdtaXJyb3InICkgdGV4dHVyZS53cmFwUyA9IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc7XG5cblx0XHRcdFx0XHRpZiAoIHdyYXBbIDEgXSA9PT0gJ3JlcGVhdCcgKSB0ZXh0dXJlLndyYXBUID0gUmVwZWF0V3JhcHBpbmc7XG5cdFx0XHRcdFx0aWYgKCB3cmFwWyAxIF0gPT09ICdtaXJyb3InICkgdGV4dHVyZS53cmFwVCA9IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggYW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5hbmlzb3Ryb3B5ID0gYW5pc290cm9weTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHRcdFx0XHR0ZXh0dXJlc1sgdXVpZCBdID0gdGV4dHVyZTtcblxuXHRcdFx0XHRyZXR1cm4gdXVpZDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHR2YXIganNvbiA9IHtcblx0XHRcdFx0dXVpZDogX01hdGguZ2VuZXJhdGVVVUlEKCksXG5cdFx0XHRcdHR5cGU6ICdNZXNoTGFtYmVydE1hdGVyaWFsJ1xuXHRcdFx0fTtcblxuXHRcdFx0Zm9yICggdmFyIG5hbWUgaW4gbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsdWUgPSBtWyBuYW1lIF07XG5cblx0XHRcdFx0c3dpdGNoICggbmFtZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ0RiZ0NvbG9yJzpcblx0XHRcdFx0XHRjYXNlICdEYmdJbmRleCc6XG5cdFx0XHRcdFx0Y2FzZSAnb3B0aWNhbERlbnNpdHknOlxuXHRcdFx0XHRcdGNhc2UgJ2lsbHVtaW5hdGlvbic6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdEYmdOYW1lJzpcblx0XHRcdFx0XHRcdGpzb24ubmFtZSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYmxlbmRpbmcnOlxuXHRcdFx0XHRcdFx0anNvbi5ibGVuZGluZyA9IEJsZW5kaW5nTW9kZVsgdmFsdWUgXTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbG9yQW1iaWVudCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQW1iaWVudCc6XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Mb2FkZXIuY3JlYXRlTWF0ZXJpYWw6JywgbmFtZSwgJ2lzIG5vIGxvbmdlciBzdXBwb3J0ZWQuJyApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sb3JEaWZmdXNlJzpcblx0XHRcdFx0XHRcdGpzb24uY29sb3IgPSBjb2xvci5mcm9tQXJyYXkoIHZhbHVlICkuZ2V0SGV4KCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xvclNwZWN1bGFyJzpcblx0XHRcdFx0XHRcdGpzb24uc3BlY3VsYXIgPSBjb2xvci5mcm9tQXJyYXkoIHZhbHVlICkuZ2V0SGV4KCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xvckVtaXNzaXZlJzpcblx0XHRcdFx0XHRcdGpzb24uZW1pc3NpdmUgPSBjb2xvci5mcm9tQXJyYXkoIHZhbHVlICkuZ2V0SGV4KCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdzcGVjdWxhckNvZWYnOlxuXHRcdFx0XHRcdFx0anNvbi5zaGluaW5lc3MgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NoYWRpbmcnOlxuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAnYmFzaWMnICkganNvbi50eXBlID0gJ01lc2hCYXNpY01hdGVyaWFsJztcblx0XHRcdFx0XHRcdGlmICggdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3Bob25nJyApIGpzb24udHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7XG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdzdGFuZGFyZCcgKSBqc29uLnR5cGUgPSAnTWVzaFN0YW5kYXJkTWF0ZXJpYWwnO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRGlmZnVzZSc6XG5cdFx0XHRcdFx0XHRqc29uLm1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBEaWZmdXNlUmVwZWF0LCBtLm1hcERpZmZ1c2VPZmZzZXQsIG0ubWFwRGlmZnVzZVdyYXAsIG0ubWFwRGlmZnVzZUFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcERpZmZ1c2VSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcERpZmZ1c2VPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcERpZmZ1c2VXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBFbWlzc2l2ZSc6XG5cdFx0XHRcdFx0XHRqc29uLmVtaXNzaXZlTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcEVtaXNzaXZlUmVwZWF0LCBtLm1hcEVtaXNzaXZlT2Zmc2V0LCBtLm1hcEVtaXNzaXZlV3JhcCwgbS5tYXBFbWlzc2l2ZUFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEVtaXNzaXZlUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBFbWlzc2l2ZU9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmVXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBFbWlzc2l2ZUFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTGlnaHQnOlxuXHRcdFx0XHRcdFx0anNvbi5saWdodE1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBMaWdodFJlcGVhdCwgbS5tYXBMaWdodE9mZnNldCwgbS5tYXBMaWdodFdyYXAsIG0ubWFwTGlnaHRBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBMaWdodFJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTGlnaHRPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0V3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTGlnaHRBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEFPJzpcblx0XHRcdFx0XHRcdGpzb24uYW9NYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwQU9SZXBlYXQsIG0ubWFwQU9PZmZzZXQsIG0ubWFwQU9XcmFwLCBtLm1hcEFPQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQU9SZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFPT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBBT1dyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFPQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wJzpcblx0XHRcdFx0XHRcdGpzb24uYnVtcE1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBCdW1wUmVwZWF0LCBtLm1hcEJ1bXBPZmZzZXQsIG0ubWFwQnVtcFdyYXAsIG0ubWFwQnVtcEFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBTY2FsZSc6XG5cdFx0XHRcdFx0XHRqc29uLmJ1bXBTY2FsZSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQnVtcFJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQnVtcE9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQnVtcFdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbCc6XG5cdFx0XHRcdFx0XHRqc29uLm5vcm1hbE1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBOb3JtYWxSZXBlYXQsIG0ubWFwTm9ybWFsT2Zmc2V0LCBtLm1hcE5vcm1hbFdyYXAsIG0ubWFwTm9ybWFsQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsRmFjdG9yJzpcblx0XHRcdFx0XHRcdGpzb24ubm9ybWFsU2NhbGUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbFJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWxXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWxBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcFNwZWN1bGFyJzpcblx0XHRcdFx0XHRcdGpzb24uc3BlY3VsYXJNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwU3BlY3VsYXJSZXBlYXQsIG0ubWFwU3BlY3VsYXJPZmZzZXQsIG0ubWFwU3BlY3VsYXJXcmFwLCBtLm1hcFNwZWN1bGFyQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwU3BlY3VsYXJSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcFNwZWN1bGFyT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhcldyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcFNwZWN1bGFyQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBNZXRhbG5lc3MnOlxuXHRcdFx0XHRcdFx0anNvbi5tZXRhbG5lc3NNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwTWV0YWxuZXNzUmVwZWF0LCBtLm1hcE1ldGFsbmVzc09mZnNldCwgbS5tYXBNZXRhbG5lc3NXcmFwLCBtLm1hcE1ldGFsbmVzc0FuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcE1ldGFsbmVzc1JlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBNZXRhbG5lc3NXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBNZXRhbG5lc3NBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcFJvdWdobmVzcyc6XG5cdFx0XHRcdFx0XHRqc29uLnJvdWdobmVzc01hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBSb3VnaG5lc3NSZXBlYXQsIG0ubWFwUm91Z2huZXNzT2Zmc2V0LCBtLm1hcFJvdWdobmVzc1dyYXAsIG0ubWFwUm91Z2huZXNzQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwUm91Z2huZXNzUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3NPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcFJvdWdobmVzc1dyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcFJvdWdobmVzc0FuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQWxwaGEnOlxuXHRcdFx0XHRcdFx0anNvbi5hbHBoYU1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBBbHBoYVJlcGVhdCwgbS5tYXBBbHBoYU9mZnNldCwgbS5tYXBBbHBoYVdyYXAsIG0ubWFwQWxwaGFBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBBbHBoYVJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQWxwaGFPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQWxwaGFBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZsaXBTaWRlZCc6XG5cdFx0XHRcdFx0XHRqc29uLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2RvdWJsZVNpZGVkJzpcblx0XHRcdFx0XHRcdGpzb24uc2lkZSA9IERvdWJsZVNpZGU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICd0cmFuc3BhcmVuY3knOlxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyLmNyZWF0ZU1hdGVyaWFsOiB0cmFuc3BhcmVuY3kgaGFzIGJlZW4gcmVuYW1lZCB0byBvcGFjaXR5JyApO1xuXHRcdFx0XHRcdFx0anNvbi5vcGFjaXR5ID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdkZXB0aFRlc3QnOlxuXHRcdFx0XHRcdGNhc2UgJ2RlcHRoV3JpdGUnOlxuXHRcdFx0XHRcdGNhc2UgJ2NvbG9yV3JpdGUnOlxuXHRcdFx0XHRcdGNhc2UgJ29wYWNpdHknOlxuXHRcdFx0XHRcdGNhc2UgJ3JlZmxlY3Rpdml0eSc6XG5cdFx0XHRcdFx0Y2FzZSAndHJhbnNwYXJlbnQnOlxuXHRcdFx0XHRcdGNhc2UgJ3Zpc2libGUnOlxuXHRcdFx0XHRcdGNhc2UgJ3dpcmVmcmFtZSc6XG5cdFx0XHRcdFx0XHRqc29uWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZlcnRleENvbG9ycyc6XG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkganNvbi52ZXJ0ZXhDb2xvcnMgPSBWZXJ0ZXhDb2xvcnM7XG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSAnZmFjZScgKSBqc29uLnZlcnRleENvbG9ycyA9IEZhY2VDb2xvcnM7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxvYWRlci5jcmVhdGVNYXRlcmlhbDogVW5zdXBwb3J0ZWQnLCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICgganNvbi50eXBlID09PSAnTWVzaEJhc2ljTWF0ZXJpYWwnICkgZGVsZXRlIGpzb24uZW1pc3NpdmU7XG5cdFx0XHRpZiAoIGpzb24udHlwZSAhPT0gJ01lc2hQaG9uZ01hdGVyaWFsJyApIGRlbGV0ZSBqc29uLnNwZWN1bGFyO1xuXG5cdFx0XHRpZiAoIGpzb24ub3BhY2l0eSA8IDEgKSBqc29uLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdFx0bWF0ZXJpYWxMb2FkZXIuc2V0VGV4dHVyZXMoIHRleHR1cmVzICk7XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbExvYWRlci5wYXJzZSgganNvbiApO1xuXG5cdFx0fTtcblxuXHR9ICkoKVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgY29udGV4dDtcblxudmFyIEF1ZGlvQ29udGV4dCA9IHtcblxuXHRnZXRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNvbnRleHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29udGV4dCA9IG5ldyAoIHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCApKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udGV4dDtcblxuXHR9LFxuXG5cdHNldENvbnRleHQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb250ZXh0ID0gdmFsdWU7XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgUmVlY2UgQWFyb24gTGVjcml2YWluIC8gaHR0cDovL3JlZWNlbm90ZXMuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF1ZGlvTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEF1ZGlvTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIGJ1ZmZlci4gVGhlIGBkZWNvZGVBdWRpb0RhdGFgIG1ldGhvZFxuXHRcdFx0Ly8gZGV0YWNoZXMgdGhlIGJ1ZmZlciB3aGVuIGNvbXBsZXRlLCBwcmV2ZW50aW5nIHJldXNlLlxuXHRcdFx0dmFyIGJ1ZmZlckNvcHkgPSBidWZmZXIuc2xpY2UoIDAgKTtcblxuXHRcdFx0dmFyIGNvbnRleHQgPSBBdWRpb0NvbnRleHQuZ2V0Q29udGV4dCgpO1xuXHRcdFx0Y29udGV4dC5kZWNvZGVBdWRpb0RhdGEoIGJ1ZmZlckNvcHksIGZ1bmN0aW9uICggYXVkaW9CdWZmZXIgKSB7XG5cblx0XHRcdFx0b25Mb2FkKCBhdWRpb0J1ZmZlciApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBTdGVyZW9DYW1lcmEoKSB7XG5cblx0dGhpcy50eXBlID0gJ1N0ZXJlb0NhbWVyYSc7XG5cblx0dGhpcy5hc3BlY3QgPSAxO1xuXG5cdHRoaXMuZXllU2VwID0gMC4wNjQ7XG5cblx0dGhpcy5jYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdHRoaXMuY2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7XG5cdHRoaXMuY2FtZXJhTC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy5jYW1lcmFSID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdHRoaXMuY2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cdHRoaXMuY2FtZXJhUi5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU3RlcmVvQ2FtZXJhLnByb3RvdHlwZSwge1xuXG5cdHVwZGF0ZTogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW5zdGFuY2UsIGZvY3VzLCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyLCB6b29tLCBleWVTZXA7XG5cblx0XHR2YXIgZXllUmlnaHQgPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBleWVMZWZ0ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoIGNhbWVyYSApIHtcblxuXHRcdFx0dmFyIG5lZWRzVXBkYXRlID0gaW5zdGFuY2UgIT09IHRoaXMgfHwgZm9jdXMgIT09IGNhbWVyYS5mb2N1cyB8fCBmb3YgIT09IGNhbWVyYS5mb3YgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFzcGVjdCAhPT0gY2FtZXJhLmFzcGVjdCAqIHRoaXMuYXNwZWN0IHx8IG5lYXIgIT09IGNhbWVyYS5uZWFyIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmYXIgIT09IGNhbWVyYS5mYXIgfHwgem9vbSAhPT0gY2FtZXJhLnpvb20gfHwgZXllU2VwICE9PSB0aGlzLmV5ZVNlcDtcblxuXHRcdFx0aWYgKCBuZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0XHRpbnN0YW5jZSA9IHRoaXM7XG5cdFx0XHRcdGZvY3VzID0gY2FtZXJhLmZvY3VzO1xuXHRcdFx0XHRmb3YgPSBjYW1lcmEuZm92O1xuXHRcdFx0XHRhc3BlY3QgPSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3Q7XG5cdFx0XHRcdG5lYXIgPSBjYW1lcmEubmVhcjtcblx0XHRcdFx0ZmFyID0gY2FtZXJhLmZhcjtcblx0XHRcdFx0em9vbSA9IGNhbWVyYS56b29tO1xuXG5cdFx0XHRcdC8vIE9mZi1heGlzIHN0ZXJlb3Njb3BpYyBlZmZlY3QgYmFzZWQgb25cblx0XHRcdFx0Ly8gaHR0cDovL3BhdWxib3Vya2UubmV0L3N0ZXJlb2dyYXBoaWNzL3N0ZXJlb3JlbmRlci9cblxuXHRcdFx0XHR2YXIgcHJvamVjdGlvbk1hdHJpeCA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNsb25lKCk7XG5cdFx0XHRcdGV5ZVNlcCA9IHRoaXMuZXllU2VwIC8gMjtcblx0XHRcdFx0dmFyIGV5ZVNlcE9uUHJvamVjdGlvbiA9IGV5ZVNlcCAqIG5lYXIgLyBmb2N1cztcblx0XHRcdFx0dmFyIHltYXggPSAoIG5lYXIgKiBNYXRoLnRhbiggX01hdGguREVHMlJBRCAqIGZvdiAqIDAuNSApICkgLyB6b29tO1xuXHRcdFx0XHR2YXIgeG1pbiwgeG1heDtcblxuXHRcdFx0XHQvLyB0cmFuc2xhdGUgeE9mZnNldFxuXG5cdFx0XHRcdGV5ZUxlZnQuZWxlbWVudHNbIDEyIF0gPSAtIGV5ZVNlcDtcblx0XHRcdFx0ZXllUmlnaHQuZWxlbWVudHNbIDEyIF0gPSBleWVTZXA7XG5cblx0XHRcdFx0Ly8gZm9yIGxlZnQgZXllXG5cblx0XHRcdFx0eG1pbiA9IC0geW1heCAqIGFzcGVjdCArIGV5ZVNlcE9uUHJvamVjdGlvbjtcblx0XHRcdFx0eG1heCA9IHltYXggKiBhc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XG5cblx0XHRcdFx0cHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdID0gMiAqIG5lYXIgLyAoIHhtYXggLSB4bWluICk7XG5cdFx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSA9ICggeG1heCArIHhtaW4gKSAvICggeG1heCAtIHhtaW4gKTtcblxuXHRcdFx0XHR0aGlzLmNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBwcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdFx0Ly8gZm9yIHJpZ2h0IGV5ZVxuXG5cdFx0XHRcdHhtaW4gPSAtIHltYXggKiBhc3BlY3QgLSBleWVTZXBPblByb2plY3Rpb247XG5cdFx0XHRcdHhtYXggPSB5bWF4ICogYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xuXG5cdFx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDAgXSA9IDIgKiBuZWFyIC8gKCB4bWF4IC0geG1pbiApO1xuXHRcdFx0XHRwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XG5cblx0XHRcdFx0dGhpcy5jYW1lcmFSLnByb2plY3Rpb25NYXRyaXguY29weSggcHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY2FtZXJhTC5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggZXllTGVmdCApO1xuXHRcdFx0dGhpcy5jYW1lcmFSLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLm11bHRpcGx5KCBleWVSaWdodCApO1xuXG5cdFx0fTtcblxuXHR9ICkoKVxuXG59ICk7XG5cbi8qKlxuICogQ2FtZXJhIGZvciByZW5kZXJpbmcgY3ViZSBtYXBzXG4gKlx0LSByZW5kZXJzIHNjZW5lIGludG8gYXhpcy1hbGlnbmVkIGN1YmVcbiAqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEN1YmVDYW1lcmEoIG5lYXIsIGZhciwgY3ViZVJlc29sdXRpb24sIG9wdGlvbnMgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdWJlQ2FtZXJhJztcblxuXHR2YXIgZm92ID0gOTAsIGFzcGVjdCA9IDE7XG5cblx0dmFyIGNhbWVyYVBYID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYVBYLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdGNhbWVyYVBYLmxvb2tBdCggbmV3IFZlY3RvcjMoIDEsIDAsIDAgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhUFggKTtcblxuXHR2YXIgY2FtZXJhTlggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhTlgudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0Y2FtZXJhTlgubG9va0F0KCBuZXcgVmVjdG9yMyggLSAxLCAwLCAwICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYU5YICk7XG5cblx0dmFyIGNhbWVyYVBZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYVBZLnVwLnNldCggMCwgMCwgMSApO1xuXHRjYW1lcmFQWS5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAxLCAwICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYVBZICk7XG5cblx0dmFyIGNhbWVyYU5ZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYU5ZLnVwLnNldCggMCwgMCwgLSAxICk7XG5cdGNhbWVyYU5ZLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFOWSApO1xuXG5cdHZhciBjYW1lcmFQWiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFQWi51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRjYW1lcmFQWi5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAwLCAxICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYVBaICk7XG5cblx0dmFyIGNhbWVyYU5aID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYU5aLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdGNhbWVyYU5aLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFOWiApO1xuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgZm9ybWF0OiBSR0JGb3JtYXQsIG1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLCBtaW5GaWx0ZXI6IExpbmVhckZpbHRlciB9O1xuXG5cdHRoaXMucmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSggY3ViZVJlc29sdXRpb24sIGN1YmVSZXNvbHV0aW9uLCBvcHRpb25zICk7XG5cdHRoaXMucmVuZGVyVGFyZ2V0LnRleHR1cmUubmFtZSA9IFwiQ3ViZUNhbWVyYVwiO1xuXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUgKSB7XG5cblx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkgdGhpcy51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0O1xuXHRcdHZhciBnZW5lcmF0ZU1pcG1hcHMgPSByZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSA9IDA7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFgsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFjdGl2ZUN1YmVGYWNlID0gMTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFOWCwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSAyO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBZLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSA9IDM7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlksIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFjdGl2ZUN1YmVGYWNlID0gNDtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWiwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBnZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSA1O1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5aLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggbnVsbCApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSA9IGk7XG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggY29sb3IsIGRlcHRoLCBzdGVuY2lsICk7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG51bGwgKTtcblxuXHR9O1xuXG59XG5cbkN1YmVDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5DdWJlQ2FtZXJhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVDYW1lcmE7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDbG9jayggYXV0b1N0YXJ0ICkge1xuXG5cdHRoaXMuYXV0b1N0YXJ0ID0gKCBhdXRvU3RhcnQgIT09IHVuZGVmaW5lZCApID8gYXV0b1N0YXJ0IDogdHJ1ZTtcblxuXHR0aGlzLnN0YXJ0VGltZSA9IDA7XG5cdHRoaXMub2xkVGltZSA9IDA7XG5cdHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuXG5cdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENsb2NrLnByb3RvdHlwZSwge1xuXG5cdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnN0YXJ0VGltZSA9ICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpOyAvLyBzZWUgIzEwNzMyXG5cblx0XHR0aGlzLm9sZFRpbWUgPSB0aGlzLnN0YXJ0VGltZTtcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5nZXRFbGFwc2VkVGltZSgpO1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XG5cblx0fSxcblxuXHRnZXRFbGFwc2VkVGltZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5nZXREZWx0YSgpO1xuXHRcdHJldHVybiB0aGlzLmVsYXBzZWRUaW1lO1xuXG5cdH0sXG5cblx0Z2V0RGVsdGE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkaWZmID0gMDtcblxuXHRcdGlmICggdGhpcy5hdXRvU3RhcnQgJiYgISB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHRcdHJldHVybiAwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHZhciBuZXdUaW1lID0gKCB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gRGF0ZSA6IHBlcmZvcm1hbmNlICkubm93KCk7XG5cblx0XHRcdGRpZmYgPSAoIG5ld1RpbWUgLSB0aGlzLm9sZFRpbWUgKSAvIDEwMDA7XG5cdFx0XHR0aGlzLm9sZFRpbWUgPSBuZXdUaW1lO1xuXG5cdFx0XHR0aGlzLmVsYXBzZWRUaW1lICs9IGRpZmY7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGlmZjtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF1ZGlvTGlzdGVuZXIoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdBdWRpb0xpc3RlbmVyJztcblxuXHR0aGlzLmNvbnRleHQgPSBBdWRpb0NvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG5cdHRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0dGhpcy50aW1lRGVsdGEgPSAwO1xuXG59XG5cbkF1ZGlvTGlzdGVuZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQXVkaW9MaXN0ZW5lcixcblxuXHRnZXRJbnB1dDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2FpbjtcblxuXHR9LFxuXG5cdHJlbW92ZUZpbHRlcjogZnVuY3Rpb24gKCApIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEZpbHRlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyO1xuXG5cdH0sXG5cblx0c2V0RmlsdGVyOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlciAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyICk7XG5cdFx0XHR0aGlzLmZpbHRlci5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZmlsdGVyID0gdmFsdWU7XG5cdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuZmlsdGVyICk7XG5cdFx0dGhpcy5maWx0ZXIuY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE1hc3RlclZvbHVtZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xuXG5cdH0sXG5cblx0c2V0TWFzdGVyVm9sdW1lOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHRcdHZhciBzY2FsZSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgb3JpZW50YXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBjbG9jayA9IG5ldyBDbG9jaygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0XHRcdHZhciBsaXN0ZW5lciA9IHRoaXMuY29udGV4dC5saXN0ZW5lcjtcblx0XHRcdHZhciB1cCA9IHRoaXMudXA7XG5cblx0XHRcdHRoaXMudGltZURlbHRhID0gY2xvY2suZ2V0RGVsdGEoKTtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApO1xuXG5cdFx0XHRvcmllbnRhdGlvbi5zZXQoIDAsIDAsIC0gMSApLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbiApO1xuXG5cdFx0XHRpZiAoIGxpc3RlbmVyLnBvc2l0aW9uWCApIHtcblxuXHRcdFx0XHQvLyBjb2RlIHBhdGggZm9yIENocm9tZSAoc2VlICMxNDM5MylcblxuXHRcdFx0XHR2YXIgZW5kVGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIHRoaXMudGltZURlbHRhO1xuXG5cdFx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggcG9zaXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5wb3NpdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHBvc2l0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdFx0bGlzdGVuZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBwb3NpdGlvbi56LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLmZvcndhcmRYLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBvcmllbnRhdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLmZvcndhcmRZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBvcmllbnRhdGlvbi55LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLmZvcndhcmRaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBvcmllbnRhdGlvbi56LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnVwWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueCwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci51cFkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLnksIGVuZFRpbWUgKTtcblx0XHRcdFx0bGlzdGVuZXIudXBaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC56LCBlbmRUaW1lICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bGlzdGVuZXIuc2V0UG9zaXRpb24oIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKTtcblx0XHRcdFx0bGlzdGVuZXIuc2V0T3JpZW50YXRpb24oIG9yaWVudGF0aW9uLngsIG9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnosIHVwLngsIHVwLnksIHVwLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9ICkoKVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgUmVlY2UgQWFyb24gTGVjcml2YWluIC8gaHR0cDovL3JlZWNlbm90ZXMuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF1ZGlvKCBsaXN0ZW5lciApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0F1ZGlvJztcblxuXHR0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XG5cdHRoaXMuY29udGV4dCA9IGxpc3RlbmVyLmNvbnRleHQ7XG5cblx0dGhpcy5nYWluID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0dGhpcy5nYWluLmNvbm5lY3QoIGxpc3RlbmVyLmdldElucHV0KCkgKTtcblxuXHR0aGlzLmF1dG9wbGF5ID0gZmFsc2U7XG5cblx0dGhpcy5idWZmZXIgPSBudWxsO1xuXHR0aGlzLmRldHVuZSA9IDA7XG5cdHRoaXMubG9vcCA9IGZhbHNlO1xuXHR0aGlzLnN0YXJ0VGltZSA9IDA7XG5cdHRoaXMub2Zmc2V0ID0gMDtcblx0dGhpcy5wbGF5YmFja1JhdGUgPSAxO1xuXHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IHRydWU7XG5cdHRoaXMuc291cmNlVHlwZSA9ICdlbXB0eSc7XG5cblx0dGhpcy5maWx0ZXJzID0gW107XG5cbn1cblxuQXVkaW8ucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQXVkaW8sXG5cblx0Z2V0T3V0cHV0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluO1xuXG5cdH0sXG5cblx0c2V0Tm9kZVNvdXJjZTogZnVuY3Rpb24gKCBhdWRpb05vZGUgKSB7XG5cblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdhdWRpb05vZGUnO1xuXHRcdHRoaXMuc291cmNlID0gYXVkaW9Ob2RlO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRNZWRpYUVsZW1lbnRTb3VyY2U6IGZ1bmN0aW9uICggbWVkaWFFbGVtZW50ICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFOb2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoIG1lZGlhRWxlbWVudCApO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRCdWZmZXI6IGZ1bmN0aW9uICggYXVkaW9CdWZmZXIgKSB7XG5cblx0XHR0aGlzLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdidWZmZXInO1xuXG5cdFx0aWYgKCB0aGlzLmF1dG9wbGF5ICkgdGhpcy5wbGF5KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHBsYXk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiBBdWRpbyBpcyBhbHJlYWR5IHBsYXlpbmcuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHZhciBzb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cblx0XHRzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdFx0c291cmNlLmRldHVuZS52YWx1ZSA9IHRoaXMuZGV0dW5lO1xuXHRcdHNvdXJjZS5sb29wID0gdGhpcy5sb29wO1xuXHRcdHNvdXJjZS5vbmVuZGVkID0gdGhpcy5vbkVuZGVkLmJpbmQoIHRoaXMgKTtcblx0XHRzb3VyY2UucGxheWJhY2tSYXRlLnNldFZhbHVlQXRUaW1lKCB0aGlzLnBsYXliYWNrUmF0ZSwgdGhpcy5zdGFydFRpbWUgKTtcblx0XHR0aGlzLnN0YXJ0VGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZTtcblx0XHRzb3VyY2Uuc3RhcnQoIHRoaXMuc3RhcnRUaW1lLCB0aGlzLm9mZnNldCApO1xuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHRyZXR1cm4gdGhpcy5jb25uZWN0KCk7XG5cblx0fSxcblxuXHRwYXVzZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLnN0b3AoKTtcblx0XHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXHRcdFx0dGhpcy5vZmZzZXQgKz0gKCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgLSB0aGlzLnN0YXJ0VGltZSApICogdGhpcy5wbGF5YmFja1JhdGU7XG5cdFx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zb3VyY2Uuc3RvcCgpO1xuXHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXHRcdHRoaXMub2Zmc2V0ID0gMDtcblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb25uZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmZpbHRlcnNbIDAgXSApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmZpbHRlcnNbIGkgLSAxIF0uY29ubmVjdCggdGhpcy5maWx0ZXJzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmZpbHRlcnNbIHRoaXMuZmlsdGVycy5sZW5ndGggLSAxIF0uY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNjb25uZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIDAgXSApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmZpbHRlcnNbIGkgLSAxIF0uZGlzY29ubmVjdCggdGhpcy5maWx0ZXJzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmZpbHRlcnNbIHRoaXMuZmlsdGVycy5sZW5ndGggLSAxIF0uZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRGaWx0ZXJzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJzO1xuXG5cdH0sXG5cblx0c2V0RmlsdGVyczogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggISB2YWx1ZSApIHZhbHVlID0gW107XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLmRpc2Nvbm5lY3QoKTtcblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlO1xuXHRcdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RGV0dW5lOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5kZXR1bmUgPSB2YWx1ZTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRldHVuZS5zZXRUYXJnZXRBdFRpbWUoIHRoaXMuZGV0dW5lLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0RGV0dW5lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kZXR1bmU7XG5cblx0fSxcblxuXHRnZXRGaWx0ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdldEZpbHRlcnMoKVsgMCBdO1xuXG5cdH0sXG5cblx0c2V0RmlsdGVyOiBmdW5jdGlvbiAoIGZpbHRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZpbHRlcnMoIGZpbHRlciA/IFsgZmlsdGVyIF0gOiBbXSApO1xuXG5cdH0sXG5cblx0c2V0UGxheWJhY2tSYXRlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLnBsYXliYWNrUmF0ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFBsYXliYWNrUmF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGxheWJhY2tSYXRlO1xuXG5cdH0sXG5cblx0b25FbmRlZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHR9LFxuXG5cdGdldExvb3A6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5sb29wO1xuXG5cdH0sXG5cblx0c2V0TG9vcDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLmxvb3AgPSB2YWx1ZTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmxvb3AgPSB0aGlzLmxvb3A7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFZvbHVtZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xuXG5cdH0sXG5cblx0c2V0Vm9sdW1lOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFBvc2l0aW9uYWxBdWRpbyggbGlzdGVuZXIgKSB7XG5cblx0QXVkaW8uY2FsbCggdGhpcywgbGlzdGVuZXIgKTtcblxuXHR0aGlzLnBhbm5lciA9IHRoaXMuY29udGV4dC5jcmVhdGVQYW5uZXIoKTtcblx0dGhpcy5wYW5uZXIuY29ubmVjdCggdGhpcy5nYWluICk7XG5cbn1cblxuUG9zaXRpb25hbEF1ZGlvLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEF1ZGlvLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBvc2l0aW9uYWxBdWRpbyxcblxuXHRnZXRPdXRwdXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lcjtcblxuXHR9LFxuXG5cdGdldFJlZkRpc3RhbmNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucmVmRGlzdGFuY2U7XG5cblx0fSxcblxuXHRzZXRSZWZEaXN0YW5jZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLnJlZkRpc3RhbmNlID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFJvbGxvZmZGYWN0b3I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yO1xuXG5cdH0sXG5cblx0c2V0Um9sbG9mZkZhY3RvcjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3IgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0RGlzdGFuY2VNb2RlbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWw7XG5cblx0fSxcblxuXHRzZXREaXN0YW5jZU1vZGVsOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIuZGlzdGFuY2VNb2RlbCA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXhEaXN0YW5jZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLm1heERpc3RhbmNlO1xuXG5cdH0sXG5cblx0c2V0TWF4RGlzdGFuY2U6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5tYXhEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXREaXJlY3Rpb25hbENvbmU6IGZ1bmN0aW9uICggY29uZUlubmVyQW5nbGUsIGNvbmVPdXRlckFuZ2xlLCBjb25lT3V0ZXJHYWluICkge1xuXG5cdFx0dGhpcy5wYW5uZXIuY29uZUlubmVyQW5nbGUgPSBjb25lSW5uZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlO1xuXHRcdHRoaXMucGFubmVyLmNvbmVPdXRlckdhaW4gPSBjb25lT3V0ZXJHYWluO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIG9yaWVudGF0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0XHR2YXIgcGFubmVyID0gdGhpcy5wYW5uZXI7XG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICk7XG5cblx0XHRcdG9yaWVudGF0aW9uLnNldCggMCwgMCwgMSApLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbiApO1xuXG5cdFx0XHRpZiAoIHBhbm5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdFx0Ly8gY29kZSBwYXRoIGZvciBDaHJvbWUgYW5kIEZpcmVmb3ggKHNlZSAjMTQzOTMpXG5cblx0XHRcdFx0dmFyIGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLmxpc3RlbmVyLnRpbWVEZWx0YTtcblxuXHRcdFx0XHRwYW5uZXIucG9zaXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBwb3NpdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRcdHBhbm5lci5wb3NpdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHBvc2l0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdFx0cGFubmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggcG9zaXRpb24ueiwgZW5kVGltZSApO1xuXHRcdFx0XHRwYW5uZXIub3JpZW50YXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBvcmllbnRhdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRcdHBhbm5lci5vcmllbnRhdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIG9yaWVudGF0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueiwgZW5kVGltZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHBhbm5lci5zZXRQb3NpdGlvbiggcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiApO1xuXHRcdFx0XHRwYW5uZXIuc2V0T3JpZW50YXRpb24oIG9yaWVudGF0aW9uLngsIG9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9ICkoKVxuXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF1ZGlvQW5hbHlzZXIoIGF1ZGlvLCBmZnRTaXplICkge1xuXG5cdHRoaXMuYW5hbHlzZXIgPSBhdWRpby5jb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XG5cdHRoaXMuYW5hbHlzZXIuZmZ0U2l6ZSA9IGZmdFNpemUgIT09IHVuZGVmaW5lZCA/IGZmdFNpemUgOiAyMDQ4O1xuXG5cdHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KCB0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50ICk7XG5cblx0YXVkaW8uZ2V0T3V0cHV0KCkuY29ubmVjdCggdGhpcy5hbmFseXNlciApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEF1ZGlvQW5hbHlzZXIucHJvdG90eXBlLCB7XG5cblx0Z2V0RnJlcXVlbmN5RGF0YTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5hbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YSggdGhpcy5kYXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhO1xuXG5cdH0sXG5cblx0Z2V0QXZlcmFnZUZyZXF1ZW5jeTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZhbHVlID0gMCwgZGF0YSA9IHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhbHVlICs9IGRhdGFbIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZSAvIGRhdGEubGVuZ3RoO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBCdWZmZXJlZCBzY2VuZSBncmFwaCBwcm9wZXJ0eSB0aGF0IGFsbG93cyB3ZWlnaHRlZCBhY2N1bXVsYXRpb24uXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBQcm9wZXJ0eU1peGVyKCBiaW5kaW5nLCB0eXBlTmFtZSwgdmFsdWVTaXplICkge1xuXG5cdHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XG5cdHRoaXMudmFsdWVTaXplID0gdmFsdWVTaXplO1xuXG5cdHZhciBidWZmZXJUeXBlID0gRmxvYXQ2NEFycmF5LFxuXHRcdG1peEZ1bmN0aW9uO1xuXG5cdHN3aXRjaCAoIHR5cGVOYW1lICkge1xuXG5cdFx0Y2FzZSAncXVhdGVybmlvbic6XG5cdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX3NsZXJwO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdzdHJpbmcnOlxuXHRcdGNhc2UgJ2Jvb2wnOlxuXHRcdFx0YnVmZmVyVHlwZSA9IEFycmF5O1xuXHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zZWxlY3Q7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX2xlcnA7XG5cblx0fVxuXG5cdHRoaXMuYnVmZmVyID0gbmV3IGJ1ZmZlclR5cGUoIHZhbHVlU2l6ZSAqIDQgKTtcblx0Ly8gbGF5b3V0OiBbIGluY29taW5nIHwgYWNjdTAgfCBhY2N1MSB8IG9yaWcgXVxuXHQvL1xuXHQvLyBpbnRlcnBvbGF0b3JzIGNhbiB1c2UgLmJ1ZmZlciBhcyB0aGVpciAucmVzdWx0XG5cdC8vIHRoZSBkYXRhIHRoZW4gZ29lcyB0byAnaW5jb21pbmcnXG5cdC8vXG5cdC8vICdhY2N1MCcgYW5kICdhY2N1MScgYXJlIHVzZWQgZnJhbWUtaW50ZXJsZWF2ZWQgZm9yXG5cdC8vIHRoZSBjdW11bGF0aXZlIHJlc3VsdCBhbmQgYXJlIGNvbXBhcmVkIHRvIGRldGVjdFxuXHQvLyBjaGFuZ2VzXG5cdC8vXG5cdC8vICdvcmlnJyBzdG9yZXMgdGhlIG9yaWdpbmFsIHN0YXRlIG9mIHRoZSBwcm9wZXJ0eVxuXG5cdHRoaXMuX21peEJ1ZmZlclJlZ2lvbiA9IG1peEZ1bmN0aW9uO1xuXG5cdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cblx0dGhpcy51c2VDb3VudCA9IDA7XG5cdHRoaXMucmVmZXJlbmNlQ291bnQgPSAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFByb3BlcnR5TWl4ZXIucHJvdG90eXBlLCB7XG5cblx0Ly8gYWNjdW11bGF0ZSBkYXRhIGluIHRoZSAnaW5jb21pbmcnIHJlZ2lvbiBpbnRvICdhY2N1PGk+J1xuXHRhY2N1bXVsYXRlOiBmdW5jdGlvbiAoIGFjY3VJbmRleCwgd2VpZ2h0ICkge1xuXG5cdFx0Ly8gbm90ZTogaGFwcGlseSBhY2N1bXVsYXRpbmcgbm90aGluZyB3aGVuIHdlaWdodCA9IDAsIHRoZSBjYWxsZXIga25vd3Ncblx0XHQvLyB0aGUgd2VpZ2h0IGFuZCBzaG91bGRuJ3QgaGF2ZSBtYWRlIHRoZSBjYWxsIGluIHRoZSBmaXJzdCBwbGFjZVxuXG5cdFx0dmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGUsXG5cblx0XHRcdGN1cnJlbnRXZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQ7XG5cblx0XHRpZiAoIGN1cnJlbnRXZWlnaHQgPT09IDAgKSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGluY29taW5nICogd2VpZ2h0XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudFdlaWdodCA9IHdlaWdodDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Y3VycmVudFdlaWdodCArPSB3ZWlnaHQ7XG5cdFx0XHR2YXIgbWl4ID0gd2VpZ2h0IC8gY3VycmVudFdlaWdodDtcblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbiggYnVmZmVyLCBvZmZzZXQsIDAsIG1peCwgc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSBjdXJyZW50V2VpZ2h0O1xuXG5cdH0sXG5cblx0Ly8gYXBwbHkgdGhlIHN0YXRlIG9mICdhY2N1PGk+JyB0byB0aGUgYmluZGluZyB3aGVuIGFjY3VzIGRpZmZlclxuXHRhcHBseTogZnVuY3Rpb24gKCBhY2N1SW5kZXggKSB7XG5cblx0XHR2YXIgc3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdG9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSxcblxuXHRcdFx0d2VpZ2h0ID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0LFxuXG5cdFx0XHRiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblxuXHRcdGlmICggd2VpZ2h0IDwgMSApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBvcmlnaW5hbCAqICggMSAtIGN1bXVsYXRpdmVXZWlnaHQgKVxuXG5cdFx0XHR2YXIgb3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIDM7XG5cblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbihcblx0XHRcdFx0YnVmZmVyLCBvZmZzZXQsIG9yaWdpbmFsVmFsdWVPZmZzZXQsIDEgLSB3ZWlnaHQsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSBzdHJpZGUsIGUgPSBzdHJpZGUgKyBzdHJpZGU7IGkgIT09IGU7ICsrIGkgKSB7XG5cblx0XHRcdGlmICggYnVmZmVyWyBpIF0gIT09IGJ1ZmZlclsgaSArIHN0cmlkZSBdICkge1xuXG5cdFx0XHRcdC8vIHZhbHVlIGhhcyBjaGFuZ2VkIC0+IHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0XHRcdGJpbmRpbmcuc2V0VmFsdWUoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHQvLyByZW1lbWJlciB0aGUgc3RhdGUgb2YgdGhlIGJvdW5kIHByb3BlcnR5IGFuZCBjb3B5IGl0IHRvIGJvdGggYWNjdXNcblx0c2F2ZU9yaWdpbmFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xuXG5cdFx0dmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9yaWdpbmFsVmFsdWVPZmZzZXQgPSBzdHJpZGUgKiAzO1xuXG5cdFx0YmluZGluZy5nZXRWYWx1ZSggYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XG5cblx0XHQvLyBhY2N1WzAuLjFdIDo9IG9yaWcgLS0gaW5pdGlhbGx5IGRldGVjdCBjaGFuZ2VzIGFnYWluc3QgdGhlIG9yaWdpbmFsXG5cdFx0Zm9yICggdmFyIGkgPSBzdHJpZGUsIGUgPSBvcmlnaW5hbFZhbHVlT2Zmc2V0OyBpICE9PSBlOyArKyBpICkge1xuXG5cdFx0XHRidWZmZXJbIGkgXSA9IGJ1ZmZlclsgb3JpZ2luYWxWYWx1ZU9mZnNldCArICggaSAlIHN0cmlkZSApIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXG5cdH0sXG5cblx0Ly8gYXBwbHkgdGhlIHN0YXRlIHByZXZpb3VzbHkgdGFrZW4gdmlhICdzYXZlT3JpZ2luYWxTdGF0ZScgdG8gdGhlIGJpbmRpbmdcblx0cmVzdG9yZU9yaWdpbmFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gdGhpcy52YWx1ZVNpemUgKiAzO1xuXHRcdHRoaXMuYmluZGluZy5zZXRWYWx1ZSggdGhpcy5idWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQgKTtcblxuXHR9LFxuXG5cblx0Ly8gbWl4IGZ1bmN0aW9uc1xuXG5cdF9zZWxlY3Q6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlICkge1xuXG5cdFx0aWYgKCB0ID49IDAuNSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBkc3RPZmZzZXQgKyBpIF0gPSBidWZmZXJbIHNyY09mZnNldCArIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0X3NsZXJwOiBmdW5jdGlvbiAoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQgKSB7XG5cblx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIHNyY09mZnNldCwgdCApO1xuXG5cdH0sXG5cblx0X2xlcnA6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlICkge1xuXG5cdFx0dmFyIHMgPSAxIC0gdDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHR2YXIgaiA9IGRzdE9mZnNldCArIGk7XG5cblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKiBzICsgYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF0gKiB0O1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIHJlZmVyZW5jZSB0byBhIHJlYWwgcHJvcGVydHkgaW4gdGhlIHNjZW5lIGdyYXBoLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuLy8gQ2hhcmFjdGVycyBbXS46LyBhcmUgcmVzZXJ2ZWQgZm9yIHRyYWNrIGJpbmRpbmcgc3ludGF4LlxudmFyIFJFU0VSVkVEX0NIQVJTX1JFID0gJ1xcXFxbXFxcXF1cXFxcLjpcXFxcLyc7XG5cbmZ1bmN0aW9uIENvbXBvc2l0ZSggdGFyZ2V0R3JvdXAsIHBhdGgsIG9wdGlvbmFsUGFyc2VkUGF0aCApIHtcblxuXHR2YXIgcGFyc2VkUGF0aCA9IG9wdGlvbmFsUGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTtcblxuXHR0aGlzLl90YXJnZXRHcm91cCA9IHRhcmdldEdyb3VwO1xuXHR0aGlzLl9iaW5kaW5ncyA9IHRhcmdldEdyb3VwLnN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDb21wb3NpdGUucHJvdG90eXBlLCB7XG5cblx0Z2V0VmFsdWU6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpOyAvLyBiaW5kIGFsbCBiaW5kaW5nXG5cblx0XHR2YXIgZmlyc3RWYWxpZEluZGV4ID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0YmluZGluZyA9IHRoaXMuX2JpbmRpbmdzWyBmaXJzdFZhbGlkSW5kZXggXTtcblxuXHRcdC8vIGFuZCBvbmx5IGNhbGwgLmdldFZhbHVlIG9uIHRoZSBmaXJzdFxuXHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkgYmluZGluZy5nZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xuXG5cdH0sXG5cblx0c2V0VmFsdWU6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uc2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uYmluZCgpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dW5iaW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnVuYmluZCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5cbmZ1bmN0aW9uIFByb3BlcnR5QmluZGluZyggcm9vdE5vZGUsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0dGhpcy5wYXRoID0gcGF0aDtcblx0dGhpcy5wYXJzZWRQYXRoID0gcGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTtcblxuXHR0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHJvb3ROb2RlLCB0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUgKSB8fCByb290Tm9kZTtcblxuXHR0aGlzLnJvb3ROb2RlID0gcm9vdE5vZGU7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUHJvcGVydHlCaW5kaW5nLCB7XG5cblx0Q29tcG9zaXRlOiBDb21wb3NpdGUsXG5cblx0Y3JlYXRlOiBmdW5jdGlvbiAoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHRpZiAoICEgKCByb290ICYmIHJvb3QuaXNBbmltYXRpb25PYmplY3RHcm91cCApICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvKipcblx0ICogUmVwbGFjZXMgc3BhY2VzIHdpdGggdW5kZXJzY29yZXMgYW5kIHJlbW92ZXMgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycyBmcm9tXG5cdCAqIG5vZGUgbmFtZXMsIHRvIGVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggcGFyc2VUcmFja05hbWUoKS5cblx0ICpcblx0ICogQHBhcmFtICB7c3RyaW5nfSBuYW1lIE5vZGUgbmFtZSB0byBiZSBzYW5pdGl6ZWQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdHNhbml0aXplTm9kZU5hbWU6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHJlc2VydmVkUmUgPSBuZXcgUmVnRXhwKCAnWycgKyBSRVNFUlZFRF9DSEFSU19SRSArICddJywgJ2cnICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2FuaXRpemVOb2RlTmFtZSggbmFtZSApIHtcblxuXHRcdFx0cmV0dXJuIG5hbWUucmVwbGFjZSggL1xccy9nLCAnXycgKS5yZXBsYWNlKCByZXNlcnZlZFJlLCAnJyApO1xuXG5cdFx0fTtcblxuXHR9KCkgKSxcblxuXHRwYXJzZVRyYWNrTmFtZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gQXR0ZW1wdHMgdG8gYWxsb3cgbm9kZSBuYW1lcyBmcm9tIGFueSBsYW5ndWFnZS4gRVM1J3MgYFxcd2AgcmVnZXhwIG1hdGNoZXNcblx0XHQvLyBvbmx5IGxhdGluIGNoYXJhY3RlcnMsIGFuZCB0aGUgdW5pY29kZSBcXHB7TH0gaXMgbm90IHlldCBzdXBwb3J0ZWQuIFNvXG5cdFx0Ly8gaW5zdGVhZCwgd2UgZXhjbHVkZSByZXNlcnZlZCBjaGFyYWN0ZXJzIGFuZCBtYXRjaCBldmVyeXRoaW5nIGVsc2UuXG5cdFx0dmFyIHdvcmRDaGFyID0gJ1teJyArIFJFU0VSVkVEX0NIQVJTX1JFICsgJ10nO1xuXHRcdHZhciB3b3JkQ2hhck9yRG90ID0gJ1teJyArIFJFU0VSVkVEX0NIQVJTX1JFLnJlcGxhY2UoICdcXFxcLicsICcnICkgKyAnXSc7XG5cblx0XHQvLyBQYXJlbnQgZGlyZWN0b3JpZXMsIGRlbGltaXRlZCBieSAnLycgb3IgJzonLiBDdXJyZW50bHkgdW51c2VkLCBidXQgbXVzdFxuXHRcdC8vIGJlIG1hdGNoZWQgdG8gcGFyc2UgdGhlIHJlc3Qgb2YgdGhlIHRyYWNrIG5hbWUuXG5cdFx0dmFyIGRpcmVjdG9yeVJlID0gLygoPzpXQytbXFwvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCB3b3JkQ2hhciApO1xuXG5cdFx0Ly8gVGFyZ2V0IG5vZGUuIE1heSBjb250YWluIHdvcmQgY2hhcmFjdGVycyAoYS16QS1aMC05XykgYW5kICcuJyBvciAnLScuXG5cdFx0dmFyIG5vZGVSZSA9IC8oV0NPRCspPy8uc291cmNlLnJlcGxhY2UoICdXQ09EJywgd29yZENoYXJPckRvdCApO1xuXG5cdFx0Ly8gT2JqZWN0IG9uIHRhcmdldCBub2RlLCBhbmQgYWNjZXNzb3IuIE1heSBub3QgY29udGFpbiByZXNlcnZlZFxuXHRcdC8vIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heSBjb250YWluIGFueSBjaGFyYWN0ZXIgZXhjZXB0IGNsb3NpbmcgYnJhY2tldC5cblx0XHR2YXIgb2JqZWN0UmUgPSAvKD86XFwuKFdDKykoPzpcXFsoLispXFxdKT8pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIHdvcmRDaGFyICk7XG5cblx0XHQvLyBQcm9wZXJ0eSBhbmQgYWNjZXNzb3IuIE1heSBub3QgY29udGFpbiByZXNlcnZlZCBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXlcblx0XHQvLyBjb250YWluIGFueSBub24tYnJhY2tldCBjaGFyYWN0ZXJzLlxuXHRcdHZhciBwcm9wZXJ0eVJlID0gL1xcLihXQyspKD86XFxbKC4rKVxcXSk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDJywgd29yZENoYXIgKTtcblxuXHRcdHZhciB0cmFja1JlID0gbmV3IFJlZ0V4cCggJydcblx0XHRcdCsgJ14nXG5cdFx0XHQrIGRpcmVjdG9yeVJlXG5cdFx0XHQrIG5vZGVSZVxuXHRcdFx0KyBvYmplY3RSZVxuXHRcdFx0KyBwcm9wZXJ0eVJlXG5cdFx0XHQrICckJ1xuXHRcdCk7XG5cblx0XHR2YXIgc3VwcG9ydGVkT2JqZWN0TmFtZXMgPSBbICdtYXRlcmlhbCcsICdtYXRlcmlhbHMnLCAnYm9uZXMnIF07XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcGFyc2VUcmFja05hbWUoIHRyYWNrTmFtZSApIHtcblxuXHRcdFx0dmFyIG1hdGNoZXMgPSB0cmFja1JlLmV4ZWMoIHRyYWNrTmFtZSApO1xuXG5cdFx0XHRpZiAoICEgbWF0Y2hlcyApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdQcm9wZXJ0eUJpbmRpbmc6IENhbm5vdCBwYXJzZSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcmVzdWx0cyA9IHtcblx0XHRcdFx0Ly8gZGlyZWN0b3J5TmFtZTogbWF0Y2hlc1sgMSBdLCAvLyAodHNjaHcpIGN1cnJlbnRseSB1bnVzZWRcblx0XHRcdFx0bm9kZU5hbWU6IG1hdGNoZXNbIDIgXSxcblx0XHRcdFx0b2JqZWN0TmFtZTogbWF0Y2hlc1sgMyBdLFxuXHRcdFx0XHRvYmplY3RJbmRleDogbWF0Y2hlc1sgNCBdLFxuXHRcdFx0XHRwcm9wZXJ0eU5hbWU6IG1hdGNoZXNbIDUgXSwgLy8gcmVxdWlyZWRcblx0XHRcdFx0cHJvcGVydHlJbmRleDogbWF0Y2hlc1sgNiBdXG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgbGFzdERvdCA9IHJlc3VsdHMubm9kZU5hbWUgJiYgcmVzdWx0cy5ub2RlTmFtZS5sYXN0SW5kZXhPZiggJy4nICk7XG5cblx0XHRcdGlmICggbGFzdERvdCAhPT0gdW5kZWZpbmVkICYmIGxhc3REb3QgIT09IC0gMSApIHtcblxuXHRcdFx0XHR2YXIgb2JqZWN0TmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKCBsYXN0RG90ICsgMSApO1xuXG5cdFx0XHRcdC8vIE9iamVjdCBuYW1lcyBtdXN0IGJlIGNoZWNrZWQgYWdhaW5zdCBhIHdoaXRlbGlzdC4gT3RoZXJ3aXNlLCB0aGVyZVxuXHRcdFx0XHQvLyBpcyBubyB3YXkgdG8gcGFyc2UgJ2Zvby5iYXIuYmF6JzogJ2JheicgbXVzdCBiZSBhIHByb3BlcnR5LCBidXRcblx0XHRcdFx0Ly8gJ2JhcicgY291bGQgYmUgdGhlIG9iamVjdE5hbWUsIG9yIHBhcnQgb2YgYSBub2RlTmFtZSAod2hpY2ggY2FuXG5cdFx0XHRcdC8vIGluY2x1ZGUgJy4nIGNoYXJhY3RlcnMpLlxuXHRcdFx0XHRpZiAoIHN1cHBvcnRlZE9iamVjdE5hbWVzLmluZGV4T2YoIG9iamVjdE5hbWUgKSAhPT0gLSAxICkge1xuXG5cdFx0XHRcdFx0cmVzdWx0cy5ub2RlTmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKCAwLCBsYXN0RG90ICk7XG5cdFx0XHRcdFx0cmVzdWx0cy5vYmplY3ROYW1lID0gb2JqZWN0TmFtZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZXN1bHRzLnByb3BlcnR5TmFtZSA9PT0gbnVsbCB8fCByZXN1bHRzLnByb3BlcnR5TmFtZS5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBjYW4gbm90IHBhcnNlIHByb3BlcnR5TmFtZSBmcm9tIHRyYWNrTmFtZTogJyArIHRyYWNrTmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZmluZE5vZGU6IGZ1bmN0aW9uICggcm9vdCwgbm9kZU5hbWUgKSB7XG5cblx0XHRpZiAoICEgbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09IFwiXCIgfHwgbm9kZU5hbWUgPT09IFwicm9vdFwiIHx8IG5vZGVOYW1lID09PSBcIi5cIiB8fCBub2RlTmFtZSA9PT0gLSAxIHx8IG5vZGVOYW1lID09PSByb290Lm5hbWUgfHwgbm9kZU5hbWUgPT09IHJvb3QudXVpZCApIHtcblxuXHRcdFx0cmV0dXJuIHJvb3Q7XG5cblx0XHR9XG5cblx0XHQvLyBzZWFyY2ggaW50byBza2VsZXRvbiBib25lcy5cblx0XHRpZiAoIHJvb3Quc2tlbGV0b24gKSB7XG5cblx0XHRcdHZhciBib25lID0gcm9vdC5za2VsZXRvbi5nZXRCb25lQnlOYW1lKCBub2RlTmFtZSApO1xuXG5cdFx0XHRpZiAoIGJvbmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gc2VhcmNoIGludG8gbm9kZSBzdWJ0cmVlLlxuXHRcdGlmICggcm9vdC5jaGlsZHJlbiApIHtcblxuXHRcdFx0dmFyIHNlYXJjaE5vZGVTdWJ0cmVlID0gZnVuY3Rpb24gKCBjaGlsZHJlbiApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2hpbGROb2RlID0gY2hpbGRyZW5bIGkgXTtcblxuXHRcdFx0XHRcdGlmICggY2hpbGROb2RlLm5hbWUgPT09IG5vZGVOYW1lIHx8IGNoaWxkTm9kZS51dWlkID09PSBub2RlTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIGNoaWxkTm9kZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciByZXN1bHQgPSBzZWFyY2hOb2RlU3VidHJlZSggY2hpbGROb2RlLmNoaWxkcmVuICk7XG5cblx0XHRcdFx0XHRpZiAoIHJlc3VsdCApIHJldHVybiByZXN1bHQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgc3ViVHJlZU5vZGUgPSBzZWFyY2hOb2RlU3VidHJlZSggcm9vdC5jaGlsZHJlbiApO1xuXG5cdFx0XHRpZiAoIHN1YlRyZWVOb2RlICkge1xuXG5cdFx0XHRcdHJldHVybiBzdWJUcmVlTm9kZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUsIHsgLy8gcHJvdG90eXBlLCBjb250aW51ZWRcblxuXHQvLyB0aGVzZSBhcmUgdXNlZCB0byBcImJpbmRcIiBhIG5vbmV4aXN0ZW50IHByb3BlcnR5XG5cdF9nZXRWYWx1ZV91bmF2YWlsYWJsZTogZnVuY3Rpb24gKCkge30sXG5cdF9zZXRWYWx1ZV91bmF2YWlsYWJsZTogZnVuY3Rpb24gKCkge30sXG5cblx0QmluZGluZ1R5cGU6IHtcblx0XHREaXJlY3Q6IDAsXG5cdFx0RW50aXJlQXJyYXk6IDEsXG5cdFx0QXJyYXlFbGVtZW50OiAyLFxuXHRcdEhhc0Zyb21Ub0FycmF5OiAzXG5cdH0sXG5cblx0VmVyc2lvbmluZzoge1xuXHRcdE5vbmU6IDAsXG5cdFx0TmVlZHNVcGRhdGU6IDEsXG5cdFx0TWF0cml4V29ybGROZWVkc1VwZGF0ZTogMlxuXHR9LFxuXG5cdEdldHRlckJ5QmluZGluZ1R5cGU6IFtcblxuXHRcdGZ1bmN0aW9uIGdldFZhbHVlX2RpcmVjdCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdGJ1ZmZlclsgb2Zmc2V0IF0gPSB0aGlzLm5vZGVbIHRoaXMucHJvcGVydHlOYW1lIF07XG5cblx0XHR9LFxuXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHR2YXIgc291cmNlID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBzb3VyY2UubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsrIF0gPSBzb3VyY2VbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdGZ1bmN0aW9uIGdldFZhbHVlX2FycmF5RWxlbWVudCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdGJ1ZmZlclsgb2Zmc2V0IF0gPSB0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdO1xuXG5cdFx0fSxcblxuXHRcdGZ1bmN0aW9uIGdldFZhbHVlX3RvQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkudG9BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHRdLFxuXG5cdFNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nOiBbXG5cblx0XHRbXG5cdFx0XHQvLyBEaXJlY3RcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2RpcmVjdF9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRdLCBbXG5cblx0XHRcdC8vIEVudGlyZUFycmF5XG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dmFyIGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHZhciBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdF0sIFtcblxuXHRcdFx0Ly8gQXJyYXlFbGVtZW50XG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5RWxlbWVudCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5RWxlbWVudF9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XSwgW1xuXG5cdFx0XHQvLyBIYXNUb0Zyb21BcnJheVxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdF1cblxuXHRdLFxuXG5cdGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZV91bmJvdW5kKCB0YXJnZXRBcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7XG5cdFx0dGhpcy5nZXRWYWx1ZSggdGFyZ2V0QXJyYXksIG9mZnNldCApO1xuXG5cdFx0Ly8gTm90ZTogVGhpcyBjbGFzcyB1c2VzIGEgU3RhdGUgcGF0dGVybiBvbiBhIHBlci1tZXRob2QgYmFzaXM6XG5cdFx0Ly8gJ2JpbmQnIHNldHMgJ3RoaXMuZ2V0VmFsdWUnIC8gJ3NldFZhbHVlJyBhbmQgc2hhZG93cyB0aGVcblx0XHQvLyBwcm90b3R5cGUgdmVyc2lvbiBvZiB0aGVzZSBtZXRob2RzIHdpdGggb25lIHRoYXQgcmVwcmVzZW50c1xuXHRcdC8vIHRoZSBib3VuZCBzdGF0ZS4gV2hlbiB0aGUgcHJvcGVydHkgaXMgbm90IGZvdW5kLCB0aGUgbWV0aG9kc1xuXHRcdC8vIGJlY29tZSBuby1vcHMuXG5cblx0fSxcblxuXHRzZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVfdW5ib3VuZCggc291cmNlQXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpO1xuXHRcdHRoaXMuc2V0VmFsdWUoIHNvdXJjZUFycmF5LCBvZmZzZXQgKTtcblxuXHR9LFxuXG5cdC8vIGNyZWF0ZSBnZXR0ZXIgLyBzZXR0ZXIgcGFpciBmb3IgYSBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGhcblx0YmluZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRhcmdldE9iamVjdCA9IHRoaXMubm9kZSxcblx0XHRcdHBhcnNlZFBhdGggPSB0aGlzLnBhcnNlZFBhdGgsXG5cblx0XHRcdG9iamVjdE5hbWUgPSBwYXJzZWRQYXRoLm9iamVjdE5hbWUsXG5cdFx0XHRwcm9wZXJ0eU5hbWUgPSBwYXJzZWRQYXRoLnByb3BlcnR5TmFtZSxcblx0XHRcdHByb3BlcnR5SW5kZXggPSBwYXJzZWRQYXRoLnByb3BlcnR5SW5kZXg7XG5cblx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0ICkge1xuXG5cdFx0XHR0YXJnZXRPYmplY3QgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHRoaXMucm9vdE5vZGUsIHBhcnNlZFBhdGgubm9kZU5hbWUgKSB8fCB0aGlzLnJvb3ROb2RlO1xuXG5cdFx0XHR0aGlzLm5vZGUgPSB0YXJnZXRPYmplY3Q7XG5cblx0XHR9XG5cblx0XHQvLyBzZXQgZmFpbCBzdGF0ZSBzbyB3ZSBjYW4ganVzdCAncmV0dXJuJyBvbiBlcnJvclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmF2YWlsYWJsZTtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5fc2V0VmFsdWVfdW5hdmFpbGFibGU7XG5cblx0XHQvLyBlbnN1cmUgdGhlcmUgaXMgYSB2YWx1ZSBub2RlXG5cdFx0aWYgKCAhIHRhcmdldE9iamVjdCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIHVwZGF0ZSBub2RlIGZvciB0cmFjazogJyArIHRoaXMucGF0aCArICcgYnV0IGl0IHdhc25cXCd0IGZvdW5kLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0TmFtZSApIHtcblxuXHRcdFx0dmFyIG9iamVjdEluZGV4ID0gcGFyc2VkUGF0aC5vYmplY3RJbmRleDtcblxuXHRcdFx0Ly8gc3BlY2lhbCBjYXNlcyB3ZXJlIHdlIG5lZWQgdG8gcmVhY2ggZGVlcGVyIGludG8gdGhlIGhpZXJhcmNoeSB0byBnZXQgdGhlIGZhY2UgbWF0ZXJpYWxzLi4uLlxuXHRcdFx0c3dpdGNoICggb2JqZWN0TmFtZSApIHtcblxuXHRcdFx0XHRjYXNlICdtYXRlcmlhbHMnOlxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5tYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFsLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QubWF0ZXJpYWwubWF0ZXJpYWxzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwubWF0ZXJpYWxzIGFzIG5vZGUubWF0ZXJpYWwgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFscyBhcnJheS4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3QubWF0ZXJpYWwubWF0ZXJpYWxzO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnYm9uZXMnOlxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5za2VsZXRvbiApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIGJvbmVzIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIHNrZWxldG9uLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHBvdGVudGlhbCBmdXR1cmUgb3B0aW1pemF0aW9uOiBza2lwIHRoaXMgaWYgcHJvcGVydHlJbmRleCBpcyBhbHJlYWR5IGFuIGludGVnZXJcblx0XHRcdFx0XHQvLyBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuXG5cblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3Quc2tlbGV0b24uYm9uZXM7XG5cblx0XHRcdFx0XHQvLyBzdXBwb3J0IHJlc29sdmluZyBtb3JwaFRhcmdldCBuYW1lcyBpbnRvIGluZGljZXMuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGFyZ2V0T2JqZWN0Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIGkgXS5uYW1lID09PSBvYmplY3RJbmRleCApIHtcblxuXHRcdFx0XHRcdFx0XHRvYmplY3RJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdE5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gb2JqZWN0TmFtZSBvZiBub2RlIHVuZGVmaW5lZC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbIG9iamVjdE5hbWUgXTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdGlmICggb2JqZWN0SW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgb2JqZWN0SW5kZXggXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIGJpbmQgdG8gb2JqZWN0SW5kZXggb2Ygb2JqZWN0TmFtZSwgYnV0IGlzIHVuZGVmaW5lZC4nLCB0aGlzLCB0YXJnZXRPYmplY3QgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0SW5kZXggXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gcmVzb2x2ZSBwcm9wZXJ0eVxuXHRcdHZhciBub2RlUHJvcGVydHkgPSB0YXJnZXRPYmplY3RbIHByb3BlcnR5TmFtZSBdO1xuXG5cdFx0aWYgKCBub2RlUHJvcGVydHkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG5vZGVOYW1lID0gcGFyc2VkUGF0aC5ub2RlTmFtZTtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIHVwZGF0ZSBwcm9wZXJ0eSBmb3IgdHJhY2s6ICcgKyBub2RlTmFtZSArXG5cdFx0XHRcdCcuJyArIHByb3BlcnR5TmFtZSArICcgYnV0IGl0IHdhc25cXCd0IGZvdW5kLicsIHRhcmdldE9iamVjdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZXJtaW5lIHZlcnNpb25pbmcgc2NoZW1lXG5cdFx0dmFyIHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTm9uZTtcblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0O1xuXG5cdFx0aWYgKCB0YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgLy8gbWF0ZXJpYWxcblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5OZWVkc1VwZGF0ZTtcblxuXHRcdH0gZWxzZSBpZiAoIHRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IC8vIG5vZGUgdHJhbnNmb3JtXG5cblx0XHRcdHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTWF0cml4V29ybGROZWVkc1VwZGF0ZTtcblxuXHRcdH1cblxuXHRcdC8vIGRldGVybWluZSBob3cgdGhlIHByb3BlcnR5IGdldHMgYm91bmRcblx0XHR2YXIgYmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkRpcmVjdDtcblxuXHRcdGlmICggcHJvcGVydHlJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBhY2Nlc3MgYSBzdWIgZWxlbWVudCBvZiB0aGUgcHJvcGVydHkgYXJyYXkgKG9ubHkgcHJpbWl0aXZlcyBhcmUgc3VwcG9ydGVkIHJpZ2h0IG5vdylcblxuXHRcdFx0aWYgKCBwcm9wZXJ0eU5hbWUgPT09IFwibW9ycGhUYXJnZXRJbmZsdWVuY2VzXCIgKSB7XG5cblx0XHRcdFx0Ly8gcG90ZW50aWFsIG9wdGltaXphdGlvbiwgc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyLCBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuXG5cblx0XHRcdFx0Ly8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLlxuXHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5LicsIHRoaXMgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGUuZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3QuZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uWyBpIF0ubmFtZSA9PT0gcHJvcGVydHlJbmRleCApIHtcblxuXHRcdFx0XHRcdFx0XHRwcm9wZXJ0eUluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGUuZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3QuZ2VvbWV0cnkubW9ycGhUYXJnZXRzWyBpIF0ubmFtZSA9PT0gcHJvcGVydHlJbmRleCApIHtcblxuXHRcdFx0XHRcdFx0XHRwcm9wZXJ0eUluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkFycmF5RWxlbWVudDtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXHRcdFx0dGhpcy5wcm9wZXJ0eUluZGV4ID0gcHJvcGVydHlJbmRleDtcblxuXHRcdH0gZWxzZSBpZiAoIG5vZGVQcm9wZXJ0eS5mcm9tQXJyYXkgIT09IHVuZGVmaW5lZCAmJiBub2RlUHJvcGVydHkudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBtdXN0IHVzZSBjb3B5IGZvciBPYmplY3QzRC5FdWxlci9RdWF0ZXJuaW9uXG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5IYXNGcm9tVG9BcnJheTtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXG5cdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggbm9kZVByb3BlcnR5ICkgKSB7XG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5FbnRpcmVBcnJheTtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG5cblx0XHR9XG5cblx0XHQvLyBzZWxlY3QgZ2V0dGVyIC8gc2V0dGVyXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuR2V0dGVyQnlCaW5kaW5nVHlwZVsgYmluZGluZ1R5cGUgXTtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5TZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZ1sgYmluZGluZ1R5cGUgXVsgdmVyc2lvbmluZyBdO1xuXG5cdH0sXG5cblx0dW5iaW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm5vZGUgPSBudWxsO1xuXG5cdFx0Ly8gYmFjayB0byB0aGUgcHJvdG90eXBlIHZlcnNpb24gb2YgZ2V0VmFsdWUgLyBzZXRWYWx1ZVxuXHRcdC8vIG5vdGU6IGF2b2lkaW5nIHRvIG11dGF0ZSB0aGUgc2hhcGUgb2YgJ3RoaXMnIHZpYSAnZGVsZXRlJ1xuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmJvdW5kO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmJvdW5kO1xuXG5cdH1cblxufSApO1xuXG4vLyFcXCBERUNMQVJFIEFMSUFTIEFGVEVSIGFzc2lnbiBwcm90b3R5cGUgIVxuT2JqZWN0LmFzc2lnbiggUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZSwge1xuXG5cdC8vIGluaXRpYWwgc3RhdGUgb2YgdGhlc2UgbWV0aG9kcyB0aGF0IGNhbGxzICdiaW5kJ1xuXHRfZ2V0VmFsdWVfdW5ib3VuZDogUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5nZXRWYWx1ZSxcblx0X3NldFZhbHVlX3VuYm91bmQ6IFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuc2V0VmFsdWUsXG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBncm91cCBvZiBvYmplY3RzIHRoYXQgcmVjZWl2ZXMgYSBzaGFyZWQgYW5pbWF0aW9uIHN0YXRlLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqICAtIEFkZCBvYmplY3RzIHlvdSB3b3VsZCBvdGhlcndpc2UgcGFzcyBhcyAncm9vdCcgdG8gdGhlXG4gKiAgICBjb25zdHJ1Y3RvciBvciB0aGUgLmNsaXBBY3Rpb24gbWV0aG9kIG9mIEFuaW1hdGlvbk1peGVyLlxuICpcbiAqICAtIEluc3RlYWQgcGFzcyB0aGlzIG9iamVjdCBhcyAncm9vdCcuXG4gKlxuICogIC0gWW91IGNhbiBhbHNvIGFkZCBhbmQgcmVtb3ZlIG9iamVjdHMgbGF0ZXIgd2hlbiB0aGUgbWl4ZXJcbiAqICAgIGlzIHJ1bm5pbmcuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgICBPYmplY3RzIG9mIHRoaXMgY2xhc3MgYXBwZWFyIGFzIG9uZSBvYmplY3QgdG8gdGhlIG1peGVyLFxuICogICAgc28gY2FjaGUgY29udHJvbCBvZiB0aGUgaW5kaXZpZHVhbCBvYmplY3RzIG11c3QgYmUgZG9uZVxuICogICAgb24gdGhlIGdyb3VwLlxuICpcbiAqIExpbWl0YXRpb246XG4gKlxuICogIC0gVGhlIGFuaW1hdGVkIHByb3BlcnRpZXMgbXVzdCBiZSBjb21wYXRpYmxlIGFtb25nIHRoZVxuICogICAgYWxsIG9iamVjdHMgaW4gdGhlIGdyb3VwLlxuICpcbiAqICAtIEEgc2luZ2xlIHByb3BlcnR5IGNhbiBlaXRoZXIgYmUgY29udHJvbGxlZCB0aHJvdWdoIGFcbiAqICAgIHRhcmdldCBncm91cCBvciBkaXJlY3RseSwgYnV0IG5vdCBib3RoLlxuICpcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBBbmltYXRpb25PYmplY3RHcm91cCgpIHtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHQvLyBjYWNoZWQgb2JqZWN0cyBmb2xsb3dlZCBieSB0aGUgYWN0aXZlIG9uZXNcblx0dGhpcy5fb2JqZWN0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblxuXHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IDA7IC8vIHRocmVzaG9sZFxuXHQvLyBub3RlOiByZWFkIGJ5IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGVcblxuXHR2YXIgaW5kaWNlcyA9IHt9O1xuXHR0aGlzLl9pbmRpY2VzQnlVVUlEID0gaW5kaWNlczsgLy8gZm9yIGJvb2trZWVwaW5nXG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdGluZGljZXNbIGFyZ3VtZW50c1sgaSBdLnV1aWQgXSA9IGk7XG5cblx0fVxuXG5cdHRoaXMuX3BhdGhzID0gW107IC8vIGluc2lkZTogc3RyaW5nXG5cdHRoaXMuX3BhcnNlZFBhdGhzID0gW107IC8vIGluc2lkZTogeyB3ZSBkb24ndCBjYXJlLCBoZXJlIH1cblx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gaW5zaWRlOiBBcnJheTwgUHJvcGVydHlCaW5kaW5nID5cblx0dGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoID0ge307IC8vIGluc2lkZTogaW5kaWNlcyBpbiB0aGVzZSBhcnJheXNcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRvYmplY3RzOiB7XG5cdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9vYmplY3RzLmxlbmd0aDtcblxuXHRcdFx0fSxcblx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy50b3RhbCAtIHNjb3BlLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0IGJpbmRpbmdzUGVyT2JqZWN0KCkge1xuXG5cdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbk9iamVjdEdyb3VwLnByb3RvdHlwZSwge1xuXG5cdGlzQW5pbWF0aW9uT2JqZWN0R3JvdXA6IHRydWUsXG5cblx0YWRkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0cGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdHBhcnNlZFBhdGhzID0gdGhpcy5fcGFyc2VkUGF0aHMsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoLFxuXHRcdFx0a25vd25PYmplY3QgPSB1bmRlZmluZWQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyB1bmtub3duIG9iamVjdCAtPiBhZGQgaXQgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRpbmRleCA9IG5PYmplY3RzICsrO1xuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0YmluZGluZ3NbIGogXS5wdXNoKCBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGhzWyBqIF0sIHBhcnNlZFBhdGhzWyBqIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRrbm93bk9iamVjdCA9IG9iamVjdHNbIGluZGV4IF07XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHR2YXIgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdENhY2hlZE9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHNpbmNlIHdlIGRvIG5vdCBib3RoZXIgdG8gY3JlYXRlIG5ldyBiaW5kaW5nc1xuXHRcdFx0XHRcdFx0Ly8gZm9yIG9iamVjdHMgdGhhdCBhcmUgY2FjaGVkLCB0aGUgYmluZGluZyBtYXlcblx0XHRcdFx0XHRcdC8vIG9yIG1heSBub3QgZXhpc3RcblxuXHRcdFx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0c1sgaW5kZXggXSAhPT0ga25vd25PYmplY3QgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbk9iamVjdEdyb3VwOiBEaWZmZXJlbnQgb2JqZWN0cyB3aXRoIHRoZSBzYW1lIFVVSUQgJyArXG5cdFx0XHRcdFx0J2RldGVjdGVkLiBDbGVhbiB0aGUgY2FjaGVzIG9yIHJlY3JlYXRlIHlvdXIgaW5mcmFzdHJ1Y3R1cmUgd2hlbiByZWxvYWRpbmcgc2NlbmVzLicgKTtcblxuXHRcdFx0fSAvLyBlbHNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSB3aGVyZSB3ZSB3YW50IGl0IHRvIGJlXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+PSBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHQvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCBpbnRvIHRoZSBDQUNIRUQgcmVnaW9uXG5cblx0XHRcdFx0dmFyIGxhc3RDYWNoZWRJbmRleCA9IG5DYWNoZWRPYmplY3RzICsrLFxuXHRcdFx0XHRcdGZpcnN0QWN0aXZlT2JqZWN0ID0gb2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgZmlyc3RBY3RpdmVPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZU9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBsYXN0Q2FjaGVkSW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGxhc3RDYWNoZWRJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGZpcnN0QWN0aXZlID0gYmluZGluZ3NGb3JQYXRoWyBsYXN0Q2FjaGVkSW5kZXggXSxcblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZTtcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdID0gYmluZGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9LFxuXG5cdC8vIHJlbW92ZSAmIGZvcmdldFxuXHR1bmNhY2hlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRlbGV0ZSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0Ly8gb2JqZWN0IGlzIGNhY2hlZCwgc2hyaW5rIHRoZSBDQUNIRUQgcmVnaW9uXG5cblx0XHRcdFx0XHR2YXIgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdE9iamVjdCA9IG9iamVjdHNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBjYWNoZWQgb2JqZWN0IHRha2VzIHRoaXMgb2JqZWN0J3MgcGxhY2Vcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0Q2FjaGVkT2JqZWN0O1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBvYmplY3QgZ29lcyB0byB0aGUgYWN0aXZhdGVkIHNsb3QgYW5kIHBvcFxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RPYmplY3QudXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0sXG5cdFx0XHRcdFx0XHRcdGxhc3QgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0O1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgYWN0aXZlLCBqdXN0IHN3YXAgd2l0aCB0aGUgbGFzdCBhbmQgcG9wXG5cblx0XHRcdFx0XHR2YXIgbGFzdEluZGV4ID0gLS0gbk9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdO1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gLy8gY2FjaGVkIG9yIGFjdGl2ZVxuXG5cdFx0XHR9IC8vIGlmIG9iamVjdCBpcyBrbm93blxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH0sXG5cblx0Ly8gSW50ZXJuYWwgaW50ZXJmYWNlIHVzZWQgYnkgYmVmcmllbmRlZCBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlOlxuXG5cdHN1YnNjcmliZV86IGZ1bmN0aW9uICggcGF0aCwgcGFyc2VkUGF0aCApIHtcblxuXHRcdC8vIHJldHVybnMgYW4gYXJyYXkgb2YgYmluZGluZ3MgZm9yIHRoZSBnaXZlbiBwYXRoIHRoYXQgaXMgY2hhbmdlZFxuXHRcdC8vIGFjY29yZGluZyB0byB0aGUgY29udGFpbmVkIG9iamVjdHMgaW4gdGhlIGdyb3VwXG5cblx0XHR2YXIgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxcblx0XHRcdGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdLFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHJldHVybiBiaW5kaW5nc1sgaW5kZXggXTtcblxuXHRcdHZhciBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCxcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRiaW5kaW5nc0ZvclBhdGggPSBuZXcgQXJyYXkoIG5PYmplY3RzICk7XG5cblx0XHRpbmRleCA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGluZGljZXNCeVBhdGhbIHBhdGggXSA9IGluZGV4O1xuXG5cdFx0cGF0aHMucHVzaCggcGF0aCApO1xuXHRcdHBhcnNlZFBhdGhzLnB1c2goIHBhcnNlZFBhdGggKTtcblx0XHRiaW5kaW5ncy5wdXNoKCBiaW5kaW5nc0ZvclBhdGggKTtcblxuXHRcdGZvciAoIHZhciBpID0gbkNhY2hlZE9iamVjdHMsIG4gPSBvYmplY3RzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIG9iamVjdCA9IG9iamVjdHNbIGkgXTtcblx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaSBdID0gbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYmluZGluZ3NGb3JQYXRoO1xuXG5cdH0sXG5cblx0dW5zdWJzY3JpYmVfOiBmdW5jdGlvbiAoIHBhdGggKSB7XG5cblx0XHQvLyB0ZWxscyB0aGUgZ3JvdXAgdG8gZm9yZ2V0IGFib3V0IGEgcHJvcGVydHkgcGF0aCBhbmQgbm8gbG9uZ2VyXG5cdFx0Ly8gdXBkYXRlIHRoZSBhcnJheSBwcmV2aW91c2x5IG9idGFpbmVkIHdpdGggJ3N1YnNjcmliZV8nXG5cblx0XHR2YXIgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxcblx0XHRcdGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgcGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdFx0bGFzdEJpbmRpbmdzSW5kZXggPSBiaW5kaW5ncy5sZW5ndGggLSAxLFxuXHRcdFx0XHRsYXN0QmluZGluZ3MgPSBiaW5kaW5nc1sgbGFzdEJpbmRpbmdzSW5kZXggXSxcblx0XHRcdFx0bGFzdEJpbmRpbmdzUGF0aCA9IHBhdGhbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cblx0XHRcdGluZGljZXNCeVBhdGhbIGxhc3RCaW5kaW5nc1BhdGggXSA9IGluZGV4O1xuXG5cdFx0XHRiaW5kaW5nc1sgaW5kZXggXSA9IGxhc3RCaW5kaW5ncztcblx0XHRcdGJpbmRpbmdzLnBvcCgpO1xuXG5cdFx0XHRwYXJzZWRQYXRoc1sgaW5kZXggXSA9IHBhcnNlZFBhdGhzWyBsYXN0QmluZGluZ3NJbmRleCBdO1xuXHRcdFx0cGFyc2VkUGF0aHMucG9wKCk7XG5cblx0XHRcdHBhdGhzWyBpbmRleCBdID0gcGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXRocy5wb3AoKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQWN0aW9uIHByb3ZpZGVkIGJ5IEFuaW1hdGlvbk1peGVyIGZvciBzY2hlZHVsaW5nIGNsaXAgcGxheWJhY2sgb24gc3BlY2lmaWNcbiAqIG9iamVjdHMuXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICpcbiAqL1xuXG5mdW5jdGlvbiBBbmltYXRpb25BY3Rpb24oIG1peGVyLCBjbGlwLCBsb2NhbFJvb3QgKSB7XG5cblx0dGhpcy5fbWl4ZXIgPSBtaXhlcjtcblx0dGhpcy5fY2xpcCA9IGNsaXA7XG5cdHRoaXMuX2xvY2FsUm9vdCA9IGxvY2FsUm9vdCB8fCBudWxsO1xuXG5cdHZhciB0cmFja3MgPSBjbGlwLnRyYWNrcyxcblx0XHRuVHJhY2tzID0gdHJhY2tzLmxlbmd0aCxcblx0XHRpbnRlcnBvbGFudHMgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHR2YXIgaW50ZXJwb2xhbnRTZXR0aW5ncyA9IHtcblx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcblx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblx0fTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5UcmFja3M7ICsrIGkgKSB7XG5cblx0XHR2YXIgaW50ZXJwb2xhbnQgPSB0cmFja3NbIGkgXS5jcmVhdGVJbnRlcnBvbGFudCggbnVsbCApO1xuXHRcdGludGVycG9sYW50c1sgaSBdID0gaW50ZXJwb2xhbnQ7XG5cdFx0aW50ZXJwb2xhbnQuc2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdH1cblxuXHR0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzID0gaW50ZXJwb2xhbnRTZXR0aW5ncztcblxuXHR0aGlzLl9pbnRlcnBvbGFudHMgPSBpbnRlcnBvbGFudHM7IC8vIGJvdW5kIGJ5IHRoZSBtaXhlclxuXG5cdC8vIGluc2lkZTogUHJvcGVydHlNaXhlciAobWFuYWdlZCBieSB0aGUgbWl4ZXIpXG5cdHRoaXMuX3Byb3BlcnR5QmluZGluZ3MgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHR0aGlzLl9jYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxuXHR0aGlzLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxuXG5cdHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gbnVsbDtcblx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBudWxsO1xuXG5cdHRoaXMubG9vcCA9IExvb3BSZXBlYXQ7XG5cdHRoaXMuX2xvb3BDb3VudCA9IC0gMTtcblxuXHQvLyBnbG9iYWwgbWl4ZXIgdGltZSB3aGVuIHRoZSBhY3Rpb24gaXMgdG8gYmUgc3RhcnRlZFxuXHQvLyBpdCdzIHNldCBiYWNrIHRvICdudWxsJyB1cG9uIHN0YXJ0IG9mIHRoZSBhY3Rpb25cblx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDtcblxuXHQvLyBzY2FsZWQgbG9jYWwgdGltZSBvZiB0aGUgYWN0aW9uXG5cdC8vIGdldHMgY2xhbXBlZCBvciB3cmFwcGVkIHRvIDAuLmNsaXAuZHVyYXRpb24gYWNjb3JkaW5nIHRvIGxvb3Bcblx0dGhpcy50aW1lID0gMDtcblxuXHR0aGlzLnRpbWVTY2FsZSA9IDE7XG5cdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IDE7XG5cblx0dGhpcy53ZWlnaHQgPSAxO1xuXHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSAxO1xuXG5cdHRoaXMucmVwZXRpdGlvbnMgPSBJbmZpbml0eTsgLy8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZ1xuXG5cdHRoaXMucGF1c2VkID0gZmFsc2U7IC8vIHRydWUgLT4gemVybyBlZmZlY3RpdmUgdGltZSBzY2FsZVxuXHR0aGlzLmVuYWJsZWQgPSB0cnVlOyAvLyBmYWxzZSAtPiB6ZXJvIGVmZmVjdGl2ZSB3ZWlnaHRcblxuXHR0aGlzLmNsYW1wV2hlbkZpbmlzaGVkID0gZmFsc2U7Ly8ga2VlcCBmZWVkaW5nIHRoZSBsYXN0IGZyYW1lP1xuXG5cdHRoaXMuemVyb1Nsb3BlQXRTdGFydCA9IHRydWU7Ly8gZm9yIHNtb290aCBpbnRlcnBvbGF0aW9uIHcvbyBzZXBhcmF0ZVxuXHR0aGlzLnplcm9TbG9wZUF0RW5kID0gdHJ1ZTsvLyBjbGlwcyBmb3Igc3RhcnQsIGxvb3AgYW5kIGVuZFxuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkFjdGlvbi5wcm90b3R5cGUsIHtcblxuXHQvLyBTdGF0ZSAmIFNjaGVkdWxpbmdcblxuXHRwbGF5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl9taXhlci5fYWN0aXZhdGVBY3Rpb24oIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5fbWl4ZXIuX2RlYWN0aXZhdGVBY3Rpb24oIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzLnJlc2V0KCk7XG5cblx0fSxcblxuXHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5wYXVzZWQgPSBmYWxzZTtcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG5cdFx0dGhpcy50aW1lID0gMDsgLy8gcmVzdGFydCBjbGlwXG5cdFx0dGhpcy5fbG9vcENvdW50ID0gLSAxOy8vIGZvcmdldCBwcmV2aW91cyBsb29wc1xuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7Ly8gZm9yZ2V0IHNjaGVkdWxpbmdcblxuXHRcdHJldHVybiB0aGlzLnN0b3BGYWRpbmcoKS5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0aXNSdW5uaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5lbmFibGVkICYmICEgdGhpcy5wYXVzZWQgJiYgdGhpcy50aW1lU2NhbGUgIT09IDAgJiZcblx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9PT0gbnVsbCAmJiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdC8vIHJldHVybiB0cnVlIHdoZW4gcGxheSBoYXMgYmVlbiBjYWxsZWRcblx0aXNTY2hlZHVsZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdHN0YXJ0QXQ6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRpbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldExvb3A6IGZ1bmN0aW9uICggbW9kZSwgcmVwZXRpdGlvbnMgKSB7XG5cblx0XHR0aGlzLmxvb3AgPSBtb2RlO1xuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSByZXBldGl0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gV2VpZ2h0XG5cblx0Ly8gc2V0IHRoZSB3ZWlnaHQgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCBmYWRpbmdcblx0Ly8gYWx0aG91Z2ggLmVuYWJsZWQgPSBmYWxzZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHdlaWdodCBvZiB6ZXJvLCB0aGlzXG5cdC8vIG1ldGhvZCBkb2VzICpub3QqIGNoYW5nZSAuZW5hYmxlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlV2VpZ2h0OiBmdW5jdGlvbiAoIHdlaWdodCApIHtcblxuXHRcdHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0Ly8gbm90ZTogc2FtZSBsb2dpYyBhcyB3aGVuIHVwZGF0ZWQgYXQgcnVudGltZVxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHRoaXMuZW5hYmxlZCA/IHdlaWdodCA6IDA7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0fSxcblxuXHQvLyByZXR1cm4gdGhlIHdlaWdodCBjb25zaWRlcmluZyBmYWRpbmcgYW5kIC5lbmFibGVkXG5cdGdldEVmZmVjdGl2ZVdlaWdodDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVdlaWdodDtcblxuXHR9LFxuXG5cdGZhZGVJbjogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDAsIDEgKTtcblxuXHR9LFxuXG5cdGZhZGVPdXQ6IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCAxLCAwICk7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVGcm9tOiBmdW5jdGlvbiAoIGZhZGVPdXRBY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0ZmFkZU91dEFjdGlvbi5mYWRlT3V0KCBkdXJhdGlvbiApO1xuXHRcdHRoaXMuZmFkZUluKCBkdXJhdGlvbiApO1xuXG5cdFx0aWYgKCB3YXJwICkge1xuXG5cdFx0XHR2YXIgZmFkZUluRHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uLFxuXHRcdFx0XHRmYWRlT3V0RHVyYXRpb24gPSBmYWRlT3V0QWN0aW9uLl9jbGlwLmR1cmF0aW9uLFxuXG5cdFx0XHRcdHN0YXJ0RW5kUmF0aW8gPSBmYWRlT3V0RHVyYXRpb24gLyBmYWRlSW5EdXJhdGlvbixcblx0XHRcdFx0ZW5kU3RhcnRSYXRpbyA9IGZhZGVJbkR1cmF0aW9uIC8gZmFkZU91dER1cmF0aW9uO1xuXG5cdFx0XHRmYWRlT3V0QWN0aW9uLndhcnAoIDEuMCwgc3RhcnRFbmRSYXRpbywgZHVyYXRpb24gKTtcblx0XHRcdHRoaXMud2FycCggZW5kU3RhcnRSYXRpbywgMS4wLCBkdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVUbzogZnVuY3Rpb24gKCBmYWRlSW5BY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0cmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKCB0aGlzLCBkdXJhdGlvbiwgd2FycCApO1xuXG5cdH0sXG5cblx0c3RvcEZhZGluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdlaWdodEludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHdlaWdodEludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHdlaWdodEludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIFRpbWUgU2NhbGUgQ29udHJvbFxuXG5cdC8vIHNldCB0aGUgdGltZSBzY2FsZSBzdG9wcGluZyBhbnkgc2NoZWR1bGVkIHdhcnBpbmdcblx0Ly8gYWx0aG91Z2ggLnBhdXNlZCA9IHRydWUgeWllbGRzIGFuIGVmZmVjdGl2ZSB0aW1lIHNjYWxlIG9mIHplcm8sIHRoaXNcblx0Ly8gbWV0aG9kIGRvZXMgKm5vdCogY2hhbmdlIC5wYXVzZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXG5cdHNldEVmZmVjdGl2ZVRpbWVTY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aGlzLnBhdXNlZCA/IDAgOiB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRoZSB0aW1lIHNjYWxlIGNvbnNpZGVyaW5nIHdhcnBpbmcgYW5kIC5wYXVzZWRcblx0Z2V0RWZmZWN0aXZlVGltZVNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlO1xuXG5cdH0sXG5cblx0c2V0RHVyYXRpb246IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRoaXMuX2NsaXAuZHVyYXRpb24gLyBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fSxcblxuXHRzeW5jV2l0aDogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR0aGlzLnRpbWUgPSBhY3Rpb24udGltZTtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IGFjdGlvbi50aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0aGFsdDogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcblxuXHR9LFxuXG5cdHdhcnA6IGZ1bmN0aW9uICggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7XG5cblx0XHR2YXIgbWl4ZXIgPSB0aGlzLl9taXhlciwgbm93ID0gbWl4ZXIudGltZSxcblx0XHRcdGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQsXG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHZhciB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdHZhbHVlcyA9IGludGVycG9sYW50LnNhbXBsZVZhbHVlcztcblxuXHRcdHRpbWVzWyAwIF0gPSBub3c7XG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1xuXG5cdFx0dmFsdWVzWyAwIF0gPSBzdGFydFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblx0XHR2YWx1ZXNbIDEgXSA9IGVuZFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcFdhcnBpbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lU2NhbGVJbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0aWYgKCB0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB0aW1lU2NhbGVJbnRlcnBvbGFudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBPYmplY3QgQWNjZXNzb3JzXG5cblx0Z2V0TWl4ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcblxuXHR9LFxuXG5cdGdldENsaXA6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xuXG5cdH0sXG5cblx0Z2V0Um9vdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcblxuXHR9LFxuXG5cdC8vIEludGVybmFcblxuXHRfdXBkYXRlOiBmdW5jdGlvbiAoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICkge1xuXG5cdFx0Ly8gY2FsbGVkIGJ5IHRoZSBtaXhlclxuXG5cdFx0aWYgKCAhIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0Ly8gY2FsbCAuX3VwZGF0ZVdlaWdodCgpIHRvIHVwZGF0ZSAuX2VmZmVjdGl2ZVdlaWdodFxuXG5cdFx0XHR0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHZhciBzdGFydFRpbWUgPSB0aGlzLl9zdGFydFRpbWU7XG5cblx0XHRpZiAoIHN0YXJ0VGltZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgZm9yIHNjaGVkdWxlZCBzdGFydCBvZiBhY3Rpb25cblxuXHRcdFx0dmFyIHRpbWVSdW5uaW5nID0gKCB0aW1lIC0gc3RhcnRUaW1lICkgKiB0aW1lRGlyZWN0aW9uO1xuXHRcdFx0aWYgKCB0aW1lUnVubmluZyA8IDAgfHwgdGltZURpcmVjdGlvbiA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm47IC8vIHlldCB0byBjb21lIC8gZG9uJ3QgZGVjaWRlIHdoZW4gZGVsdGEgPSAwXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RhcnRcblxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsgLy8gdW5zY2hlZHVsZVxuXHRcdFx0ZGVsdGFUaW1lID0gdGltZURpcmVjdGlvbiAqIHRpbWVSdW5uaW5nO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYXBwbHkgdGltZSBzY2FsZSBhbmQgYWR2YW5jZSB0aW1lXG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy5fdXBkYXRlVGltZVNjYWxlKCB0aW1lICk7XG5cdFx0dmFyIGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XG5cblx0XHQvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpblxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxuXG5cdFx0dmFyIHdlaWdodCA9IHRoaXMuX3VwZGF0ZVdlaWdodCggdGltZSApO1xuXG5cdFx0aWYgKCB3ZWlnaHQgPiAwICkge1xuXG5cdFx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5faW50ZXJwb2xhbnRzO1xuXHRcdFx0dmFyIHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gaW50ZXJwb2xhbnRzLmxlbmd0aDsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcblx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfdXBkYXRlV2VpZ2h0OiBmdW5jdGlvbiAoIHRpbWUgKSB7XG5cblx0XHR2YXIgd2VpZ2h0ID0gMDtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkICkge1xuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLndlaWdodDtcblx0XHRcdHZhciBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHZhciBpbnRlcnBvbGFudFZhbHVlID0gaW50ZXJwb2xhbnQuZXZhbHVhdGUoIHRpbWUgKVsgMCBdO1xuXG5cdFx0XHRcdHdlaWdodCAqPSBpbnRlcnBvbGFudFZhbHVlO1xuXG5cdFx0XHRcdGlmICggdGltZSA+IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9uc1sgMSBdICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIGludGVycG9sYW50VmFsdWUgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGZhZGVkIG91dCwgZGlzYWJsZVxuXHRcdFx0XHRcdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0cmV0dXJuIHdlaWdodDtcblxuXHR9LFxuXG5cdF91cGRhdGVUaW1lU2NhbGU6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHZhciB0aW1lU2NhbGUgPSAwO1xuXG5cdFx0aWYgKCAhIHRoaXMucGF1c2VkICkge1xuXG5cdFx0XHR0aW1lU2NhbGUgPSB0aGlzLnRpbWVTY2FsZTtcblxuXHRcdFx0dmFyIGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0dGltZVNjYWxlICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXG5cdFx0XHRcdFx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xuXG5cdH0sXG5cblx0X3VwZGF0ZVRpbWU6IGZ1bmN0aW9uICggZGVsdGFUaW1lICkge1xuXG5cdFx0dmFyIHRpbWUgPSB0aGlzLnRpbWUgKyBkZWx0YVRpbWU7XG5cdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5fY2xpcC5kdXJhdGlvbjtcblx0XHR2YXIgbG9vcCA9IHRoaXMubG9vcDtcblx0XHR2YXIgbG9vcENvdW50ID0gdGhpcy5fbG9vcENvdW50O1xuXG5cdFx0dmFyIHBpbmdQb25nID0gKCBsb29wID09PSBMb29wUGluZ1BvbmcgKTtcblxuXHRcdGlmICggZGVsdGFUaW1lID09PSAwICkge1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkgcmV0dXJuIHRpbWU7XG5cblx0XHRcdHJldHVybiAoIHBpbmdQb25nICYmICggbG9vcENvdW50ICYgMSApID09PSAxICkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBsb29wID09PSBMb29wT25jZSApIHtcblxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0gMSApIHtcblxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcblxuXHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSAwO1xuXHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0cnVlLCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGhhbmRsZV9zdG9wOiB7XG5cblx0XHRcdFx0aWYgKCB0aW1lID49IGR1cmF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGltZSA9IGR1cmF0aW9uO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRpbWUgPCAwICkge1xuXG5cdFx0XHRcdFx0dGltZSA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIGJyZWFrIGhhbmRsZV9zdG9wO1xuXG5cdFx0XHRcdGlmICggdGhpcy5jbGFtcFdoZW5GaW5pc2hlZCApIHRoaXMucGF1c2VkID0gdHJ1ZTtcblx0XHRcdFx0ZWxzZSB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0gMSA6IDFcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgeyAvLyByZXBldGl0aXZlIFJlcGVhdCBvciBQaW5nUG9uZ1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdGlmICggZGVsdGFUaW1lID49IDAgKSB7XG5cblx0XHRcdFx0XHRsb29wQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdHJ1ZSwgdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gd2hlbiBsb29waW5nIGluIHJldmVyc2UgZGlyZWN0aW9uLCB0aGUgaW5pdGlhbFxuXHRcdFx0XHRcdC8vIHRyYW5zaXRpb24gdGhyb3VnaCB6ZXJvIGNvdW50cyBhcyBhIHJlcGV0aXRpb24sXG5cdFx0XHRcdFx0Ly8gc28gbGVhdmUgbG9vcENvdW50IGF0IC0xXG5cblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gfHwgdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0Ly8gd3JhcCBhcm91bmRcblxuXHRcdFx0XHR2YXIgbG9vcERlbHRhID0gTWF0aC5mbG9vciggdGltZSAvIGR1cmF0aW9uICk7IC8vIHNpZ25lZFxuXHRcdFx0XHR0aW1lIC09IGR1cmF0aW9uICogbG9vcERlbHRhO1xuXG5cdFx0XHRcdGxvb3BDb3VudCArPSBNYXRoLmFicyggbG9vcERlbHRhICk7XG5cblx0XHRcdFx0dmFyIHBlbmRpbmcgPSB0aGlzLnJlcGV0aXRpb25zIC0gbG9vcENvdW50O1xuXG5cdFx0XHRcdGlmICggcGVuZGluZyA8PSAwICkge1xuXG5cdFx0XHRcdFx0Ly8gaGF2ZSB0byBzdG9wIChzd2l0Y2ggc3RhdGUsIGNsYW1wIHRpbWUsIGZpcmUgZXZlbnQpXG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdFx0ZWxzZSB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdHRpbWUgPSBkZWx0YVRpbWUgPiAwID8gZHVyYXRpb24gOiAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBkZWx0YVRpbWUgPiAwID8gMSA6IC0gMVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8ga2VlcCBydW5uaW5nXG5cblx0XHRcdFx0XHRpZiAoIHBlbmRpbmcgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGVudGVyaW5nIHRoZSBsYXN0IHJvdW5kXG5cblx0XHRcdFx0XHRcdHZhciBhdFN0YXJ0ID0gZGVsdGFUaW1lIDwgMDtcblx0XHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIGF0U3RhcnQsICEgYXRTdGFydCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIGZhbHNlLCBmYWxzZSwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuX2xvb3BDb3VudCA9IGxvb3BDb3VudDtcblxuXHRcdFx0XHRcdHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoIHtcblx0XHRcdFx0XHRcdHR5cGU6ICdsb29wJywgYWN0aW9uOiB0aGlzLCBsb29wRGVsdGE6IGxvb3BEZWx0YVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwaW5nUG9uZyAmJiAoIGxvb3BDb3VudCAmIDEgKSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBpbnZlcnQgdGltZSBmb3IgdGhlIFwicG9uZyByb3VuZFwiXG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblx0XHRcdFx0cmV0dXJuIGR1cmF0aW9uIC0gdGltZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy50aW1lID0gdGltZTtcblx0XHRyZXR1cm4gdGltZTtcblxuXHR9LFxuXG5cdF9zZXRFbmRpbmdzOiBmdW5jdGlvbiAoIGF0U3RhcnQsIGF0RW5kLCBwaW5nUG9uZyApIHtcblxuXHRcdHZhciBzZXR0aW5ncyA9IHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3M7XG5cblx0XHRpZiAoIHBpbmdQb25nICkge1xuXG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IFplcm9TbG9wZUVuZGluZztcblx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZCA9IFplcm9TbG9wZUVuZGluZztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGFzc3VtaW5nIGZvciBMb29wT25jZSBhdFN0YXJ0ID09IGF0RW5kID09IHRydWVcblxuXHRcdFx0aWYgKCBhdFN0YXJ0ICkge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gdGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IFdyYXBBcm91bmRFbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBhdEVuZCApIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSB0aGlzLnplcm9TbG9wZUF0RW5kID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgXHQgPSBXcmFwQXJvdW5kRW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfc2NoZWR1bGVGYWRpbmc6IGZ1bmN0aW9uICggZHVyYXRpb24sIHdlaWdodE5vdywgd2VpZ2h0VGhlbiApIHtcblxuXHRcdHZhciBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lLFxuXHRcdFx0aW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtcblxuXHRcdGlmICggaW50ZXJwb2xhbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdGludGVycG9sYW50ID0gbWl4ZXIuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKTtcblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7XG5cblx0XHR9XG5cblx0XHR2YXIgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XG5cblx0XHR0aW1lc1sgMCBdID0gbm93O1xuXHRcdHZhbHVlc1sgMCBdID0gd2VpZ2h0Tm93O1xuXHRcdHRpbWVzWyAxIF0gPSBub3cgKyBkdXJhdGlvbjtcblx0XHR2YWx1ZXNbIDEgXSA9IHdlaWdodFRoZW47XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogUGxheWVyIGZvciBBbmltYXRpb25DbGlwcy5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbk1peGVyKCByb290ICkge1xuXG5cdHRoaXMuX3Jvb3QgPSByb290O1xuXHR0aGlzLl9pbml0TWVtb3J5TWFuYWdlcigpO1xuXHR0aGlzLl9hY2N1SW5kZXggPSAwO1xuXG5cdHRoaXMudGltZSA9IDA7XG5cblx0dGhpcy50aW1lU2NhbGUgPSAxLjA7XG5cbn1cblxuQW5pbWF0aW9uTWl4ZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEFuaW1hdGlvbk1peGVyLFxuXG5cdF9iaW5kQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiwgcHJvdG90eXBlQWN0aW9uICkge1xuXG5cdFx0dmFyIHJvb3QgPSBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0dHJhY2tzID0gYWN0aW9uLl9jbGlwLnRyYWNrcyxcblx0XHRcdG5UcmFja3MgPSB0cmFja3MubGVuZ3RoLFxuXHRcdFx0YmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3MsXG5cdFx0XHRpbnRlcnBvbGFudHMgPSBhY3Rpb24uX2ludGVycG9sYW50cyxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXHRcdFx0YmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nc0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IHt9O1xuXHRcdFx0YmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0gPSBiaW5kaW5nc0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0dmFyIHRyYWNrID0gdHJhY2tzWyBpIF0sXG5cdFx0XHRcdHRyYWNrTmFtZSA9IHRyYWNrLm5hbWUsXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gZXhpc3RpbmcgYmluZGluZywgbWFrZSBzdXJlIHRoZSBjYWNoZSBrbm93c1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHQrKyBiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xuXHRcdFx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHBhdGggPSBwcm90b3R5cGVBY3Rpb24gJiYgcHJvdG90eXBlQWN0aW9uLlxuXHRcdFx0XHRcdF9wcm9wZXJ0eUJpbmRpbmdzWyBpIF0uYmluZGluZy5wYXJzZWRQYXRoO1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBuZXcgUHJvcGVydHlNaXhlcihcblx0XHRcdFx0XHRQcm9wZXJ0eUJpbmRpbmcuY3JlYXRlKCByb290LCB0cmFja05hbWUsIHBhdGggKSxcblx0XHRcdFx0XHR0cmFjay5WYWx1ZVR5cGVOYW1lLCB0cmFjay5nZXRWYWx1ZVNpemUoKSApO1xuXG5cdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQmluZGluZyggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApO1xuXG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGludGVycG9sYW50c1sgaSBdLnJlc3VsdEJ1ZmZlciA9IGJpbmRpbmcuYnVmZmVyO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X2FjdGl2YXRlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdGlmICggISB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdGlmICggYWN0aW9uLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIHRoaXMgYWN0aW9uIGhhcyBiZWVuIGZvcmdvdHRlbiBieSB0aGUgY2FjaGUsIGJ1dCB0aGUgdXNlclxuXHRcdFx0XHQvLyBhcHBlYXJzIHRvIGJlIHN0aWxsIHVzaW5nIGl0IC0+IHJlYmluZFxuXG5cdFx0XHRcdHZhciByb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQsXG5cdFx0XHRcdFx0Y2xpcFV1aWQgPSBhY3Rpb24uX2NsaXAudXVpZCxcblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRcdFx0dGhpcy5fYmluZEFjdGlvbiggYWN0aW9uLFxuXHRcdFx0XHRcdGFjdGlvbnNGb3JDbGlwICYmIGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdICk7XG5cblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBpbmNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZy51c2VDb3VudCArKyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHRoaXMuX2xlbmRCaW5kaW5nKCBiaW5kaW5nICk7XG5cdFx0XHRcdFx0YmluZGluZy5zYXZlT3JpZ2luYWxTdGF0ZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9sZW5kQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdF9kZWFjdGl2YXRlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdGlmICggdGhpcy5faXNBY3RpdmVBY3Rpb24oIGFjdGlvbiApICkge1xuXG5cdFx0XHR2YXIgYmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3M7XG5cblx0XHRcdC8vIGRlY3JlbWVudCByZWZlcmVuY2UgY291bnRzIC8gc29ydCBvdXQgc3RhdGVcblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR2YXIgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCAtLSBiaW5kaW5nLnVzZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuX3Rha2VCYWNrQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl90YWtlQmFja0FjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvLyBNZW1vcnkgbWFuYWdlclxuXG5cdF9pbml0TWVtb3J5TWFuYWdlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5fYWN0aW9ucyA9IFtdOyAvLyAnbkFjdGl2ZUFjdGlvbnMnIGZvbGxvd2VkIGJ5IGluYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cblx0XHR0aGlzLl9hY3Rpb25zQnlDbGlwID0ge307XG5cdFx0Ly8gaW5zaWRlOlxuXHRcdC8vIHtcblx0XHQvLyBcdGtub3duQWN0aW9uczogQXJyYXk8IEFuaW1hdGlvbkFjdGlvbiA+IC0gdXNlZCBhcyBwcm90b3R5cGVzXG5cdFx0Ly8gXHRhY3Rpb25CeVJvb3Q6IEFuaW1hdGlvbkFjdGlvbiAtIGxvb2t1cFxuXHRcdC8vIH1cblxuXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XG5cblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxuXG5cblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxuXHRcdHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzID0gMDtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR0aGlzLnN0YXRzID0ge1xuXG5cdFx0XHRhY3Rpb25zOiB7XG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fYWN0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQWN0aW9ucztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YmluZGluZ3M6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNvbnRyb2xJbnRlcnBvbGFudHM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9jb250cm9sSW50ZXJwb2xhbnRzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSxcblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBmb3IgQW5pbWF0aW9uQWN0aW9uIG9iamVjdHNcblxuXHRfaXNBY3RpdmVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0dmFyIGluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4O1xuXHRcdHJldHVybiBpbmRleCAhPT0gbnVsbCAmJiBpbmRleCA8IHRoaXMuX25BY3RpdmVBY3Rpb25zO1xuXG5cdH0sXG5cblx0X2FkZEluYWN0aXZlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGFjdGlvbnNGb3JDbGlwID0ge1xuXG5cdFx0XHRcdGtub3duQWN0aW9uczogWyBhY3Rpb24gXSxcblx0XHRcdFx0YWN0aW9uQnlSb290OiB7fVxuXG5cdFx0XHR9O1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSAwO1xuXG5cdFx0XHRhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdID0gYWN0aW9uc0ZvckNsaXA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBrbm93bkFjdGlvbnMubGVuZ3RoO1xuXHRcdFx0a25vd25BY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gYWN0aW9ucy5sZW5ndGg7XG5cdFx0YWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcblxuXHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSA9IGFjdGlvbjtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXSxcblx0XHRcdGNhY2hlSW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7XG5cblx0XHRsYXN0SW5hY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xuXHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbnVsbDtcblxuXG5cdFx0dmFyIGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSxcblx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnMsXG5cblx0XHRcdGxhc3RLbm93bkFjdGlvbiA9XG5cdFx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXBbIGtub3duQWN0aW9uc0ZvckNsaXAubGVuZ3RoIC0gMSBdLFxuXG5cdFx0XHRieUNsaXBDYWNoZUluZGV4ID0gYWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4O1xuXG5cdFx0bGFzdEtub3duQWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gYnlDbGlwQ2FjaGVJbmRleDtcblx0XHRrbm93bkFjdGlvbnNGb3JDbGlwWyBieUNsaXBDYWNoZUluZGV4IF0gPSBsYXN0S25vd25BY3Rpb247XG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcC5wb3AoKTtcblxuXHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7XG5cblxuXHRcdHZhciBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3QsXG5cdFx0XHRyb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQ7XG5cblx0XHRkZWxldGUgYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0aWYgKCAtLSBiaW5kaW5nLnJlZmVyZW5jZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfbGVuZEFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyA+fCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyAgICAgICAgICAgICAgICAgcyAgICAgICAgYVxuXHRcdC8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgICAgICAgICAgYSAgICAgICAgc1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyArKyxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdID0gYWN0aW9uO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRhY3Rpb25zWyBwcmV2SW5kZXggXSA9IGZpcnN0SW5hY3RpdmVBY3Rpb247XG5cblx0fSxcblxuXHRfdGFrZUJhY2tBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0Ly8gWyAgYWN0aXZlIGFjdGlvbnMgIHwgaW5hY3RpdmUgYWN0aW9ucyBdXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8PCBpbmFjdGl2ZSBhY3Rpb25zICBdXG5cdFx0Ly8gICAgICAgIGEgICAgICAgIHNcblx0XHQvLyAgICAgICAgIDwtc3dhcC0+XG5cdFx0Ly8gICAgICAgIHMgICAgICAgIGFcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdHByZXZJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXG5cblx0XHRcdGxhc3RBY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcblx0XHRhY3Rpb25zWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGFjdGlvbjtcblxuXHRcdGxhc3RBY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YWN0aW9uc1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlQWN0aW9uO1xuXG5cdH0sXG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0c1xuXG5cdF9hZGRJbmFjdGl2ZUJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApIHtcblxuXHRcdHZhciBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSxcblxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGlmICggYmluZGluZ0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0ge307XG5cdFx0XHRiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSA9IGJpbmRpbmdCeU5hbWU7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXSA9IGJpbmRpbmc7XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmcgKTtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJvcEJpbmRpbmcgPSBiaW5kaW5nLmJpbmRpbmcsXG5cdFx0XHRyb290VXVpZCA9IHByb3BCaW5kaW5nLnJvb3ROb2RlLnV1aWQsXG5cdFx0XHR0cmFja05hbWUgPSBwcm9wQmluZGluZy5wYXRoLFxuXHRcdFx0YmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0sXG5cblx0XHRcdGxhc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgYmluZGluZ3MubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXg7XG5cblx0XHRsYXN0SW5hY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcblx0XHRiaW5kaW5nc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQmluZGluZztcblx0XHRiaW5kaW5ncy5wb3AoKTtcblxuXHRcdGRlbGV0ZSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblxuXHRcdHJlbW92ZV9lbXB0eV9tYXA6IHtcblxuXHRcdFx0Zm9yICggdmFyIF8gaW4gYmluZGluZ0J5TmFtZSApIGJyZWFrIHJlbW92ZV9lbXB0eV9tYXA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXHRcdFx0ZGVsZXRlIGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X2xlbmRCaW5kaW5nOiBmdW5jdGlvbiAoIGJpbmRpbmcgKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncyArKyxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRmaXJzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRiaW5kaW5nc1sgcHJldkluZGV4IF0gPSBmaXJzdEluYWN0aXZlQmluZGluZztcblxuXHR9LFxuXG5cdF90YWtlQmFja0JpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLFxuXG5cdFx0XHRsYXN0QWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGxhc3RBY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVCaW5kaW5nO1xuXG5cdH0sXG5cblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBvZiBJbnRlcnBvbGFudHMgZm9yIHdlaWdodCBhbmQgdGltZSBzY2FsZVxuXG5cdF9sZW5kQ29udHJvbEludGVycG9sYW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzICsrLFxuXHRcdFx0aW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcblx0XHRcdFx0bmV3IEZsb2F0MzJBcnJheSggMiApLCBuZXcgRmxvYXQzMkFycmF5KCAyICksXG5cdFx0XHRcdDEsIHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgKTtcblxuXHRcdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdFx0aW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVycG9sYW50O1xuXG5cdH0sXG5cblx0X3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50OiBmdW5jdGlvbiAoIGludGVycG9sYW50ICkge1xuXG5cdFx0dmFyIGludGVycG9sYW50cyA9IHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsXG5cdFx0XHRwcmV2SW5kZXggPSBpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzLFxuXG5cdFx0XHRsYXN0QWN0aXZlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBpbnRlcnBvbGFudDtcblxuXHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0aW50ZXJwb2xhbnRzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVJbnRlcnBvbGFudDtcblxuXHR9LFxuXG5cdF9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyOiBuZXcgRmxvYXQzMkFycmF5KCAxICksXG5cblx0Ly8gcmV0dXJuIGFuIGFjdGlvbiBmb3IgYSBjbGlwIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gcm9vdCB0YXJnZXRcblx0Ly8gb2JqZWN0ICh0aGlzIG1ldGhvZCBhbGxvY2F0ZXMgYSBsb3Qgb2YgZHluYW1pYyBtZW1vcnkgaW4gY2FzZSBhXG5cdC8vIHByZXZpb3VzbHkgdW5rbm93biBjbGlwL3Jvb3QgY29tYmluYXRpb24gaXMgc3BlY2lmaWVkKVxuXHRjbGlwQWN0aW9uOiBmdW5jdGlvbiAoIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdHZhciByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcblxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcCxcblxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwT2JqZWN0ICE9PSBudWxsID8gY2xpcE9iamVjdC51dWlkIDogY2xpcCxcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLFxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gbnVsbDtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGV4aXN0aW5nQWN0aW9uID1cblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRcdGlmICggZXhpc3RpbmdBY3Rpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdBY3Rpb247XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gd2Uga25vdyB0aGUgY2xpcCwgc28gd2UgZG9uJ3QgaGF2ZSB0byBwYXJzZSBhbGxcblx0XHRcdC8vIHRoZSBiaW5kaW5ncyBhZ2FpbiBidXQgY2FuIGp1c3QgY29weVxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWyAwIF07XG5cblx0XHRcdC8vIGFsc28sIHRha2UgdGhlIGNsaXAgZnJvbSB0aGUgcHJvdG90eXBlIGFjdGlvblxuXHRcdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsIClcblx0XHRcdFx0Y2xpcE9iamVjdCA9IHByb3RvdHlwZUFjdGlvbi5fY2xpcDtcblxuXHRcdH1cblxuXHRcdC8vIGNsaXAgbXVzdCBiZSBrbm93biB3aGVuIHNwZWNpZmllZCB2aWEgc3RyaW5nXG5cdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBhbGxvY2F0ZSBhbGwgcmVzb3VyY2VzIHJlcXVpcmVkIHRvIHJ1biBpdFxuXHRcdHZhciBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKCB0aGlzLCBjbGlwT2JqZWN0LCBvcHRpb25hbFJvb3QgKTtcblxuXHRcdHRoaXMuX2JpbmRBY3Rpb24oIG5ld0FjdGlvbiwgcHJvdG90eXBlQWN0aW9uICk7XG5cblx0XHQvLyBhbmQgbWFrZSB0aGUgYWN0aW9uIGtub3duIHRvIHRoZSBtZW1vcnkgbWFuYWdlclxuXHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBuZXdBY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0cmV0dXJuIG5ld0FjdGlvbjtcblxuXHR9LFxuXG5cdC8vIGdldCBhbiBleGlzdGluZyBhY3Rpb25cblx0ZXhpc3RpbmdBY3Rpb246IGZ1bmN0aW9uICggY2xpcCwgb3B0aW9uYWxSb290ICkge1xuXG5cdFx0dmFyIHJvb3QgPSBvcHRpb25hbFJvb3QgfHwgdGhpcy5fcm9vdCxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXG5cdFx0XHRjbGlwT2JqZWN0ID0gdHlwZW9mIGNsaXAgPT09ICdzdHJpbmcnID9cblx0XHRcdFx0QW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwLFxuXG5cdFx0XHRjbGlwVXVpZCA9IGNsaXBPYmplY3QgPyBjbGlwT2JqZWN0LnV1aWQgOiBjbGlwLFxuXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF0gfHwgbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH0sXG5cblx0Ly8gZGVhY3RpdmF0ZXMgYWxsIHByZXZpb3VzbHkgc2NoZWR1bGVkIGFjdGlvbnNcblx0c3RvcEFsbEFjdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSB0aGlzLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cdFx0dGhpcy5fbkFjdGl2ZUJpbmRpbmdzID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkFjdGlvbnM7ICsrIGkgKSB7XG5cblx0XHRcdGFjdGlvbnNbIGkgXS5yZXNldCgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuQmluZGluZ3M7ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0udXNlQ291bnQgPSAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBhZHZhbmNlIHRoZSB0aW1lIGFuZCB1cGRhdGUgYXBwbHkgdGhlIGFuaW1hdGlvblxuXHR1cGRhdGU6IGZ1bmN0aW9uICggZGVsdGFUaW1lICkge1xuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblxuXHRcdFx0dGltZSA9IHRoaXMudGltZSArPSBkZWx0YVRpbWUsXG5cdFx0XHR0aW1lRGlyZWN0aW9uID0gTWF0aC5zaWduKCBkZWx0YVRpbWUgKSxcblxuXHRcdFx0YWNjdUluZGV4ID0gdGhpcy5fYWNjdUluZGV4IF49IDE7XG5cblx0XHQvLyBydW4gYWN0aXZlIGFjdGlvbnNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkFjdGlvbnM7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBhY3Rpb24gPSBhY3Rpb25zWyBpIF07XG5cblx0XHRcdGFjdGlvbi5fdXBkYXRlKCB0aW1lLCBkZWx0YVRpbWUsIHRpbWVEaXJlY3Rpb24sIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLmFwcGx5KCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRoaXMgbWl4ZXIncyByb290IHRhcmdldCBvYmplY3Rcblx0Z2V0Um9vdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3Q7XG5cblx0fSxcblxuXHQvLyBmcmVlIGFsbCByZXNvdXJjZXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIGNsaXBcblx0dW5jYWNoZUNsaXA6IGZ1bmN0aW9uICggY2xpcCApIHtcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGNsaXBVdWlkID0gY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGp1c3QgY2FsbGluZyBfcmVtb3ZlSW5hY3RpdmVBY3Rpb24gd291bGQgbWVzcyB1cCB0aGVcblx0XHRcdC8vIGl0ZXJhdGlvbiBzdGF0ZSBhbmQgYWxzbyByZXF1aXJlIHVwZGF0aW5nIHRoZSBzdGF0ZSB3ZSBjYW5cblx0XHRcdC8vIGp1c3QgdGhyb3cgYXdheVxuXG5cdFx0XHR2YXIgYWN0aW9uc1RvUmVtb3ZlID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhY3Rpb25zVG9SZW1vdmUubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBhY3Rpb24gPSBhY3Rpb25zVG9SZW1vdmVbIGkgXTtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0XHR2YXIgY2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblx0XHRcdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXHRcdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0XHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRcdFx0YWN0aW9ucy5wb3AoKTtcblxuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgcm9vdCB0YXJnZXQgb2JqZWN0XG5cdHVuY2FjaGVSb290OiBmdW5jdGlvbiAoIHJvb3QgKSB7XG5cblx0XHR2YXIgcm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcDtcblxuXHRcdGZvciAoIHZhciBjbGlwVXVpZCBpbiBhY3Rpb25zQnlDbGlwICkge1xuXG5cdFx0XHR2YXIgYWN0aW9uQnlSb290ID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXS5hY3Rpb25CeVJvb3QsXG5cdFx0XHRcdGFjdGlvbiA9IGFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdFx0aWYgKCBhY3Rpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRpZiAoIGJpbmRpbmdCeU5hbWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lICkge1xuXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIHJlbW92ZSBhIHRhcmdldGVkIGNsaXAgZnJvbSB0aGUgY2FjaGVcblx0dW5jYWNoZUFjdGlvbjogZnVuY3Rpb24gKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHR2YXIgYWN0aW9uID0gdGhpcy5leGlzdGluZ0FjdGlvbiggY2xpcCwgb3B0aW9uYWxSb290ICk7XG5cblx0XHRpZiAoIGFjdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBVbmlmb3JtKCB2YWx1ZSApIHtcblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiBUeXBlIHBhcmFtZXRlciBpcyBubyBsb25nZXIgbmVlZGVkLicgKTtcblx0XHR2YWx1ZSA9IGFyZ3VtZW50c1sgMSBdO1xuXG5cdH1cblxuXHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cbn1cblxuVW5pZm9ybS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyBVbmlmb3JtKCB0aGlzLnZhbHVlLmNsb25lID09PSB1bmRlZmluZWQgPyB0aGlzLnZhbHVlIDogdGhpcy52YWx1ZS5jbG9uZSgpICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSc7XG5cdHRoaXMubWF4SW5zdGFuY2VkQ291bnQgPSB1bmRlZmluZWQ7XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksXG5cblx0aXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tYXhJbnN0YW5jZWRDb3VudCA9IHNvdXJjZS5tYXhJbnN0YW5jZWRDb3VudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciggYXJyYXksIHN0cmlkZSwgbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRJbnRlcmxlYXZlZEJ1ZmZlci5jYWxsKCB0aGlzLCBhcnJheSwgc3RyaWRlICk7XG5cblx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gbWVzaFBlckF0dHJpYnV0ZSB8fCAxO1xuXG59XG5cbkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLFxuXG5cdGlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IHNvdXJjZS5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQsIG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0aWYgKCB0eXBlb2YgKCBub3JtYWxpemVkICkgPT09ICdudW1iZXInICkge1xuXG5cdFx0bWVzaFBlckF0dHJpYnV0ZSA9IG5vcm1hbGl6ZWQ7XG5cblx0XHRub3JtYWxpemVkID0gZmFsc2U7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlOiBUaGUgY29uc3RydWN0b3Igbm93IGV4cGVjdHMgbm9ybWFsaXplZCBhcyB0aGUgdGhpcmQgYXJndW1lbnQuJyApO1xuXG5cdH1cblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gbWVzaFBlckF0dHJpYnV0ZSB8fCAxO1xuXG59XG5cbkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLFxuXG5cdGlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3Igc3RlcGhvbWkgLyBodHRwOi8vc3RlcGhhbmVnaW5pZXIuY29tL1xuICovXG5cbmZ1bmN0aW9uIFJheWNhc3Rlciggb3JpZ2luLCBkaXJlY3Rpb24sIG5lYXIsIGZhciApIHtcblxuXHR0aGlzLnJheSA9IG5ldyBSYXkoIG9yaWdpbiwgZGlyZWN0aW9uICk7XG5cdC8vIGRpcmVjdGlvbiBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQgKGZvciBhY2N1cmF0ZSBkaXN0YW5jZSBjYWxjdWxhdGlvbnMpXG5cblx0dGhpcy5uZWFyID0gbmVhciB8fCAwO1xuXHR0aGlzLmZhciA9IGZhciB8fCBJbmZpbml0eTtcblxuXHR0aGlzLnBhcmFtcyA9IHtcblx0XHRNZXNoOiB7fSxcblx0XHRMaW5lOiB7fSxcblx0XHRMT0Q6IHt9LFxuXHRcdFBvaW50czogeyB0aHJlc2hvbGQ6IDEgfSxcblx0XHRTcHJpdGU6IHt9XG5cdH07XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIHRoaXMucGFyYW1zLCB7XG5cdFx0UG9pbnRDbG91ZDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5Y2FzdGVyOiBwYXJhbXMuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIHBhcmFtcy5Qb2ludHMuJyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5Qb2ludHM7XG5cblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcblxufVxuXG5mdW5jdGlvbiBhc2NTb3J0KCBhLCBiICkge1xuXG5cdHJldHVybiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZTtcblxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RPYmplY3QoIG9iamVjdCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKSB7XG5cblx0aWYgKCBvYmplY3QudmlzaWJsZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0b2JqZWN0LnJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApO1xuXG5cdGlmICggcmVjdXJzaXZlID09PSB0cnVlICkge1xuXG5cdFx0dmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aW50ZXJzZWN0T2JqZWN0KCBjaGlsZHJlblsgaSBdLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRydWUgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUmF5Y2FzdGVyLnByb3RvdHlwZSwge1xuXG5cdGxpbmVQcmVjaXNpb246IDEsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG9yaWdpbiwgZGlyZWN0aW9uICkge1xuXG5cdFx0Ly8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucylcblxuXHRcdHRoaXMucmF5LnNldCggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblxuXHR9LFxuXG5cdHNldEZyb21DYW1lcmE6IGZ1bmN0aW9uICggY29vcmRzLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoICggY2FtZXJhICYmIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkgKSB7XG5cblx0XHRcdHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0dGhpcy5yYXkuZGlyZWN0aW9uLnNldCggY29vcmRzLngsIGNvb3Jkcy55LCAwLjUgKS51bnByb2plY3QoIGNhbWVyYSApLnN1YiggdGhpcy5yYXkub3JpZ2luICkubm9ybWFsaXplKCk7XG5cblx0XHR9IGVsc2UgaWYgKCAoIGNhbWVyYSAmJiBjYW1lcmEuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSApIHtcblxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldCggY29vcmRzLngsIGNvb3Jkcy55LCAoIGNhbWVyYS5uZWFyICsgY2FtZXJhLmZhciApIC8gKCBjYW1lcmEubmVhciAtIGNhbWVyYS5mYXIgKSApLnVucHJvamVjdCggY2FtZXJhICk7IC8vIHNldCBvcmlnaW4gaW4gcGxhbmUgb2YgY2FtZXJhXG5cdFx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCAwLCAwLCAtIDEgKS50cmFuc2Zvcm1EaXJlY3Rpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlJheWNhc3RlcjogVW5zdXBwb3J0ZWQgY2FtZXJhIHR5cGUuJyApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0aW50ZXJzZWN0T2JqZWN0OiBmdW5jdGlvbiAoIG9iamVjdCwgcmVjdXJzaXZlLCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdHZhciBpbnRlcnNlY3RzID0gb3B0aW9uYWxUYXJnZXQgfHwgW107XG5cblx0XHRpbnRlcnNlY3RPYmplY3QoIG9iamVjdCwgdGhpcywgaW50ZXJzZWN0cywgcmVjdXJzaXZlICk7XG5cblx0XHRpbnRlcnNlY3RzLnNvcnQoIGFzY1NvcnQgKTtcblxuXHRcdHJldHVybiBpbnRlcnNlY3RzO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0T2JqZWN0czogZnVuY3Rpb24gKCBvYmplY3RzLCByZWN1cnNpdmUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGludGVyc2VjdHMgPSBvcHRpb25hbFRhcmdldCB8fCBbXTtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggb2JqZWN0cyApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHM6IG9iamVjdHMgaXMgbm90IGFuIEFycmF5LicgKTtcblx0XHRcdHJldHVybiBpbnRlcnNlY3RzO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3RPYmplY3QoIG9iamVjdHNbIGkgXSwgdGhpcywgaW50ZXJzZWN0cywgcmVjdXJzaXZlICk7XG5cblx0XHR9XG5cblx0XHRpbnRlcnNlY3RzLnNvcnQoIGFzY1NvcnQgKTtcblxuXHRcdHJldHVybiBpbnRlcnNlY3RzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BoZXJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXG4gKlxuICogVGhlIHBvbGFyIGFuZ2xlIChwaGkpIGlzIG1lYXN1cmVkIGZyb20gdGhlIHBvc2l0aXZlIHktYXhpcy4gVGhlIHBvc2l0aXZlIHktYXhpcyBpcyB1cC5cbiAqIFRoZSBhemltdXRoYWwgYW5nbGUgKHRoZXRhKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXouXG4gKi9cblxuZnVuY3Rpb24gU3BoZXJpY2FsKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0dGhpcy5yYWRpdXMgPSAoIHJhZGl1cyAhPT0gdW5kZWZpbmVkICkgPyByYWRpdXMgOiAxLjA7XG5cdHRoaXMucGhpID0gKCBwaGkgIT09IHVuZGVmaW5lZCApID8gcGhpIDogMDsgLy8gcG9sYXIgYW5nbGVcblx0dGhpcy50aGV0YSA9ICggdGhldGEgIT09IHVuZGVmaW5lZCApID8gdGhldGEgOiAwOyAvLyBhemltdXRoYWwgYW5nbGVcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG5PYmplY3QuYXNzaWduKCBTcGhlcmljYWwucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMucGhpID0gcGhpO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggb3RoZXIgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IG90aGVyLnJhZGl1cztcblx0XHR0aGlzLnBoaSA9IG90aGVyLnBoaTtcblx0XHR0aGlzLnRoZXRhID0gb3RoZXIudGhldGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWUgRVBTIGFuZCBQSS1FUFNcblx0bWFrZVNhZmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBFUFMgPSAwLjAwMDAwMTtcblx0XHR0aGlzLnBoaSA9IE1hdGgubWF4KCBFUFMsIE1hdGgubWluKCBNYXRoLlBJIC0gRVBTLCB0aGlzLnBoaSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21WZWN0b3IzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB2LngsIHYueSwgdi56ICk7XG5cblx0fSxcblxuXHRzZXRGcm9tQ2FydGVzaWFuQ29vcmRzOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggeCAqIHggKyB5ICogeSArIHogKiB6ICk7XG5cblx0XHRpZiAoIHRoaXMucmFkaXVzID09PSAwICkge1xuXG5cdFx0XHR0aGlzLnRoZXRhID0gMDtcblx0XHRcdHRoaXMucGhpID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKCB4LCB6ICk7XG5cdFx0XHR0aGlzLnBoaSA9IE1hdGguYWNvcyggX01hdGguY2xhbXAoIHkgLyB0aGlzLnJhZGl1cywgLSAxLCAxICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICogUmVmOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DeWxpbmRyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxuICpcbiAqL1xuXG5mdW5jdGlvbiBDeWxpbmRyaWNhbCggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHR0aGlzLnJhZGl1cyA9ICggcmFkaXVzICE9PSB1bmRlZmluZWQgKSA/IHJhZGl1cyA6IDEuMDsgLy8gZGlzdGFuY2UgZnJvbSB0aGUgb3JpZ2luIHRvIGEgcG9pbnQgaW4gdGhlIHgteiBwbGFuZVxuXHR0aGlzLnRoZXRhID0gKCB0aGV0YSAhPT0gdW5kZWZpbmVkICkgPyB0aGV0YSA6IDA7IC8vIGNvdW50ZXJjbG9ja3dpc2UgYW5nbGUgaW4gdGhlIHgteiBwbGFuZSBtZWFzdXJlZCBpbiByYWRpYW5zIGZyb20gdGhlIHBvc2l0aXZlIHotYXhpc1xuXHR0aGlzLnkgPSAoIHkgIT09IHVuZGVmaW5lZCApID8geSA6IDA7IC8vIGhlaWdodCBhYm92ZSB0aGUgeC16IHBsYW5lXG5cblx0cmV0dXJuIHRoaXM7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQ3lsaW5kcmljYWwucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHR0aGlzLnRoZXRhID0gdGhldGE7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggb3RoZXIgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IG90aGVyLnJhZGl1cztcblx0XHR0aGlzLnRoZXRhID0gb3RoZXIudGhldGE7XG5cdFx0dGhpcy55ID0gb3RoZXIueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTtcblxuXHR9LFxuXG5cdHNldEZyb21DYXJ0ZXNpYW5Db29yZHM6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCB4ICogeCArIHogKiB6ICk7XG5cdFx0dGhpcy50aGV0YSA9IE1hdGguYXRhbjIoIHgsIHogKTtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIEJveDIoIG1pbiwgbWF4ICkge1xuXG5cdHRoaXMubWluID0gKCBtaW4gIT09IHVuZGVmaW5lZCApID8gbWluIDogbmV3IFZlY3RvcjIoICsgSW5maW5pdHksICsgSW5maW5pdHkgKTtcblx0dGhpcy5tYXggPSAoIG1heCAhPT0gdW5kZWZpbmVkICkgPyBtYXggOiBuZXcgVmVjdG9yMiggLSBJbmZpbml0eSwgLSBJbmZpbml0eSApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEJveDIucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdFx0dmFyIGhhbGZTaXplID0gdjEuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRcdHRoaXMubWluLmNvcHkoIGNlbnRlciApLnN1YiggaGFsZlNpemUgKTtcblx0XHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXguY29weSggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlRW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gKyBJbmZpbml0eTtcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IC0gSW5maW5pdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGlzRW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRoaXMgaXMgYSBtb3JlIHJvYnVzdCBjaGVjayBmb3IgZW1wdHkgdGhhbiAoIHZvbHVtZSA8PSAwICkgYmVjYXVzZSB2b2x1bWUgY2FuIGdldCBwb3NpdGl2ZSB3aXRoIHR3byBuZWdhdGl2ZSBheGVzXG5cblx0XHRyZXR1cm4gKCB0aGlzLm1heC54IDwgdGhpcy5taW4ueCApIHx8ICggdGhpcy5tYXgueSA8IHRoaXMubWluLnkgKTtcblxuXHR9LFxuXG5cdGdldENlbnRlcjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZ2V0Q2VudGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5taW4sIHRoaXMubWF4ICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH0sXG5cblx0Z2V0U2l6ZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZ2V0U2l6ZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMubWF4LCB0aGlzLm1pbiApO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggcG9pbnQgKTtcblx0XHR0aGlzLm1heC5tYXgoIHBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGV4cGFuZEJ5VmVjdG9yOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy5taW4uYWRkU2NhbGFyKCAtIHNjYWxhciApO1xuXHRcdHRoaXMubWF4LmFkZFNjYWxhciggc2NhbGFyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gcG9pbnQueCA8IHRoaXMubWluLnggfHwgcG9pbnQueCA+IHRoaXMubWF4LnggfHxcblx0XHRcdHBvaW50LnkgPCB0aGlzLm1pbi55IHx8IHBvaW50LnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueTtcblxuXHR9LFxuXG5cdGdldFBhcmFtZXRlcjogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcblx0XHQvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLlxuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmdldFBhcmFtZXRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXG5cdFx0XHQoIHBvaW50LnggLSB0aGlzLm1pbi54ICkgLyAoIHRoaXMubWF4LnggLSB0aGlzLm1pbi54ICksXG5cdFx0XHQoIHBvaW50LnkgLSB0aGlzLm1pbi55ICkgLyAoIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55IClcblx0XHQpO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHQvLyB1c2luZyA0IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9uc1xuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdFx0dmFyIGNsYW1wZWRQb2ludCA9IHYxLmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXHRcdFx0cmV0dXJuIGNsYW1wZWRQb2ludC5zdWIoIHBvaW50ICkubGVuZ3RoKCk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRpbnRlcnNlY3Q6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWF4KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWluKCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVuaW9uOiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1heCggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcblx0XHR0aGlzLm1heC5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBMaW5lMyggc3RhcnQsIGVuZCApIHtcblxuXHR0aGlzLnN0YXJ0ID0gKCBzdGFydCAhPT0gdW5kZWZpbmVkICkgPyBzdGFydCA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMuZW5kID0gKCBlbmQgIT09IHVuZGVmaW5lZCApID8gZW5kIDogbmV3IFZlY3RvcjMoKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBMaW5lMy5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggc3RhcnQsIGVuZCApIHtcblxuXHRcdHRoaXMuc3RhcnQuY29weSggc3RhcnQgKTtcblx0XHR0aGlzLmVuZC5jb3B5KCBlbmQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdHRoaXMuc3RhcnQuY29weSggbGluZS5zdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGxpbmUuZW5kICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENlbnRlcjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmdldENlbnRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLnN0YXJ0LCB0aGlzLmVuZCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9LFxuXG5cdGRlbHRhOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuZGVsdGEoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmVuZCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG8oIHRoaXMuZW5kICk7XG5cblx0fSxcblxuXHRhdDogZnVuY3Rpb24gKCB0LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmF0KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcblxuXHR9LFxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBzdGFydFAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBzdGFydEVuZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciggcG9pbnQsIGNsYW1wVG9MaW5lICkge1xuXG5cdFx0XHRzdGFydFAuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMuc3RhcnQgKTtcblx0XHRcdHN0YXJ0RW5kLnN1YlZlY3RvcnMoIHRoaXMuZW5kLCB0aGlzLnN0YXJ0ICk7XG5cblx0XHRcdHZhciBzdGFydEVuZDIgPSBzdGFydEVuZC5kb3QoIHN0YXJ0RW5kICk7XG5cdFx0XHR2YXIgc3RhcnRFbmRfc3RhcnRQID0gc3RhcnRFbmQuZG90KCBzdGFydFAgKTtcblxuXHRcdFx0dmFyIHQgPSBzdGFydEVuZF9zdGFydFAgLyBzdGFydEVuZDI7XG5cblx0XHRcdGlmICggY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRcdFx0dCA9IF9NYXRoLmNsYW1wKCB0LCAwLCAxICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHQ7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCBjbGFtcFRvTGluZSwgdGFyZ2V0ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIoIHBvaW50LCBjbGFtcFRvTGluZSApO1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cdFx0dGhpcy5lbmQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGxpbmUgKSB7XG5cblx0XHRyZXR1cm4gbGluZS5zdGFydC5lcXVhbHMoIHRoaXMuc3RhcnQgKSAmJiBsaW5lLmVuZC5lcXVhbHMoIHRoaXMuZW5kICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBJbW1lZGlhdGVSZW5kZXJPYmplY3QoIG1hdGVyaWFsICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCAvKiByZW5kZXJDYWxsYmFjayAqLyApIHt9O1xuXG59XG5cbkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcbkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbW1lZGlhdGVSZW5kZXJPYmplY3Q7XG5cbkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBWZXJ0ZXhOb3JtYWxzSGVscGVyKCBvYmplY3QsIHNpemUsIGhleCwgbGluZXdpZHRoICkge1xuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdHRoaXMuc2l6ZSA9ICggc2l6ZSAhPT0gdW5kZWZpbmVkICkgPyBzaXplIDogMTtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmMDAwMDtcblxuXHR2YXIgd2lkdGggPSAoIGxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICkgPyBsaW5ld2lkdGggOiAxO1xuXG5cdC8vXG5cblx0dmFyIG5Ob3JtYWxzID0gMDtcblxuXHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcblxuXHRpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRuTm9ybWFscyA9IG9iakdlb21ldHJ5LmZhY2VzLmxlbmd0aCAqIDM7XG5cblx0fSBlbHNlIGlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdG5Ob3JtYWxzID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwuY291bnQ7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBuTm9ybWFscyAqIDIgKiAzLCAzICk7XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBwb3NpdGlvbnMgKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIGxpbmV3aWR0aDogd2lkdGggfSApICk7XG5cblx0Ly9cblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cblZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWZXJ0ZXhOb3JtYWxzSGVscGVyO1xuXG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0dmFyIGtleXMgPSBbICdhJywgJ2InLCAnYycgXTtcblxuXHRcdHRoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCB0aGlzLm9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5vYmplY3QubWF0cml4V29ybGQ7XG5cblx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHQvL1xuXG5cdFx0dmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciB2ZXJ0aWNlcyA9IG9iakdlb21ldHJ5LnZlcnRpY2VzO1xuXG5cdFx0XHR2YXIgZmFjZXMgPSBvYmpHZW9tZXRyeS5mYWNlcztcblxuXHRcdFx0dmFyIGlkeCA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmVydGV4ID0gdmVydGljZXNbIGZhY2VbIGtleXNbIGogXSBdIF07XG5cblx0XHRcdFx0XHR2YXIgbm9ybWFsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzWyBqIF07XG5cblx0XHRcdFx0XHR2MS5jb3B5KCB2ZXJ0ZXggKS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHR2Mi5jb3B5KCBub3JtYWwgKS5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCB0aGlzLnNpemUgKS5hZGQoIHYxICk7XG5cblx0XHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRcdFx0aWR4ID0gaWR4ICsgMTtcblxuXHRcdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2Mi54LCB2Mi55LCB2Mi56ICk7XG5cblx0XHRcdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIG9ialBvcyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdHZhciBvYmpOb3JtID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdHZhciBpZHggPSAwO1xuXG5cdFx0XHQvLyBmb3Igc2ltcGxpY2l0eSwgaWdub3JlIGluZGV4IGFuZCBkcmF3Y2FsbHMsIGFuZCByZW5kZXIgZXZlcnkgbm9ybWFsXG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBvYmpQb3MuY291bnQ7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR2MS5zZXQoIG9ialBvcy5nZXRYKCBqICksIG9ialBvcy5nZXRZKCBqICksIG9ialBvcy5nZXRaKCBqICkgKS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0djIuc2V0KCBvYmpOb3JtLmdldFgoIGogKSwgb2JqTm9ybS5nZXRZKCBqICksIG9iak5vcm0uZ2V0WiggaiApICk7XG5cblx0XHRcdFx0djIuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggdGhpcy5zaXplICkuYWRkKCB2MSApO1xuXG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdFx0aWR4ID0gaWR4ICsgMTtcblxuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjIueCwgdjIueSwgdjIueiApO1xuXG5cdFx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9O1xuXG59KCkgKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIFNwb3RMaWdodEhlbHBlciggbGlnaHQsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IFtcblx0XHQwLCAwLCAwLCBcdDAsIDAsIDEsXG5cdFx0MCwgMCwgMCwgXHQxLCAwLCAxLFxuXHRcdDAsIDAsIDAsXHQtIDEsIDAsIDEsXG5cdFx0MCwgMCwgMCwgXHQwLCAxLCAxLFxuXHRcdDAsIDAsIDAsIFx0MCwgLSAxLCAxXG5cdF07XG5cblx0Zm9yICggdmFyIGkgPSAwLCBqID0gMSwgbCA9IDMyOyBpIDwgbDsgaSArKywgaiArKyApIHtcblxuXHRcdHZhciBwMSA9ICggaSAvIGwgKSAqIE1hdGguUEkgKiAyO1xuXHRcdHZhciBwMiA9ICggaiAvIGwgKSAqIE1hdGguUEkgKiAyO1xuXG5cdFx0cG9zaXRpb25zLnB1c2goXG5cdFx0XHRNYXRoLmNvcyggcDEgKSwgTWF0aC5zaW4oIHAxICksIDEsXG5cdFx0XHRNYXRoLmNvcyggcDIgKSwgTWF0aC5zaW4oIHAyICksIDFcblx0XHQpO1xuXG5cdH1cblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlIH0gKTtcblxuXHR0aGlzLmNvbmUgPSBuZXcgTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0dGhpcy5hZGQoIHRoaXMuY29uZSApO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwb3RMaWdodEhlbHBlcjtcblxuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMuY29uZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cbn07XG5cblNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHR2YXIgY29uZUxlbmd0aCA9IHRoaXMubGlnaHQuZGlzdGFuY2UgPyB0aGlzLmxpZ2h0LmRpc3RhbmNlIDogMTAwMDtcblx0XHR2YXIgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7XG5cblx0XHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBjb25lV2lkdGgsIGNvbmVXaWR0aCwgY29uZUxlbmd0aCApO1xuXG5cdFx0dmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblxuXHRcdHRoaXMuY29uZS5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgU2VhbiBHcmlmZmluIC8gaHR0cDovL3R3aXR0ZXIuY29tL3NncmlmXG4gKiBAYXV0aG9yIE1pY2hhZWwgR3VlcnJlcm8gLyBodHRwOi8vcmVhbGl0eW1lbHRkb3duLmNvbVxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb25lTGlzdCggb2JqZWN0ICkge1xuXG5cdHZhciBib25lTGlzdCA9IFtdO1xuXG5cdGlmICggb2JqZWN0ICYmIG9iamVjdC5pc0JvbmUgKSB7XG5cblx0XHRib25lTGlzdC5wdXNoKCBvYmplY3QgKTtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2guYXBwbHkoIGJvbmVMaXN0LCBnZXRCb25lTGlzdCggb2JqZWN0LmNoaWxkcmVuWyBpIF0gKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYm9uZUxpc3Q7XG5cbn1cblxuZnVuY3Rpb24gU2tlbGV0b25IZWxwZXIoIG9iamVjdCApIHtcblxuXHR2YXIgYm9uZXMgPSBnZXRCb25lTGlzdCggb2JqZWN0ICk7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBjb2xvcnMgPSBbXTtcblxuXHR2YXIgY29sb3IxID0gbmV3IENvbG9yKCAwLCAwLCAxICk7XG5cdHZhciBjb2xvcjIgPSBuZXcgQ29sb3IoIDAsIDEsIDAgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2YXIgYm9uZSA9IGJvbmVzWyBpIF07XG5cblx0XHRpZiAoIGJvbmUucGFyZW50ICYmIGJvbmUucGFyZW50LmlzQm9uZSApIHtcblxuXHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yMS5yLCBjb2xvcjEuZywgY29sb3IxLmIgKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvcjIuciwgY29sb3IyLmcsIGNvbG9yMi5iICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMsIGRlcHRoVGVzdDogZmFsc2UsIGRlcHRoV3JpdGU6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMucm9vdCA9IG9iamVjdDtcblx0dGhpcy5ib25lcyA9IGJvbmVzO1xuXG5cdHRoaXMubWF0cml4ID0gb2JqZWN0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxufVxuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTa2VsZXRvbkhlbHBlcjtcblxuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBib25lTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIG1hdHJpeFdvcmxkSW52ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0dmFyIGJvbmVzID0gdGhpcy5ib25lcztcblxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRtYXRyaXhXb3JsZEludi5nZXRJbnZlcnNlKCB0aGlzLnJvb3QubWF0cml4V29ybGQgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0Ym9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXhXb3JsZEludiwgYm9uZS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBib25lTWF0cml4ICk7XG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaiwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdGJvbmVNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggbWF0cml4V29ybGRJbnYsIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGJvbmVNYXRyaXggKTtcblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBqICsgMSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdGogKz0gMjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFBvaW50TGlnaHRIZWxwZXIoIGxpZ2h0LCBzcGhlcmVTaXplLCBjb2xvciApIHtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KCBzcGhlcmVTaXplLCA0LCAyICk7XG5cdHZhciBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UgfSApO1xuXG5cdE1lc2guY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0dGhpcy5tYXRyaXggPSB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG5cblx0Lypcblx0dmFyIGRpc3RhbmNlR2VvbWV0cnkgPSBuZXcgVEhSRUUuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSggMSwgMiApO1xuXHR2YXIgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4Q29sb3IsIGZvZzogZmFsc2UsIHdpcmVmcmFtZTogdHJ1ZSwgb3BhY2l0eTogMC4xLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0dGhpcy5saWdodFNwaGVyZSA9IG5ldyBUSFJFRS5NZXNoKCBidWxiR2VvbWV0cnksIGJ1bGJNYXRlcmlhbCApO1xuXHR0aGlzLmxpZ2h0RGlzdGFuY2UgPSBuZXcgVEhSRUUuTWVzaCggZGlzdGFuY2VHZW9tZXRyeSwgZGlzdGFuY2VNYXRlcmlhbCApO1xuXG5cdHZhciBkID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0aWYgKCBkID09PSAwLjAgKSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2Uuc2NhbGUuc2V0KCBkLCBkLCBkICk7XG5cblx0fVxuXG5cdHRoaXMuYWRkKCB0aGlzLmxpZ2h0RGlzdGFuY2UgKTtcblx0Ki9cblxufVxuXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1lc2gucHJvdG90eXBlICk7XG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50TGlnaHRIZWxwZXI7XG5cblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHR9XG5cblx0Lypcblx0dmFyIGQgPSB0aGlzLmxpZ2h0LmRpc3RhbmNlO1xuXG5cdGlmICggZCA9PT0gMC4wICkge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSB0cnVlO1xuXHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHR9XG5cdCovXG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gUmVjdEFyZWFMaWdodEhlbHBlciggbGlnaHQsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UgfSApO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggNSAqIDMgKSwgMyApICk7XG5cblx0dGhpcy5saW5lID0gbmV3IExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHR0aGlzLmFkZCggdGhpcy5saW5lICk7XG5cblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cblJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY3RBcmVhTGlnaHRIZWxwZXI7XG5cblJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuUmVjdEFyZWFMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdC8vIGNhbGN1bGF0ZSBuZXcgZGltZW5zaW9ucyBvZiB0aGUgaGVscGVyXG5cblx0dmFyIGh4ID0gdGhpcy5saWdodC53aWR0aCAqIDAuNTtcblx0dmFyIGh5ID0gdGhpcy5saWdodC5oZWlnaHQgKiAwLjU7XG5cblx0dmFyIHBvc2l0aW9uID0gdGhpcy5saW5lLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdHZhciBhcnJheSA9IHBvc2l0aW9uLmFycmF5O1xuXG5cdC8vIHVwZGF0ZSB2ZXJ0aWNlc1xuXG5cdGFycmF5WyAwIF0gPSBoeDsgYXJyYXlbIDEgXSA9IC0gaHk7IGFycmF5WyAyIF0gPSAwO1xuXHRhcnJheVsgMyBdID0gaHg7IGFycmF5WyA0IF0gPSBoeTsgYXJyYXlbIDUgXSA9IDA7XG5cdGFycmF5WyA2IF0gPSAtIGh4OyBhcnJheVsgNyBdID0gaHk7IGFycmF5WyA4IF0gPSAwO1xuXHRhcnJheVsgOSBdID0gLSBoeDsgYXJyYXlbIDEwIF0gPSAtIGh5OyBhcnJheVsgMTEgXSA9IDA7XG5cdGFycmF5WyAxMiBdID0gaHg7IGFycmF5WyAxMyBdID0gLSBoeTsgYXJyYXlbIDE0IF0gPSAwO1xuXG5cdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIEhlbWlzcGhlcmVMaWdodEhlbHBlciggbGlnaHQsIHNpemUsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggc2l6ZSApO1xuXHRnZW9tZXRyeS5yb3RhdGVZKCBNYXRoLlBJICogMC41ICk7XG5cblx0dGhpcy5tYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UgfSApO1xuXHRpZiAoIHRoaXMuY29sb3IgPT09IHVuZGVmaW5lZCApIHRoaXMubWF0ZXJpYWwudmVydGV4Q29sb3JzID0gVmVydGV4Q29sb3JzO1xuXG5cdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXHR2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggcG9zaXRpb24uY291bnQgKiAzICk7XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKSApO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhlbWlzcGhlcmVMaWdodEhlbHBlcjtcblxuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuY2hpbGRyZW5bIDAgXS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cbn07XG5cbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBjb2xvcjEgPSBuZXcgQ29sb3IoKTtcblx0dmFyIGNvbG9yMiA9IG5ldyBDb2xvcigpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR2YXIgbWVzaCA9IHRoaXMuY2hpbGRyZW5bIDAgXTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGNvbG9ycyA9IG1lc2guZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAnY29sb3InICk7XG5cblx0XHRcdGNvbG9yMS5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cdFx0XHRjb2xvcjIuY29weSggdGhpcy5saWdodC5ncm91bmRDb2xvciApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjb2xvcnMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBjb2xvciA9ICggaSA8ICggbCAvIDIgKSApID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0XHRcdGNvbG9ycy5zZXRYWVooIGksIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0bWVzaC5sb29rQXQoIHZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKS5uZWdhdGUoKSApO1xuXG5cdH07XG5cbn0oKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEdyaWRIZWxwZXIoIHNpemUsIGRpdmlzaW9ucywgY29sb3IxLCBjb2xvcjIgKSB7XG5cblx0c2l6ZSA9IHNpemUgfHwgMTA7XG5cdGRpdmlzaW9ucyA9IGRpdmlzaW9ucyB8fCAxMDtcblx0Y29sb3IxID0gbmV3IENvbG9yKCBjb2xvcjEgIT09IHVuZGVmaW5lZCA/IGNvbG9yMSA6IDB4NDQ0NDQ0ICk7XG5cdGNvbG9yMiA9IG5ldyBDb2xvciggY29sb3IyICE9PSB1bmRlZmluZWQgPyBjb2xvcjIgOiAweDg4ODg4OCApO1xuXG5cdHZhciBjZW50ZXIgPSBkaXZpc2lvbnMgLyAyO1xuXHR2YXIgc3RlcCA9IHNpemUgLyBkaXZpc2lvbnM7XG5cdHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdLCBjb2xvcnMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGogPSAwLCBrID0gLSBoYWxmU2l6ZTsgaSA8PSBkaXZpc2lvbnM7IGkgKyssIGsgKz0gc3RlcCApIHtcblxuXHRcdHZlcnRpY2VzLnB1c2goIC0gaGFsZlNpemUsIDAsIGssIGhhbGZTaXplLCAwLCBrICk7XG5cdFx0dmVydGljZXMucHVzaCggaywgMCwgLSBoYWxmU2l6ZSwgaywgMCwgaGFsZlNpemUgKTtcblxuXHRcdHZhciBjb2xvciA9IGkgPT09IGNlbnRlciA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cblx0fVxuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogVmVydGV4Q29sb3JzIH0gKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5HcmlkSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdyaWRIZWxwZXI7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHA6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIEBhdXRob3IgSGVjdGF0ZSAvIGh0dHA6Ly93d3cuZ2l0aHViLmNvbS9IZWN0YXRlXG4gKi9cblxuZnVuY3Rpb24gUG9sYXJHcmlkSGVscGVyKCByYWRpdXMsIHJhZGlhbHMsIGNpcmNsZXMsIGRpdmlzaW9ucywgY29sb3IxLCBjb2xvcjIgKSB7XG5cblx0cmFkaXVzID0gcmFkaXVzIHx8IDEwO1xuXHRyYWRpYWxzID0gcmFkaWFscyB8fCAxNjtcblx0Y2lyY2xlcyA9IGNpcmNsZXMgfHwgODtcblx0ZGl2aXNpb25zID0gZGl2aXNpb25zIHx8IDY0O1xuXHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSAhPT0gdW5kZWZpbmVkID8gY29sb3IxIDogMHg0NDQ0NDQgKTtcblx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgIT09IHVuZGVmaW5lZCA/IGNvbG9yMiA6IDB4ODg4ODg4ICk7XG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBjb2xvcnMgPSBbXTtcblxuXHR2YXIgeCwgejtcblx0dmFyIHYsIGksIGosIHIsIGNvbG9yO1xuXG5cdC8vIGNyZWF0ZSB0aGUgcmFkaWFsc1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IHJhZGlhbHM7IGkgKysgKSB7XG5cblx0XHR2ID0gKCBpIC8gcmFkaWFscyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0eCA9IE1hdGguc2luKCB2ICkgKiByYWRpdXM7XG5cdFx0eiA9IE1hdGguY29zKCB2ICkgKiByYWRpdXM7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXG5cdFx0Y29sb3IgPSAoIGkgJiAxICkgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0fVxuXG5cdC8vIGNyZWF0ZSB0aGUgY2lyY2xlc1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IGNpcmNsZXM7IGkgKysgKSB7XG5cblx0XHRjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdHIgPSByYWRpdXMgLSAoIHJhZGl1cyAvIGNpcmNsZXMgKiBpICk7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8IGRpdmlzaW9uczsgaiArKyApIHtcblxuXHRcdFx0Ly8gZmlyc3QgdmVydGV4XG5cblx0XHRcdHYgPSAoIGogLyBkaXZpc2lvbnMgKSAqICggTWF0aC5QSSAqIDIgKTtcblxuXHRcdFx0eCA9IE1hdGguc2luKCB2ICkgKiByO1xuXHRcdFx0eiA9IE1hdGguY29zKCB2ICkgKiByO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHQvLyBzZWNvbmQgdmVydGV4XG5cblx0XHRcdHYgPSAoICggaiArIDEgKSAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHI7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogVmVydGV4Q29sb3JzIH0gKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuUG9sYXJHcmlkSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcblBvbGFyR3JpZEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2xhckdyaWRIZWxwZXI7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIEZhY2VOb3JtYWxzSGVscGVyKCBvYmplY3QsIHNpemUsIGhleCwgbGluZXdpZHRoICkge1xuXG5cdC8vIEZhY2VOb3JtYWxzSGVscGVyIG9ubHkgc3VwcG9ydHMgVEhSRUUuR2VvbWV0cnlcblxuXHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHR0aGlzLnNpemUgPSAoIHNpemUgIT09IHVuZGVmaW5lZCApID8gc2l6ZSA6IDE7XG5cblx0dmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHhmZmZmMDA7XG5cblx0dmFyIHdpZHRoID0gKCBsaW5ld2lkdGggIT09IHVuZGVmaW5lZCApID8gbGluZXdpZHRoIDogMTtcblxuXHQvL1xuXG5cdHZhciBuTm9ybWFscyA9IDA7XG5cblx0dmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XG5cblx0aWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0bk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5mYWNlcy5sZW5ndGg7XG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZhY2VOb3JtYWxzSGVscGVyOiBvbmx5IFRIUkVFLkdlb21ldHJ5IGlzIHN1cHBvcnRlZC4gVXNlIFRIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIsIGluc3RlYWQuJyApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbk5vcm1hbHMgKiAyICogMywgMyApO1xuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBsaW5ld2lkdGg6IHdpZHRoIH0gKSApO1xuXG5cdC8vXG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmFjZU5vcm1hbHNIZWxwZXI7XG5cbkZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdG5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm9iamVjdC5tYXRyaXhXb3JsZDtcblxuXHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdC8vXG5cblx0XHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IG9iakdlb21ldHJ5LnZlcnRpY2VzO1xuXG5cdFx0dmFyIGZhY2VzID0gb2JqR2VvbWV0cnkuZmFjZXM7XG5cblx0XHR2YXIgaWR4ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0dmFyIG5vcm1hbCA9IGZhY2Uubm9ybWFsO1xuXG5cdFx0XHR2MS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5hIF0gKVxuXHRcdFx0XHQuYWRkKCB2ZXJ0aWNlc1sgZmFjZS5iIF0gKVxuXHRcdFx0XHQuYWRkKCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKVxuXHRcdFx0XHQuZGl2aWRlU2NhbGFyKCAzIClcblx0XHRcdFx0LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0djIuY29weSggbm9ybWFsICkuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggdGhpcy5zaXplICkuYWRkKCB2MSApO1xuXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjIueCwgdjIueSwgdjIueiApO1xuXG5cdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0fVxuXG5cdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH07XG5cbn0oKSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gRGlyZWN0aW9uYWxMaWdodEhlbHBlciggbGlnaHQsIHNpemUsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0aWYgKCBzaXplID09PSB1bmRlZmluZWQgKSBzaXplID0gMTtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggW1xuXHRcdC0gc2l6ZSwgc2l6ZSwgMCxcblx0XHRzaXplLCBzaXplLCAwLFxuXHRcdHNpemUsIC0gc2l6ZSwgMCxcblx0XHQtIHNpemUsIC0gc2l6ZSwgMCxcblx0XHQtIHNpemUsIHNpemUsIDBcblx0XSwgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UgfSApO1xuXG5cdHRoaXMubGlnaHRQbGFuZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0dGhpcy5hZGQoIHRoaXMubGlnaHRQbGFuZSApO1xuXG5cdGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMCwgMSBdLCAzICkgKTtcblxuXHR0aGlzLnRhcmdldExpbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdHRoaXMuYWRkKCB0aGlzLnRhcmdldExpbmUgKTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERpcmVjdGlvbmFsTGlnaHRIZWxwZXI7XG5cbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5saWdodFBsYW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2MyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdHYxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHYyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHR2My5zdWJWZWN0b3JzKCB2MiwgdjEgKTtcblxuXHRcdHRoaXMubGlnaHRQbGFuZS5sb29rQXQoIHYyICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblx0XHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnRhcmdldExpbmUubG9va0F0KCB2MiApO1xuXHRcdHRoaXMudGFyZ2V0TGluZS5zY2FsZS56ID0gdjMubGVuZ3RoKCk7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqXHQtIHNob3dzIGZydXN0dW0sIGxpbmUgb2Ygc2lnaHQgYW5kIHVwIG9mIHRoZSBjYW1lcmFcbiAqXHQtIHN1aXRhYmxlIGZvciBmYXN0IHVwZGF0ZXNcbiAqIFx0LSBiYXNlZCBvbiBmcnVzdHVtIHZpc3VhbGl6YXRpb24gaW4gbGlnaHRnbC5qcyBzaGFkb3dtYXAgZXhhbXBsZVxuICpcdFx0aHR0cDovL2V2YW53LmdpdGh1Yi5jb20vbGlnaHRnbC5qcy90ZXN0cy9zaGFkb3dtYXAuaHRtbFxuICovXG5cbmZ1bmN0aW9uIENhbWVyYUhlbHBlciggY2FtZXJhICkge1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCB2ZXJ0ZXhDb2xvcnM6IEZhY2VDb2xvcnMgfSApO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgY29sb3JzID0gW107XG5cblx0dmFyIHBvaW50TWFwID0ge307XG5cblx0Ly8gY29sb3JzXG5cblx0dmFyIGNvbG9yRnJ1c3R1bSA9IG5ldyBDb2xvciggMHhmZmFhMDAgKTtcblx0dmFyIGNvbG9yQ29uZSA9IG5ldyBDb2xvciggMHhmZjAwMDAgKTtcblx0dmFyIGNvbG9yVXAgPSBuZXcgQ29sb3IoIDB4MDBhYWZmICk7XG5cdHZhciBjb2xvclRhcmdldCA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblx0dmFyIGNvbG9yQ3Jvc3MgPSBuZXcgQ29sb3IoIDB4MzMzMzMzICk7XG5cblx0Ly8gbmVhclxuXG5cdGFkZExpbmUoICduMScsICduMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjInLCAnbjQnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ240JywgJ24zJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMycsICduMScsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdC8vIGZhclxuXG5cdGFkZExpbmUoICdmMScsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnZjInLCAnZjQnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ2Y0JywgJ2YzJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICdmMycsICdmMScsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdC8vIHNpZGVzXG5cblx0YWRkTGluZSggJ24xJywgJ2YxJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMicsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjMnLCAnZjMnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ240JywgJ2Y0JywgY29sb3JGcnVzdHVtICk7XG5cblx0Ly8gY29uZVxuXG5cdGFkZExpbmUoICdwJywgJ24xJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ24yJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ24zJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ240JywgY29sb3JDb25lICk7XG5cblx0Ly8gdXBcblxuXHRhZGRMaW5lKCAndTEnLCAndTInLCBjb2xvclVwICk7XG5cdGFkZExpbmUoICd1MicsICd1MycsIGNvbG9yVXAgKTtcblx0YWRkTGluZSggJ3UzJywgJ3UxJywgY29sb3JVcCApO1xuXG5cdC8vIHRhcmdldFxuXG5cdGFkZExpbmUoICdjJywgJ3QnLCBjb2xvclRhcmdldCApO1xuXHRhZGRMaW5lKCAncCcsICdjJywgY29sb3JDcm9zcyApO1xuXG5cdC8vIGNyb3NzXG5cblx0YWRkTGluZSggJ2NuMScsICdjbjInLCBjb2xvckNyb3NzICk7XG5cdGFkZExpbmUoICdjbjMnLCAnY240JywgY29sb3JDcm9zcyApO1xuXG5cdGFkZExpbmUoICdjZjEnLCAnY2YyJywgY29sb3JDcm9zcyApO1xuXHRhZGRMaW5lKCAnY2YzJywgJ2NmNCcsIGNvbG9yQ3Jvc3MgKTtcblxuXHRmdW5jdGlvbiBhZGRMaW5lKCBhLCBiLCBjb2xvciApIHtcblxuXHRcdGFkZFBvaW50KCBhLCBjb2xvciApO1xuXHRcdGFkZFBvaW50KCBiLCBjb2xvciApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhZGRQb2ludCggaWQsIGNvbG9yICkge1xuXG5cdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRpZiAoIHBvaW50TWFwWyBpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBvaW50TWFwWyBpZCBdID0gW107XG5cblx0XHR9XG5cblx0XHRwb2ludE1hcFsgaWQgXS5wdXNoKCAoIHZlcnRpY2VzLmxlbmd0aCAvIDMgKSAtIDEgKTtcblxuXHR9XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblx0aWYgKCB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4ICkgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdHRoaXMubWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnBvaW50TWFwID0gcG9pbnRNYXA7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5DYW1lcmFIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQ2FtZXJhSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhbWVyYUhlbHBlcjtcblxuQ2FtZXJhSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGdlb21ldHJ5LCBwb2ludE1hcDtcblxuXHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIGNhbWVyYSA9IG5ldyBDYW1lcmEoKTtcblxuXHRmdW5jdGlvbiBzZXRQb2ludCggcG9pbnQsIHgsIHksIHogKSB7XG5cblx0XHR2ZWN0b3Iuc2V0KCB4LCB5LCB6ICkudW5wcm9qZWN0KCBjYW1lcmEgKTtcblxuXHRcdHZhciBwb2ludHMgPSBwb2ludE1hcFsgcG9pbnQgXTtcblxuXHRcdGlmICggcG9pbnRzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIHBvaW50c1sgaSBdLCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRwb2ludE1hcCA9IHRoaXMucG9pbnRNYXA7XG5cblx0XHR2YXIgdyA9IDEsIGggPSAxO1xuXG5cdFx0Ly8gd2UgbmVlZCBqdXN0IGNhbWVyYSBwcm9qZWN0aW9uIG1hdHJpeFxuXHRcdC8vIHdvcmxkIG1hdHJpeCBtdXN0IGJlIGlkZW50aXR5XG5cblx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5jb3B5KCB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHQvLyBjZW50ZXIgLyB0YXJnZXRcblxuXHRcdHNldFBvaW50KCAnYycsIDAsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndCcsIDAsIDAsIDEgKTtcblxuXHRcdC8vIG5lYXJcblxuXHRcdHNldFBvaW50KCAnbjEnLCAtIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMicsIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMycsIC0gdywgaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduNCcsIHcsIGgsIC0gMSApO1xuXG5cdFx0Ly8gZmFyXG5cblx0XHRzZXRQb2ludCggJ2YxJywgLSB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YyJywgdywgLSBoLCAxICk7XG5cdFx0c2V0UG9pbnQoICdmMycsIC0gdywgaCwgMSApO1xuXHRcdHNldFBvaW50KCAnZjQnLCB3LCBoLCAxICk7XG5cblx0XHQvLyB1cFxuXG5cdFx0c2V0UG9pbnQoICd1MScsIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndTInLCAtIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndTMnLCAwLCBoICogMiwgLSAxICk7XG5cblx0XHQvLyBjcm9zc1xuXG5cdFx0c2V0UG9pbnQoICdjZjEnLCAtIHcsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMicsIHcsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMycsIDAsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2Y0JywgMCwgaCwgMSApO1xuXG5cdFx0c2V0UG9pbnQoICdjbjEnLCAtIHcsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnY24yJywgdywgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjMnLCAwLCAtIGgsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnY240JywgMCwgaCwgLSAxICk7XG5cblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICkge1xuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdGlmICggY29sb3IgPT09IHVuZGVmaW5lZCApIGNvbG9yID0gMHhmZmZmMDA7XG5cblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICogMyApO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggaW5kaWNlcywgMSApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IgfSApICk7XG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5Cb3hIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEhlbHBlcjtcblxuQm94SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgYm94ID0gbmV3IEJveDMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3hIZWxwZXI6IC51cGRhdGUoKSBoYXMgbm8gbG9uZ2VyIGFyZ3VtZW50cy4nICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJveC5zZXRGcm9tT2JqZWN0KCB0aGlzLm9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3guaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdFx0dmFyIG1pbiA9IGJveC5taW47XG5cdFx0dmFyIG1heCA9IGJveC5tYXg7XG5cblx0XHQvKlxuXHRcdCAgNV9fX180XG5cdFx0MS9fX18wL3xcblx0XHR8IDZfX3xfN1xuXHRcdDIvX19fMy9cblxuXHRcdDA6IG1heC54LCBtYXgueSwgbWF4Lnpcblx0XHQxOiBtaW4ueCwgbWF4LnksIG1heC56XG5cdFx0MjogbWluLngsIG1pbi55LCBtYXguelxuXHRcdDM6IG1heC54LCBtaW4ueSwgbWF4Lnpcblx0XHQ0OiBtYXgueCwgbWF4LnksIG1pbi56XG5cdFx0NTogbWluLngsIG1heC55LCBtaW4uelxuXHRcdDY6IG1pbi54LCBtaW4ueSwgbWluLnpcblx0XHQ3OiBtYXgueCwgbWluLnksIG1pbi56XG5cdFx0Ki9cblxuXHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHR2YXIgYXJyYXkgPSBwb3NpdGlvbi5hcnJheTtcblxuXHRcdGFycmF5WyAwIF0gPSBtYXgueDsgYXJyYXlbIDEgXSA9IG1heC55OyBhcnJheVsgMiBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDMgXSA9IG1pbi54OyBhcnJheVsgNCBdID0gbWF4Lnk7IGFycmF5WyA1IF0gPSBtYXguejtcblx0XHRhcnJheVsgNiBdID0gbWluLng7IGFycmF5WyA3IF0gPSBtaW4ueTsgYXJyYXlbIDggXSA9IG1heC56O1xuXHRcdGFycmF5WyA5IF0gPSBtYXgueDsgYXJyYXlbIDEwIF0gPSBtaW4ueTsgYXJyYXlbIDExIF0gPSBtYXguejtcblx0XHRhcnJheVsgMTIgXSA9IG1heC54OyBhcnJheVsgMTMgXSA9IG1heC55OyBhcnJheVsgMTQgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAxNSBdID0gbWluLng7IGFycmF5WyAxNiBdID0gbWF4Lnk7IGFycmF5WyAxNyBdID0gbWluLno7XG5cdFx0YXJyYXlbIDE4IF0gPSBtaW4ueDsgYXJyYXlbIDE5IF0gPSBtaW4ueTsgYXJyYXlbIDIwIF0gPSBtaW4uejtcblx0XHRhcnJheVsgMjEgXSA9IG1heC54OyBhcnJheVsgMjIgXSA9IG1pbi55OyBhcnJheVsgMjMgXSA9IG1pbi56O1xuXG5cdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR9O1xuXG59ICkoKTtcblxuQm94SGVscGVyLnByb3RvdHlwZS5zZXRGcm9tT2JqZWN0ID0gZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cdHRoaXMudXBkYXRlKCk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLm9iamVjdCA9IHNvdXJjZS5vYmplY3Q7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIEJveDNIZWxwZXIoIGJveCwgaGV4ICkge1xuXG5cdHRoaXMudHlwZSA9ICdCb3gzSGVscGVyJztcblxuXHR0aGlzLmJveCA9IGJveDtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmZmYwMDtcblxuXHR2YXIgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcblxuXHR2YXIgcG9zaXRpb25zID0gWyAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIDEsIC0gMSwgLSAxIF07XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGluZGljZXMsIDEgKSApO1xuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yIH0gKSApO1xuXG5cdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cbn1cblxuQm94M0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5Cb3gzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveDNIZWxwZXI7XG5cbkJveDNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHR2YXIgYm94ID0gdGhpcy5ib3g7XG5cblx0aWYgKCBib3guaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdGJveC5nZXRDZW50ZXIoIHRoaXMucG9zaXRpb24gKTtcblxuXHRib3guZ2V0U2l6ZSggdGhpcy5zY2FsZSApO1xuXG5cdHRoaXMuc2NhbGUubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIFBsYW5lSGVscGVyKCBwbGFuZSwgc2l6ZSwgaGV4ICkge1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUhlbHBlcic7XG5cblx0dGhpcy5wbGFuZSA9IHBsYW5lO1xuXG5cdHRoaXMuc2l6ZSA9ICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgPyAxIDogc2l6ZTtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmZmYwMDtcblxuXHR2YXIgcG9zaXRpb25zID0gWyAxLCAtIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIC0gMSwgMSwgMSwgMSwgMSwgMCwgMCwgMSwgMCwgMCwgMCBdO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yIH0gKSApO1xuXG5cdC8vXG5cblx0dmFyIHBvc2l0aW9uczIgPSBbIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEgXTtcblxuXHR2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5Mi5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMyLCAzICkgKTtcblx0Z2VvbWV0cnkyLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnkyLCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiAwLjIsIHRyYW5zcGFyZW50OiB0cnVlLCBkZXB0aFdyaXRlOiBmYWxzZSB9ICkgKSApO1xuXG59XG5cblBsYW5lSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICk7XG5QbGFuZUhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQbGFuZUhlbHBlcjtcblxuUGxhbmVIZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHR2YXIgc2NhbGUgPSAtIHRoaXMucGxhbmUuY29uc3RhbnQ7XG5cblx0aWYgKCBNYXRoLmFicyggc2NhbGUgKSA8IDFlLTggKSBzY2FsZSA9IDFlLTg7IC8vIHNpZ24gZG9lcyBub3QgbWF0dGVyXG5cblx0dGhpcy5zY2FsZS5zZXQoIDAuNSAqIHRoaXMuc2l6ZSwgMC41ICogdGhpcy5zaXplLCBzY2FsZSApO1xuXG5cdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5zaWRlID0gKCBzY2FsZSA8IDAgKSA/IEJhY2tTaWRlIDogRnJvbnRTaWRlOyAvLyByZW5kZXJlciBmbGlwcyBzaWRlIHdoZW4gZGV0ZXJtaW5hbnQgPCAwOyBmbGlwcGluZyBub3Qgd2FudGVkIGhlcmVcblxuXHR0aGlzLmxvb2tBdCggdGhpcy5wbGFuZS5ub3JtYWwgKTtcblxuXHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqXG4gKiBDcmVhdGVzIGFuIGFycm93IGZvciB2aXN1YWxpemluZyBkaXJlY3Rpb25zXG4gKlxuICogUGFyYW1ldGVyczpcbiAqICBkaXIgLSBWZWN0b3IzXG4gKiAgb3JpZ2luIC0gVmVjdG9yM1xuICogIGxlbmd0aCAtIE51bWJlclxuICogIGNvbG9yIC0gY29sb3IgaW4gaGV4IHZhbHVlXG4gKiAgaGVhZExlbmd0aCAtIE51bWJlclxuICogIGhlYWRXaWR0aCAtIE51bWJlclxuICovXG5cbnZhciBsaW5lR2VvbWV0cnksIGNvbmVHZW9tZXRyeTtcblxuZnVuY3Rpb24gQXJyb3dIZWxwZXIoIGRpciwgb3JpZ2luLCBsZW5ndGgsIGNvbG9yLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKSB7XG5cblx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHRpZiAoIGRpciA9PT0gdW5kZWZpbmVkICkgZGlyID0gbmV3IFRIUkVFLlZlY3RvcjMoIDAsIDAsIDEgKTtcblx0aWYgKCBvcmlnaW4gPT09IHVuZGVmaW5lZCApIG9yaWdpbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAwLCAwICk7XG5cdGlmICggbGVuZ3RoID09PSB1bmRlZmluZWQgKSBsZW5ndGggPSAxO1xuXHRpZiAoIGNvbG9yID09PSB1bmRlZmluZWQgKSBjb2xvciA9IDB4ZmZmZjAwO1xuXHRpZiAoIGhlYWRMZW5ndGggPT09IHVuZGVmaW5lZCApIGhlYWRMZW5ndGggPSAwLjIgKiBsZW5ndGg7XG5cdGlmICggaGVhZFdpZHRoID09PSB1bmRlZmluZWQgKSBoZWFkV2lkdGggPSAwLjIgKiBoZWFkTGVuZ3RoO1xuXG5cdGlmICggbGluZUdlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRsaW5lR2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRsaW5lR2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAwLCAwLCAwLCAwLCAxLCAwIF0sIDMgKSApO1xuXG5cdFx0Y29uZUdlb21ldHJ5ID0gbmV3IEN5bGluZGVyQnVmZmVyR2VvbWV0cnkoIDAsIDAuNSwgMSwgNSwgMSApO1xuXHRcdGNvbmVHZW9tZXRyeS50cmFuc2xhdGUoIDAsIC0gMC41LCAwICk7XG5cblx0fVxuXG5cdHRoaXMucG9zaXRpb24uY29weSggb3JpZ2luICk7XG5cblx0dGhpcy5saW5lID0gbmV3IExpbmUoIGxpbmVHZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblx0dGhpcy5saW5lLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5hZGQoIHRoaXMubGluZSApO1xuXG5cdHRoaXMuY29uZSA9IG5ldyBNZXNoKCBjb25lR2VvbWV0cnksIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IgfSApICk7XG5cdHRoaXMuY29uZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuYWRkKCB0aGlzLmNvbmUgKTtcblxuXHR0aGlzLnNldERpcmVjdGlvbiggZGlyICk7XG5cdHRoaXMuc2V0TGVuZ3RoKCBsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApO1xuXG59XG5cbkFycm93SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuQXJyb3dIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXJyb3dIZWxwZXI7XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5zZXREaXJlY3Rpb24gPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgYXhpcyA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciByYWRpYW5zO1xuXG5cdHJldHVybiBmdW5jdGlvbiBzZXREaXJlY3Rpb24oIGRpciApIHtcblxuXHRcdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdGlmICggZGlyLnkgPiAwLjk5OTk5ICkge1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0KCAwLCAwLCAwLCAxICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkaXIueSA8IC0gMC45OTk5OSApIHtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMSwgMCwgMCwgMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YXhpcy5zZXQoIGRpci56LCAwLCAtIGRpci54ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdHJhZGlhbnMgPSBNYXRoLmFjb3MoIGRpci55ICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCByYWRpYW5zICk7XG5cblx0XHR9XG5cblx0fTtcblxufSgpICk7XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5zZXRMZW5ndGggPSBmdW5jdGlvbiAoIGxlbmd0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICkge1xuXG5cdGlmICggaGVhZExlbmd0aCA9PT0gdW5kZWZpbmVkICkgaGVhZExlbmd0aCA9IDAuMiAqIGxlbmd0aDtcblx0aWYgKCBoZWFkV2lkdGggPT09IHVuZGVmaW5lZCApIGhlYWRXaWR0aCA9IDAuMiAqIGhlYWRMZW5ndGg7XG5cblx0dGhpcy5saW5lLnNjYWxlLnNldCggMSwgTWF0aC5tYXgoIDAsIGxlbmd0aCAtIGhlYWRMZW5ndGggKSwgMSApO1xuXHR0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy5jb25lLnNjYWxlLnNldCggaGVhZFdpZHRoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblx0dGhpcy5jb25lLnBvc2l0aW9uLnkgPSBsZW5ndGg7XG5cdHRoaXMuY29uZS51cGRhdGVNYXRyaXgoKTtcblxufTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldENvbG9yID0gZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHR0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3IuY29weSggY29sb3IgKTtcblx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIGNvbG9yICk7XG5cbn07XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCBmYWxzZSApO1xuXG5cdHRoaXMubGluZS5jb3B5KCBzb3VyY2UubGluZSApO1xuXHR0aGlzLmNvbmUuY29weSggc291cmNlLmNvbmUgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG5cdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHNyb3VjaGVyYXkgLyBodHRwOi8vc3JvdWNoZXJheS5vcmcvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF4ZXNIZWxwZXIoIHNpemUgKSB7XG5cblx0c2l6ZSA9IHNpemUgfHwgMTtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MCwgMCwgMCxcdHNpemUsIDAsIDAsXG5cdFx0MCwgMCwgMCxcdDAsIHNpemUsIDAsXG5cdFx0MCwgMCwgMCxcdDAsIDAsIHNpemVcblx0XTtcblxuXHR2YXIgY29sb3JzID0gW1xuXHRcdDEsIDAsIDAsXHQxLCAwLjYsIDAsXG5cdFx0MCwgMSwgMCxcdDAuNiwgMSwgMCxcblx0XHQwLCAwLCAxLFx0MCwgMC42LCAxXG5cdF07XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5BeGVzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcbkF4ZXNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXhlc0hlbHBlcjtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZhY2U0KCBhLCBiLCBjLCBkLCBub3JtYWwsIGNvbG9yLCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZhY2U0IGhhcyBiZWVuIHJlbW92ZWQuIEEgVEhSRUUuRmFjZTMgd2lsbCBiZSBjcmVhdGVkIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEZhY2UzKCBhLCBiLCBjLCBub3JtYWwsIGNvbG9yLCBtYXRlcmlhbEluZGV4ICk7XG5cbn1cblxudmFyIExpbmVTdHJpcCA9IDA7XG5cbnZhciBMaW5lUGllY2VzID0gMTtcblxuZnVuY3Rpb24gTWVzaEZhY2VNYXRlcmlhbCggbWF0ZXJpYWxzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hGYWNlTWF0ZXJpYWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGFuIEFycmF5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG59XG5cbmZ1bmN0aW9uIE11bHRpTWF0ZXJpYWwoIG1hdGVyaWFscyApIHtcblxuXHRpZiAoIG1hdGVyaWFscyA9PT0gdW5kZWZpbmVkICkgbWF0ZXJpYWxzID0gW107XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTXVsdGlNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nICk7XG5cdG1hdGVyaWFscy5pc011bHRpTWF0ZXJpYWwgPSB0cnVlO1xuXHRtYXRlcmlhbHMubWF0ZXJpYWxzID0gbWF0ZXJpYWxzO1xuXHRtYXRlcmlhbHMuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWxzLnNsaWNlKCk7XG5cblx0fTtcblx0cmV0dXJuIG1hdGVyaWFscztcblxufVxuXG5mdW5jdGlvbiBQb2ludENsb3VkKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZSggbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGUgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5TcHJpdGUuJyApO1xuXHRyZXR1cm4gbmV3IFNwcml0ZSggbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbSggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlU3lzdGVtIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBvaW50Q2xvdWRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gUGFydGljbGVTeXN0ZW1NYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gVmVydGV4KCB4LCB5LCB6ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlcnRleCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuVmVjdG9yMyBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBWZWN0b3IzKCB4LCB5LCB6ICk7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoKS5zZXREeW5hbWljKCB0cnVlICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKS5zZXREeW5hbWljKCB0cnVlICk7XG5cbn1cblxuZnVuY3Rpb24gSW50OEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDhBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5VaW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gSW50MTZBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQxNkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gSW50MzJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gRmxvYXQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gRmxvYXQ2NEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0NjRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDY0QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuLy9cblxuQ3VydmUuY3JlYXRlID0gZnVuY3Rpb24gKCBjb25zdHJ1Y3QsIGdldFBvaW50ICkge1xuXG5cdGNvbnNvbGUubG9nKCAnVEhSRUUuQ3VydmUuY3JlYXRlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCcgKTtcblxuXHRjb25zdHJ1Y3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5cdGNvbnN0cnVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Q7XG5cdGNvbnN0cnVjdC5wcm90b3R5cGUuZ2V0UG9pbnQgPSBnZXRQb2ludDtcblxuXHRyZXR1cm4gY29uc3RydWN0O1xuXG59O1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBDdXJ2ZVBhdGgucHJvdG90eXBlLCB7XG5cblx0Y3JlYXRlUG9pbnRzR2VvbWV0cnk6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlUG9pbnRzR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7XG5cblx0XHQvLyBnZW5lcmF0ZSBnZW9tZXRyeSBmcm9tIHBhdGggcG9pbnRzIChmb3IgTGluZSBvciBQb2ludHMgb2JqZWN0cylcblxuXHRcdHZhciBwdHMgPSB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoIHB0cyApO1xuXG5cdH0sXG5cblx0Y3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnk6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7XG5cblx0XHQvLyBnZW5lcmF0ZSBnZW9tZXRyeSBmcm9tIGVxdWlkaXN0YW50IHNhbXBsaW5nIGFsb25nIHRoZSBwYXRoXG5cblx0XHR2YXIgcHRzID0gdGhpcy5nZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyApO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KCBwdHMgKTtcblxuXHR9LFxuXG5cdGNyZWF0ZUdlb21ldHJ5OiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuJyApO1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKCBuZXcgVmVjdG9yMyggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggUGF0aC5wcm90b3R5cGUsIHtcblxuXHRmcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhdGg6IC5mcm9tUG9pbnRzKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbVBvaW50cygpLicgKTtcblx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBDbG9zZWRTcGxpbmVDdXJ2ZTMoIHBvaW50cyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5DbG9zZWRTcGxpbmVDdXJ2ZTMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMgaW5zdGVhZC4nICk7XG5cblx0Q2F0bXVsbFJvbUN1cnZlMy5jYWxsKCB0aGlzLCBwb2ludHMgKTtcblx0dGhpcy50eXBlID0gJ2NhdG11bGxyb20nO1xuXHR0aGlzLmNsb3NlZCA9IHRydWU7XG5cbn1cblxuQ2xvc2VkU3BsaW5lQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbi8vXG5cbmZ1bmN0aW9uIFNwbGluZUN1cnZlMyggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cbn1cblxuU3BsaW5lQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbi8vXG5cbmZ1bmN0aW9uIFNwbGluZSggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cbn1cblxuU3BsaW5lLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbk9iamVjdC5hc3NpZ24oIFNwbGluZS5wcm90b3R5cGUsIHtcblxuXHRpbml0RnJvbUFycmF5OiBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU3BsaW5lOiAuaW5pdEZyb21BcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGdldENvbnRyb2xQb2ludHNBcnJheTogZnVuY3Rpb24gKCAvKiBvcHRpb25hbFRhcmdldCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcGxpbmU6IC5nZXRDb250cm9sUG9pbnRzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyZXBhcmFtZXRyaXplQnlBcmNMZW5ndGg6IGZ1bmN0aW9uICggLyogc2FtcGxpbmdDb2VmICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNwbGluZTogLnJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBBeGlzSGVscGVyKCBzaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF4aXNIZWxwZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5BeGVzSGVscGVyLicgKTtcblx0cmV0dXJuIG5ldyBBeGVzSGVscGVyKCBzaXplICk7XG5cbn1cblxuZnVuY3Rpb24gQm91bmRpbmdCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm91bmRpbmdCb3hIZWxwZXIgaGFzIGJlZW4gZGVwcmVjYXRlZC4gQ3JlYXRpbmcgYSBUSFJFRS5Cb3hIZWxwZXIgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICk7XG5cbn1cblxuZnVuY3Rpb24gRWRnZXNIZWxwZXIoIG9iamVjdCwgaGV4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkVkZ2VzSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5FZGdlc0dlb21ldHJ5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IExpbmVTZWdtZW50cyggbmV3IEVkZ2VzR2VvbWV0cnkoIG9iamVjdC5nZW9tZXRyeSApLCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGhleCAhPT0gdW5kZWZpbmVkID8gaGV4IDogMHhmZmZmZmYgfSApICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUuc2V0Q29sb3JzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuJyApO1xuXG59O1xuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ta2VsZXRvbkhlbHBlcjogdXBkYXRlKCkgbm8gbG9uZ2VyIG5lZWRzIHRvIGJlIGNhbGxlZC4nICk7XG5cbn07XG5cbmZ1bmN0aW9uIFdpcmVmcmFtZUhlbHBlciggb2JqZWN0LCBoZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2lyZWZyYW1lSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBMaW5lU2VnbWVudHMoIG5ldyBXaXJlZnJhbWVHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTtcblxufVxuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0ZXh0cmFjdFVybEJhc2U6IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyOiAuZXh0cmFjdFVybEJhc2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBYSFJMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuWEhSTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRmlsZUxvYWRlci4nICk7XG5cdHJldHVybiBuZXcgRmlsZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbmZ1bmN0aW9uIEJpbmFyeVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyLicgKTtcblx0cmV0dXJuIG5ldyBEYXRhVGV4dHVyZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIE9iamVjdExvYWRlci5wcm90b3R5cGUsIHtcblxuXHRzZXRUZXh0dXJlUGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogLnNldFRleHR1cmVQYXRoKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0UmVzb3VyY2VQYXRoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldFJlc291cmNlUGF0aCggdmFsdWUgKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggQm94Mi5wcm90b3R5cGUsIHtcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9LFxuXHRlbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25Cb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxuXHR9LFxuXHRzaXplOiBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLnNpemUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRTaXplKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldFNpemUoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCb3gzLnByb3RvdHlwZSwge1xuXG5cdGNlbnRlcjogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH0sXG5cdGVtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuZW1wdHkoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pc0VtcHR5KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvbkJveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNCb3goIGJveCApO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICk7XG5cblx0fSxcblx0c2l6ZTogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5zaXplKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0U2l6ZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRTaXplKCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cbn0gKTtcblxuTGluZTMucHJvdG90eXBlLmNlbnRlciA9IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTtcblxufTtcblxuT2JqZWN0LmFzc2lnbiggX01hdGgsIHtcblxuXHRyYW5kb20xNjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0aDogLnJhbmRvbTE2KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIE1hdGgucmFuZG9tKCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIE1hdGgucmFuZG9tKCk7XG5cblx0fSxcblxuXHRuZWFyZXN0UG93ZXJPZlR3bzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGg6IC5uZWFyZXN0UG93ZXJPZlR3bygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZsb29yUG93ZXJPZlR3bygpLicgKTtcblx0XHRyZXR1cm4gX01hdGguZmxvb3JQb3dlck9mVHdvKCB2YWx1ZSApO1xuXG5cdH0sXG5cblx0bmV4dFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoOiAubmV4dFBvd2VyT2ZUd28oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5jZWlsUG93ZXJPZlR3bygpLicgKTtcblx0XHRyZXR1cm4gX01hdGguY2VpbFBvd2VyT2ZUd28oIHZhbHVlICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDMucHJvdG90eXBlLCB7XG5cblx0ZmxhdHRlblRvQXJyYXlPZmZzZXQ6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5NYXRyaXgzOiAuZmxhdHRlblRvQXJyYXlPZmZzZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnRvQXJyYXkoKSBpbnN0ZWFkLlwiICk7XG5cdFx0cmV0dXJuIHRoaXMudG9BcnJheSggYXJyYXksIG9mZnNldCApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yMzogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXgzOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDMoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXgzKCB0aGlzICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYSAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXgzOiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRhcHBseVRvQnVmZmVyOiBmdW5jdGlvbiAoIGJ1ZmZlciAvKiwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXgzOiAuYXBwbHlUb0J1ZmZlcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYnVmZmVyICk7XG5cblx0fSxcblx0YXBwbHlUb1ZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggTWF0cml4NC5wcm90b3R5cGUsIHtcblxuXHRleHRyYWN0UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5leHRyYWN0UG9zaXRpb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5jb3B5UG9zaXRpb24oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuY29weVBvc2l0aW9uKCBtICk7XG5cblx0fSxcblx0ZmxhdHRlblRvQXJyYXlPZmZzZXQ6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5NYXRyaXg0OiAuZmxhdHRlblRvQXJyYXlPZmZzZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnRvQXJyYXkoKSBpbnN0ZWFkLlwiICk7XG5cdFx0cmV0dXJuIHRoaXMudG9BcnJheSggYXJyYXksIG9mZnNldCApO1xuXG5cdH0sXG5cdGdldFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjE7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0UG9zaXRpb24oKSB7XG5cblx0XHRcdGlmICggdjEgPT09IHVuZGVmaW5lZCApIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5nZXRQb3NpdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMyApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cdHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcblxuXHR9LFxuXHRtdWx0aXBseVRvQXJyYXk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVRvQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjM6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcyApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yNDogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3I0KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYSAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyb3RhdGVBeGlzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAucm90YXRlQXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0di50cmFuc2Zvcm1EaXJlY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXHRjcm9zc1ZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuY3Jvc3NWZWN0b3IoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHR9LFxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVYKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVZKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlWjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVaKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlQnlBeGlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnJvdGF0ZUJ5QXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFwcGx5VG9CdWZmZXI6IGZ1bmN0aW9uICggYnVmZmVyIC8qLCBvZmZzZXQsIGxlbmd0aCAqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvQnVmZmVyKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG1hdHJpeC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdGhpcy5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBidWZmZXIgKTtcblxuXHR9LFxuXHRhcHBseVRvVmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGFycmF5LCBvZmZzZXQsIGxlbmd0aCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAuYXBwbHlUb1ZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdG1ha2VGcnVzdHVtOiBmdW5jdGlvbiAoIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm1ha2VGcnVzdHVtKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApO1xuXG5cdH1cblxufSApO1xuXG5QbGFuZS5wcm90b3R5cGUuaXNJbnRlcnNlY3Rpb25MaW5lID0gZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBsYW5lOiAuaXNJbnRlcnNlY3Rpb25MaW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0xpbmUoKS4nICk7XG5cdHJldHVybiB0aGlzLmludGVyc2VjdHNMaW5lKCBsaW5lICk7XG5cbn07XG5cblF1YXRlcm5pb24ucHJvdG90eXBlLm11bHRpcGx5VmVjdG9yMyA9IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlF1YXRlcm5pb246IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgaXMgbm93IHZlY3Rvci5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHZlY3Rvci5hcHBseVF1YXRlcm5pb24oIHRoaXMgKTtcblxufTtcblxuT2JqZWN0LmFzc2lnbiggUmF5LnByb3RvdHlwZSwge1xuXG5cdGlzSW50ZXJzZWN0aW9uQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvblBsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25QbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNQbGFuZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzUGxhbmUoIHBsYW5lICk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25TcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBUcmlhbmdsZS5wcm90b3R5cGUsIHtcblxuXHRhcmVhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmFyZWEoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRBcmVhKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldEFyZWEoKTtcblxuXHR9LFxuXHRiYXJ5Y29vcmRGcm9tUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIHRhcmdldCApO1xuXG5cdH0sXG5cdG1pZHBvaW50OiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubWlkcG9pbnQoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRNaWRwb2ludCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRNaWRwb2ludCggdGFyZ2V0ICk7XG5cblx0fSxcblx0bm9ybWFsOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldE5vcm1hbCggdGFyZ2V0ICk7XG5cblx0fSxcblx0cGxhbmU6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5wbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFBsYW5lKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldFBsYW5lKCB0YXJnZXQgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUsIHtcblxuXHRiYXJ5Y29vcmRGcm9tUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKTtcblxuXHR9LFxuXHRub3JtYWw6IGZ1bmN0aW9uICggYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5ub3JtYWwoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXROb3JtYWwoKS4nICk7XG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFNoYXBlLnByb3RvdHlwZSwge1xuXG5cdGV4dHJhY3RBbGxQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGU6IC5leHRyYWN0QWxsUG9pbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5leHRyYWN0UG9pbnRzKCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0cmFjdFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0fSxcblx0ZXh0cnVkZTogZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGU6IC5leHRydWRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV4dHJ1ZGVHZW9tZXRyeSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBuZXcgRXh0cnVkZUdlb21ldHJ5KCB0aGlzLCBvcHRpb25zICk7XG5cblx0fSxcblx0bWFrZUdlb21ldHJ5OiBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLm1ha2VHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBTaGFwZUdlb21ldHJ5KCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIG5ldyBTaGFwZUdlb21ldHJ5KCB0aGlzLCBvcHRpb25zICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjIucHJvdG90eXBlLCB7XG5cblx0ZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cblx0fSxcblx0ZGlzdGFuY2VUb01hbmhhdHRhbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKTtcblxuXHR9LFxuXHRsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjMucHJvdG90eXBlLCB7XG5cblx0c2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgaW5zdGVhZC4nICk7XG5cblx0fSxcblx0c2V0RXVsZXJGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKCkgaW5zdGVhZC4nICk7XG5cblx0fSxcblx0Z2V0UG9zaXRpb25Gcm9tTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0UG9zaXRpb25Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbSApO1xuXG5cdH0sXG5cdGdldFNjYWxlRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldFNjYWxlRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhTY2FsZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUoIG0gKTtcblxuXHR9LFxuXHRnZXRDb2x1bW5Gcm9tTWF0cml4OiBmdW5jdGlvbiAoIGluZGV4LCBtYXRyaXggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0Q29sdW1uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhDb2x1bW4oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbWF0cml4LCBpbmRleCApO1xuXG5cdH0sXG5cdGFwcGx5UHJvamVjdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmFwcGx5UHJvamVjdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuYXBwbHlNYXRyaXg0KCBtICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBtICk7XG5cblx0fSxcblx0ZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cblx0fSxcblx0ZGlzdGFuY2VUb01hbmhhdHRhbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKTtcblxuXHR9LFxuXHRsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjQucHJvdG90eXBlLCB7XG5cblx0ZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cblx0fSxcblx0bGVuZ3RoTWFuaGF0dGFuOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRjb21wdXRlVGFuZ2VudHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnk6IC5jb21wdXRlTGluZURpc3RhbmNlcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5MaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIE9iamVjdDNELnByb3RvdHlwZSwge1xuXG5cdGdldENoaWxkQnlOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmdldENoaWxkQnlOYW1lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0T2JqZWN0QnlOYW1lKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5TmFtZSggbmFtZSApO1xuXG5cdH0sXG5cdHJlbmRlckRlcHRoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnJlbmRlckRlcHRoIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAucmVuZGVyT3JkZXIsIGluc3RlYWQuJyApO1xuXG5cdH0sXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBkaXN0YW5jZSwgYXhpcyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC50cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApO1xuXG5cdH0sXG5cdGdldFdvcmxkUm90YXRpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3QzRDogLmdldFdvcmxkUm90YXRpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuT2JqZWN0M0QuZ2V0V29ybGRRdWF0ZXJuaW9uKCB0YXJnZXQgKSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE9iamVjdDNELnByb3RvdHlwZSwge1xuXG5cdGV1bGVyT3JkZXI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGlzIG5vdyAucm90YXRpb24ub3JkZXIuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMucm90YXRpb24ub3JkZXI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGlzIG5vdyAucm90YXRpb24ub3JkZXIuJyApO1xuXHRcdFx0dGhpcy5yb3RhdGlvbi5vcmRlciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHR1c2VRdWF0ZXJuaW9uOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAudXNlUXVhdGVybmlvbiBoYXMgYmVlbiByZW1vdmVkLiBUaGUgbGlicmFyeSBub3cgdXNlcyBxdWF0ZXJuaW9ucyBieSBkZWZhdWx0LicgKTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAudXNlUXVhdGVybmlvbiBoYXMgYmVlbiByZW1vdmVkLiBUaGUgbGlicmFyeSBub3cgdXNlcyBxdWF0ZXJuaW9ucyBieSBkZWZhdWx0LicgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBMT0QucHJvdG90eXBlLCB7XG5cblx0b2JqZWN0czoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MT0Q6IC5vYmplY3RzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmxldmVscy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5sZXZlbHM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIFNrZWxldG9uLnByb3RvdHlwZSwgJ3VzZVZlcnRleFRleHR1cmUnLCB7XG5cblx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogdXNlVmVydGV4VGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNrZWxldG9uOiB1c2VWZXJ0ZXhUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5Ta2lubmVkTWVzaC5wcm90b3R5cGUuaW5pdEJvbmVzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ta2lubmVkTWVzaDogaW5pdEJvbmVzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggQ3VydmUucHJvdG90eXBlLCAnX19hcmNMZW5ndGhEaXZpc2lvbnMnLCB7XG5cblx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLicgKTtcblx0XHRyZXR1cm4gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0fSxcblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmU6IC5fX2FyY0xlbmd0aERpdmlzaW9ucyBpcyBub3cgLmFyY0xlbmd0aERpdmlzaW9ucy4nICk7XG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSB2YWx1ZTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLnNldExlbnMgPSBmdW5jdGlvbiAoIGZvY2FsTGVuZ3RoLCBmaWxtR2F1Z2UgKSB7XG5cblx0Y29uc29sZS53YXJuKCBcIlRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnNldExlbnMgaXMgZGVwcmVjYXRlZC4gXCIgK1xuXHRcdFx0XCJVc2UgLnNldEZvY2FsTGVuZ3RoIGFuZCAuZmlsbUdhdWdlIGZvciBhIHBob3RvZ3JhcGhpYyBzZXR1cC5cIiApO1xuXG5cdGlmICggZmlsbUdhdWdlICE9PSB1bmRlZmluZWQgKSB0aGlzLmZpbG1HYXVnZSA9IGZpbG1HYXVnZTtcblx0dGhpcy5zZXRGb2NhbExlbmd0aCggZm9jYWxMZW5ndGggKTtcblxufTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIExpZ2h0LnByb3RvdHlwZSwge1xuXHRvbmx5U2hhZG93OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAub25seVNoYWRvdyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhRm92OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUZvdiBpcyBub3cgLnNoYWRvdy5jYW1lcmEuZm92LicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5mb3YgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhTGVmdDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFMZWZ0IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5sZWZ0LicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5sZWZ0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYVJpZ2h0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVJpZ2h0IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5yaWdodC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEucmlnaHQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhVG9wOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVRvcCBpcyBub3cgLnNoYWRvdy5jYW1lcmEudG9wLicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS50b3AgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhQm90dG9tOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUJvdHRvbSBpcyBub3cgLnNoYWRvdy5jYW1lcmEuYm90dG9tLicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5ib3R0b20gPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhTmVhcjoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFOZWFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5uZWFyLicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5uZWFyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUZhcjoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGYXIgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZhci4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEuZmFyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYVZpc2libGU6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFWaXNpYmxlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKCBsaWdodC5zaGFkb3cuY2FtZXJhICkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0JpYXM6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93QmlhcyBpcyBub3cgLnNoYWRvdy5iaWFzLicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmJpYXMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93RGFya25lc3M6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dEYXJrbmVzcyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwV2lkdGg6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93TWFwV2lkdGggaXMgbm93IC5zaGFkb3cubWFwU2l6ZS53aWR0aC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5tYXBTaXplLndpZHRoID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd01hcEhlaWdodDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dNYXBIZWlnaHQgaXMgbm93IC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xuXG5cdGxlbmd0aDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IC5sZW5ndGggaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5jb3VudCBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aDtcblxuXHRcdH1cblx0fSxcblx0Y29weUluZGljZXNBcnJheTogZnVuY3Rpb24gKCAvKiBpbmRpY2VzICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLmNvcHlJbmRpY2VzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0YWRkSW5kZXg6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEluZGV4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0SW5kZXgoKS4nICk7XG5cdFx0dGhpcy5zZXRJbmRleCggaW5kZXggKTtcblxuXHR9LFxuXHRhZGREcmF3Q2FsbDogZnVuY3Rpb24gKCBzdGFydCwgY291bnQsIGluZGV4T2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBpbmRleE9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIGluZGV4T2Zmc2V0LicgKTtcblxuXHRcdH1cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgaXMgbm93IC5hZGRHcm91cCgpLicgKTtcblx0XHR0aGlzLmFkZEdyb3VwKCBzdGFydCwgY291bnQgKTtcblxuXHR9LFxuXHRjbGVhckRyYXdDYWxsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jbGVhckRyYXdDYWxscygpIGlzIG5vdyAuY2xlYXJHcm91cHMoKS4nICk7XG5cdFx0dGhpcy5jbGVhckdyb3VwcygpO1xuXG5cdH0sXG5cdGNvbXB1dGVUYW5nZW50czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jb21wdXRlVGFuZ2VudHMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRjb21wdXRlT2Zmc2V0czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jb21wdXRlT2Zmc2V0cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0ZHJhd2NhbGxzOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmRyYXdjYWxscyBoYXMgYmVlbiByZW5hbWVkIHRvIC5ncm91cHMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuZ3JvdXBzO1xuXG5cdFx0fVxuXHR9LFxuXHRvZmZzZXRzOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAub2Zmc2V0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5ncm91cHMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuZ3JvdXBzO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSwge1xuXG5cdGdldEFycmF5czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogLmdldEFycmF5cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cblx0YWRkU2hhcGVMaXN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuYWRkU2hhcGVMaXN0KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblxuXHRhZGRTaGFwZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogLmFkZFNoYXBlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBVbmlmb3JtLnByb3RvdHlwZSwge1xuXG5cdGR5bmFtaWM6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLmR5bmFtaWMgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRvblVwZGF0ZToge1xuXHRcdHZhbHVlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlVuaWZvcm06IC5vblVwZGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBvYmplY3Qub25CZWZvcmVSZW5kZXIoKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1hdGVyaWFsLnByb3RvdHlwZSwge1xuXG5cdHdyYXBBcm91bmQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwQXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwQXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXG5cdG92ZXJkcmF3OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLm92ZXJkcmF3IGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXG5cdHdyYXBSR0I6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwUkdCIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcigpO1xuXG5cdFx0fVxuXHR9LFxuXG5cdHNoYWRpbmc6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5mbGF0U2hhZGluZyA9ICggdmFsdWUgPT09IEZsYXRTaGFkaW5nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0bWV0YWw6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw6IC5tZXRhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbDogLm1ldGFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCBpbnN0ZWFkJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSwge1xuXG5cdGRlcml2YXRpdmVzOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYWRlck1hdGVyaWFsOiAuZGVyaXZhdGl2ZXMgaGFzIGJlZW4gbW92ZWQgdG8gLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4gU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy4nICk7XG5cdFx0XHR0aGlzLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIFdlYkdMUmVuZGVyZXIucHJvdG90eXBlLCB7XG5cblx0Y2xlYXJUYXJnZXQ6IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuY2xlYXJUYXJnZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnNldFJlbmRlclRhcmdldCgpIGFuZCAuY2xlYXIoKSBpbnN0ZWFkLicgKTtcblx0XHR0aGlzLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5jbGVhciggY29sb3IsIGRlcHRoLCBzdGVuY2lsICk7XG5cblx0fSxcblxuXHRhbmltYXRlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFuaW1hdGUoKSBpcyBub3cgLnNldEFuaW1hdGlvbkxvb3AoKS4nICk7XG5cdFx0dGhpcy5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG5cdH0sXG5cblx0Z2V0Q3VycmVudFJlbmRlclRhcmdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldEN1cnJlbnRSZW5kZXJUYXJnZXQoKSBpcyBub3cgLmdldFJlbmRlclRhcmdldCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHR9LFxuXG5cdGdldE1heEFuaXNvdHJvcHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRNYXhBbmlzb3Ryb3B5KCkgaXMgbm93IC5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpO1xuXG5cdH0sXG5cblx0Z2V0UHJlY2lzaW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0UHJlY2lzaW9uKCkgaXMgbm93IC5jYXBhYmlsaXRpZXMucHJlY2lzaW9uLicgKTtcblx0XHRyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG5cdH0sXG5cblx0cmVzZXRHTFN0YXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAucmVzZXRHTFN0YXRlKCkgaXMgbm93IC5zdGF0ZS5yZXNldCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZS5yZXNldCgpO1xuXG5cdH0sXG5cblx0c3VwcG9ydHNGbG9hdFRleHR1cmVzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3RleHR1cmVfZmxvYXRcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdCcgKTtcblxuXHR9LFxuXHRzdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNIYWxmRmxvYXRUZXh0dXJlcygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzU3RhbmRhcmREZXJpdmF0aXZlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzU3RhbmRhcmREZXJpdmF0aXZlcygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1xcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycgKTtcblxuXHR9LFxuXHRzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQzogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKTtcblxuXHR9LFxuXHRzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICk7XG5cblx0fSxcblx0c3VwcG9ydHNCbGVuZE1pbk1heDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQmxlbmRNaW5NYXgoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdFWFRfYmxlbmRfbWlubWF4XFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTtcblxuXHR9LFxuXHRzdXBwb3J0c1ZlcnRleFRleHR1cmVzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcygpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLicgKTtcblx0XHRyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMudmVydGV4VGV4dHVyZXM7XG5cblx0fSxcblx0c3VwcG9ydHNJbnN0YW5jZWRBcnJheXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0luc3RhbmNlZEFycmF5cygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ0FOR0xFX2luc3RhbmNlZF9hcnJheXNcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdH0sXG5cdGVuYWJsZVNjaXNzb3JUZXN0OiBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZW5hYmxlU2Npc3NvclRlc3QoKSBpcyBub3cgLnNldFNjaXNzb3JUZXN0KCkuJyApO1xuXHRcdHRoaXMuc2V0U2Npc3NvclRlc3QoIGJvb2xlYW4gKTtcblxuXHR9LFxuXHRpbml0TWF0ZXJpYWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5pbml0TWF0ZXJpYWwoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRhZGRQcmVQbHVnaW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQcmVQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRhZGRQb3N0UGx1Z2luOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUG9zdFBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHVwZGF0ZVNoYWRvd01hcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnVwZGF0ZVNoYWRvd01hcCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHNldEZhY2VDdWxsaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0RmFjZUN1bGxpbmcoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdlYkdMUmVuZGVyZXIucHJvdG90eXBlLCB7XG5cblx0c2hhZG93TWFwRW5hYmxlZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zaGFkb3dNYXAuZW5hYmxlZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwRW5hYmxlZCBpcyBub3cgLnNoYWRvd01hcC5lbmFibGVkLicgKTtcblx0XHRcdHRoaXMuc2hhZG93TWFwLmVuYWJsZWQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwVHlwZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zaGFkb3dNYXAudHlwZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwVHlwZSBpcyBub3cgLnNoYWRvd01hcC50eXBlLicgKTtcblx0XHRcdHRoaXMuc2hhZG93TWFwLnR5cGUgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwQ3VsbEZhY2U6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcEN1bGxGYWNlIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH1cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdlYkdMU2hhZG93TWFwLnByb3RvdHlwZSwge1xuXG5cdGN1bGxGYWNlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogY3VsbEZhY2UgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHJlbmRlclJldmVyc2VTaWRlZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0cmVuZGVyU2luZ2xlU2lkZWQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJTaW5nbGVTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclNpbmdsZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSwge1xuXG5cdHdyYXBTOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFMgaXMgbm93IC50ZXh0dXJlLndyYXBTLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUud3JhcFM7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwUyBpcyBub3cgLnRleHR1cmUud3JhcFMuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLndyYXBTID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHdyYXBUOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUud3JhcFQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwVCBpcyBub3cgLnRleHR1cmUud3JhcFQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLndyYXBUID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdG1hZ0ZpbHRlcjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUubWFnRmlsdGVyO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWFnRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5tYWdGaWx0ZXIuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLm1hZ0ZpbHRlciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRtaW5GaWx0ZXI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5taW5GaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1pbkZpbHRlci4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLm1pbkZpbHRlcjtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1pbkZpbHRlciBpcyBub3cgLnRleHR1cmUubWluRmlsdGVyLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0YW5pc290cm9weToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuYW5pc290cm9weSBpcyBub3cgLnRleHR1cmUuYW5pc290cm9weS4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUuYW5pc290cm9weSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRvZmZzZXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLm9mZnNldDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm9mZnNldCBpcyBub3cgLnRleHR1cmUub2Zmc2V0LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5vZmZzZXQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0cmVwZWF0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAucmVwZWF0IGlzIG5vdyAudGV4dHVyZS5yZXBlYXQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5yZXBlYXQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5yZXBlYXQgaXMgbm93IC50ZXh0dXJlLnJlcGVhdC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUucmVwZWF0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdGZvcm1hdDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUuZm9ybWF0O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmZvcm1hdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHR0eXBlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLnR5cGU7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC50eXBlIGlzIG5vdyAudGV4dHVyZS50eXBlLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS50eXBlID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdGdlbmVyYXRlTWlwbWFwczoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmdlbmVyYXRlTWlwbWFwcyBpcyBub3cgLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZ2VuZXJhdGVNaXBtYXBzIGlzIG5vdyAudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdlYlZSTWFuYWdlci5wcm90b3R5cGUsIHtcblxuXHRzdGFuZGluZzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViVlJNYW5hZ2VyOiAuc3RhbmRpbmcgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHVzZXJIZWlnaHQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlZSTWFuYWdlcjogLnVzZXJIZWlnaHQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5BdWRpby5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICggZmlsZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogLmxvYWQgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkF1ZGlvTG9hZGVyIGluc3RlYWQuJyApO1xuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXHR2YXIgYXVkaW9Mb2FkZXIgPSBuZXcgQXVkaW9Mb2FkZXIoKTtcblx0YXVkaW9Mb2FkZXIubG9hZCggZmlsZSwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRzY29wZS5zZXRCdWZmZXIoIGJ1ZmZlciApO1xuXG5cdH0gKTtcblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkF1ZGlvQW5hbHlzZXIucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW9BbmFseXNlcjogLmdldERhdGEoKSBpcyBub3cgLmdldEZyZXF1ZW5jeURhdGEoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldEZyZXF1ZW5jeURhdGEoKTtcblxufTtcblxuLy9cblxuQ3ViZUNhbWVyYS5wcm90b3R5cGUudXBkYXRlQ3ViZU1hcCA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1YmVDYW1lcmE6IC51cGRhdGVDdWJlTWFwKCkgaXMgbm93IC51cGRhdGUoKS4nICk7XG5cdHJldHVybiB0aGlzLnVwZGF0ZSggcmVuZGVyZXIsIHNjZW5lICk7XG5cbn07XG5cbi8vXG5cbnZhciBHZW9tZXRyeVV0aWxzID0ge1xuXG5cdG1lcmdlOiBmdW5jdGlvbiAoIGdlb21ldHJ5MSwgZ2VvbWV0cnkyLCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR2VvbWV0cnlVdGlsczogLm1lcmdlKCkgaGFzIGJlZW4gbW92ZWQgdG8gR2VvbWV0cnkuIFVzZSBnZW9tZXRyeS5tZXJnZSggZ2VvbWV0cnkyLCBtYXRyaXgsIG1hdGVyaWFsSW5kZXhPZmZzZXQgKSBpbnN0ZWFkLicgKTtcblx0XHR2YXIgbWF0cml4O1xuXG5cdFx0aWYgKCBnZW9tZXRyeTIuaXNNZXNoICkge1xuXG5cdFx0XHRnZW9tZXRyeTIubWF0cml4QXV0b1VwZGF0ZSAmJiBnZW9tZXRyeTIudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdG1hdHJpeCA9IGdlb21ldHJ5Mi5tYXRyaXg7XG5cdFx0XHRnZW9tZXRyeTIgPSBnZW9tZXRyeTIuZ2VvbWV0cnk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeTEubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICk7XG5cblx0fSxcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5HZW9tZXRyeVV0aWxzOiAuY2VudGVyKCkgaGFzIGJlZW4gbW92ZWQgdG8gR2VvbWV0cnkuIFVzZSBnZW9tZXRyeS5jZW50ZXIoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gZ2VvbWV0cnkuY2VudGVyKCk7XG5cblx0fVxuXG59O1xuXG5JbWFnZVV0aWxzLmNyb3NzT3JpZ2luID0gdW5kZWZpbmVkO1xuXG5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKCB1cmwsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5UZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0dmFyIGxvYWRlciA9IG5ldyBUZXh0dXJlTG9hZGVyKCk7XG5cdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdHZhciB0ZXh0dXJlID0gbG9hZGVyLmxvYWQoIHVybCwgb25Mb2FkLCB1bmRlZmluZWQsIG9uRXJyb3IgKTtcblxuXHRpZiAoIG1hcHBpbmcgKSB0ZXh0dXJlLm1hcHBpbmcgPSBtYXBwaW5nO1xuXG5cdHJldHVybiB0ZXh0dXJlO1xuXG59O1xuXG5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSA9IGZ1bmN0aW9uICggdXJscywgbWFwcGluZywgb25Mb2FkLCBvbkVycm9yICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmVDdWJlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DdWJlVGV4dHVyZUxvYWRlcigpIGluc3RlYWQuJyApO1xuXG5cdHZhciBsb2FkZXIgPSBuZXcgQ3ViZVRleHR1cmVMb2FkZXIoKTtcblx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0dmFyIHRleHR1cmUgPSBsb2FkZXIubG9hZCggdXJscywgb25Mb2FkLCB1bmRlZmluZWQsIG9uRXJyb3IgKTtcblxuXHRpZiAoIG1hcHBpbmcgKSB0ZXh0dXJlLm1hcHBpbmcgPSBtYXBwaW5nO1xuXG5cdHJldHVybiB0ZXh0dXJlO1xuXG59O1xuXG5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkREU0xvYWRlciBpbnN0ZWFkLicgKTtcblxufTtcblxuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkREU0xvYWRlciBpbnN0ZWFkLicgKTtcblxufTtcblxuLy9cblxuZnVuY3Rpb24gUHJvamVjdG9yKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9qZWN0b3IgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3JlbmRlcmVycy9Qcm9qZWN0b3IuanMuJyApO1xuXG5cdHRoaXMucHJvamVjdFZlY3RvciA9IGZ1bmN0aW9uICggdmVjdG9yLCBjYW1lcmEgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Qcm9qZWN0b3I6IC5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci5wcm9qZWN0KCkuJyApO1xuXHRcdHZlY3Rvci5wcm9qZWN0KCBjYW1lcmEgKTtcblxuXHR9O1xuXG5cdHRoaXMudW5wcm9qZWN0VmVjdG9yID0gZnVuY3Rpb24gKCB2ZWN0b3IsIGNhbWVyYSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlByb2plY3RvcjogLnVucHJvamVjdFZlY3RvcigpIGlzIG5vdyB2ZWN0b3IudW5wcm9qZWN0KCkuJyApO1xuXHRcdHZlY3Rvci51bnByb2plY3QoIGNhbWVyYSApO1xuXG5cdH07XG5cblx0dGhpcy5waWNraW5nUmF5ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb2plY3RvcjogLnBpY2tpbmdSYXkoKSBpcyBub3cgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEoKS4nICk7XG5cblx0fTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBDYW52YXNSZW5kZXJlcigpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQ2FudmFzUmVuZGVyZXIgaGFzIGJlZW4gcmVtb3ZlZCcgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBKU09OTG9hZGVyKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5KU09OTG9hZGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59XG5cbi8vXG5cbnZhciBTY2VuZVV0aWxzID0ge1xuXG5cdGNyZWF0ZU11bHRpTWF0ZXJpYWxPYmplY3Q6IGZ1bmN0aW9uICggLyogZ2VvbWV0cnksIG1hdGVyaWFscyAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TY2VuZVV0aWxzIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBwYXJlbnQsIHNjZW5lICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3V0aWxzL1NjZW5lVXRpbHMuanMnICk7XG5cblx0fSxcblxuXHRhdHRhY2g6IGZ1bmN0aW9uICggLyogY2hpbGQsIHNjZW5lLCBwYXJlbnQgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2NlbmVVdGlscyBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvdXRpbHMvU2NlbmVVdGlscy5qcycgKTtcblxuXHR9XG5cbn07XG5cbi8vXG5cbmZ1bmN0aW9uIExlbnNGbGFyZSgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTGVuc0ZsYXJlIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy9vYmplY3RzL0xlbnNmbGFyZS5qcycgKTtcblxufVxuXG5leHBvcnQgeyBXZWJHTFJlbmRlclRhcmdldEN1YmUsIFdlYkdMUmVuZGVyVGFyZ2V0LCBXZWJHTFJlbmRlcmVyLCBTaGFkZXJMaWIsIFVuaWZvcm1zTGliLCBVbmlmb3Jtc1V0aWxzLCBTaGFkZXJDaHVuaywgRm9nRXhwMiwgRm9nLCBTY2VuZSwgU3ByaXRlLCBMT0QsIFNraW5uZWRNZXNoLCBTa2VsZXRvbiwgQm9uZSwgTWVzaCwgTGluZVNlZ21lbnRzLCBMaW5lTG9vcCwgTGluZSwgUG9pbnRzLCBHcm91cCwgVmlkZW9UZXh0dXJlLCBEYXRhVGV4dHVyZSwgRGF0YVRleHR1cmUzRCwgQ29tcHJlc3NlZFRleHR1cmUsIEN1YmVUZXh0dXJlLCBDYW52YXNUZXh0dXJlLCBEZXB0aFRleHR1cmUsIFRleHR1cmUsIEFuaW1hdGlvbkxvYWRlciwgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIsIERhdGFUZXh0dXJlTG9hZGVyLCBDdWJlVGV4dHVyZUxvYWRlciwgVGV4dHVyZUxvYWRlciwgT2JqZWN0TG9hZGVyLCBNYXRlcmlhbExvYWRlciwgQnVmZmVyR2VvbWV0cnlMb2FkZXIsIERlZmF1bHRMb2FkaW5nTWFuYWdlciwgTG9hZGluZ01hbmFnZXIsIEltYWdlTG9hZGVyLCBJbWFnZUJpdG1hcExvYWRlciwgRm9udExvYWRlciwgRmlsZUxvYWRlciwgTG9hZGVyLCBMb2FkZXJVdGlscywgQ2FjaGUsIEF1ZGlvTG9hZGVyLCBTcG90TGlnaHRTaGFkb3csIFNwb3RMaWdodCwgUG9pbnRMaWdodCwgUmVjdEFyZWFMaWdodCwgSGVtaXNwaGVyZUxpZ2h0LCBEaXJlY3Rpb25hbExpZ2h0U2hhZG93LCBEaXJlY3Rpb25hbExpZ2h0LCBBbWJpZW50TGlnaHQsIExpZ2h0U2hhZG93LCBMaWdodCwgU3RlcmVvQ2FtZXJhLCBQZXJzcGVjdGl2ZUNhbWVyYSwgT3J0aG9ncmFwaGljQ2FtZXJhLCBDdWJlQ2FtZXJhLCBBcnJheUNhbWVyYSwgQ2FtZXJhLCBBdWRpb0xpc3RlbmVyLCBQb3NpdGlvbmFsQXVkaW8sIEF1ZGlvQ29udGV4dCwgQXVkaW9BbmFseXNlciwgQXVkaW8sIFZlY3RvcktleWZyYW1lVHJhY2ssIFN0cmluZ0tleWZyYW1lVHJhY2ssIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBOdW1iZXJLZXlmcmFtZVRyYWNrLCBDb2xvcktleWZyYW1lVHJhY2ssIEJvb2xlYW5LZXlmcmFtZVRyYWNrLCBQcm9wZXJ0eU1peGVyLCBQcm9wZXJ0eUJpbmRpbmcsIEtleWZyYW1lVHJhY2ssIEFuaW1hdGlvblV0aWxzLCBBbmltYXRpb25PYmplY3RHcm91cCwgQW5pbWF0aW9uTWl4ZXIsIEFuaW1hdGlvbkNsaXAsIFVuaWZvcm0sIEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LCBCdWZmZXJHZW9tZXRyeSwgR2VvbWV0cnksIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLCBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciwgSW50ZXJsZWF2ZWRCdWZmZXIsIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSwgRmFjZTMsIE9iamVjdDNELCBSYXljYXN0ZXIsIExheWVycywgRXZlbnREaXNwYXRjaGVyLCBDbG9jaywgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LCBMaW5lYXJJbnRlcnBvbGFudCwgRGlzY3JldGVJbnRlcnBvbGFudCwgQ3ViaWNJbnRlcnBvbGFudCwgSW50ZXJwb2xhbnQsIFRyaWFuZ2xlLCBfTWF0aCBhcyBNYXRoLCBTcGhlcmljYWwsIEN5bGluZHJpY2FsLCBQbGFuZSwgRnJ1c3R1bSwgU3BoZXJlLCBSYXksIE1hdHJpeDQsIE1hdHJpeDMsIEJveDMsIEJveDIsIExpbmUzLCBFdWxlciwgVmVjdG9yNCwgVmVjdG9yMywgVmVjdG9yMiwgUXVhdGVybmlvbiwgQ29sb3IsIEltbWVkaWF0ZVJlbmRlck9iamVjdCwgVmVydGV4Tm9ybWFsc0hlbHBlciwgU3BvdExpZ2h0SGVscGVyLCBTa2VsZXRvbkhlbHBlciwgUG9pbnRMaWdodEhlbHBlciwgUmVjdEFyZWFMaWdodEhlbHBlciwgSGVtaXNwaGVyZUxpZ2h0SGVscGVyLCBHcmlkSGVscGVyLCBQb2xhckdyaWRIZWxwZXIsIEZhY2VOb3JtYWxzSGVscGVyLCBEaXJlY3Rpb25hbExpZ2h0SGVscGVyLCBDYW1lcmFIZWxwZXIsIEJveEhlbHBlciwgQm94M0hlbHBlciwgUGxhbmVIZWxwZXIsIEFycm93SGVscGVyLCBBeGVzSGVscGVyLCBTaGFwZSwgUGF0aCwgU2hhcGVQYXRoLCBGb250LCBDdXJ2ZVBhdGgsIEN1cnZlLCBJbWFnZVV0aWxzLCBTaGFwZVV0aWxzLCBXZWJHTFV0aWxzLCBXaXJlZnJhbWVHZW9tZXRyeSwgUGFyYW1ldHJpY0dlb21ldHJ5LCBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnksIFRldHJhaGVkcm9uR2VvbWV0cnksIFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnksIE9jdGFoZWRyb25HZW9tZXRyeSwgT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBJY29zYWhlZHJvbkdlb21ldHJ5LCBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBEb2RlY2FoZWRyb25HZW9tZXRyeSwgRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnksIFBvbHloZWRyb25HZW9tZXRyeSwgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBUdWJlR2VvbWV0cnksIFR1YmVCdWZmZXJHZW9tZXRyeSwgVG9ydXNLbm90R2VvbWV0cnksIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LCBUb3J1c0dlb21ldHJ5LCBUb3J1c0J1ZmZlckdlb21ldHJ5LCBUZXh0R2VvbWV0cnksIFRleHRCdWZmZXJHZW9tZXRyeSwgU3BoZXJlR2VvbWV0cnksIFNwaGVyZUJ1ZmZlckdlb21ldHJ5LCBSaW5nR2VvbWV0cnksIFJpbmdCdWZmZXJHZW9tZXRyeSwgUGxhbmVHZW9tZXRyeSwgUGxhbmVCdWZmZXJHZW9tZXRyeSwgTGF0aGVHZW9tZXRyeSwgTGF0aGVCdWZmZXJHZW9tZXRyeSwgU2hhcGVHZW9tZXRyeSwgU2hhcGVCdWZmZXJHZW9tZXRyeSwgRXh0cnVkZUdlb21ldHJ5LCBFeHRydWRlQnVmZmVyR2VvbWV0cnksIEVkZ2VzR2VvbWV0cnksIENvbmVHZW9tZXRyeSwgQ29uZUJ1ZmZlckdlb21ldHJ5LCBDeWxpbmRlckdlb21ldHJ5LCBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LCBDaXJjbGVHZW9tZXRyeSwgQ2lyY2xlQnVmZmVyR2VvbWV0cnksIEJveEdlb21ldHJ5LCBCb3hCdWZmZXJHZW9tZXRyeSwgU2hhZG93TWF0ZXJpYWwsIFNwcml0ZU1hdGVyaWFsLCBSYXdTaGFkZXJNYXRlcmlhbCwgU2hhZGVyTWF0ZXJpYWwsIFBvaW50c01hdGVyaWFsLCBNZXNoUGh5c2ljYWxNYXRlcmlhbCwgTWVzaFN0YW5kYXJkTWF0ZXJpYWwsIE1lc2hQaG9uZ01hdGVyaWFsLCBNZXNoVG9vbk1hdGVyaWFsLCBNZXNoTm9ybWFsTWF0ZXJpYWwsIE1lc2hMYW1iZXJ0TWF0ZXJpYWwsIE1lc2hEZXB0aE1hdGVyaWFsLCBNZXNoRGlzdGFuY2VNYXRlcmlhbCwgTWVzaEJhc2ljTWF0ZXJpYWwsIE1lc2hNYXRjYXBNYXRlcmlhbCwgTGluZURhc2hlZE1hdGVyaWFsLCBMaW5lQmFzaWNNYXRlcmlhbCwgTWF0ZXJpYWwsIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgSW50MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgSW50MTZCdWZmZXJBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSwgVWludDhCdWZmZXJBdHRyaWJ1dGUsIEludDhCdWZmZXJBdHRyaWJ1dGUsIEJ1ZmZlckF0dHJpYnV0ZSwgQXJjQ3VydmUsIENhdG11bGxSb21DdXJ2ZTMsIEN1YmljQmV6aWVyQ3VydmUsIEN1YmljQmV6aWVyQ3VydmUzLCBFbGxpcHNlQ3VydmUsIExpbmVDdXJ2ZSwgTGluZUN1cnZlMywgUXVhZHJhdGljQmV6aWVyQ3VydmUsIFF1YWRyYXRpY0JlemllckN1cnZlMywgU3BsaW5lQ3VydmUsIFJFVklTSU9OLCBNT1VTRSwgQ3VsbEZhY2VOb25lLCBDdWxsRmFjZUJhY2ssIEN1bGxGYWNlRnJvbnQsIEN1bGxGYWNlRnJvbnRCYWNrLCBGcm9udEZhY2VEaXJlY3Rpb25DVywgRnJvbnRGYWNlRGlyZWN0aW9uQ0NXLCBCYXNpY1NoYWRvd01hcCwgUENGU2hhZG93TWFwLCBQQ0ZTb2Z0U2hhZG93TWFwLCBGcm9udFNpZGUsIEJhY2tTaWRlLCBEb3VibGVTaWRlLCBGbGF0U2hhZGluZywgU21vb3RoU2hhZGluZywgTm9Db2xvcnMsIEZhY2VDb2xvcnMsIFZlcnRleENvbG9ycywgTm9CbGVuZGluZywgTm9ybWFsQmxlbmRpbmcsIEFkZGl0aXZlQmxlbmRpbmcsIFN1YnRyYWN0aXZlQmxlbmRpbmcsIE11bHRpcGx5QmxlbmRpbmcsIEN1c3RvbUJsZW5kaW5nLCBBZGRFcXVhdGlvbiwgU3VidHJhY3RFcXVhdGlvbiwgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24sIE1pbkVxdWF0aW9uLCBNYXhFcXVhdGlvbiwgWmVyb0ZhY3RvciwgT25lRmFjdG9yLCBTcmNDb2xvckZhY3RvciwgT25lTWludXNTcmNDb2xvckZhY3RvciwgU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIERzdEFscGhhRmFjdG9yLCBPbmVNaW51c0RzdEFscGhhRmFjdG9yLCBEc3RDb2xvckZhY3RvciwgT25lTWludXNEc3RDb2xvckZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgTmV2ZXJEZXB0aCwgQWx3YXlzRGVwdGgsIExlc3NEZXB0aCwgTGVzc0VxdWFsRGVwdGgsIEVxdWFsRGVwdGgsIEdyZWF0ZXJFcXVhbERlcHRoLCBHcmVhdGVyRGVwdGgsIE5vdEVxdWFsRGVwdGgsIE11bHRpcGx5T3BlcmF0aW9uLCBNaXhPcGVyYXRpb24sIEFkZE9wZXJhdGlvbiwgTm9Ub25lTWFwcGluZywgTGluZWFyVG9uZU1hcHBpbmcsIFJlaW5oYXJkVG9uZU1hcHBpbmcsIFVuY2hhcnRlZDJUb25lTWFwcGluZywgQ2luZW9uVG9uZU1hcHBpbmcsIEFDRVNGaWxtaWNUb25lTWFwcGluZywgVVZNYXBwaW5nLCBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVSZWZyYWN0aW9uTWFwcGluZywgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLCBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nLCBSZXBlYXRXcmFwcGluZywgQ2xhbXBUb0VkZ2VXcmFwcGluZywgTWlycm9yZWRSZXBlYXRXcmFwcGluZywgTmVhcmVzdEZpbHRlciwgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIsIExpbmVhckZpbHRlciwgTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciwgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyLCBVbnNpZ25lZEJ5dGVUeXBlLCBCeXRlVHlwZSwgU2hvcnRUeXBlLCBVbnNpZ25lZFNob3J0VHlwZSwgSW50VHlwZSwgVW5zaWduZWRJbnRUeXBlLCBGbG9hdFR5cGUsIEhhbGZGbG9hdFR5cGUsIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSwgVW5zaWduZWRTaG9ydDU1NTFUeXBlLCBVbnNpZ25lZFNob3J0NTY1VHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBBbHBoYUZvcm1hdCwgUkdCRm9ybWF0LCBSR0JBRm9ybWF0LCBMdW1pbmFuY2VGb3JtYXQsIEx1bWluYW5jZUFscGhhRm9ybWF0LCBSR0JFRm9ybWF0LCBEZXB0aEZvcm1hdCwgRGVwdGhTdGVuY2lsRm9ybWF0LCBSZWRGb3JtYXQsIFJHQl9TM1RDX0RYVDFfRm9ybWF0LCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDVfRm9ybWF0LCBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCwgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JfRVRDMV9Gb3JtYXQsIFJHQkFfQVNUQ180eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDVfRm9ybWF0LCBSR0JBX0FTVENfNng2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4NV9Gb3JtYXQsIFJHQkFfQVNUQ184eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDVfRm9ybWF0LCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCwgTG9vcE9uY2UsIExvb3BSZXBlYXQsIExvb3BQaW5nUG9uZywgSW50ZXJwb2xhdGVEaXNjcmV0ZSwgSW50ZXJwb2xhdGVMaW5lYXIsIEludGVycG9sYXRlU21vb3RoLCBaZXJvQ3VydmF0dXJlRW5kaW5nLCBaZXJvU2xvcGVFbmRpbmcsIFdyYXBBcm91bmRFbmRpbmcsIFRyaWFuZ2xlc0RyYXdNb2RlLCBUcmlhbmdsZVN0cmlwRHJhd01vZGUsIFRyaWFuZ2xlRmFuRHJhd01vZGUsIExpbmVhckVuY29kaW5nLCBzUkdCRW5jb2RpbmcsIEdhbW1hRW5jb2RpbmcsIFJHQkVFbmNvZGluZywgTG9nTHV2RW5jb2RpbmcsIFJHQk03RW5jb2RpbmcsIFJHQk0xNkVuY29kaW5nLCBSR0JERW5jb2RpbmcsIEJhc2ljRGVwdGhQYWNraW5nLCBSR0JBRGVwdGhQYWNraW5nLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAsIE9iamVjdFNwYWNlTm9ybWFsTWFwLCBCb3hHZW9tZXRyeSBhcyBDdWJlR2VvbWV0cnksIEZhY2U0LCBMaW5lU3RyaXAsIExpbmVQaWVjZXMsIE1lc2hGYWNlTWF0ZXJpYWwsIE11bHRpTWF0ZXJpYWwsIFBvaW50Q2xvdWQsIFBhcnRpY2xlLCBQYXJ0aWNsZVN5c3RlbSwgUG9pbnRDbG91ZE1hdGVyaWFsLCBQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwsIFBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwsIFZlcnRleCwgRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSwgSW50OEF0dHJpYnV0ZSwgVWludDhBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSwgSW50MTZBdHRyaWJ1dGUsIFVpbnQxNkF0dHJpYnV0ZSwgSW50MzJBdHRyaWJ1dGUsIFVpbnQzMkF0dHJpYnV0ZSwgRmxvYXQzMkF0dHJpYnV0ZSwgRmxvYXQ2NEF0dHJpYnV0ZSwgQ2xvc2VkU3BsaW5lQ3VydmUzLCBTcGxpbmVDdXJ2ZTMsIFNwbGluZSwgQXhpc0hlbHBlciwgQm91bmRpbmdCb3hIZWxwZXIsIEVkZ2VzSGVscGVyLCBXaXJlZnJhbWVIZWxwZXIsIFhIUkxvYWRlciwgQmluYXJ5VGV4dHVyZUxvYWRlciwgR2VvbWV0cnlVdGlscywgUHJvamVjdG9yLCBDYW52YXNSZW5kZXJlciwgSlNPTkxvYWRlciwgU2NlbmVVdGlscywgTGVuc0ZsYXJlIH07XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcclxuaW1wb3J0IHsgU2VxdWVuY2VUeXBlcywgQW5pbWF0aW9uU2NoZW1hIH0gZnJvbSBcIi4vYW5pbWF0aW9uc2NoZW1hXCI7XHJcblxyXG4vKipcclxuICogUG9zaXRpb24gY29tcG9uZW50LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQb3NpdGlvbkNvbXBvbmVudCB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB6OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSdWRpbWVudGFyeSB2ZWxvY2l0eS4uLiB3aWxsIHJlcGxhY2UgZGlyZWN0aW9ucyB3aXRoXHJcbiAqIGFuZ2xlIGFuZCBtYWduaXR1ZGUgbGF0ZXIgb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmVsb2NpdHlDb21wb25lbnQge1xyXG4gICAgbGVmdDogYm9vbGVhbjtcclxuICAgIHJpZ2h0OiBib29sZWFuO1xyXG4gICAgdXA6IGJvb2xlYW47XHJcbiAgICBkb3duOiBib29sZWFuO1xyXG4gICAgc3BlZWQ6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2xsYWJsZSBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyb2xsYWJsZUNvbXBvbmVudCB7XHJcbiAgICBqdW1wOiBib29sZWFuO1xyXG4gICAgYXR0YWNrOiBib29sZWFuO1xyXG4gICAgYXR0YWNrVGltZXI6IG51bWJlcjtcclxuICAgIGF0dGFja2VkOiBib29sZWFuO1xyXG4gICAgbGVmdDogYm9vbGVhbjtcclxuICAgIHJpZ2h0OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogSGl0Qm94IENvbXBvbmVudCB0aGF0IHJlcHJlc2VudHMgdGhlIGFyZWEgdGhhdCB3aGVuIGNvbGxpZGluZyB3aXRoXHJcbiAqIGFueSBvZiB0aGUgXCJjb2xsaWRlc1dpdGhcIiBlbnVtIGVudHJpZXMsIGVudGl0eSB3aWxsIFwiaGl0XCIgdGhlbS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGl0Qm94Q29tcG9uZW50IHtcclxuICAgIC8vIGNvbGxpZGVUeXBlOiBDb2xsaWRhYmxlcztcclxuICAgIGNvbGxpZGVzV2l0aDogSHVydFR5cGVzW107XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBvbkhpdDogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEh1cnRCb3ggQ29tcG9uZW50IHRoYXQgcmVwcmVzZW50cyB0aGUgYXJlYSB0aGF0IHdoZW4gY29sbGlkaW5nIHdpdGhcclxuICogYW55IG9mIHRoZSBcImNvbGxpZGVzV2l0aFwiIGVudW0gZW50cmllcywgZW50aXR5IHdpbGwgXCJodXJ0XCIgdGhlbS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSHVydEJveENvbXBvbmVudCB7XHJcbiAgICB0eXBlOiBIdXJ0VHlwZXM7XHJcbiAgICAvLyBjb2xsaWRlc1dpdGg6IENvbGxpZGFibGVzW107XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBvbkh1cnQ/OiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG4vKipcclxuICogQW5pbWF0aW9uIENvbXBvbmVudC4gT2JqIGlzIHRvIGJlIHNldCB2aWEgYSBqc29uIGZpbGUuXHJcbiAqIENoYW5nZSB0aGUgc2VxdWVuY2Ugc3RyaW5nIHRvIGNoYW5nZSB3aGljaCBhbmltYXRpb24gaXNcclxuICogYmVpbmcgcGxheWVkLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBbmltYXRpb25Db21wb25lbnQge1xyXG4gICAgc2VxdWVuY2U6IFNlcXVlbmNlVHlwZXM7XHJcbiAgICBibG9iOiBBbmltYXRpb25TY2hlbWE7XHJcbiAgICB0aWNrczogbnVtYmVyO1xyXG4gICAgZnJhbWU6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRpbWVyIGZvciBzaG9ydC1saXZlZCBlbnRpdGllcy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGltZXJDb21wb25lbnQge1xyXG4gICAgdGlja3M6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3Qgb2YgYWxsIHRoaW5ncyB0aGF0IGNhbiBjb2xsaWRlIHdpdGggZWFjaCBvdGhlci4gTmFtaW5nIGlzIGFyYml0cmFyeVxyXG4gKiBhcyBsb25nIGFzIHRoZXkgYXJlIHByb3Blcmx5IHNldCBpbiBIaXQvSHVydCBCb3ggXCJjb2xsaWRlc1dpdGhcIiBwcm9wZXJ0eS5cclxuICovXHJcbmV4cG9ydCBlbnVtIEh1cnRUeXBlcyB7XHJcbiAgICB0ZXN0LFxyXG4gICAgLy8gLi5cclxufVxyXG5cclxuLyoqXHJcbiAqIEZyZWUgZnVuY3Rpb24gdG8gaW5pdGlhbGl6ZSBDb250cm9sbGFibGVDb21wb25lbnQgdG8gbWFpbnRhaW4gaW52YXJpYW5jZVxyXG4gKiBhdCBjcmVhdGlvbiBvZiB0aGUgb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVDb250cm9scygpOiBDb250cm9sbGFibGVDb21wb25lbnQge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBqdW1wOiBmYWxzZSxcclxuICAgICAgICBhdHRhY2s6IGZhbHNlLFxyXG4gICAgICAgIGF0dGFja1RpbWVyOiAwLFxyXG4gICAgICAgIGF0dGFja2VkOiBmYWxzZSxcclxuICAgICAgICBsZWZ0OiBmYWxzZSxcclxuICAgICAgICByaWdodDogZmFsc2UsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogSGVscGVyIGZvciBpbnRpYWxpemluZyBhbiBlbnRpdHkncyBhbmltYXRpb24gYmxvYiBhbmQgc3RhcnRpbmcgc2VxdWVuY2UuXHJcbiAqIEBwYXJhbSBzdGFydGluZ1NlcXVlbmNlIFxyXG4gKiBAcGFyYW0gYW5pbUJsb2IgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUFuaW1hdGlvbihzdGFydGluZ1NlcXVlbmNlOiBTZXF1ZW5jZVR5cGVzLCBhbmltQmxvYjogQW5pbWF0aW9uU2NoZW1hKSA6IEFuaW1hdGlvbkNvbXBvbmVudCB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNlcXVlbmNlOiBzdGFydGluZ1NlcXVlbmNlLFxyXG4gICAgICAgIGJsb2I6IGFuaW1CbG9iLFxyXG4gICAgICAgIHRpY2tzOiBhbmltQmxvYltzdGFydGluZ1NlcXVlbmNlXVswXS50aWNrcyxcclxuICAgICAgICBmcmFtZTogMCxcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmb3IgaW5pdGlhbGl6aW5nIGFuIGVudGl0eSdzIGh1cnQgYm94LlxyXG4gKiBOb3RlOiBgYG9uSHVydGBgIGNhbGxiYWNrIHNob3VsZCBiZSBzZXQgaW5kZXBlbmRlbnRseS5cclxuICogQHBhcmFtIGVudE1lc2ggQW4gZW50aXR5J3MgbWVzaCBBLksuQS4gc3ByaXRlIHRvIGJlIHNldCBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0gaHVydFR5cGUgSHVydEJveCB0eXBlLlxyXG4gKiBAcGFyYW0gb2ZmU2V0WCAoRGVmYXVsdCAwKSBOdW1iZXIgb2YgcGl4ZWxzIHRvIG9mZnNldCB0aGUgaHVydGJveCdzIHggcG9zaXRpb24gZnJvbSB0aGUgZW50aXR5J3MgeCBwb3NpdGlvbi5cclxuICogQSBwb3NpdGl2ZSBudW1iZXIgd2lsbCByZXN1bHQgaW4gYSByaWdodHdhcmQgc2hpZnQgb2YgdGhlIGh1cnRib3guXHJcbiAqIEBwYXJhbSBvZmZTZXRZIChEZWZhdWx0IDApIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBodXJ0Ym94J3MgeSBwb3NpdGlvbiBmcm9tIHRoZSBlbnRpdHkncyB5IHBvc2l0aW9uLlxyXG4gKiBBIHBvc2l0aXZlIG51bWJlciB3aWxsIHJlc3VsdCBpbiBhIGRvd253YXJkIHNoaWZ0IG9mIHRoZSBodXJ0Ym94LlxyXG4gKiBAcGFyYW0gbWFudWFsSGVpZ2h0IChPcHRpb25hbCkgRXhhY3QgbnVtYmVyIG9mIHBpeGVscyB0byBzZXQgZm9yIHRoZSBodXJ0Qm94J3MgaGVpZ2h0LlxyXG4gKiBNdXN0IGFsc28gc2V0IGBgbWFudWFsV2lkdGhgYCBmb3IgdGhpcyB0byB0YWtlIGVmZmVjdC5cclxuICogQHBhcmFtIG1hbnVhbFdpZHRoIChPcHRpb25hbCkgRXhhY3QgbnVtYmVyIG9mIHBpeGVscyB0byBzZXQgZm9yIHRoZSBodXJ0Qm94J3Mgd2lkdGguXHJcbiAqIE11c3QgYWxzbyBzZXQgYGBtYW51YWxIZWlnaHRgYCBmb3IgdGhpcyB0byB0YWtlIGVmZmVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplSHVydEJveChlbnRNZXNoOiBUSFJFRS5NZXNoLCBodXJ0VHlwZTogSHVydFR5cGVzLCBvZmZTZXRYOiBudW1iZXIgPSAwLCBvZmZTZXRZOiBudW1iZXIgPSAwLCBtYW51YWxIZWlnaHQ/OiBudW1iZXIsIG1hbnVhbFdpZHRoPzogbnVtYmVyKSA6IEh1cnRCb3hDb21wb25lbnQge1xyXG4gICAgbGV0IGh1cnRCb3g6IEh1cnRCb3hDb21wb25lbnQgPSB7IHR5cGU6IGh1cnRUeXBlLCBoZWlnaHQ6IDAsIHdpZHRoOiAwIH07XHJcblxyXG4gICAgaWYgKG1hbnVhbEhlaWdodCAhPT0gdW5kZWZpbmVkICYmIG1hbnVhbFdpZHRoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBodXJ0Qm94LmhlaWdodCA9IG1hbnVhbEhlaWdodCAtIG9mZlNldFk7XHJcbiAgICAgICAgaHVydEJveC53aWR0aCA9IG1hbnVhbFdpZHRoICsgb2ZmU2V0WDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KGVudE1lc2gpO1xyXG4gICAgICAgIGh1cnRCb3guaGVpZ2h0ID0gYm91bmRpbmdCb3gubWF4LnkgLSBib3VuZGluZ0JveC5taW4ueSAtIG9mZlNldFk7XHJcbiAgICAgICAgaHVydEJveC53aWR0aCA9ICBib3VuZGluZ0JveC5tYXgueCAtIGJvdW5kaW5nQm94Lm1pbi54ICsgb2ZmU2V0WDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaHVydEJveDtcclxufSIsIi8vIGV4cG9ydCB0eXBlIEFuaW1hdGlvblNjaGVtYTxUIGV4dGVuZHMgU2VxdWVuY2VUeXBlcz4gPSB7XHJcbi8vICAgICAvKipcclxuLy8gICAgICAqIEtleSBpbnRvIGFuIGFuaW1hdGlvbiBzZXF1ZW5jZSB1c2luZyB0aGVcclxuLy8gICAgICAqIFNlcXVlbmNlVHlwZXMgZW51bS5cclxuLy8gICAgICAqL1xyXG4vLyAgICAgW1AgaW4ga2V5b2YgVF06IEFycmF5PHtcclxuLy8gICAgICAgICAvKipcclxuLy8gICAgICAgICAgKiBOdW1iZXIgb2YgdGlja3MgdW50aWwgdGhlIG5leHQgZnJhbWUgaXMgZGlzcGxheWVkLlxyXG4vLyAgICAgICAgICAqL1xyXG4vLyAgICAgICAgIHRpY2tzOiBudW1iZXIsXHJcbi8vICAgICAgICAgLyoqXHJcbi8vICAgICAgICAgICogVXJsIHBhdGggdG8gdGhlIGZpbGUgb2YgdGhlIGZyYW1lJ3MgdGV4dHVyZS5cclxuLy8gICAgICAgICAgKi9cclxuLy8gICAgICAgICB0ZXh0dXJlOiBzdHJpbmcsXHJcbi8vICAgICAgICAgLyoqXHJcbi8vICAgICAgICAgICogSW5kZXggb2YgZnJhbWUgdGhhdCB3aWxsIGRpc3BsYXkgb25jZSB0aWNrcyA9PSAwLlxyXG4vLyAgICAgICAgICAqL1xyXG4vLyAgICAgICAgIG5leHRGcmFtZTogbnVtYmVyXHJcbi8vICAgICB9PjtcclxuLy8gfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBbmltYXRpb25TY2hlbWEge1xyXG4gICAgLyoqXHJcbiAgICAgKiBLZXkgaW50byBhbiBhbmltYXRpb24gc2VxdWVuY2UgdXNpbmcgdGhlXHJcbiAgICAgKiBpbmRleCBvZiB0aGUgU2VxdWVuY2VUeXBlcyBlbnVtLlxyXG4gICAgICovXHJcbiAgICBbaW5kZXg6IG51bWJlcl06IEFycmF5PHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBOdW1iZXIgb2YgdGlja3MgdW50aWwgdGhlIG5leHQgZnJhbWUgaXMgZGlzcGxheWVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpY2tzOiBudW1iZXIsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXJsIHBhdGggdG8gdGhlIGZpbGUgb2YgdGhlIGZyYW1lJ3MgdGV4dHVyZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0ZXh0dXJlOiBzdHJpbmcsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kZXggb2YgZnJhbWUgdGhhdCB3aWxsIGRpc3BsYXkgb25jZSB0aWNrcyA9PSAwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5leHRGcmFtZTogbnVtYmVyXHJcbiAgICB9PjtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU2VxdWVuY2VUeXBlcyB7XHJcbiAgICBpZGxlLFxyXG4gICAgd2FsayxcclxuICAgIHJ1bixcclxuICAgIGF0dGFja1xyXG59IiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VzXHJcbntcclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogUmVzb3VyY2VzO1xyXG5cclxuICAgIHByaXZhdGUgX3RleHR1cmVzOiBVcmxUb1RleHR1cmVNYXAgPSB7fTtcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2UgfHwgKHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRleHR1cmUodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dHVyZXNbdXJsXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRleHR1cmUgbm90IGZvdW5kLiBDaGVjayB1cmwgYW5kIGVuc3VyZSB0ZXh0dXJlIGlzIGJlaW5nIGxvYWRlZC5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZXNbdXJsXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRleHR1cmVzKHZhbHVlOiBVcmxUb1RleHR1cmVNYXApIHtcclxuICAgICAgICB0aGlzLl90ZXh0dXJlcyA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZFRleHR1cmVzKHVybHM6IHN0cmluZ1tdKSA6IFByb21pc2U8VXJsVG9UZXh0dXJlTWFwPiB7XHJcbiAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xyXG4gICAgbGV0IGNhY2hlZFRleHR1cmVzOiBVcmxUb1RleHR1cmVNYXAgPSB7fTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6ICh2YWx1ZTogVXJsVG9UZXh0dXJlTWFwKSA9PiB2b2lkLCByZWplY3QpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHRleHR1cmUgPSBsb2FkZXIubG9hZCh1cmxzW2ldLCBmdW5jdGlvbih0ZXgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAodXJscy5sZW5ndGggLSAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY2FjaGVkVGV4dHVyZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNhY2hlZFRleHR1cmVzW3VybHNbaV1dID0gdGV4dHVyZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVcmxUb1RleHR1cmVNYXAge1xyXG4gICAgW3VybDogc3RyaW5nXTogVEhSRUUuVGV4dHVyZTtcclxufSIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xyXG5pbXBvcnQgeyBSZXNvdXJjZXMgfSBmcm9tIFwiLi9yZXNvdXJjZW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgQW5pbWF0aW9uQ29tcG9uZW50LCBIdXJ0Qm94Q29tcG9uZW50IH0gZnJvbSBcIi4vY29yZWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgU2VxdWVuY2VUeXBlcyB9IGZyb20gXCIuL2FuaW1hdGlvbnNjaGVtYVwiO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBtZXRob2QgdG8gYWRkIGEgc3ByaXRlIHRvIHRoZSBzdGFnZS5cclxuICogQHBhcmFtIHVybCBQYXRoIHRvIHRleHR1cmUgZmlsZS4gU3RhcnRzIGF0IGN1cnJlbnQgZmlsZSBwYXRoLlxyXG4gKiBAcGFyYW0gc2NlbmUgVEhSRUUuU2NlbmUuXHJcbiAqIEBwYXJhbSBwaXhlbFJhdGlvIE51bWJlciBvZiBwaXhlbHMgdG8gc2NhbGUgdGV4dHVyZSdzIGhlaWdodCBhbmQgd2lkdGggYnkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0U3ByaXRlKHVybDogc3RyaW5nLCBzY2VuZTogVEhSRUUuU2NlbmUsIHBpeGVsUmF0aW86IG51bWJlcikgOiBUSFJFRS5NZXNoIHtcclxuICAgIC8vIGdldCB0ZXh0dXJlIGZyb20gY2FjaGVkIHJlc291cmNlc1xyXG4gICAgbGV0IHNwcml0ZU1hcCA9IFJlc291cmNlcy5pbnN0YW5jZS5nZXRUZXh0dXJlKHVybCk7XHJcbiAgICAvLyBsb2FkIGdlb21ldHJ5IChjb25zaWRlciBjYWNoaW5nIHRoZXNlIGFzIHdlbGwpXHJcbiAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzcHJpdGVNYXAuaW1hZ2Uud2lkdGgqcGl4ZWxSYXRpbywgc3ByaXRlTWFwLmltYWdlLmhlaWdodCpwaXhlbFJhdGlvKTtcclxuICAgIC8vIHNldCBtYWdGaWx0ZXIgdG8gbmVhcmVzdCBmb3IgY3Jpc3AgbG9va2luZyBwaXhlbHNcclxuICAgIHNwcml0ZU1hcC5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG4gICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IG1hcDogc3ByaXRlTWFwLCB0cmFuc3BhcmVudDogdHJ1ZSB9KTtcclxuICAgIHZhciBzcHJpdGUgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgc2NlbmUuYWRkKHNwcml0ZSk7XHJcblxyXG4gICAgcmV0dXJuIHNwcml0ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmb3Igc3dhcHBpbmcgb3V0IGFuIGFuaW1hdGlvbiBzZXF1ZW5jZS5cclxuICogQHBhcmFtIHNlcXVlbmNlIFxyXG4gKiBAcGFyYW0gYW5pbSBcclxuICogQHBhcmFtIGZyYW1lIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVNlcXVlbmNlKHNlcXVlbmNlOiBTZXF1ZW5jZVR5cGVzLCBhbmltOiBBbmltYXRpb25Db21wb25lbnQsIGZyYW1lOiBudW1iZXIgPSAwKSA6IEFuaW1hdGlvbkNvbXBvbmVudCB7XHJcbiAgICBhbmltLnNlcXVlbmNlID0gc2VxdWVuY2U7XHJcbiAgICBhbmltLmZyYW1lID0gZnJhbWU7XHJcbiAgICByZXR1cm4gYW5pbTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciB0byBzZXQgdmlzdWFscyBmb3IgYSBodXJ0Qm94LlxyXG4gKiBVc2VkIGZvciB0ZXN0aW5nIGhpdCBjb2xsaXNpb24gYXNzdW1wdGlvbnMuXHJcbiAqIEBwYXJhbSBlbnRNZXNoXHJcbiAqIEBwYXJhbSBlbnRIdXJ0Qm94XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0SHVydEJveEdyYXBoaWMoZW50TWVzaDogVEhSRUUuTWVzaCwgZW50SHVydEJveDogSHVydEJveENvbXBvbmVudCkgOiB2b2lkIHtcclxuICAgIGNvbnN0IGh1cnRCb3hHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KGVudEh1cnRCb3gud2lkdGgsIGVudEh1cnRCb3guaGVpZ2h0KTtcclxuICAgIGNvbnN0IGh1cnRCb3hNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiBcIiNEQzE0M0NcIiB9KTtcclxuICAgIGNvbnN0IGh1cnRCb3hNZXNoID0gbmV3IFRIUkVFLk1lc2goaHVydEJveEdlb21ldHJ5LCBodXJ0Qm94TWF0ZXJpYWwpO1xyXG4gICAgZW50TWVzaC5hZGQoaHVydEJveE1lc2gpO1xyXG59XHJcblxyXG4vKipcclxuICogSGVscGVyIHRvIHNldCB2aXN1YWxzIGZvciBhIGhpdHRCb3guXHJcbiAqIEBwYXJhbSBzdGFnZSBcclxuICogQHBhcmFtIHdpZHRoIFxyXG4gKiBAcGFyYW0gaGVpZ2h0IFxyXG4gKi9cclxuLy8gZXhwb3J0IGZ1bmN0aW9uIHNldEhpdEJveEdyYXBoaWMoc3RhZ2U6IFBJWEkuQ29udGFpbmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgOiBQSVhJLkdyYXBoaWNzIHtcclxuLy8gICAgICAgICBsZXQgaHVydEJveEdyYXBoaWMgPSBuZXcgUElYSS5HcmFwaGljcygpO1xyXG4vLyAgICAgICAgIGh1cnRCb3hHcmFwaGljLmxpbmVTdHlsZSgxLCAweDg2MDExMSwgMSk7XHJcbi8vICAgICAgICAgaHVydEJveEdyYXBoaWMuZHJhd1JlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbi8vICAgICAgICAgc3RhZ2UuYWRkQ2hpbGQoaHVydEJveEdyYXBoaWMpO1xyXG5cclxuLy8gICAgICAgICByZXR1cm4gaHVydEJveEdyYXBoaWM7XHJcbi8vIH1cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgYWxsIHJlbmRlcmVkIGVsZW1lbnRzIGZyb20gY29udGFpbmVyIGFuZCBpdCdzIGNoaWxkcmVuLlxyXG4gKiBAcGFyYW0gYmFzZUNvbnRhaW5lciBcclxuICovXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBjbGVhclN0YWdlKGJhc2VDb250YWluZXI6IFBJWEkuQ29udGFpbmVyKSB7XHJcbi8vICAgICBiYXNlQ29udGFpbmVyLmRlc3Ryb3koe2NoaWxkcmVuOnRydWUsIHRleHR1cmU6dHJ1ZSwgYmFzZVRleHR1cmU6dHJ1ZX0pO1xyXG4vLyB9XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSBhcnJheSBnZW5lcmljIGFycmF5XHJcbiAqIFxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIGFycmF5LlxyXG4gKiBSZXR1cm5zIGBgdW5kZWZpbmVkYGAgaWYgdGhlIGFycmF5J3MgbGVuZ3RoIGlzIHplcm8uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGFzdDxUPihhcnJheTogVFtdKSA6IFQge1xyXG4gICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xyXG59XHJcblxyXG4vKipcclxuICoga2l0dHlrYXRhdHRhY2sgaXMgdGhlIGF1dGhvciBvZiB0aGlzIHNjYWxpbmcgZnVuY3Rpb24uXHJcbiAqIFNvdXJjZSBjYW4gYmUgZm91bmQgaGVyZTpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2tpdHR5a2F0YXR0YWNrL3NjYWxlVG9XaW5kb3dcclxuICogQHBhcmFtIGNhbnZhcyBIVE1MQ2FudmFzRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlVG9XaW5kb3coY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCk6IG51bWJlciB7XHJcbiAgICB2YXIgc2NhbGVYOiBudW1iZXI7XHJcbiAgICB2YXIgc2NhbGVZOiBudW1iZXI7XHJcbiAgICB2YXIgc2NhbGU6IG51bWJlcjtcclxuICAgIHZhciBjZW50ZXI6IHN0cmluZztcclxuXHJcbiAgICAvLzEuIFNjYWxlIHRoZSBjYW52YXMgdG8gdGhlIGNvcnJlY3Qgc2l6ZVxyXG4gICAgLy9GaWd1cmUgb3V0IHRoZSBzY2FsZSBhbW91bnQgb24gZWFjaCBheGlzXHJcbiAgICBzY2FsZVggPSB3aW5kb3cuaW5uZXJXaWR0aCAvIGNhbnZhcy5vZmZzZXRXaWR0aDtcclxuICAgIHNjYWxlWSA9IHdpbmRvdy5pbm5lckhlaWdodCAvIGNhbnZhcy5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgLy9TY2FsZSB0aGUgY2FudmFzIGJhc2VkIG9uIHdoaWNoZXZlciB2YWx1ZSBpcyBsZXNzOiBgc2NhbGVYYCBvciBgc2NhbGVZYFxyXG4gICAgc2NhbGUgPSBNYXRoLm1pbihzY2FsZVgsIHNjYWxlWSk7XHJcbiAgICBjYW52YXMuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gXCIwIDBcIjtcclxuICAgIGNhbnZhcy5zdHlsZS50cmFuc2Zvcm0gPSBcInNjYWxlKFwiICsgc2NhbGUgKyBcIilcIjtcclxuXHJcbiAgICAvLzIuIENlbnRlciB0aGUgY2FudmFzLlxyXG4gICAgLy9EZWNpZGUgd2hldGhlciB0byBjZW50ZXIgdGhlIGNhbnZhcyB2ZXJ0aWNhbGx5IG9yIGhvcml6b250YWxseS5cclxuICAgIC8vV2lkZSBjYW52YXNlcyBzaG91bGQgYmUgY2VudGVyZWQgdmVydGljYWxseSwgYW5kIFxyXG4gICAgLy9zcXVhcmUgb3IgdGFsbCBjYW52YXNlcyBzaG91bGQgYmUgY2VudGVyZWQgaG9yaXpvbnRhbGx5XHJcbiAgICBpZiAoY2FudmFzLm9mZnNldFdpZHRoID4gY2FudmFzLm9mZnNldEhlaWdodCkge1xyXG4gICAgICAgIGlmIChjYW52YXMub2Zmc2V0V2lkdGggKiBzY2FsZSA8IHdpbmRvdy5pbm5lcldpZHRoKSB7XHJcbiAgICAgICAgICAgIGNlbnRlciA9IFwiaG9yaXpvbnRhbGx5XCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2VudGVyID0gXCJ2ZXJ0aWNhbGx5XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoY2FudmFzLm9mZnNldEhlaWdodCAqIHNjYWxlIDwgd2luZG93LmlubmVySGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGNlbnRlciA9IFwidmVydGljYWxseVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNlbnRlciA9IFwiaG9yaXpvbnRhbGx5XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vQ2VudGVyIGhvcml6b250YWxseSAoZm9yIHNxdWFyZSBvciB0YWxsIGNhbnZhc2VzKVxyXG4gICAgdmFyIG1hcmdpbjtcclxuICAgIGlmIChjZW50ZXIgPT09IFwiaG9yaXpvbnRhbGx5XCIpIHtcclxuICAgICAgICBtYXJnaW4gPSAod2luZG93LmlubmVyV2lkdGggLSBjYW52YXMub2Zmc2V0V2lkdGggKiBzY2FsZSkgLyAyO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS5tYXJnaW5Ub3AgPSAwICsgXCJweFwiO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS5tYXJnaW5Cb3R0b20gPSAwICsgXCJweFwiO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS5tYXJnaW5MZWZ0ID0gbWFyZ2luICsgXCJweFwiO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbiArIFwicHhcIjtcclxuICAgIH1cclxuXHJcbiAgICAvL0NlbnRlciB2ZXJ0aWNhbGx5IChmb3Igd2lkZSBjYW52YXNlcykgXHJcbiAgICBpZiAoY2VudGVyID09PSBcInZlcnRpY2FsbHlcIikge1xyXG4gICAgICAgIG1hcmdpbiA9ICh3aW5kb3cuaW5uZXJIZWlnaHQgLSBjYW52YXMub2Zmc2V0SGVpZ2h0ICogc2NhbGUpIC8gMjtcclxuICAgICAgICBjYW52YXMuc3R5bGUubWFyZ2luVG9wID0gbWFyZ2luICsgXCJweFwiO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS5tYXJnaW5Cb3R0b20gPSBtYXJnaW4gKyBcInB4XCI7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlLm1hcmdpbkxlZnQgPSAwICsgXCJweFwiO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS5tYXJnaW5SaWdodCA9IDAgKyBcInB4XCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8zLiBSZW1vdmUgYW55IHBhZGRpbmcgZnJvbSB0aGUgY2FudmFzICBhbmQgYm9keSBhbmQgc2V0IHRoZSBjYW52YXNcclxuICAgIC8vZGlzcGxheSBzdHlsZSB0byBcImJsb2NrXCJcclxuICAgIGNhbnZhcy5zdHlsZS5wYWRkaW5nTGVmdCA9IDAgKyBcInB4XCI7XHJcbiAgICBjYW52YXMuc3R5bGUucGFkZGluZ1JpZ2h0ID0gMCArIFwicHhcIjtcclxuICAgIGNhbnZhcy5zdHlsZS5wYWRkaW5nVG9wID0gMCArIFwicHhcIjtcclxuICAgIGNhbnZhcy5zdHlsZS5wYWRkaW5nQm90dG9tID0gMCArIFwicHhcIjtcclxuICAgIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG5cclxuICAgIC8vNC4gU2V0IHRoZSBjb2xvciBvZiB0aGUgSFRNTCBib2R5IGJhY2tncm91bmRcclxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJibGFja1wiO1xyXG5cclxuICAgIC8vRml4IHNvbWUgcXVpcmtpbmVzcyBpbiBzY2FsaW5nIGZvciBTYWZhcmlcclxuICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmICh1YS5pbmRleE9mKFwic2FmYXJpXCIpICE9IC0xKSB7XHJcbiAgICAgICAgaWYgKHVhLmluZGV4T2YoXCJjaHJvbWVcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAvLyBDaHJvbWVcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBTYWZhcmlcclxuICAgICAgICAgICAgLy9jYW52YXMuc3R5bGUubWF4SGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgICAgIC8vY2FudmFzLnN0eWxlLm1pbkhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLzUuIFJldHVybiB0aGUgYHNjYWxlYCB2YWx1ZS4gVGhpcyBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgeW91J2xsIG5lZSB0aGlzIHZhbHVlIFxyXG4gICAgLy9mb3IgY29ycmVjdCBoaXQgdGVzdGluZyBiZXR3ZWVuIHRoZSBwb2ludGVyIGFuZCBzcHJpdGVzXHJcbiAgICByZXR1cm4gc2NhbGU7XHJcbn0iLCJpbXBvcnQgeyBcclxuICAgICBQb3NpdGlvbkNvbXBvbmVudCxcclxuICAgICBWZWxvY2l0eUNvbXBvbmVudCxcclxuICAgICBBbmltYXRpb25Db21wb25lbnQsXHJcbiAgICAgQ29udHJvbGxhYmxlQ29tcG9uZW50LFxyXG4gICAgIEhpdEJveENvbXBvbmVudCxcclxuICAgICBIdXJ0Qm94Q29tcG9uZW50LFxyXG4gICAgIFRpbWVyQ29tcG9uZW50LFxyXG59IGZyb20gXCIuL2NvcmVjb21wb25lbnRzXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdG8gcmVwcmVzZW50IGFuIGVudGl0eSBpbiB0aGUgZ2FtZS4gTm8gY29uc3RydWN0b3IgYXMgYW4gZW50aXR5IGNhblxyXG4gKiBjb21wcmlzZSBvZiBhcyBtYW55IG9yIGFzIGxpdHRsZSBvZiB0aGUgcHJvcGVydGllcyBsaXN0ZWQgaGVyZS4gRWFjaCBjb21wb25lbnRcclxuICogc2hvdWxkIGhhdmUgYSBjb3JyZXNwb25kaW5nIHN5c3RlbSB0aGF0IGhhbmRsZXMgdGhlIGdhbWUgbG9naWMgbmVlZGVkIHRvIHVwZGF0ZVxyXG4gKiB0aGUgcHJvcGVydGllcyB3aXRoaW4gdGhlIGNvbXBvbmVudC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHkge1xyXG4gICAgIHB1YmxpYyBwb3M6IFBvc2l0aW9uQ29tcG9uZW50O1xyXG4gICAgIHB1YmxpYyB2ZWw6IFZlbG9jaXR5Q29tcG9uZW50O1xyXG4gICAgIHB1YmxpYyBzcHJpdGU6IFRIUkVFLk1lc2g7XHJcbiAgICAgcHVibGljIGFuaW06IEFuaW1hdGlvbkNvbXBvbmVudDtcclxuICAgICAvLyBwdWJsaWMgZ3JhcGhpYzogUElYSS5HcmFwaGljcztcclxuICAgICBwdWJsaWMgY29udHJvbDogQ29udHJvbGxhYmxlQ29tcG9uZW50O1xyXG4gICAgIHB1YmxpYyBoaXRCb3g6IEhpdEJveENvbXBvbmVudDtcclxuICAgICBwdWJsaWMgaHVydEJveDogSHVydEJveENvbXBvbmVudDtcclxuICAgICBwdWJsaWMgdGltZXI6IFRpbWVyQ29tcG9uZW50O1xyXG59IiwiaW1wb3J0IHsgQW5pbWF0aW9uU2NoZW1hLCBTZXF1ZW5jZVR5cGVzfSBmcm9tIFwiLi4vLi4vc3JjL2FuaW1hdGlvbnNjaGVtYVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBsYXllckFuaW06IEFuaW1hdGlvblNjaGVtYSA9IHtcclxuICAgIFtTZXF1ZW5jZVR5cGVzLndhbGtdOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aWNrczogMCxcclxuICAgICAgICAgICAgdGV4dHVyZTogXCIuLi9kYXRhL3RleHR1cmVzL21za25pZ2h0LnBuZ1wiLFxyXG4gICAgICAgICAgICBuZXh0RnJhbWU6IDBcclxuICAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgW1NlcXVlbmNlVHlwZXMuYXR0YWNrXTogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGlja3M6IDAsXHJcbiAgICAgICAgICAgIHRleHR1cmU6IFwiLi4vZGF0YS90ZXh0dXJlcy9zbm93LnBuZ1wiLFxyXG4gICAgICAgICAgICBuZXh0RnJhbWU6IDBcclxuICAgICAgIH0sXHJcbiAgICBdLFxyXG59IiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4vc3RhdGVcIjtcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSBcIi4vZW50aXR5XCI7XHJcbi8vIGltcG9ydCB7IEJvYXJkaG91c2VVSSB9IGZyb20gXCIuL2JvYXJkaG91c2V1aVwiO1xyXG5pbXBvcnQgeyBcclxuICAgIGNvbnRyb2xTeXN0ZW0sIFxyXG4gICAgcG9zaXRpb25TeXN0ZW0sIFxyXG4gICAgY29sbGlzaW9uU3lzdGVtLCBcclxuICAgIHRpbWVyU3lzdGVtLCBcclxuICAgIGFuaW1hdGlvblN5c3RlbSwgXHJcbiAgICB2ZWxvY2l0eVN5c3RlbSBcclxufSBmcm9tIFwiLi9jb3Jlc3lzdGVtc1wiO1xyXG5pbXBvcnQgeyBzZXRTcHJpdGUsIHNldEh1cnRCb3hHcmFwaGljIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBpbml0aWFsaXplQ29udHJvbHMsIEh1cnRUeXBlcywgaW5pdGlhbGl6ZUFuaW1hdGlvbiwgaW5pdGlhbGl6ZUh1cnRCb3ggfSBmcm9tIFwiLi9jb3JlY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBwbGF5ZXJBbmltIH0gZnJvbSBcIi4uL2RhdGEvYW5pbWF0aW9ucy9wbGF5ZXJcIjtcclxuaW1wb3J0IHsgU2VxdWVuY2VUeXBlcyB9IGZyb20gXCIuL2FuaW1hdGlvbnNjaGVtYVwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBHYW1lU3RhdGUgdGhhdCBoYW5kbGVzIHVwZGF0aW5nIG9mIGFsbCBnYW1lLXJlbGF0ZWQgc3lzdGVtcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBHYW1lU3RhdGUgaW1wbGVtZW50cyBTdGF0ZSB7XHJcbiAgICBwdWJsaWMgZW50aXRpZXM6IEVudGl0eVtdO1xyXG4gICAgLy8gcHVibGljIHJvb3RXaWRnZXQ6IEJvYXJkaG91c2VVSS5XaWRnZXQ7XHJcbiAgICBjb25zdHJ1Y3RvcihzY2VuZTogVEhSRUUuU2NlbmUpe1xyXG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBbXTtcclxuICAgICAgICAvLyBzZXQgdXAgZW50aXRpZXNcclxuICAgICAgICBsZXQgcGxheWVyID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgIHBsYXllci5wb3MgPSB7IHg6IC0xMDAsIHk6IC0xMDAsIHo6IDUgfTtcclxuICAgICAgICBwbGF5ZXIuc3ByaXRlID0gc2V0U3ByaXRlKFwiLi4vZGF0YS90ZXh0dXJlcy9tc2tuaWdodC5wbmdcIiwgc2NlbmUsIDQpO1xyXG4gICAgICAgIHBsYXllci5jb250cm9sID0gaW5pdGlhbGl6ZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgcGxheWVyLnZlbCA9IHsgbGVmdDogZmFsc2UsIHJpZ2h0OiBmYWxzZSwgdXA6IGZhbHNlLCBkb3duOiBmYWxzZSwgc3BlZWQ6IDIgfTtcclxuICAgICAgICBwbGF5ZXIuYW5pbSA9IGluaXRpYWxpemVBbmltYXRpb24oU2VxdWVuY2VUeXBlcy53YWxrLCBwbGF5ZXJBbmltKTtcclxuICAgICAgICBwbGF5ZXIuaHVydEJveCA9IGluaXRpYWxpemVIdXJ0Qm94KHBsYXllci5zcHJpdGUsIEh1cnRUeXBlcy50ZXN0KTtcclxuICAgICAgICBzZXRIdXJ0Qm94R3JhcGhpYyhwbGF5ZXIuc3ByaXRlLCBwbGF5ZXIuaHVydEJveCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5lbnRpdGllcy5wdXNoKHBsYXllcik7XHJcbiAgICAgICAgLy8gdGhpcy5yb290V2lkZ2V0ID0gbmV3IEJvYXJkaG91c2VVSS5XaWRnZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCl7XHJcbiAgICAgICAgLy8gcHVsbCBpbiBhbGwgc3lzdGVtIGZyZWUgZnVuY3Rpb25zIGFuZCBjYWxsIGVhY2ggaW4gdGhlIHByb3BlciBvcmRlclxyXG4gICAgICAgIGNvbnRyb2xTeXN0ZW0odGhpcy5lbnRpdGllcyk7XHJcbiAgICAgICAgdmVsb2NpdHlTeXN0ZW0odGhpcy5lbnRpdGllcyk7XHJcbiAgICAgICAgY29sbGlzaW9uU3lzdGVtKHRoaXMuZW50aXRpZXMpO1xyXG4gICAgICAgIGFuaW1hdGlvblN5c3RlbSh0aGlzLmVudGl0aWVzKTtcclxuICAgICAgICB0aW1lclN5c3RlbSh0aGlzLmVudGl0aWVzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyKHJlbmRlcmVyOiBUSFJFRS5XZWJHTFJlbmRlcmVyLCBjYW1lcmE6IFRIUkVFLkNhbWVyYSwgc2NlbmU6IFRIUkVFLlNjZW5lKSB7XHJcbiAgICAgICAgcG9zaXRpb25TeXN0ZW0odGhpcy5lbnRpdGllcyk7XHJcblxyXG4gICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcclxuICAgICAgICAvLyBjaGVjayBpZiBjaGlsZHJlbiBuZWVkcyB0byBiZSByZWNvbmNpbGVkLCB0aGVuIGRvIHNvXHJcbiAgICAgICAgLy8gQm9hcmRob3VzZVVJLlJlY29uY2lsZVBpeGlEb20odGhpcy5yb290V2lkZ2V0LCBzdGFnZSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSBcIi4vZW50aXR5XCI7XHJcbi8vIGltcG9ydCB7IHNldEhpdEJveEdyYXBoaWMgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcbmltcG9ydCB7IEh1cnRUeXBlcyB9IGZyb20gXCIuL2NvcmVjb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IFJlc291cmNlcyB9IGZyb20gXCIuL3Jlc291cmNlbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBjaGFuZ2VTZXF1ZW5jZSB9IGZyb20gXCIuL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgU2VxdWVuY2VUeXBlcyB9IGZyb20gXCIuL2FuaW1hdGlvbnNjaGVtYVwiO1xyXG5cclxuLyoqXHJcbiAqIFJ1ZGltZW50YXJ5IHZlbG9jaXR5IGltcGxlbWVudGF0aW9uLi4uIHdpbGwgcmVwbGFjZSBkaXJlY3Rpb25zIHdpdGhcclxuICogYW5nbGUgYW5kIG1hZ25pdHVkZSBsYXRlciBvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZlbG9jaXR5U3lzdGVtKGVudHM6IFJlYWRvbmx5PEVudGl0eT5bXSkgOiB2b2lkIHtcclxuICAgIGVudHMuZm9yRWFjaChlbnQgPT4geyBcclxuICAgICAgICBpZiAoZW50LnZlbCAhPT0gdW5kZWZpbmVkICYmIGVudC5wb3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoZW50LnZlbC5sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICBlbnQucG9zLnggLT0gZW50LnZlbC5zcGVlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVudC52ZWwucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgIGVudC5wb3MueCArPSBlbnQudmVsLnNwZWVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW50LnZlbC51cCkge1xyXG4gICAgICAgICAgICAgICAgZW50LnBvcy55IC09IGVudC52ZWwuc3BlZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlbnQudmVsLmRvd24pIHtcclxuICAgICAgICAgICAgICAgIGVudC5wb3MueSArPSBlbnQudmVsLnNwZWVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRpb25TeXN0ZW0oZW50czogUmVhZG9ubHk8RW50aXR5PltdKSA6IHZvaWQge1xyXG4gICAgZW50cy5mb3JFYWNoKGVudCA9PiB7XHJcbiAgICAgICAgaWYgKGVudC5hbmltICE9PSB1bmRlZmluZWQgJiYgZW50LnNwcml0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGVudC5hbmltLnRpY2tzLS07XHJcbiAgICAgICAgICAgIGlmIChlbnQuYW5pbS50aWNrcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBlbnQuYW5pbS5mcmFtZSA9IGVudC5hbmltLmJsb2JbZW50LmFuaW0uc2VxdWVuY2VdW2VudC5hbmltLmZyYW1lXS5uZXh0RnJhbWU7XHJcbiAgICAgICAgICAgICAgICBlbnQuYW5pbS50aWNrcyA9IGVudC5hbmltLmJsb2JbZW50LmFuaW0uc2VxdWVuY2VdW2VudC5hbmltLmZyYW1lXS50aWNrcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Nwcml0ZU1hcCA9IFJlc291cmNlcy5pbnN0YW5jZS5nZXRUZXh0dXJlKGVudC5hbmltLmJsb2JbZW50LmFuaW0uc2VxdWVuY2VdW2VudC5hbmltLmZyYW1lXS50ZXh0dXJlKTtcclxuICAgICAgICAgICAgICAgIG5ld1Nwcml0ZU1hcC5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG4gICAgICAgICAgICAgICAgZW50LnNwcml0ZS5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IG1hcDogbmV3U3ByaXRlTWFwLCB0cmFuc3BhcmVudDogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGlzaW9uU3lzdGVtKGVudHM6IFJlYWRvbmx5PEVudGl0eT5bXSkge1xyXG4gICAgZW50cy5mb3JFYWNoKGhpdHRpbmdFbnQgPT4ge1xyXG4gICAgICAgIGlmIChoaXR0aW5nRW50LmhpdEJveCAhPT0gdW5kZWZpbmVkICYmIGhpdHRpbmdFbnQucG9zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZW50cy5mb3JFYWNoKGh1cnRpbmdFbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGh1cnRpbmdFbnQuaHVydEJveCAhPT0gdW5kZWZpbmVkICYmIGh1cnRpbmdFbnQucG9zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGl0dGluZ0VudC5oaXRCb3guY29sbGlkZXNXaXRoLmluZGV4T2YoaHVydGluZ0VudC5odXJ0Qm94LnR5cGUpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpdHRpbmdFbnQucG9zLnggPCBodXJ0aW5nRW50LnBvcy54ICsgaHVydGluZ0VudC5odXJ0Qm94LndpZHRoICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXR0aW5nRW50LnBvcy54ICsgaGl0dGluZ0VudC5oaXRCb3gud2lkdGggPiBodXJ0aW5nRW50LnBvcy54ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXR0aW5nRW50LnBvcy55IDwgaHVydGluZ0VudC5wb3MueSArIGh1cnRpbmdFbnQuaHVydEJveC5oZWlnaHQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdHRpbmdFbnQuaGl0Qm94LmhlaWdodCArIGhpdHRpbmdFbnQucG9zLnkgPiBodXJ0aW5nRW50LnBvcy55KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXR0aW5nRW50LmhpdEJveC5vbkhpdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHVydGluZ0VudC5odXJ0Qm94Lm9uSHVydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xTeXN0ZW0oZW50czogRW50aXR5W10pIHsvL2VudHM6IFJlYWRvbmx5PEVudGl0eT5bXSl7XHJcbiAgICBlbnRzLmZvckVhY2goZW50ID0+IHtcclxuICAgICAgICBpZiAoZW50LmNvbnRyb2wgIT09IHVuZGVmaW5lZCAmJiBlbnQudmVsICE9PSB1bmRlZmluZWQgJiYgZW50LnBvcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChlbnQuY29udHJvbC5sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICBlbnQudmVsLmxlZnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8gdGVzdCBjaGFuZ2Ugc2VxXHJcbiAgICAgICAgICAgICAgICBlbnQuYW5pbSA9IGNoYW5nZVNlcXVlbmNlKFNlcXVlbmNlVHlwZXMuYXR0YWNrLCBlbnQuYW5pbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbnQudmVsLmxlZnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW50LmNvbnRyb2wucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgIGVudC52ZWwucmlnaHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8gdGVzdCBjaGFuZ2Ugc2VxXHJcbiAgICAgICAgICAgICAgICBlbnQuYW5pbSA9IGNoYW5nZVNlcXVlbmNlKFNlcXVlbmNlVHlwZXMud2FsaywgZW50LmFuaW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZW50LnZlbC5yaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHRlc3QgYXR0YWNrXHJcbiAgICAgICAgICAgIGlmIChlbnQuY29udHJvbC5hdHRhY2sgJiYgIWVudC5jb250cm9sLmF0dGFja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBlbnQuY29udHJvbC5hdHRhY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0YWNrID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgICAgICAgICAgYXR0YWNrLnRpbWVyID0geyB0aWNrczogMTUgfTtcclxuICAgICAgICAgICAgICAgIGF0dGFjay5wb3MgPSB7eDogZW50LnBvcy54ICsgMTAwLCB5OiBlbnQucG9zLnkgKyA1MCwgejogNX07XHJcbiAgICAgICAgICAgICAgICAvLyBhdHRhY2suZ3JhcGhpYyA9IHNldEhpdEJveEdyYXBoaWMoc3RhZ2UsIDUwLCA1MCk7XHJcbiAgICAgICAgICAgICAgICBhdHRhY2suaGl0Qm94ID0geyBcclxuICAgICAgICAgICAgICAgICAgICBjb2xsaWRlc1dpdGg6IFtIdXJ0VHlwZXMudGVzdF0sIFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTAsIFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1MCwgXHJcbiAgICAgICAgICAgICAgICAgICAgb25IaXQ6IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZyhcImhpdFwiKVxyXG4gICAgICAgICAgICAgICAgfX07XHJcbiAgICAgICAgICAgICAgICBlbnRzLnB1c2goYXR0YWNrKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVudC5jb250cm9sLmF0dGFja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBlbnQuY29udHJvbC5hdHRhY2tUaW1lcisrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW50LmNvbnRyb2wuYXR0YWNrVGltZXIgPiA3NSkge1xyXG4gICAgICAgICAgICAgICAgZW50LmNvbnRyb2wuYXR0YWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVudC5jb250cm9sLmF0dGFja1RpbWVyID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25TeXN0ZW0oZW50czogUmVhZG9ubHk8RW50aXR5PltdKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBlbnRzLmZvckVhY2goZW50ID0+IHtcclxuICAgICAgICAgICAgaWYgKGVudC5zcHJpdGUgIT09IHVuZGVmaW5lZCAmJiBlbnQucG9zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGVudC5zcHJpdGUucG9zaXRpb24uc2V0KGVudC5wb3MueCwgZW50LnBvcy55LCBlbnQucG9zLnopOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGltZXJTeXN0ZW0oZW50czogRW50aXR5W10pIHtcclxuICAgIGVudHMuZm9yRWFjaChlbnQgPT4ge1xyXG4gICAgICAgIGlmIChlbnQudGltZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbnQudGltZXIudGlja3MtLTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbnQudGltZXIudGlja3MgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGVudCBmb3IgZW50IGxpc3RcclxuICAgICAgICAgICAgICAgIGVudHMuc3BsaWNlKGVudHMuaW5kZXhPZihlbnQpLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAvLyBkZXN0cm95IHNwcml0ZSBpZiBlbnQgaGFzIG9uZVxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKGVudC5zcHJpdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGVudC5zcHJpdGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIC8vIGRlc3Ryb3kgZ3JhcGhpYyBpZiBlbnQgaGFzIG9uZVxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKGVudC5ncmFwaGljICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBlbnQuZ3JhcGhpYy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xyXG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuL3N0YXRlXCI7XHJcbmltcG9ydCB7IGxhc3QsIHNldFNwcml0ZSB9IGZyb20gXCIuL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgc2V0RXZlbnRMaXN0ZW5lcnMgfSBmcm9tIFwiLi9zZXRldmVudGxpc3RlbmVyc1wiO1xyXG4vLyBpbXBvcnQgeyBCb2FyZGhvdXNlVUkgfSBmcm9tIFwiLi9ib2FyZGhvdXNldWlcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vZ2FtZXN0YXRlXCI7XHJcbmltcG9ydCB7IFJlc291cmNlcywgbG9hZFRleHR1cmVzIH0gZnJvbSBcIi4vcmVzb3VyY2VtYW5hZ2VyXCI7XHJcblxyXG4vLyBUT0RPOiBHZXQgaGl0IGNvbGxpc2lvbiBzeXN0ZW0gYmFjayBvbmxpbmUgKGluIHByb2dyZXNzKVxyXG4vLyAtPiB0ZXN0IG5ldyBoaXQvaHVydCBib3ggb2Zmc2V0dGVyc1xyXG4vLyBUT0RPOiBSZXdvcmsgVUkgbGF5ZXIgKGluIHByb2dyZXNzKSBcclxuLy8gLT4gVVNFIE9QVElPTkFMIFBST1BTIEZPUiBQUk9QIElOVEVSRkFDRVxyXG4vLyBUT0RPOiBSZXdvcmsgdmVsb2NpdHkgc3lzdGVtIChub3Qgc3RhcnRlZClcclxuLy8gVE9ETzogQWRkIGFjY2VsZXJhdGlvbiBzeXN0ZW0gKG5vdCBzdGFydGVkKVxyXG4vLyBUT0RPOiBBZGQgc2NlbmUgdHJhbnNpdGlvbnMgKG5vdCBzdGFydGVkKVxyXG4vLyAtLS0tLSAoc3RhcnQgc2JvIHByb3RvdHlwZSBhdCB0aGlzIHBvaW50KVxyXG4vLyBUT0RPOiBJbXBsZW1lbnQgc2NyZWVuIHNoYWtlIChub3Qgc3RhcnRlZClcclxuLy8gVE9ETzogQWRkIHBhcnRpY2xlIGVmZmVjdCByZW5kZXJlciAobm90IHN0YXJ0ZWQpXHJcbi8vIFRPRE86IE1ha2UgZ2VuZXJpYyBrZXkgYmluZGVyIChub3Qgc3RhcnRlZClcclxuLy8gVE9ETzogQWRkIHVuaXQgdGVzdHMgKG5vdCBzdGFydGVkKVxyXG4vLyBUT0RPOiBDcmVhdGUgbGV2ZWwgZWRpdG9yIChub3Qgc3RhcnRlZClcclxuXHJcbmxvYWRUZXh0dXJlcyhbXHJcbiAgICBcIi4uL2RhdGEvdGV4dHVyZXMvY290dGFnZS5wbmdcIixcclxuICAgIFwiLi4vZGF0YS90ZXh0dXJlcy9naXJsLnBuZ1wiLFxyXG4gICAgXCIuLi9kYXRhL3RleHR1cmVzL21za25pZ2h0LnBuZ1wiLFxyXG4gICAgXCIuLi9kYXRhL3RleHR1cmVzL3Nub3cucG5nXCIsXHJcbl0pLnRoZW4oKHRleHR1cmVzKSA9PiB7XHJcbiAgICAvLyBjYWNoZSBvZmYgdGV4dHVyZXNcclxuICAgIFJlc291cmNlcy5pbnN0YW5jZS50ZXh0dXJlcyA9IHRleHR1cmVzO1xyXG5cclxuICAgIC8vIHN0YXJ0IGdhbWVcclxuICAgIG1haW4oPEhUTUxFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzQ29udGFpbmVyXCIpKTtcclxufSk7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSBjYW52YXNDb250YWluZXIgQ2FwdHVyZWQgQ2FudmFzIENvbnRhaW5lciBFbGVtZW50XHJcbiAqIFxyXG4gKiBNYWluIGZ1bmN0aW9uIHRoYXQgZ2V0cyBpbW1lZGlhdGVseSBpbnZva2VkLlxyXG4gKiBPbmx5IGRlcGVuZGVjeSBpcyB0aGUgY2FudmFzIGNvbnRhaW5lciBlbGVtZW50LiBBbHNvIHRyaWdnZXJzIHRoZSBldmVudCBwdW1wLlxyXG4gKi9cclxuZnVuY3Rpb24gbWFpbihjYW52YXNDb250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAvLyBzZXQgdXAgcmVuZGVyZXJcclxuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUoMTI4MCwgNzIwKTtcclxuICAgIGNvbnN0IHJlbmRlcmVyU2l6ZSA9IHJlbmRlcmVyLmdldFNpemUoKTtcclxuXHJcbiAgICAvLyBzZXQgdXAgc2NlbmVcclxuICAgIGxldCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcihcIiNGRkZGRkZcIik7XHJcblxyXG4gICAgLy8gc2V0IHVwIGNhbWVyYSBcclxuICAgIC8vIHZhciBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNzUsIDEyODAgLyA3MjAsIDAuMSwgMTAwMCk7XHJcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKHJlbmRlcmVyU2l6ZS53aWR0aCAvIC0gMiwgcmVuZGVyZXJTaXplLndpZHRoIC8gMiwgcmVuZGVyZXJTaXplLmhlaWdodCAvIDIsIHJlbmRlcmVyU2l6ZS5oZWlnaHQgLyAtMiwgLTEwMDAsIDEwMDApO1xyXG4gICAgc2NlbmUuYWRkKGNhbWVyYSk7XHJcblxyXG4gICAgY2FudmFzQ29udGFpbmVyLmFwcGVuZChyZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICAvLyBpbml0aWFsaXplIHN0YXRlIHN0YWNrXHJcbiAgICBsZXQgc3RhdGVTdGFjazogU3RhdGVbXSA9IFtdO1xyXG4gICAgbGV0IGdhbWVTdGF0ZSA9IG5ldyBHYW1lU3RhdGUoc2NlbmUpO1xyXG4gICAgc3RhdGVTdGFjay5wdXNoKGdhbWVTdGF0ZSk7XHJcblxyXG4gICAgbGV0IGZwczogbnVtYmVyID0gMDtcclxuICAgIGxldCB0b3RhbFRpbWU6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgY3VycmVudFRpbWU6IG51bWJlciA9IDA7XHJcbiAgICAvLyBsZXQgZnBzV2lkZ2V0ID0gQm9hcmRob3VzZVVJLkNyZWF0ZVdpZGdldCgpO1xyXG4gICAgLy8gZnBzV2lkZ2V0LnNldFRleHQoXCJGUFM6XCIpO1xyXG5cclxuICAgIC8vIHNldCB1cCBldmVudCBsaXN0ZW5lcnNcclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKHJlbmRlcmVyLmRvbUVsZW1lbnQsIHN0YXRlU3RhY2spO1xyXG5cclxuICAgIC8vIGxvZ2ljIHVwZGF0ZSBsb29wXHJcbiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHN0YXRlU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBjYWxsIHVwZGF0ZSBvbiBsYXN0IGVsZW1lbnQgaW4gc3RhdGUgc3RhY2tcclxuICAgICAgICAgICAgbGFzdChzdGF0ZVN0YWNrKS51cGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IFwiTm8gc3RhdGVzIHRvIHVwZGF0ZVwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbG9nIEZQU1xyXG4gICAgICAgIC8vIGZwc1dpZGdldC5zZXRUZXh0KFwiRlBTOiBcIiArIE1hdGgucm91bmQoZnBzKSk7XHJcbiAgICAgICAgLy8gQm9hcmRob3VzZVVJLlJlY29uY2lsZVBpeGlEb20oZnBzV2lkZ2V0LCBhcHAuc3RhZ2UpO1xyXG4gICAgfSwgMTYpO1xyXG5cclxuICAgIC8vIHJlbmRlciB1cGRhdGUgbG9vcFxyXG4gICAgZnVuY3Rpb24gcmVuZGVyTG9vcCh0aW1lU3RhbXA6IG51bWJlcikge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXJMb29wKTtcclxuICAgICAgICBjdXJyZW50VGltZSA9IHRpbWVTdGFtcCAtIHRvdGFsVGltZTtcclxuICAgICAgICB0b3RhbFRpbWUgPSB0aW1lU3RhbXA7XHJcbiAgICAgICAgZnBzID0gMSAvIChjdXJyZW50VGltZSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgaWYgKHN0YXRlU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBjYWxsIHJlbmRlciBvbiBsYXN0IGVsZW1lbnQgaW4gc3RhdGUgc3RhY2tcclxuICAgICAgICAgICAgbGFzdChzdGF0ZVN0YWNrKS5yZW5kZXIocmVuZGVyZXIsIGNhbWVyYSwgc2NlbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJObyBzdGF0ZXMgdG8gcmVuZGVyXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXJ0IHRoZSByZW5kZXIgbG9vcFxyXG4gICAgcmVuZGVyTG9vcCgwKTtcclxufSIsImltcG9ydCB7IHNjYWxlVG9XaW5kb3cgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcbi8vIGltcG9ydCB7IEJvYXJkaG91c2VVSSB9IGZyb20gXCIuL2JvYXJkaG91c2V1aVwiO1xyXG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuL3N0YXRlXCI7XHJcbmltcG9ydCB7IGxhc3QgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcbi8vIHR5cGUgV2lkZ2V0ID0gQm9hcmRob3VzZVVJLldpZGdldDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFdmVudExpc3RlbmVycyhjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBzdGF0ZVN0YWNrOiBTdGF0ZVtdKSB7XHJcbiAgICAvLyBsZXQgaG92ZXJlZFdpZGdldHM6IEJvYXJkaG91c2VVSS5XaWRnZXRbXSA9IFtdO1xyXG4gICAgLy8gY2FsbCBmaXJzdCB0byBzY2FsZSB0byBjdXJyZW50IHdpbmRvdyBkaW1lbnNpb25zXHJcbiAgICBzY2FsZVRvV2luZG93KGNhbnZhcyk7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNjYWxlVG9XaW5kb3coY2FudmFzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uIChlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgLy8gdHJhdmVyc2VUcmVlRm9yT25DbGljayhsYXN0KHN0YXRlU3RhY2spLnJvb3RXaWRnZXQsIGUpO1xyXG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImRlZmF1bHRcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZTogTW91c2VFdmVudCkge1xyXG4gICAgICAgIC8vIHRyYXZlcnNlVHJlZUZvckhvdmVyKGxhc3Qoc3RhdGVTdGFjaykucm9vdFdpZGdldCwgaG92ZXJlZFdpZGdldHMsIGNhbnZhcywgZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBrZXlib2FyZCBjb250cm9sc1xyXG4gICAgd2luZG93Lm9ua2V5ZG93biA9IGZ1bmN0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzNykge1xyXG4gICAgICAgICAgICAvLyBoYW5kbGUgdWkgZXZlbnRzIGZpcnN0IHRoZW4gcGFzcyB0byBjb250cm9sc1xyXG4gICAgICAgICAgICBsYXN0KHN0YXRlU3RhY2spLmVudGl0aWVzLmZvckVhY2goZW50PT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudC5jb250cm9sICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnQuY29udHJvbC5sZWZ0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOSkge1xyXG4gICAgICAgICAgICAvLyBoYW5kbGUgdWkgZXZlbnRzIGZpcnN0IHRoZW4gcGFzcyB0byBjb250cm9sc1xyXG4gICAgICAgICAgICBsYXN0KHN0YXRlU3RhY2spLmVudGl0aWVzLmZvckVhY2goZW50PT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudC5jb250cm9sICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnQuY29udHJvbC5yaWdodCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gOTApIHsgLy8gc3BhY2ViYXJcclxuICAgICAgICAgICAgLy8gaGFuZGxlIHVpIGV2ZW50cyBmaXJzdCB0aGVuIHBhc3MgdG8gY29udHJvbHNcclxuICAgICAgICAgICAgbGFzdChzdGF0ZVN0YWNrKS5lbnRpdGllcy5mb3JFYWNoKGVudD0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnQuY29udHJvbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50LmNvbnRyb2wuYXR0YWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvdy5vbmtleXVwID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM3KSB7XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSB1aSBldmVudHMgZmlyc3QgdGhlbiBwYXNzIHRvIGNvbnRyb2xzXHJcbiAgICAgICAgICAgIGxhc3Qoc3RhdGVTdGFjaykuZW50aXRpZXMuZm9yRWFjaChlbnQ9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50LmNvbnRyb2wgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudC5jb250cm9sLmxlZnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSB1aSBldmVudHMgZmlyc3QgdGhlbiBwYXNzIHRvIGNvbnRyb2xzXHJcbiAgICAgICAgICAgIGxhc3Qoc3RhdGVTdGFjaykuZW50aXRpZXMuZm9yRWFjaChlbnQ9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50LmNvbnRyb2wgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudC5jb250cm9sLnJpZ2h0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gOTApIHsgLy8gc3BhY2ViYXJcclxuICAgICAgICAgICAgLy8gaGFuZGxlIHVpIGV2ZW50cyBmaXJzdCB0aGVuIHBhc3MgdG8gY29udHJvbHNcclxuICAgICAgICAgICAgbGFzdChzdGF0ZVN0YWNrKS5lbnRpdGllcy5mb3JFYWNoKGVudD0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnQuY29udHJvbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50LmNvbnRyb2wuYXR0YWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8gZnVuY3Rpb24gdHJhdmVyc2VUcmVlRm9yT25DbGljayh3aWRnZXQ6IFdpZGdldCwgZTogTW91c2VFdmVudCkge1xyXG4vLyAgICAgaWYgKHdpZGdldC5zdHlsZSAhPT0gdW5kZWZpbmVkICYmIHdpZGdldC5vbkNsaWNrICE9PSB1bmRlZmluZWQpIHtcclxuLy8gICAgICAgICBpZiAoZS5vZmZzZXRZID4gd2lkZ2V0LnNlbGZDb250YWluZXIud29ybGRUcmFuc2Zvcm0udHkgJiYgZS5vZmZzZXRZIDwgd2lkZ2V0LnNlbGZDb250YWluZXIud29ybGRUcmFuc2Zvcm0udHkgKyB3aWRnZXQuc3R5bGUuaGVpZ2h0XHJcbi8vICAgICAgICAgICAgICYmIGUub2Zmc2V0WCA+IHdpZGdldC5zZWxmQ29udGFpbmVyLndvcmxkVHJhbnNmb3JtLnR4ICYmIGUub2Zmc2V0WCA8IHdpZGdldC5zZWxmQ29udGFpbmVyLndvcmxkVHJhbnNmb3JtLnR4ICsgd2lkZ2V0LnN0eWxlLndpZHRoKVxyXG4vLyAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgd2lkZ2V0Lm9uQ2xpY2soZSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIGlmICh3aWRnZXQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4vLyAgICAgICAgIHdpZGdldC5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcclxuLy8gICAgICAgICAgICAgdHJhdmVyc2VUcmVlRm9yT25DbGljayhjaGlsZCwgZSk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGZ1bmN0aW9uIHRyYXZlcnNlVHJlZUZvckhvdmVyKHdpZGdldDogV2lkZ2V0LCBob3ZlcmVkV2lkZ2V0czogV2lkZ2V0W10sIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGU6IE1vdXNlRXZlbnQpIHtcclxuLy8gICAgIGlmICh3aWRnZXQuc3R5bGUgIT09IHVuZGVmaW5lZCAmJiB3aWRnZXQub25Ib3ZlciAhPT0gdW5kZWZpbmVkICYmIHdpZGdldC5vZmZIb3Zlcikge1xyXG4vLyAgICAgICAgIGxldCB3aWRnZXRJbmRleDogbnVtYmVyID0gaG92ZXJlZFdpZGdldHMuaW5kZXhPZih3aWRnZXQpO1xyXG5cclxuLy8gICAgICAgICBpZiAoZS5vZmZzZXRZID4gd2lkZ2V0LnNlbGZDb250YWluZXIud29ybGRUcmFuc2Zvcm0udHkgJiYgZS5vZmZzZXRZIDwgd2lkZ2V0LnNlbGZDb250YWluZXIud29ybGRUcmFuc2Zvcm0udHkgKyB3aWRnZXQuc3R5bGUuaGVpZ2h0XHJcbi8vICAgICAgICAgICAgICYmIGUub2Zmc2V0WCA+IHdpZGdldC5zZWxmQ29udGFpbmVyLndvcmxkVHJhbnNmb3JtLnR4ICYmIGUub2Zmc2V0WCA8IHdpZGdldC5zZWxmQ29udGFpbmVyLndvcmxkVHJhbnNmb3JtLnR4ICsgd2lkZ2V0LnN0eWxlLndpZHRoKVxyXG4vLyAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgaWYgKHdpZGdldEluZGV4ID09PSAtMSkge1xyXG4vLyAgICAgICAgICAgICAgICAgaG92ZXJlZFdpZGdldHMucHVzaCh3aWRnZXQpO1xyXG4vLyAgICAgICAgICAgICAgICAgd2lkZ2V0Lm9uSG92ZXIoZSk7XHJcbi8vICAgICAgICAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJwb2ludGVyXCIpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICBpZiAod2lkZ2V0SW5kZXggPiAtMSkge1xyXG4vLyAgICAgICAgICAgICAgICAgd2lkZ2V0Lm9mZkhvdmVyKGUpO1xyXG4vLyAgICAgICAgICAgICAgICAgaG92ZXJlZFdpZGdldHMuc3BsaWNlKHdpZGdldEluZGV4KTtcclxuLy8gICAgICAgICAgICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImRlZmF1bHRcIik7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgaWYgKHdpZGdldC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbi8vICAgICAgICAgd2lkZ2V0LmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xyXG4vLyAgICAgICAgICAgICB0cmF2ZXJzZVRyZWVGb3JIb3ZlcihjaGlsZCwgaG92ZXJlZFdpZGdldHMsIGNhbnZhcywgZSk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9XHJcblxyXG4vLyB9Il0sInNvdXJjZVJvb3QiOiIifQ==